{"version":3,"sources":["skylark-fabric.js"],"names":["define","skylark","attach","global","sqrt","atan2","pow","PiBy180","PiBy2","proto","min","max","degreesToRadians","originXOffset","originYOffset","clone","toFixed","multipleSpacesRegex","fabric","version","document","window","jsdom","require","virtualWindow","JSDOM","decodeURIComponent","features","FetchExternalResources","resources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","DOMParser","copyGLTo2DDrawImage","gl","pipelineState","glCanvas","canvas","targetCanvas","ctx","getContext","translate","height","scale","sourceY","drawImage","width","copyGLTo2DPutImageData","dWidth","destinationWidth","dHeight","destinationHeight","numBytes","u8","Uint8Array","this","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","isTouchSupported","navigator","maxTouchPoints","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","rePathCommand","reNonWord","fontPaths","iMatrix","svgNS","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","disableStyleCopyPaste","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","forceGLPutImageData","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","length","prop","on","push","stopObserving","call","fire","options","listenersForEvent","i","len","filter","value","Observable","off","trigger","Collection","_objects","add","apply","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","obj","_set","key","get","toggle","exports","Math","PI","cos","angle","angleSlice","sin","sign","removeFromArray","idx","getRandomInt","floor","random","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","rx","ry","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","transform","xPoints","minX","maxX","yPoints","minY","maxY","left","top","invertTransform","a","r","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","parts","split","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","enlivenedObjects","numLoadedObjects","numTotalObjects","onLoaded","forEach","klass","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","x2","y2","da","dx","dy","rot","dc","di","draw","save","moveTo","rotate","restore","createCanvasElement","copyCanvasElement","newCanvas","toDataURL","canvasEl","format","quality","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","calcRotateMatrix","theta","calcDimensionsMatrix","scaleMatrix","flipX","flipY","multiply","tan","composeMatrix","matrix","customTransformMatrix","resetObjectTransform","target","saveObjectTransform","fn","String","match","isTransparent","tolerance","temp","_isTransparent","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","matrixToSVG","map","NUM_FRACTION_DIGITS","join","_join","Array","arcToSegments","toX","toY","large","sweep","rotateX","argsString","th","sinTh","cosTh","fromX","fromY","abs","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","result","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","find","byProperty","condition","k","invoke","method","args","value1","value2","extend","deep","Element","hasOwnProperty","getWholeChar","str","code","charCodeAt","isNaN","next","prev","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","emptyFunction","IS_DONTENUM_BUGGY","addMethods","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","createClass","shift","initialize","subclasses","couldUseAttachEvent","attachEvent","addListener","element","addEventListener","removeListener","removeEventListener","getPointer","event","scroll","getScrollLeftTop","_evt","touchProp","changedTouches","getTouchInfo","clientX","clientY","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","setOpacity","es","currentStyle","hasLayout","zoom","test","setStyle","styles","elementStyle","cssText","normalizedProperty","styleFloat","_slice","sliceCanConvertNodelists","getElementStyle","toArray","arrayLike","childNodes","err","makeElement","tagName","el","className","htmlFor","setAttribute","docElement","documentElement","body","scrollLeft","scrollTop","host","nodeType","arr","defaultView","getComputedStyle","attr","undefined","selectProp","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","e","readyState","getById","id","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","parseInt","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","emptyFn","request","onComplete","xhr","XMLHttpRequest","parameters","param","addParamToUrl","open","setRequestHeader","send","warn","noop","defaultEasing","d","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","_cancelAnimFrame","cancelAnimationFrame","clearTimeout","requestAnimFrame","animate","timestamp","time","start","Date","duration","finish","onChange","abort","easing","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","cancelAnimFrame","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","begin","end","pos","color","posValue","colorEasing","normalize","asin","elastic","opts","easeInBounce","easeOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInOutBounce","attributesMap","display","visibility","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","letter-spacing","paint-order","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","clip-path","clip-rule","vector-effect","colorAttributes","stroke","normalizeAttr","normalizeValue","parentAttributes","parsed","isArray","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","getSvgRegex","RegExp","_getMultipleNodes","nodeNames","nodeName","nodeList","nodeArray","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","selector","doesSomeParentMatch","matcher","classNames","getAttribute","elementById","node","nodelist","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","cssRules","gradientDefs","clipPaths","skewMatrix","commaWsp","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","translateMatrix","rotateMatrix","multiplierX","multiplierY","combinedMatrix","reViewBoxAttrValue","applyViewboxTransform","viewBoxWidth","viewBoxHeight","viewBoxAttr","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","missingDimAttr","toBeParsed","parsedDim","widthDiff","heightDiff","viewboxTransform","createElementNS","firstChild","recursivelyParseGradientsXlink","gradient","xLink","substr","referencedGradient","hasAttribute","children","referenceClone","cloneNode","removeAttribute","parseSVGDocument","parsingOptions","attrs","xlink","el2","currentTrans","oldLength","el3","setAttributeNS","nodeValue","parseUseDirectives","svgUid","__uid","descendants","selectNodes","hasAncestorWithNodeName","getGradientDefs","getCSSRules","parseElements","instances","reFontDeclaration","parseFontDeclaration","oStyle","fontStyle","fontWeight","lineHeight","elList","parseAttributes","parentFontSize","ownAttributes","cssAttrs","rule","getGlobalStylesForElement","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","setAlpha","getAlpha","toRgba","_setStrokeFillOpacity","ElementsParser","parse","chunk","pair","trim","parseStyleString","parseStyleObject","parsePointsAttribute","parsedPoints","allRules","styleContents","textContent","text","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","ActiveXObject","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","numElements","createObjects","createObject","findTag","fromElement","createCallback","checkIfDone","resolveGradient","Image","_originalElement","_removeTransformMatrix","resolveClipPath","extractPropertyDefinition","storage","regex","lastIndex","gradientDef","opacityAttr","createClipPathCallback","container","_newObj","fillRule","clipRule","usingElement","objTransformInv","gTransform","clipPath","calcTransformMatrix","clipPathTag","clipPathOwner","setPositionByOrigin","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","multiplier","colorAlpha","keyValuePairs","__convertPercentUnitsToValues","instance","svgOptions","gradientUnits","propValue","finalValue","keys","offsetX","offsetY","gradientTransform","option","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","withViewport","additionalTransform","sort","pathOffset","reverse","minRadius","maxRadius","percentageShift","colorStop","toLive","stops","createLinearGradient","createRadialGradient","colorStopEls","getLinearCoords","getRadialCoords","forObject","repeat","patternTransform","setOptions","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","nonScaling","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","Error","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","scaleRatio","__initRetinaScaling","lowerCanvasEl","contextContainer","upperCanvasEl","contextTop","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getElement","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","needsVpt","lineTo","closePath","fillStyle","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","_toObject","__serializeBgOverlay","excludeFromExport","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","shouldTransform","row","rowIndex","_char","charIndex","fontList","_setSVGObject","finalWidth","finalHeight","shouldInvert","sendToBack","objs","activeSelection","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","needsFullRender","_resetShadow","PencilBrush","decimate","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","pointer","_isMainEvent","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","decimatePoints","distance","adjustedDistance","lastPoint","newPoints","CircleBrush","drawDot","addPoint","dot","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","originX","originY","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","fillRect","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","targets","_hoveredTarget","_hoveredTargets","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","getActiveObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","ex","ey","lastX","lastY","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","0","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByOrigin","constraintPosition","actualMouseByCenter","toLocalPoint","lastMouseByCenter","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","changeX","changeY","newScaleX","newScaleY","Textbox","w","getMinWidth","_scaleObjectEqually","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","_searchPossibleTargets","_checkTarget","globalPointer","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","bottom","right","retinaScaling","lowerCanvasClass","_copyCanvasStyle","class","touch-action","-ms-touch-action","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","realizeTransform","clearContextTop","cursorOffset","mr","mb","ml","addEventOptions","passive","checkClick","button","cursorMap","mainTouchId","_bindEvents","addOrRemove","_getEventPrefix","enablePointerEvents","functor","eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","_onTouchEnd","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","_target","hiddenTextarea","focus","currentTransform","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","getPointerId","evt","identifier","pointerId","isPrimary","touches","__onMouseDown","__onMouseUp","_willAddMouseDown","__onMouseMove","_shouldRender","shouldRender","isClick","_onMouseUpInDrawingMode","_finalizeCurrentTransform","actionPerformed","_maybeGroupObjects","isMoving","_setCursorFromEvent","__corner","eventType","subTargets","absolutePointer","_scaling","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","_transformObject","_fireOverOutEvents","fireSyntheticInOutEvents","oldTarget","evtOut","canvasEvtOut","evtIn","canvasEvtIn","_draggedoverTarget","config","inOpt","outOpt","inFires","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","n","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","newVp","originalRetina","originalContextTop","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","enlivenedCanvasClip","__setupCanvas","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","strokeUniform","dirty","paintFirst","stateProperties","cacheProperties","inverted","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","sizeShrinking","setTransform","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","hasStroke","hasFill","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_setStrokeStyles","_setFillStyles","_drawClipPath","skipCanvas","_getNonTransformedDimensions","_removeShadow","decl","lineDashOffset","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_applyPatternForTransformedGradient","pCtx","pCanvas","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalGroup","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","enlivedProps","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","getCoords","absolute","calculate","calcCoords","pointTL","pointBR","intersection","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","skipAbsolute","_setCornerCoords","transformMatrixKey","prefix","cache","tMatrix","_calcDimensionsTransformMatrix","flipping","dimX","dimY","noSkew","_finalizeDimensions","bbox","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgCommons","getSvgTransform","full","svgTransform","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","_toSVG","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","clipPathMarkup","noStyle","styleInfo","shadowInfo","withShadow","vectorEffect","absoluteClipPath","addPaintOrder","saveProps","props","tmpObj","dashedPropertySet","_isEqual","origValue","currentValue","firstPass","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","from","valueProgress","timeProgress","coordProps","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","pi","startAngle","endAngle","setRadius","svgString","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","_setPositionDimensions","correctLeftTop","calcDim","_calcDimensions","fromSVG","diffX","diffY","commonRender","fromElementGenerator","_class","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_renderPathCommands","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","_getOffsetTransform","digits","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","pathUrl","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","enlivedClipPath","toGroup","newGroup","childrenOverride","srcFromAttribute","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","setElement","removeTexture","_initConfig","applyFilters","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","strokeSvg","imageMarkup","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","sW","sH","sX","sY","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","testPrecision","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","webGlPrecision","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","copyGLTo2D","startTime","drawImageTime","putImageDataTime","testContext","now","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","resizeCanvasIfNeeded","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","lineTopOffset","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","lineBounds","_getGraphemeBox","numOfSpaces","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","isJustify","charsToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","lineHeightDiff","scaledDiff","textHeight","offX","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","lineOffset","realLineHeight","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPosition","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","styleObj","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","doubleClickHandler","tripleClickHandler","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","currentActive","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","9","27","33","34","35","36","37","38","39","40","ctrlKeysMapUp","67","88","ctrlKeysMapDown","65","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","removedText","nextText","charCount","nextCharCount","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","textAfterCursor","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","svgStyle","minWidth","dynamicMinWidth","__cachedLines","_wordJoiners","splitByGrapheme","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","infix","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","linesToKeep","canvas2d"],"mappings":";;;;;;;g4BAAAA,EAAA,2BACA,yBACA,SAAAC,GACA,OAAAA,EAAAC,OAAA,oBAEAF,EAAA,sCAAA,WAKA,IA6gBAG,EAEAC,EACAC,EACAC,EACAC,EACAC,EAssHAC,EAopPAC,EACAC,EAylFAC,EACAC,EAKAC,EA68XAC,EAyzDAC,EACAC,EApt4BAC,GAAAC,QAAA,SAIA,GAAA,oBAAAC,UAAA,oBAAAC,OACAH,EAAAE,SAAAA,SACAF,EAAAG,OAAAA,WAEA,CAEA,IAAAC,EAAAC,QAAA,SACAC,EAAA,IAAAF,EAAAG,MACAC,mBAAA,+FAEAC,UACAC,wBAAA,QAEAC,UAAA,WACAR,OACAH,EAAAE,SAAAI,EAAAJ,SACAF,EAAAY,oBAAAP,QAAA,0CAAAQ,eACAb,EAAAc,WAAAT,QAAA,yBAAAU,OACAf,EAAAG,OAAAG,EACAU,UAAAhB,EAAAG,OAAAa,UAikpBA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAG,OAAAC,EAAAH,EAAAG,aACAC,EAAAD,EAAAE,WAAA,MACAD,EAAAE,UAAA,EAAAH,EAAAI,QACAH,EAAAI,MAAA,GAAA,GAEA,IAAAC,EAAAR,EAAAM,OAAAJ,EAAAI,OACAH,EAAAM,UAAAT,EAAA,EAAAQ,EAAAN,EAAAQ,MAAAR,EAAAI,OAAA,EAAA,EACAJ,EAAAQ,MAAAR,EAAAI,QAWA,SAAAK,EAAAb,EAAAC,GACA,IAAAG,EAAAH,EAAAG,aAAAC,EAAAD,EAAAE,WAAA,MACAQ,EAAAb,EAAAc,iBACAC,EAAAf,EAAAgB,kBACAC,EAAAJ,EAAAE,EAAA,EAGAG,EAAA,IAAAC,WAAAC,KAAAC,YAAA,EAAAJ,GAEAK,EAAA,IAAAC,kBAAAH,KAAAC,YAAA,EAAAJ,GAEAlB,EAAAyB,WAAA,EAAA,EAAAX,EAAAE,EAAAhB,EAAA0B,KAAA1B,EAAA2B,cAAAR,GACA,IAAAS,EAAA,IAAAC,UAAAN,EAAAT,EAAAE,GACAX,EAAAyB,aAAAF,EAAA,EAAA,GAqxQA,OA/25BA9C,EAAAiD,iBAAA,iBAAAjD,EAAAG,QAAA,iBAAAH,EAAAE,UACAF,EAAAG,QAAAH,EAAAG,OAAA+C,WAAAlD,EAAAG,OAAA+C,UAAAC,eAAA,EAMAnD,EAAAoD,aAAA,oBAAAC,QACA,oBAAAlD,OAOAH,EAAAsD,mBACA,UACA,YACA,OAAA,eAAA,YACA,UACA,SAAA,mBAAA,iBAAA,oBACA,kBAAA,oBACA,iBAAA,eACA,KAAA,cAAA,gBACA,sBAAA,aAOAtD,EAAAuD,IAAA,GACAvD,EAAAwD,MAAA,kDACAxD,EAAAyD,cAAA,yDACAzD,EAAA0D,UAAA,iBACA1D,EAAA2D,aACA3D,EAAA4D,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA5D,EAAA6D,MAAA,6BAzEA7D,EAAA8D,mBAAA,QAQA9D,EAAA+D,kBAAA,KAQA/D,EAAAgE,kBAAA,IAKAhE,EAAAiE,mBASAjE,EAAAkE,YAAA,KASAlE,EAAAmE,uBAAA,EAUAnE,EAAAoE,mBAAA,EAMApE,EAAAqE,iBAAArE,EAAAG,OAAAkE,kBACArE,EAAAG,OAAAmE,wBACAtE,EAAAG,OAAAoE,qBACA,EAeAvE,EAAAwE,0BAAA,EAMAxE,EAAAyE,sBAUAzE,EAAA0E,sBAMA1E,EAAA2E,qBAAA,EASA3E,EAAA4E,qBAAA,EAEA5E,EAAA6E,kBAAA,WACA,OAAA7E,EAAAoE,mBAAApE,EAAA8E,kBAAA9E,EAAA8E,iBAAA9E,EAAAkE,cACAa,QAAAC,IAAA,qBAAAhF,EAAAiF,gBACA,IAAAjF,EAAAkF,oBAAAC,SAAAnF,EAAAkE,eAEAlE,EAAAoF,sBACA,IAAApF,EAAAoF,2BADA,GAMA,oBAAAlF,UAAA,oBAAAC,SAEAA,OAAAH,OAAAA,GAIA,WAOA,SAAAqF,EAAAC,EAAAC,GACA,GAAAhD,KAAAiD,iBAAAF,GAAA,CAGA,IAAAG,EAAAlD,KAAAiD,iBAAAF,GACAC,EACAE,EAAAA,EAAAC,QAAAH,KAAA,EAGAvF,EAAA2F,KAAAC,MAAAC,KAAAJ,GAAA,IAcA,SAAAK,EAAAR,EAAAC,GAKA,GAJAhD,KAAAiD,mBACAjD,KAAAiD,qBAGA,IAAAO,UAAAC,OACA,IAAA,IAAAC,KAAAX,EACA/C,KAAA2D,GAAAD,EAAAX,EAAAW,SAIA1D,KAAAiD,iBAAAF,KACA/C,KAAAiD,iBAAAF,OAEA/C,KAAAiD,iBAAAF,GAAAa,KAAAZ,GAEA,OAAAhD,KAcA,SAAA6D,EAAAd,EAAAC,GACA,IAAAhD,KAAAiD,iBACA,OAAAjD,KAIA,GAAA,IAAAwD,UAAAC,OACA,IAAAV,KAAA/C,KAAAiD,iBACAH,EAAAgB,KAAA9D,KAAA+C,QAIA,GAAA,IAAAS,UAAAC,QAAA,iBAAAD,UAAA,GACA,IAAA,IAAAE,KAAAX,EACAD,EAAAgB,KAAA9D,KAAA0D,EAAAX,EAAAW,SAIAZ,EAAAgB,KAAA9D,KAAA+C,EAAAC,GAEA,OAAAhD,KAaA,SAAA+D,EAAAhB,EAAAiB,GACA,IAAAhE,KAAAiD,iBACA,OAAAjD,KAGA,IAAAiE,EAAAjE,KAAAiD,iBAAAF,GACA,IAAAkB,EACA,OAAAjE,KAGA,IAAA,IAAAkE,EAAA,EAAAC,EAAAF,EAAAR,OAAAS,EAAAC,EAAAD,IACAD,EAAAC,IAAAD,EAAAC,GAAAJ,KAAA9D,KAAAgE,OAKA,OAHAhE,KAAAiD,iBAAAF,GAAAkB,EAAAG,OAAA,SAAAC,GACA,OAAA,IAAAA,IAEArE,KAQAvC,EAAA6G,YACAf,QAAAA,EACAM,cAAAA,EACAE,KAAAA,EAEAJ,GAAAJ,EACAgB,IAAAV,EACAW,QAAAT,GA5HA,GAoIAtG,EAAAgH,YAEAC,YAcAC,IAAA,WAEA,GADA3E,KAAA0E,SAAAd,KAAAgB,MAAA5E,KAAA0E,SAAAlB,WACAxD,KAAA6E,eACA,IAAA,IAAAX,EAAA,EAAAT,EAAAD,UAAAC,OAAAS,EAAAT,EAAAS,IACAlE,KAAA6E,eAAArB,UAAAU,IAIA,OADAlE,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAeAgF,SAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAApF,KAAA0E,SASA,OARAS,EACAC,EAAAF,GAAAD,EAGAG,EAAAC,OAAAH,EAAA,EAAAD,GAEAjF,KAAA6E,gBAAA7E,KAAA6E,eAAAI,GACAjF,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MASAsF,OAAA,WAIA,IAHA,IACAJ,EADAE,EAAApF,KAAA0E,SACAa,GAAA,EAEArB,EAAA,EAAAT,EAAAD,UAAAC,OAAAS,EAAAT,EAAAS,KAIA,KAHAgB,EAAAE,EAAAjC,QAAAK,UAAAU,OAIAqB,GAAA,EACAH,EAAAC,OAAAH,EAAA,GACAlF,KAAAwF,kBAAAxF,KAAAwF,iBAAAhC,UAAAU,KAKA,OADAlE,KAAA8E,mBAAAS,GAAAvF,KAAA+E,mBACA/E,MAeAyF,cAAA,SAAAC,EAAAC,GAEA,IADA,IAAAP,EAAApF,KAAA4F,aACA1B,EAAA,EAAAC,EAAAiB,EAAA3B,OAAAS,EAAAC,EAAAD,IACAwB,EAAA5B,KAAA6B,EAAAP,EAAAlB,GAAAA,EAAAkB,GAEA,OAAApF,MAUA4F,WAAA,SAAAC,GACA,YAAA,IAAAA,EACA7F,KAAA0E,SAAAoB,SAEA9F,KAAA0E,SAAAN,OAAA,SAAA2B,GACA,OAAAA,EAAAF,OAAAA,KASAG,KAAA,SAAAd,GACA,OAAAlF,KAAA0E,SAAAQ,IAOAe,QAAA,WACA,OAAA,IAAAjG,KAAA0E,SAAAjB,QAOAyC,KAAA,WACA,OAAAlG,KAAA0E,SAAAjB,QAQA0C,SAAA,SAAAlB,GACA,OAAAjF,KAAA0E,SAAAvB,QAAA8B,IAAA,GAOAmB,WAAA,WACA,OAAApG,KAAA0E,SAAA2B,OAAA,SAAAC,EAAAC,GAEA,OADAD,GAAAC,EAAAH,WAAAG,EAAAH,aAAA,GAEA,KAQA3I,EAAA+I,eAMAC,YAAA,SAAAzC,GACA,IAAA,IAAAN,KAAAM,EACAhE,KAAA0G,IAAAhD,EAAAM,EAAAN,KASAiD,cAAA,SAAAC,EAAAC,IACAD,IAAAA,EAAAE,YAAAF,aAAAnJ,EAAAsJ,UACA/G,KAAA0G,IAAAG,EAAA,IAAApJ,EAAAsJ,SAAAH,KAUAI,aAAA,SAAAJ,EAAAC,EAAAnB,IACAkB,IAAAA,EAAAK,QAAAL,aAAAnJ,EAAAyJ,QAIAxB,GAAAA,IAHA1F,KAAA0G,IAAAG,EAAA,IAAApJ,EAAAyJ,QAAAN,EAAAlB,KAWAyB,cAAA,SAAAnD,GACA,GAAAA,EAAAoD,QAAA,iBAAApD,EAAAoD,OAAA,CAIA,IAAAC,EAAA5J,EAAA2F,KAAAkE,gBAAAtD,EAAAoD,aACA,IAAAC,IACArH,KAAAoH,OAAA,IAAAG,SAAA,MAAAF,MAOAG,WAAA,SAAAC,GACA,IAAA,IAAA/D,KAAA+D,EACAzH,KAAA0H,KAAAhE,EAAA+D,EAAA/D,KAWAgD,IAAA,SAAAiB,EAAAtD,GAYA,MAXA,iBAAAsD,EACA3H,KAAAwH,WAAAG,GAGA,mBAAAtD,GAAA,WAAAsD,EACA3H,KAAA0H,KAAAC,EAAAtD,EAAArE,KAAA4H,IAAAD,KAGA3H,KAAA0H,KAAAC,EAAAtD,GAGArE,MAGA0H,KAAA,SAAAC,EAAAtD,GACArE,KAAA2H,GAAAtD,GASAwD,OAAA,SAAAhB,GACA,IAAAxC,EAAArE,KAAA4H,IAAAf,GAIA,MAHA,kBAAAxC,GACArE,KAAA0G,IAAAG,GAAAxC,GAEArE,MAQA4H,IAAA,SAAAf,GACA,OAAA7G,KAAA6G,KAKAnK,EAm9BA,oBAAAoL,QAAAA,QAAA9H,KAj9BArD,EAAAoL,KAAApL,KACAC,EAAAmL,KAAAnL,MACAC,EAAAkL,KAAAlL,IACAC,EAAAiL,KAAAC,GAAA,IACAjL,EAAAgL,KAAAC,GAAA,EAKAvK,EAAA2F,MASA6E,IAAA,SAAAC,GACA,GAAA,IAAAA,EAAA,OAAA,EACAA,EAAA,IAEAA,GAAAA,GAEA,IAAAC,EAAAD,EAAAnL,EACA,OAAAoL,GACA,KAAA,EAAA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAA,EAEA,OAAAJ,KAAAE,IAAAC,IAUAE,IAAA,SAAAF,GACA,GAAA,IAAAA,EAAA,OAAA,EACA,IAAAC,EAAAD,EAAAnL,EAAAsL,EAAA,EAKA,OAJAH,EAAA,IAEAG,GAAA,GAEAF,GACA,KAAA,EAAA,OAAAE,EACA,KAAA,EAAA,OAAA,EACA,KAAA,EAAA,OAAAA,EAEA,OAAAN,KAAAK,IAAAF,IAYAI,gBAAA,SAAAjF,EAAAgB,GACA,IAAAkE,EAAAlF,EAAAF,QAAAkB,GAIA,OAHA,IAAAkE,GACAlF,EAAAgC,OAAAkD,EAAA,GAEAlF,GAWAmF,aAAA,SAAAvL,EAAAC,GACA,OAAA6K,KAAAU,MAAAV,KAAAW,UAAAxL,EAAAD,EAAA,IAAAA,GAUAE,iBAAA,SAAAwL,GACA,OAAAA,EAAA7L,GAUA8L,iBAAA,SAAAC,GACA,OAAAA,EAAA/L,GAYAgM,YAAA,SAAAC,EAAAC,EAAAH,GACAE,EAAAE,eAAAD,GACA,IAAAE,EAAAzL,EAAA2F,KAAA+F,aAAAJ,EAAAF,GACA,OAAA,IAAApL,EAAA2L,MAAAF,EAAAG,EAAAH,EAAAI,GAAAC,UAAAP,IAWAG,aAAA,SAAAK,EAAAX,GACA,IAAAT,EAAA3K,EAAA2F,KAAAgF,IAAAS,GACAZ,EAAAxK,EAAA2F,KAAA6E,IAAAY,GACAY,EAAAD,EAAAH,EAAApB,EAAAuB,EAAAF,EAAAlB,EACAsB,EAAAF,EAAAH,EAAAjB,EAAAoB,EAAAF,EAAArB,EACA,OACAoB,EAAAI,EACAH,EAAAI,IAaAC,eAAA,SAAAC,EAAAC,EAAAC,GACA,OAAAA,EACA,IAAArM,EAAA2L,MACAS,EAAA,GAAAD,EAAAP,EAAAQ,EAAA,GAAAD,EAAAN,EACAO,EAAA,GAAAD,EAAAP,EAAAQ,EAAA,GAAAD,EAAAN,GAGA,IAAA7L,EAAA2L,MACAS,EAAA,GAAAD,EAAAP,EAAAQ,EAAA,GAAAD,EAAAN,EAAAO,EAAA,GACAA,EAAA,GAAAD,EAAAP,EAAAQ,EAAA,GAAAD,EAAAN,EAAAO,EAAA,KAUAE,0BAAA,SAAAC,EAAAC,GACA,GAAAA,EACA,IAAA,IAAA/F,EAAA,EAAAA,EAAA8F,EAAAvG,OAAAS,IACA8F,EAAA9F,GAAAzG,EAAA2F,KAAAuG,eAAAK,EAAA9F,GAAA+F,GAGA,IAAAC,GAAAF,EAAA,GAAAX,EAAAW,EAAA,GAAAX,EAAAW,EAAA,GAAAX,EAAAW,EAAA,GAAAX,GACAc,EAAA1M,EAAA2F,KAAAC,MAAApG,IAAAiN,GACAE,EAAA3M,EAAA2F,KAAAC,MAAAnG,IAAAgN,GACA3K,EAAA6K,EAAAD,EACAE,GAAAL,EAAA,GAAAV,EAAAU,EAAA,GAAAV,EAAAU,EAAA,GAAAV,EAAAU,EAAA,GAAAV,GACAgB,EAAA7M,EAAA2F,KAAAC,MAAApG,IAAAoN,GACAE,EAAA9M,EAAA2F,KAAAC,MAAAnG,IAAAmN,GACAlL,EAAAoL,EAAAD,EAEA,OACAE,KAAAL,EACAM,IAAAH,EACA/K,MAAAA,EACAJ,OAAAA,IAWAuL,gBAAA,SAAAb,GACA,IAAAc,EAAA,GAAAd,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAe,GAAAD,EAAAd,EAAA,IAAAc,EAAAd,EAAA,IAAAc,EAAAd,EAAA,GAAAc,EAAAd,EAAA,IACA9D,EAAAtI,EAAA2F,KAAAuG,gBAAAN,EAAAQ,EAAA,GAAAP,EAAAO,EAAA,IAAAe,GAAA,GAGA,OAFAA,EAAA,IAAA7E,EAAAsD,EACAuB,EAAA,IAAA7E,EAAAuD,EACAsB,GAWArN,QAAA,SAAAsN,EAAAC,GACA,OAAAC,WAAAC,OAAAH,GAAAtN,QAAAuN,KAUAG,UAAA,SAAA5G,EAAA6G,GACA,IAAAC,EAAA,WAAAC,KAAA/G,GACAwG,EAAAE,WAAA1G,GAIA,OAHA6G,IACAA,EAAAzN,EAAA4N,KAAAC,uBAEAH,EAAA,IACA,IAAA,KACA,OAAAN,EAAApN,EAAAuD,IAAA,KAEA,IAAA,KACA,OAAA6J,EAAApN,EAAAuD,IAAA,KAEA,IAAA,KACA,OAAA6J,EAAApN,EAAAuD,IAEA,IAAA,KACA,OAAA6J,EAAApN,EAAAuD,IAAA,GAEA,IAAA,KACA,OAAA6J,EAAApN,EAAAuD,IAAA,GAAA,GAEA,IAAA,KACA,OAAA6J,EAAAK,EAEA,QACA,OAAAL,IAUAU,cAAA,WACA,OAAA,GAUAC,SAAA,SAAA3F,EAAA4F,GAGA,OADA5F,EAAApI,EAAA2F,KAAAsI,OAAAC,SAAA9F,EAAA+F,OAAA,GAAAC,cAAAhG,EAAAiG,MAAA,IACArO,EAAA2F,KAAA2I,iBAAAN,GAAA5F,IASAmG,iBAAA,SAAAnG,GACA,IAAAoG,GACA,sBACA,QACA,KACA,SAEA,OAAApG,GACA,IAAA,iBACAoG,EAAAA,EAAAnG,QAAA,KAAA,KAAA,KAAA,KAAA,gBAAA,sBACA,MACA,IAAA,iBACAmG,EAAAA,EAAAnG,QAAA,gBAAA,oBAAA,KAAA,KAAA,IAAA,KAAA,KAAA,OACA,MACA,IAAA,OACAmG,EAAAA,EAAAnG,QAAA,SAAA,aAAA,iBAGA,OAAAmG,GASAF,iBAAA,SAAAN,GACA,IAAAA,EACA,OAAAhO,EAGA,IACAyG,EADAgI,EAAAT,EAAAU,MAAA,KACAhI,EAAA+H,EAAAzI,OACAgE,EAAA/K,GAAAe,EAAAG,OAEA,IAAAsG,EAAA,EAAAA,EAAAC,IAAAD,EACAuD,EAAAA,EAAAyE,EAAAhI,IAGA,OAAAuD,GAWA2E,UAAA,SAAAC,EAAA3G,EAAAC,EAAA2G,GACA,GAAAD,EAAA,CAKA,IAAAE,EAAA9O,EAAA2F,KAAAoJ,cAGAC,EAAA,WACA/G,GAAAA,EAAA5B,KAAA6B,EAAA4G,GACAA,EAAAA,EAAAG,OAAAH,EAAAI,QAAA,MAGAJ,EAAAG,OAAAD,EAEAF,EAAAI,QAAA,WACAlP,EAAAgF,IAAA,iBAAA8J,EAAAK,KACAlH,GAAAA,EAAA5B,KAAA6B,EAAA,MAAA,GACA4G,EAAAA,EAAAG,OAAAH,EAAAI,QAAA,MAOA,IAAAN,EAAAlJ,QAAA,SAAAmJ,IACAC,EAAAD,YAAAA,GAMA,mBAAAD,EAAAQ,UAAA,EAAA,MACAN,EAAAG,OAAA,KACAjP,EAAA2F,KAAA0J,eAAAP,EAAAE,IAGAF,EAAAK,IAAAP,OApCA3G,GAAAA,EAAA5B,KAAA6B,EAAA0G,IA8CAS,eAAA,SAAAP,EAAAE,GACA,IAAAM,EAAAtP,EAAAE,SAAAqP,cAAA,OACAD,EAAAE,MAAA1N,MAAAwN,EAAAE,MAAA9N,OAAA,MACA4N,EAAAE,MAAAzC,KAAAuC,EAAAE,MAAAxC,IAAA,QACAsC,EAAAE,MAAAC,SAAA,WACAH,EAAAI,YAAAZ,GACA9O,EAAAE,SAAAyP,cAAA,QAAAD,YAAAJ,GAMAR,EAAAG,OAAA,WACAD,IACAM,EAAAM,WAAAC,YAAAP,GACAA,EAAA,OAcAQ,eAAA,SAAAnI,EAAAM,EAAA+F,EAAA+B,GAGA,IAAAC,KACAC,EAAA,EACAC,GAJAvI,EAAAA,OAIA3B,OAEA,SAAAmK,MACAF,IAAAC,GACAjI,GAAAA,EAAA+H,EAAArJ,OAAA,SAAAqD,GAEA,OAAAA,KAKAkG,EAKAvI,EAAAyI,QAAA,SAAA9H,EAAAb,GAEA,GAAAa,GAAAA,EAAAF,KAAA,CAIA,IAAAiI,EAAArQ,EAAA2F,KAAAoI,SAAAzF,EAAAF,KAAA4F,GACAqC,EAAAC,WAAAhI,EAAA,SAAA0B,EAAAuG,GACAA,IAAAP,EAAAvI,GAAAuC,GACA+F,GAAAA,EAAAzH,EAAA0B,EAAAuG,GACAJ,WAPAA,MAPAlI,GAAAA,EAAA+H,IA2BAQ,gBAAA,SAAAC,EAAAxI,GAGA,SAAAkI,MACAO,IAAAC,GACA1I,GAAAA,EAAA2I,GAIA,IAAAA,KACAF,EAAA,EACAC,GAVAF,EAAAA,OAUAzK,OAEA2K,EAKAF,EAAAL,QAAA,SAAAjE,EAAA1E,GACA0E,GAAAA,EAAA3C,OACA,IAAAxJ,EAAAyJ,QAAA0C,EAAA,SAAA0E,GACAD,EAAAnJ,GAAAoJ,EACAV,OAIAS,EAAAnJ,GAAA0E,EACAgE,OAbAlI,GAAAA,EAAA2I,IA2BAE,iBAAA,SAAAC,EAAAxK,EAAAyK,GACA,IAAAxJ,EACA,OAAAuJ,GAAA,IAAAA,EAAA/K,OACA+K,EAAA,IAEAxK,IACAA,EAAAzE,OAAAyE,EAAA7E,OACA6E,EAAA0K,aACArF,EAAArF,EAAAzE,MAAA,EACA+J,EAAAtF,EAAA7E,OAAA,WAIA6E,EAAAzE,aACAyE,EAAA7E,SAGA8F,EAAA,IAAAxH,EAAAkR,MAAAH,EAAAxK,QACA,IAAAyK,IACAxJ,EAAA2J,WAAAH,GAEAxJ,IAWA4J,uBAAA,SAAA5H,EAAA6H,EAAAC,GACA,GAAAA,GAAA,mBAAAC,OAAAC,UAAAC,SAAApL,KAAAiL,GACA,IAAA,IAAA7K,EAAA,EAAAC,EAAA4K,EAAAtL,OAAAS,EAAAC,EAAAD,IACA6K,EAAA7K,KAAA+C,IACA6H,EAAAC,EAAA7K,IAAA+C,EAAA8H,EAAA7K,MAmBAiL,eAAA,SAAAnQ,EAAAqK,EAAAC,EAAA8F,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAA/F,EACAmG,EAAAH,EAAA/F,EACAnF,EAAAxH,EAAA4S,EAAAA,EAAAC,EAAAA,GACAC,EAAA7S,EAAA4S,EAAAD,GACAG,EAAAJ,EAAA7L,OACAkM,EAAA,EACAC,GAAA,EAQA,IANA5Q,EAAA6Q,OACA7Q,EAAAE,UAAAmK,EAAAC,GACAtK,EAAA8Q,OAAA,EAAA,GACA9Q,EAAA+Q,OAAAN,GAEApG,EAAA,EACAlF,EAAAkF,IACAA,GAAAiG,EAAAK,IAAAD,IACAvL,IACAkF,EAAAlF,GAEAnF,EAAA4Q,EAAA,SAAA,UAAAvG,EAAA,GACAuG,GAAAA,EAGA5Q,EAAAgR,WASAC,oBAAA,WACA,OAAAxS,EAAAE,SAAAqP,cAAA,WAUAkD,kBAAA,SAAApR,GACA,IAAAqR,EAAA1S,EAAA2F,KAAA6M,sBAIA,OAHAE,EAAA5Q,MAAAT,EAAAS,MACA4Q,EAAAhR,OAAAL,EAAAK,OACAgR,EAAAlR,WAAA,MAAAK,UAAAR,EAAA,EAAA,GACAqR,GAYAC,UAAA,SAAAC,EAAAC,EAAAC,GACA,OAAAF,EAAAD,UAAA,SAAAE,EAAAC,IASA/D,YAAA,WACA,OAAA/O,EAAAE,SAAAqP,cAAA,QAUAwD,YAAA,SAAAC,EAAAzR,GACAA,EAAA6Q,OACA7Q,EAAA0R,YACAD,EAAArJ,OAAApI,GACAA,EAAA2R,QAYAC,0BAAA,SAAAjG,EAAAkG,EAAAC,GAEA,OACAnG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GACAlG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GACAlG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GACAlG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GACAC,EAAA,EAAAnG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GACAmG,EAAA,EAAAnG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,GAAAkG,EAAA,GAAAlG,EAAA,KAWAoG,YAAA,SAAApG,GACA,IAAAzC,EAAAtL,EAAA+N,EAAA,GAAAA,EAAA,IACAqG,EAAAnU,EAAA8N,EAAA,GAAA,GAAA9N,EAAA8N,EAAA,GAAA,GACAsG,EAAAtU,EAAAqU,GACAE,GAAAvG,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAsG,EACAE,EAAAvU,EAAA+N,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAqG,GACA,OACA9I,MAAAA,EAAApL,EACAmU,OAAAA,EACAC,OAAAA,EACAC,MAAAA,EAAArU,EACAsU,MAAA,EACAC,WAAA1G,EAAA,GACA2G,WAAA3G,EAAA,KAcA4G,iBAAA,SAAAvN,GACA,IAAAA,EAAAkE,MACA,OAAAzK,EAAA4D,QAAAyE,SAEA,IAAA0L,EAAA/T,EAAA2F,KAAAjG,iBAAA6G,EAAAkE,OACAD,EAAAxK,EAAA2F,KAAA6E,IAAAuJ,GACApJ,EAAA3K,EAAA2F,KAAAgF,IAAAoJ,GACA,OAAAvJ,EAAAG,GAAAA,EAAAH,EAAA,EAAA,IAoBAwJ,qBAAA,SAAAzN,GACA,IAAAiN,OAAA,IAAAjN,EAAAiN,OAAA,EAAAjN,EAAAiN,OACAC,OAAA,IAAAlN,EAAAkN,OAAA,EAAAlN,EAAAkN,OACAQ,GACA1N,EAAA2N,OAAAV,EAAAA,EACA,EACA,EACAjN,EAAA4N,OAAAV,EAAAA,EACA,EACA,GACAW,EAAApU,EAAA2F,KAAAwN,0BACAzT,EAAAM,EAAA2F,KAAAjG,iBAaA,OAZA6G,EAAAmN,QACAO,EAAAG,EACAH,GACA,EAAA,EAAA3J,KAAA+J,IAAA3U,EAAA6G,EAAAmN,QAAA,IACA,IAEAnN,EAAAoN,QACAM,EAAAG,EACAH,GACA,EAAA3J,KAAA+J,IAAA3U,EAAA6G,EAAAoN,QAAA,EAAA,IACA,IAEAM,GAqBAK,cAAA,SAAA/N,GACA,IAAAgO,GAAA,EAAA,EAAA,EAAA,EAAAhO,EAAAqN,YAAA,EAAArN,EAAAsN,YAAA,GACAO,EAAApU,EAAA2F,KAAAwN,0BAOA,OANA5M,EAAAkE,QACA8J,EAAAH,EAAAG,EAAAvU,EAAA2F,KAAAmO,iBAAAvN,MAEAA,EAAAiN,QAAAjN,EAAAkN,QAAAlN,EAAAmN,OAAAnN,EAAAoN,OAAApN,EAAA2N,OAAA3N,EAAA4N,SACAI,EAAAH,EAAAG,EAAAvU,EAAA2F,KAAAqO,qBAAAzN,KAEAgO,GAcAC,sBAAA,SAAAhB,EAAAC,EAAAC,GACA,OAAA1T,EAAA2F,KAAA2O,eAAAd,OAAAA,EAAAC,OAAAA,EAAAC,MAAAA,KASAe,qBAAA,SAAAC,GACAA,EAAAlB,OAAA,EACAkB,EAAAjB,OAAA,EACAiB,EAAAhB,MAAA,EACAgB,EAAAf,MAAA,EACAe,EAAAR,OAAA,EACAQ,EAAAP,OAAA,EACAO,EAAApC,OAAA,IAUAqC,oBAAA,SAAAD,GACA,OACAlB,OAAAkB,EAAAlB,OACAC,OAAAiB,EAAAjB,OACAC,MAAAgB,EAAAhB,MACAC,MAAAe,EAAAf,MACAlJ,MAAAiK,EAAAjK,MACAsC,KAAA2H,EAAA3H,KACAmH,MAAAQ,EAAAR,MACAC,MAAAO,EAAAP,MACAnH,IAAA0H,EAAA1H,MASAnD,gBAAA,SAAA+K,GACA,OAAAC,OAAAD,GAAAE,MAAA,mCAAA,IAWAC,cAAA,SAAAxT,EAAAqK,EAAAC,EAAAmJ,GAIAA,EAAA,IACApJ,EAAAoJ,EACApJ,GAAAoJ,EAGApJ,EAAA,EAEAC,EAAAmJ,EACAnJ,GAAAmJ,EAGAnJ,EAAA,GAIA,IAAApF,EAAAwO,EAAAC,GAAA,EACAC,EAAA5T,EAAA6T,aAAAxJ,EAAAC,EAAA,EAAAmJ,GAAA,EAAA,EAAAA,GAAA,GACAK,EAAAF,EAAAG,KAAAtP,OAGA,IAAAS,EAAA,EAAAA,EAAA4O,IACAJ,EAAAE,EAAAG,KAAA7O,IAEA,IADAyO,EAAAD,GAAA,IAFAxO,GAAA,GAUA,OAFA0O,EAAA,KAEAD,GAQAK,kCAAA,SAAAC,GACA,IACAC,EADAC,EAAA,OAAAC,EAAA,MAAAC,EAAA,MACAC,EAAAL,EAAA9G,MAAA,KAeA,OAbAmH,GAAAA,EAAA7P,SAEA,UADA0P,EAAAG,EAAAC,QACA,UAAAJ,GACAD,EAAAC,EACAA,EAAA,QAEAG,EAAA7P,SACAyP,EAAAI,EAAAC,QAIAH,EAAA,SAAAF,EAAAA,EAAApH,MAAA,EAAA,GAAA,OACAuH,EAAA,SAAAH,EAAAA,EAAApH,MAAA,EAAA,GAAA,QAEAqH,YAAAA,EACAC,OAAAA,EACAC,OAAAA,IAgBAG,qBAAA,SAAAC,IACAA,GAAAA,GAAA,IAAAC,eAIAjW,EAAAiE,gBAAA+R,WACAhW,EAAAiE,gBAAA+R,GAHAhW,EAAAiE,oBAgBAiS,gBAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA/L,KAAApL,KAAAkX,EAAAD,GACAG,EAAAhM,KAAAU,MAAAoL,EAAAC,GACA,OAAAzK,EAAAtB,KAAAU,MAAAqL,GAAAxK,EAAAyK,IAGAC,SAAA,SAAA/W,EAAAoH,EAAAnH,GACA,OAAA6K,KAAA7K,IAAAD,EAAA8K,KAAA9K,IAAAoH,EAAAnH,KAGA+W,eAAA,SAAAhN,EAAA6H,GACA,OAAA/G,KAAA9K,IAAA6R,EAAAvP,MAAA0H,EAAA1H,MAAAuP,EAAA3P,OAAA8H,EAAA9H,SAGA+U,iBAAA,SAAAjN,EAAA6H,GACA,OAAA/G,KAAA7K,IAAA4R,EAAAvP,MAAA0H,EAAA1H,MAAAuP,EAAA3P,OAAA8H,EAAA9H,SAUAgV,YAAA,SAAAlK,GACA,MAAA,UAAAA,EAAAmK,IAAA,SAAA/P,GACA,OAAA5G,EAAA2F,KAAA7F,QAAA8G,EAAA5G,EAAAuR,OAAAqF,uBACAC,KAAA,KAAA,MAMA,WAEA,IAAAC,EAAAC,MAAAvF,UAAAqF,KAMA,SAAAG,EAAAC,EAAAC,EAAAlL,EAAAC,EAAAkL,EAAAC,EAAAC,GACA,IAAAC,EAAAR,EAAAzQ,KAAAN,WACA,GAAA/F,EAAAyE,mBAAA6S,GACA,OAAAtX,EAAAyE,mBAAA6S,GAGA,IAAA/M,EAAAD,KAAAC,GAAAgN,EAAAF,EAAA9M,EAAA,IACAiN,EAAAxX,EAAA2F,KAAAgF,IAAA4M,GACAE,EAAAzX,EAAA2F,KAAA6E,IAAA+M,GACAG,EAAA,EAAAC,EAAA,EAEA3L,EAAA1B,KAAAsN,IAAA5L,GACAC,EAAA3B,KAAAsN,IAAA3L,GAEA,IAAA4L,GAAAJ,EAAAR,EAAA,GAAAO,EAAAN,EAAA,GACAY,GAAAL,EAAAP,EAAA,GAAAM,EAAAP,EAAA,GACAc,EAAA/L,EAAAA,EAAAgM,EAAA/L,EAAAA,EAAAgM,EAAAH,EAAAA,EAAAI,EAAAL,EAAAA,EACAM,EAAAJ,EAAAC,EAAAD,EAAAE,EAAAD,EAAAE,EACAE,EAAA,EAEA,GAAAD,EAAA,EAAA,CACA,IAAAE,EAAA/N,KAAApL,KAAA,EAAAiZ,GAAAJ,EAAAC,IACAhM,GAAAqM,EACApM,GAAAoM,OAGAD,GAAAjB,IAAAC,GAAA,EAAA,GACA9M,KAAApL,KAAAiZ,GAAAJ,EAAAE,EAAAD,EAAAE,IAGA,IAAAI,EAAAF,EAAApM,EAAA8L,EAAA7L,EACAsM,GAAAH,EAAAnM,EAAA4L,EAAA7L,EACAwM,EAAAf,EAAAa,EAAAd,EAAAe,EAAA,GAAAtB,EACAwB,EAAAjB,EAAAc,EAAAb,EAAAc,EAAA,GAAArB,EACAwB,EAAAC,EAAA,EAAA,GAAAd,EAAAS,GAAAtM,GAAA8L,EAAAS,GAAAtM,GACA2M,EAAAD,GAAAd,EAAAS,GAAAtM,GAAA8L,EAAAS,GAAAtM,IAAA4L,EAAAS,GAAAtM,IAAA8L,EAAAS,GAAAtM,GAEA,IAAAmL,GAAAwB,EAAA,EACAA,GAAA,EAAArO,EAEA,IAAA6M,GAAAwB,EAAA,IACAA,GAAA,EAAArO,GASA,IALA,IAAAsO,EAAAvO,KAAAwO,KAAAxO,KAAAsN,IAAAgB,EAAArO,EAAA,IACAwO,KAAAC,EAAAJ,EAAAC,EACAI,EAAA,EAAA,EAAA3O,KAAAK,IAAAqO,EAAA,GAAA1O,KAAAK,IAAAqO,EAAA,GAAA1O,KAAAK,IAAAqO,EAAA,GACAE,EAAAR,EAAAM,EAEAvS,EAAA,EAAAA,EAAAoS,EAAApS,IACAsS,EAAAtS,GAAA0S,EAAAT,EAAAQ,EAAAzB,EAAAD,EAAAxL,EAAAC,EAAAuM,EAAAC,EAAAQ,EAAAvB,EAAAC,GACAD,EAAAqB,EAAAtS,GAAA,GACAkR,EAAAoB,EAAAtS,GAAA,GACAiS,EAAAQ,EACAA,GAAAF,EAGA,OADAhZ,EAAAyE,mBAAA6S,GAAAyB,EACAA,EAGA,SAAAI,EAAAC,EAAAF,EAAAzB,EAAAD,EAAAxL,EAAAC,EAAAuM,EAAAC,EAAAQ,EAAAvB,EAAAC,GACA,IAAA0B,EAAArZ,EAAA2F,KAAA6E,IAAA4O,GACAE,EAAAtZ,EAAA2F,KAAAgF,IAAAyO,GACAG,EAAAvZ,EAAA2F,KAAA6E,IAAA0O,GACAM,EAAAxZ,EAAA2F,KAAAgF,IAAAuO,GACAjC,EAAAQ,EAAAzL,EAAAuN,EAAA/B,EAAAvL,EAAAuN,EAAAhB,EACAtB,EAAAM,EAAAxL,EAAAuN,EAAA9B,EAAAxL,EAAAuN,EAAAf,EACAgB,EAAA/B,EAAAuB,IAAAxB,EAAAzL,EAAAsN,EAAA9B,EAAAvL,EAAAoN,GACAK,EAAA/B,EAAAsB,IAAAzB,EAAAxL,EAAAsN,EAAA7B,EAAAxL,EAAAoN,GACAM,EAAA1C,EAAAgC,GAAAxB,EAAAzL,EAAAwN,EAAAhC,EAAAvL,EAAAsN,GACAK,EAAA1C,EAAA+B,GAAAzB,EAAAxL,EAAAwN,EAAA/B,EAAAxL,EAAAsN,GAEA,OACAE,EAAAC,EACAC,EAAAC,EACA3C,EAAAC,GAOA,SAAAyB,EAAAkB,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA3P,KAAAnL,MAAA2a,EAAAD,GACAK,EAAA5P,KAAAnL,MAAA6a,EAAAD,GACA,OAAAG,GAAAD,EACAC,EAAAD,EAGA,EAAA3P,KAAAC,IAAA0P,EAAAC,GAwEA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5I,EAAAC,EAAA4I,EAAAC,GACA,IAAAnD,EACA,GAAAtX,EAAA2E,sBACA2S,EAAAR,EAAAzQ,KAAAN,WACA/F,EAAA0E,mBAAA4S,IACA,OAAAtX,EAAA0E,mBAAA4S,GAIA,IAIApK,EAAAkG,EAAAsH,EAAAtO,EAAAuO,EAAAC,EAAAC,EAAAC,EAJA5b,EAAAoL,KAAApL,KACAM,EAAA8K,KAAA9K,IAAAC,EAAA6K,KAAA7K,IACAmY,EAAAtN,KAAAsN,IAAAmD,KACAC,UAGA5H,EAAA,EAAAgH,EAAA,GAAAE,EAAA,EAAA3I,EACAzE,GAAA,EAAAkN,EAAA,EAAAE,EAAA,EAAA3I,EAAA,EAAA6I,EACAE,EAAA,EAAAJ,EAAA,EAAAF,EAEA,IAAA,IAAA3T,EAAA,EAAAA,EAAA,IAAAA,EAOA,GANAA,EAAA,IACA2M,EAAA,EAAAiH,EAAA,GAAAE,EAAA,EAAA3I,EACA1E,GAAA,EAAAmN,EAAA,EAAAE,EAAA,EAAA3I,EAAA,EAAA6I,EACAC,EAAA,EAAAH,EAAA,EAAAF,GAGAzC,EAAA1K,GAAA,MAAA,CACA,GAAA0K,EAAAxE,GAAA,MACA,SAGA,GADAhH,GAAAsO,EAAAtH,IACAhH,EAAA,GACA2O,EAAA5U,KAAAiG,QAIAyO,EAAAzH,EAAAA,EAAA,EAAAsH,EAAAxN,GACA,IAGA4N,EAAA5b,EAAA2b,GAEA,GADAF,IAAAvH,EAAA0H,IAAA,EAAA5N,KACAyN,EAAA,GACAI,EAAA5U,KAAAwU,GAGA,GADAC,IAAAxH,EAAA0H,IAAA,EAAA5N,KACA0N,EAAA,GACAG,EAAA5U,KAAAyU,IAKA,IADA,IAAAhP,EAAAC,EAAAoP,EAAAC,EAAAH,EAAA/U,OAAAmV,EAAAD,EACAA,KACA9O,EAAA2O,EAAAG,GAEAtP,GADAqP,EAAA,EAAA7O,GACA6O,EAAAA,EAAAb,EAAA,EAAAa,EAAAA,EAAA7O,EAAAkO,EAAA,EAAAW,EAAA7O,EAAAA,EAAAuF,EAAAvF,EAAAA,EAAAA,EAAAoO,EACAQ,EAAA,GAAAE,GAAAtP,EAEAC,EAAAoP,EAAAA,EAAAA,EAAAZ,EAAA,EAAAY,EAAAA,EAAA7O,EAAAmO,EAAA,EAAAU,EAAA7O,EAAAA,EAAAwF,EAAAxF,EAAAA,EAAAA,EAAAqO,EACAO,EAAA,GAAAE,GAAArP,EAGAmP,EAAA,GAAAG,GAAAf,EACAY,EAAA,GAAAG,GAAAd,EACAW,EAAA,GAAAG,EAAA,GAAAX,EACAQ,EAAA,GAAAG,EAAA,GAAAV,EACA,IAAA1B,IAEAnN,EAAApM,EAAA2H,MAAA,KAAA6T,EAAA,IACAnP,EAAArM,EAAA2H,MAAA,KAAA6T,EAAA,MAGApP,EAAAnM,EAAA0H,MAAA,KAAA6T,EAAA,IACAnP,EAAApM,EAAA0H,MAAA,KAAA6T,EAAA,MAMA,OAHAhb,EAAA2E,sBACA3E,EAAA0E,mBAAA4S,GAAAyB,GAEAA,EA5IA/Y,EAAA2F,KAAAyV,QAAA,SAAA7Z,EAAA8Z,EAAAC,EAAAC,GAWA,IAVA,IAAAvP,EAAAuP,EAAA,GACAtP,EAAAsP,EAAA,GACAvJ,EAAAuJ,EAAA,GACApE,EAAAoE,EAAA,GACAnE,EAAAmE,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,gBACAC,EAAA3E,EAAAwE,EAAAH,EAAAI,EAAAH,EAAAtP,EAAAC,EAAAkL,EAAAC,EAAApF,GAEAvL,EAAA,EAAAC,EAAAiV,EAAA3V,OAAAS,EAAAC,EAAAD,IACAiV,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA4U,EACAK,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA6U,EACAI,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA4U,EACAK,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA6U,EACAI,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA4U,EACAK,EAAAjV,GAAA,GAAAkV,EAAAlV,GAAA,GAAA6U,EACA/Z,EAAAqa,cAAAzU,MAAA5F,EAAAma,EAAAjV,KAgBAzG,EAAA2F,KAAAkW,eAAA,SAAAR,EAAAC,EAAAtP,EAAAC,EAAA+F,EAAAmF,EAAAC,EAAAoE,EAAAC,GAKA,IAHA,IAAAK,EAAApE,EAAA,EAAAC,EAAA,EAAAqD,KACAU,EAAA1E,EAAAwE,EAAAH,EAAAI,EAAAH,EAAAtP,EAAAC,EAAAkL,EAAAC,EAAApF,GAEAvL,EAAA,EAAAC,EAAAgV,EAAA1V,OAAAS,EAAAC,EAAAD,IACAqV,EAAA3B,EAAAzC,EAAAC,EAAA+D,EAAAjV,GAAA,GAAAiV,EAAAjV,GAAA,GAAAiV,EAAAjV,GAAA,GAAAiV,EAAAjV,GAAA,GAAAiV,EAAAjV,GAAA,GAAAiV,EAAAjV,GAAA,IACAuU,EAAA7U,MAAAyF,EAAAkQ,EAAA,GAAAlQ,EAAAyP,EAAAxP,EAAAiQ,EAAA,GAAAjQ,EAAAyP,IACAN,EAAA7U,MAAAyF,EAAAkQ,EAAA,GAAAlQ,EAAAyP,EAAAxP,EAAAiQ,EAAA,GAAAjQ,EAAAyP,IACA5D,EAAAgE,EAAAjV,GAAA,GACAkR,EAAA+D,EAAAjV,GAAA,GAEA,OAAAuU,GAiGAhb,EAAA2F,KAAAwU,iBAAAA,EA5PA,GAiQA,WAEA,IAAA9L,EAAA0I,MAAAvF,UAAAnD,MAyDA,SAAA0N,EAAAnW,EAAAoW,EAAAC,GACA,GAAArW,GAAA,IAAAA,EAAAI,OAAA,CAIA,IAAAS,EAAAb,EAAAI,OAAA,EACA+S,EAAAiD,EAAApW,EAAAa,GAAAuV,GAAApW,EAAAa,GACA,GAAAuV,EACA,KAAAvV,KACAwV,EAAArW,EAAAa,GAAAuV,GAAAjD,KACAA,EAAAnT,EAAAa,GAAAuV,SAKA,KAAAvV,KACAwV,EAAArW,EAAAa,GAAAsS,KACAA,EAAAnT,EAAAa,IAIA,OAAAsS,GAMA/Y,EAAA2F,KAAAC,OACAC,KAvCA,SAAAD,EAAAgB,GACA,IAAAsV,EAAAtW,EAAAI,OACA,KAAAkW,KACAtW,EAAAsW,GAAAtV,EAEA,OAAAhB,GAmCAuW,OA7EA,SAAAvW,EAAAwW,GAEA,IADA,IAAAC,EAAAhO,EAAAhI,KAAAN,UAAA,GAAAgT,KACAtS,EAAA,EAAAC,EAAAd,EAAAI,OAAAS,EAAAC,EAAAD,IACAsS,EAAAtS,GAAA4V,EAAArW,OAAAJ,EAAAa,GAAA2V,GAAAjV,MAAAvB,EAAAa,GAAA4V,GAAAzW,EAAAa,GAAA2V,GAAA/V,KAAAT,EAAAa,IAEA,OAAAsS,GAyEAvZ,IAlDA,SAAAoG,EAAAoW,GACA,OAAAD,EAAAnW,EAAAoW,EAAA,SAAAM,EAAAC,GACA,OAAAD,EAAAC,KAiDA9c,IAhEA,SAAAmG,EAAAoW,GACA,OAAAD,EAAAnW,EAAAoW,EAAA,SAAAM,EAAAC,GACA,OAAAD,GAAAC,MA5BA,GAgGA,WAaA,SAAAC,EAAAnL,EAAA7H,EAAAiT,GAIA,GAAAA,EACA,IAAAzc,EAAAoD,cAAAoG,aAAAkT,QAEArL,EAAA7H,OAEA,GAAAA,aAAAuN,MAAA,CACA1F,KACA,IAAA,IAAA5K,EAAA,EAAAC,EAAA8C,EAAAxD,OAAAS,EAAAC,EAAAD,IACA4K,EAAA5K,GAAA+V,KAAAhT,EAAA/C,GAAAgW,QAGA,GAAAjT,GAAA,iBAAAA,EACA,IAAA,IAAAJ,KAAAI,EACA,WAAAJ,EACAiI,EAAAjI,GAAAoT,KAAAhT,EAAAJ,IAEAI,EAAAmT,eAAAvT,KACAiI,EAAAjI,GAAAoT,KAAAhT,EAAAJ,GAAAqT,SAMApL,EAAA7H,OAIA,IAAA,IAAAJ,KAAAI,EACA6H,EAAAjI,GAAAI,EAAAJ,GAGA,OAAAiI,EAeArR,EAAA2F,KAAA6B,QACAgV,OAAAA,EACA3c,MAPA,SAAA2H,EAAAiV,GACA,OAAAD,KAAAhV,EAAAiV,KAQAzc,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAA2F,KAAA3F,EAAA6G,YAnEA,GAuEA,WA4DA,SAAA+V,EAAAC,EAAApW,GACA,IAAAqW,EAAAD,EAAAE,WAAAtW,GAEA,GAAAuW,MAAAF,GACA,MAAA,GAEA,GAAAA,EAAA,OAAAA,EAAA,MACA,OAAAD,EAAA1O,OAAA1H,GAKA,GAAA,OAAAqW,GAAAA,GAAA,MAAA,CACA,GAAAD,EAAA7W,QAAAS,EAAA,EACA,KAAA,iDAEA,IAAAwW,EAAAJ,EAAAE,WAAAtW,EAAA,GACA,GAAA,MAAAwW,GAAAA,EAAA,MACA,KAAA,iDAEA,OAAAJ,EAAA1O,OAAA1H,GAAAoW,EAAA1O,OAAA1H,EAAA,GAGA,GAAA,IAAAA,EACA,KAAA,iDAEA,IAAAyW,EAAAL,EAAAE,WAAAtW,EAAA,GAIA,GAAA,MAAAyW,GAAAA,EAAA,MACA,KAAA,iDAIA,OAAA,EAQAld,EAAA2F,KAAAsI,QACAC,SAhGA,SAAAD,GACA,OAAAA,EAAAkP,QAAA,UAAA,SAAArI,EAAAsI,GACA,OAAAA,EAAAA,EAAAhP,cAAA,MA+FAiP,WAlFA,SAAApP,EAAAqP,GACA,OAAArP,EAAAE,OAAA,GAAAC,eACAkP,EAAArP,EAAAI,MAAA,GAAAJ,EAAAI,MAAA,GAAA4H,gBAiFAsH,UAxEA,SAAAtP,GACA,OAAAA,EAAAkP,QAAA,KAAA,SACAA,QAAA,KAAA,UACAA,QAAA,KAAA,UACAA,QAAA,KAAA,QACAA,QAAA,KAAA,SAoEAK,cA3DA,SAAAC,GACA,IAAAC,EAAAjX,EAAA,EAAAkX,KACA,IAAAlX,EAAA,EAAAA,EAAAgX,EAAAzX,OAAAS,KACA,KAAAiX,EAAAd,EAAAa,EAAAhX,KAGAkX,EAAAxX,KAAAuX,GAEA,OAAAC,IAxDA,GAgHA,WAEA,IAAAtP,EAAA0I,MAAAvF,UAAAnD,MAAAuP,EAAA,aAEAC,EAAA,WACA,IAAA,IAAA1R,KAAAsF,SAAA,GACA,GAAA,aAAAtF,EACA,OAAA,EAGA,OAAA,EANA,GAUA2R,EAAA,SAAAzN,EAAA7G,EAAAuU,GACA,IAAA,IAAA3U,KAAAI,EAEAJ,KAAAiH,EAAAmB,WACA,mBAAAnB,EAAAmB,UAAApI,KACAI,EAAAJ,GAAA,IAAA1D,QAAA,cAAA,EAEA2K,EAAAmB,UAAApI,GAAA,SAAAA,GACA,OAAA,WAEA,IAAA4U,EAAAzb,KAAA0b,YAAAD,WACAzb,KAAA0b,YAAAD,WAAAD,EACA,IAAAG,EAAA1U,EAAAJ,GAAAjC,MAAA5E,KAAAwD,WAGA,GAFAxD,KAAA0b,YAAAD,WAAAA,EAEA,eAAA5U,EACA,OAAA8U,GATA,CAYA9U,GAGAiH,EAAAmB,UAAApI,GAAAI,EAAAJ,GAGAyU,IACArU,EAAAiI,WAAAF,OAAAC,UAAAC,WACApB,EAAAmB,UAAAC,SAAAjI,EAAAiI,UAEAjI,EAAA2U,UAAA5M,OAAAC,UAAA2M,UACA9N,EAAAmB,UAAA2M,QAAA3U,EAAA2U,WAMA,SAAAC,KAEA,SAAAC,EAAAC,GAKA,IAJA,IAAAC,EAAA,KACAC,EAAAjc,KAGAic,EAAAP,YAAAD,YAAA,CACA,IAAAS,EAAAD,EAAAP,YAAAD,WAAAxM,UAAA8M,GACA,GAAAE,EAAAF,KAAAG,EAAA,CACAF,EAAAE,EACA,MAGAD,EAAAA,EAAAP,YAAAD,WAAAxM,UAGA,OAAA+M,EAIAxY,UAAAC,OAAA,EACAuY,EAAApX,MAAA5E,KAAA8L,EAAAhI,KAAAN,UAAA,IACAwY,EAAAlY,KAAA9D,MALAwC,QAAAC,IAAA,sBAAAsZ,EAAA,wCAAA/b,MA6CAvC,EAAA2F,KAAA+Y,YA9BA,WACA,IAAAX,EAAA,KACAzM,EAAAjD,EAAAhI,KAAAN,UAAA,GAEA,mBAAAuL,EAAA,KACAyM,EAAAzM,EAAAqN,SAEA,SAAAtO,IACA9N,KAAAqc,WAAAzX,MAAA5E,KAAAwD,WAGAsK,EAAA2N,WAAAD,EACA1N,EAAAwO,cAEAd,IACAK,EAAA5M,UAAAuM,EAAAvM,UACAnB,EAAAmB,UAAA,IAAA4M,EACAL,EAAAc,WAAA1Y,KAAAkK,IAEA,IAAA,IAAA5J,EAAA,EAAAT,EAAAsL,EAAAtL,OAAAS,EAAAT,EAAAS,IACAqX,EAAAzN,EAAAiB,EAAA7K,GAAAsX,GAEA1N,EAAAmB,UAAAoN,aACAvO,EAAAmB,UAAAoN,WAAAhB,GAIA,OAFAvN,EAAAmB,UAAAyM,YAAA5N,EACAA,EAAAmB,UAAA6M,UAAAA,EACAhO,GA9GA,GAqHA,WAEA,IAAAyO,IAAA9e,EAAAE,SAAAqP,cAAA,OAAAwP,YASA/e,EAAA2F,KAAAqZ,YAAA,SAAAC,EAAA3Z,EAAAC,EAAAgB,GACA0Y,GAAAA,EAAAC,iBAAA5Z,EAAAC,GAAAuZ,GAAAvY,IAWAvG,EAAA2F,KAAAwZ,eAAA,SAAAF,EAAA3Z,EAAAC,EAAAgB,GACA0Y,GAAAA,EAAAG,oBAAA9Z,EAAAC,GAAAuZ,GAAAvY,IAWAvG,EAAA2F,KAAA0Z,WAAA,SAAAC,GACA,IAAAL,EAAAK,EAAA5K,OACA6K,EAAAvf,EAAA2F,KAAA6Z,iBAAAP,GACAQ,EAXA,SAAAH,GACA,IAAAI,EAAAJ,EAAAK,eACA,GAAAD,GAAAA,EAAA,GACA,OAAAA,EAAA,GAEA,OAAAJ,EAMAM,CAAAN,GACA,OACA1T,EAAA6T,EAAAI,QAAAN,EAAAxS,KACAlB,EAAA4T,EAAAK,QAAAP,EAAAvS,MAzCA,GA+CA,WAkCA,IAAA+S,EAAA/f,EAAAE,SAAAqP,cAAA,OACAyQ,EAAA,iBAAAD,EAAAvQ,MAAAyQ,QACAC,EAAA,iBAAAH,EAAAvQ,MAAA7I,OACAwZ,EAAA,wCAGAC,EAAA,SAAAnB,GAAA,OAAAA,GAEAe,EAEAI,EAAA,SAAAnB,EAAArY,GAEA,OADAqY,EAAAzP,MAAAyQ,QAAArZ,EACAqY,GAGAiB,IAEAE,EAAA,SAAAnB,EAAArY,GACA,IAAAyZ,EAAApB,EAAAzP,MAWA,OAVAyP,EAAAqB,eAAArB,EAAAqB,aAAAC,YACAF,EAAAG,KAAA,GAEAL,EAAAM,KAAAJ,EAAA1Z,SACAC,EAAAA,GAAA,MAAA,GAAA,iBAAA,IAAAA,EAAA,IACAyZ,EAAA1Z,OAAA0Z,EAAA1Z,OAAAwW,QAAAgD,EAAAvZ,IAGAyZ,EAAA1Z,QAAA,kBAAA,IAAAC,EAAA,IAEAqY,IAIAjf,EAAA2F,KAAA+a,SA1DA,SAAAzB,EAAA0B,GACA,IAAAC,EAAA3B,EAAAzP,MACA,IAAAoR,EACA,OAAA3B,EAEA,GAAA,iBAAA0B,EAEA,OADA1B,EAAAzP,MAAAqR,SAAA,IAAAF,EACAA,EAAAjb,QAAA,YAAA,EACA0a,EAAAnB,EAAA0B,EAAA7L,MAAA,0BAAA,IACAmK,EAEA,IAAA,IAAA7V,KAAAuX,EACA,GAAA,YAAAvX,EACAgX,EAAAnB,EAAA0B,EAAAvX,QAEA,CACA,IAAA0X,EAAA,UAAA1X,GAAA,aAAAA,OACA,IAAAwX,EAAAG,WAAA,WAAA,aACA3X,EACAwX,EAAAE,GAAAH,EAAAvX,GAGA,OAAA6V,GA/BA,GAwEA,WAEA,IAAA+B,EAAAjK,MAAAvF,UAAAnD,MAYA,IAAA4S,EAyKAC,EAlKAC,EAAA,SAAAC,GACA,OAAAJ,EAAA3a,KAAA+a,EAAA,IAGA,IACAH,EAAAE,EAAAnhB,EAAAE,SAAAmhB,sBAAAtK,MAEA,MAAAuK,IAmBA,SAAAC,EAAAC,EAAAhT,GACA,IAAAiT,EAAAzhB,EAAAE,SAAAqP,cAAAiS,GACA,IAAA,IAAAvb,KAAAuI,EACA,UAAAvI,EACAwb,EAAAC,UAAAlT,EAAAvI,GAEA,QAAAA,EACAwb,EAAAE,QAAAnT,EAAAvI,GAGAwb,EAAAG,aAAA3b,EAAAuI,EAAAvI,IAGA,OAAAwb,EAwCA,SAAAjC,EAAAP,GAaA,IAXA,IAAAlS,EAAA,EACAC,EAAA,EACA6U,EAAA7hB,EAAAE,SAAA4hB,gBACAC,EAAA/hB,EAAAE,SAAA6hB,OACAC,WAAA,EAAAC,UAAA,GAOAhD,IAAAA,EAAArP,YAAAqP,EAAAiD,SAGAjD,EAAAA,EAAArP,YAAAqP,EAAAiD,QAEAliB,EAAAE,UACA6M,EAAAgV,EAAAC,YAAAH,EAAAG,YAAA,EACAhV,EAAA+U,EAAAE,WAAAJ,EAAAI,WAAA,IAGAlV,GAAAkS,EAAA+C,YAAA,EACAhV,GAAAiS,EAAAgD,WAAA,GAGA,IAAAhD,EAAAkD,UAAA,UAAAlD,EAAAzP,MAAAC,YAKA,OAAA1C,KAAAA,EAAAC,IAAAA,GAtGAiU,IACAE,EAAA,SAAAC,GAEA,IADA,IAAAgB,EAAA,IAAArL,MAAAqK,EAAApb,QAAAS,EAAA2a,EAAApb,OACAS,KACA2b,EAAA3b,GAAA2a,EAAA3a,GAEA,OAAA2b,IAqJAlB,EADAlhB,EAAAE,SAAAmiB,aAAAriB,EAAAE,SAAAmiB,YAAAC,iBACA,SAAArD,EAAAsD,GACA,IAAA/S,EAAAxP,EAAAE,SAAAmiB,YAAAC,iBAAArD,EAAA,MACA,OAAAzP,EAAAA,EAAA+S,QAAAC,GAIA,SAAAvD,EAAAsD,GACA,IAAA3b,EAAAqY,EAAAzP,MAAA+S,GAIA,OAHA3b,GAAAqY,EAAAqB,eACA1Z,EAAAqY,EAAAqB,aAAAiC,IAEA3b,GAIA,WACA,IAAA4I,EAAAxP,EAAAE,SAAA4hB,gBAAAtS,MACAiT,EAAA,eAAAjT,EACA,aACA,kBAAAA,EACA,gBACA,qBAAAA,EACA,mBACA,oBAAAA,EACA,kBACA,GAwCAxP,EAAA2F,KAAA+c,wBAhCA,SAAAzD,QACA,IAAAA,EAAA0D,gBACA1D,EAAA0D,cAAA3iB,EAAA2F,KAAAmI,eAEA2U,EACAxD,EAAAzP,MAAAiT,GAAA,OAEA,iBAAAxD,EAAA2D,eACA3D,EAAA2D,aAAA,MAEA,OAAA3D,GAuBAjf,EAAA2F,KAAAkd,sBAdA,SAAA5D,QACA,IAAAA,EAAA0D,gBACA1D,EAAA0D,cAAA,MAEAF,EACAxD,EAAAzP,MAAAiT,GAAA,GAEA,iBAAAxD,EAAA2D,eACA3D,EAAA2D,aAAA,IAEA,OAAA3D,GA/CA,GAsDA,WAgCAjf,EAAA2F,KAAAmd,UAxBA,SAAAlU,EAAA3G,GACA,IAAA8a,EAAA/iB,EAAAE,SAAA8iB,qBAAA,QAAA,GACAC,EAAAjjB,EAAAE,SAAAqP,cAAA,UACA2T,GAAA,EAGAD,EAAAhU,OAAAgU,EAAAE,mBAAA,SAAAC,GACA,GAAAF,EAAA,CACA,GAAA,iBAAA3gB,KAAA8gB,YACA,WAAA9gB,KAAA8gB,YACA,aAAA9gB,KAAA8gB,WACA,OAEAH,GAAA,EACAjb,EAAAmb,GAAApjB,EAAAG,OAAAmf,OACA2D,EAAAA,EAAAhU,OAAAgU,EAAAE,mBAAA,OAGAF,EAAA9T,IAAAP,EACAmU,EAAArT,YAAAuT,IA3BA,GAuDAjjB,EAAA2F,KAAA2d,QA3SA,SAAAC,GACA,MAAA,iBAAAA,EAAAvjB,EAAAE,SAAAsjB,eAAAD,GAAAA,GA2SAvjB,EAAA2F,KAAAwb,QAAAA,EACAnhB,EAAA2F,KAAA4b,YAAAA,EACAvhB,EAAA2F,KAAA8d,SAnPA,SAAAxE,EAAAyC,GACAzC,IAAA,KAAA,IAAAA,EAAAyC,UAAA,KAAAhc,QAAA,IAAAgc,EAAA,OACAzC,EAAAyC,YAAAzC,EAAAyC,UAAA,IAAA,IAAAA,IAkPA1hB,EAAA2F,KAAA+d,YAtOA,SAAAzE,EAAA0E,EAAAnV,GACA,iBAAAmV,IACAA,EAAApC,EAAAoC,EAAAnV,IAEAyQ,EAAArP,YACAqP,EAAArP,WAAAgU,aAAAD,EAAA1E,GAGA,OADA0E,EAAAjU,YAAAuP,GACA0E,GA+NA3jB,EAAA2F,KAAA6Z,iBAAAA,EACAxf,EAAA2F,KAAAke,iBA7KA,SAAA5E,GACA,IAAA6E,EAIAC,EAHAC,EAAA/E,GAAAA,EAAAgF,cACAC,GAAAnX,KAAA,EAAAC,IAAA,GACAmX,GAAApX,KAAA,EAAAC,IAAA,GAEAoX,GACAC,gBAAA,OACAC,eAAA,MACAC,YAAA,OACAC,WAAA,OAGA,IAAAR,EACA,OAAAG,EAGA,IAAA,IAAA5B,KAAA6B,EACAD,EAAAC,EAAA7B,KAAAkC,SAAAvD,EAAAjC,EAAAsD,GAAA,KAAA,EAGAuB,EAAAE,EAAAlC,qBACA,IAAA7C,EAAAyF,wBACAR,EAAAjF,EAAAyF,yBAKA,OAFAX,EAAAvE,EAAAP,IAGAlS,KAAAmX,EAAAnX,KAAAgX,EAAAhX,MAAA+W,EAAAa,YAAA,GAAAR,EAAApX,KACAC,IAAAkX,EAAAlX,IAAA+W,EAAA/W,KAAA8W,EAAAc,WAAA,GAAAT,EAAAnX,MAgJAhN,EAAA2F,KAAAub,gBAAAA,EACAlhB,EAAA2F,KAAAkf,cA5BA,SAAA5F,GACA,IAAA6F,EAAA9kB,EAAAY,oBAAAqe,GACA,OAAA6F,EAAAC,SAAAD,EAAAE,QA2BAhlB,EAAA2F,KAAAsf,iBAxBA,SAAAhG,GACA,IAAAjf,EAAAoD,aACA,OAEA,IAAA0hB,EAAA9kB,EAAAY,oBAAAqe,GACA6F,IACAA,EAAAE,OAAA,KACAF,EAAAC,QAAA,KAEAD,EAAAI,YAAA,KACAJ,EAAAK,YAAA,KACAL,EAAAM,WAAA,OAjTA,GAmUA,WAMA,SAAAC,KA8CArlB,EAAA2F,KAAA2f,QAjCA,SAAA1W,EAAArI,GACAA,IAAAA,MAEA,IAAA6V,EAAA7V,EAAA6V,OAAA7V,EAAA6V,OAAAhO,cAAA,MACAmX,EAAAhf,EAAAgf,YAAA,aACAC,EAAA,IAAAxlB,EAAAG,OAAAslB,eACA1D,EAAAxb,EAAAwb,MAAAxb,EAAAmf,WAGAF,EAAArC,mBAAA,WACA,IAAAqC,EAAAnC,aACAkC,EAAAC,GACAA,EAAArC,mBAAAkC,IAIA,QAAAjJ,IACA2F,EAAA,KACA,iBAAAxb,EAAAmf,aACA9W,EApCA,SAAAA,EAAA+W,GACA,OAAA/W,GAAA,KAAA6R,KAAA7R,GAAA,IAAA,KAAA+W,EAmCAC,CAAAhX,EAAArI,EAAAmf,cAIAF,EAAAK,KAAAzJ,EAAAxN,GAAA,IAEA,SAAAwN,GAAA,QAAAA,IACAoJ,EAAAM,iBAAA,eAAA,qCAIA,OADAN,EAAAO,KAAAhE,GACAyD,GAjDA,GA4DAxlB,EAAAgF,IAAAD,QAAAC,IAMAhF,EAAAgmB,KAAAjhB,QAAAihB,KAGA,WAEA,SAAAC,IACA,OAAA,EAGA,SAAAC,EAAA9Z,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAApQ,KAAAE,IAAA4B,EAAA+Z,GAAA7b,KAAAC,GAAA,IAAAmQ,EAAAtH,EA2DA,IAAAgT,EAAApmB,EAAAG,OAAAkmB,uBACArmB,EAAAG,OAAAmmB,6BACAtmB,EAAAG,OAAAomB,0BACAvmB,EAAAG,OAAAqmB,wBACAxmB,EAAAG,OAAAsmB,yBACA,SAAAxe,GACA,OAAAjI,EAAAG,OAAAumB,WAAAze,EAAA,IAAA,KAGA0e,EAAA3mB,EAAAG,OAAAymB,sBAAA5mB,EAAAG,OAAA0mB,aASA,SAAAC,IACA,OAAAV,EAAAjf,MAAAnH,EAAAG,OAAA4F,WAOA/F,EAAA2F,KAAAohB,QArEA,SAAAxgB,GAEAugB,EAAA,SAAAE,GACAzgB,IAAAA,MAEA,IAEA0gB,EAFAC,EAAAF,IAAA,IAAAG,KACAC,EAAA7gB,EAAA6gB,UAAA,IACAC,EAAAH,EAAAE,EACAE,EAAA/gB,EAAA+gB,UAAArB,EACAsB,EAAAhhB,EAAAghB,OAAAtB,EACAV,EAAAhf,EAAAgf,YAAAU,EACAuB,EAAAjhB,EAAAihB,QAAAtB,EACAuB,EAAA,eAAAlhB,EAAAA,EAAAkhB,WAAA,EACAC,EAAA,aAAAnhB,EAAAA,EAAAmhB,SAAA,IACAC,EAAAphB,EAAAohB,SAAAD,EAAAD,EAEAlhB,EAAAqhB,SAAArhB,EAAAqhB,UAEA,SAAAC,EAAAC,GAIA,IAAAC,GADAd,EAAAa,IAAA,IAAAX,MACAE,EAAAD,EAAAH,EAAAC,EACAc,EAAAD,EAAAX,EACAte,EAAA0e,EAAAO,EAAAN,EAAAE,EAAAP,GACAa,EAAA3d,KAAAsN,KAAA9O,EAAA2e,GAAAE,GACA,IAAAJ,IAIA,OAAAN,EAAAI,GACAC,EAAAI,EAAA,EAAA,QACAnC,EAAAmC,EAAA,EAAA,KAIAJ,EAAAxe,EAAAmf,EAAAD,QACAlB,EAAAe,IAVAtC,EAAAmC,EAAA,EAAA,GATA,CAqBAR,MA+BAlnB,EAAA2F,KAAAmhB,iBAAAA,EACA9mB,EAAA2F,KAAAuiB,gBANA,WACA,OAAAvB,EAAAxf,MAAAnH,EAAAG,OAAA4F,YAzFA,GAkGA,WA+CA/F,EAAA2F,KAAAwiB,aApBA,SAAAC,EAAAC,EAAAjB,EAAA7gB,GACA,IAAA+hB,EAAA,IAAAtoB,EAAAuoB,MAAAH,GAAAI,YACAC,EAAA,IAAAzoB,EAAAuoB,MAAAF,GAAAG,YAEAjiB,EAAAA,MAEAvG,EAAA2F,KAAAohB,QAAA/mB,EAAA2F,KAAA6B,OAAAgV,OAAAjW,GACA6gB,SAAAA,GAAA,IACAK,WAAAa,EACAZ,SAAAe,EACAd,QAAAc,EACAjB,OAAA,SAAAO,EAAAN,EAAAE,EAAAP,GACA,IAnCAsB,EAAAC,EAAAC,EACAC,EAkCAC,EAAAviB,EAAAwiB,YACAxiB,EAAAwiB,YAAAhB,EAAAX,GACA,EAAA9c,KAAAE,IAAAud,EAAAX,GAAA9c,KAAAC,GAAA,IACA,OAtCAme,EAsCAjB,EAtCAkB,EAsCAhB,EAtCAiB,EAsCAE,EArCAD,EAAA,QACApE,SAAAiE,EAAA,GAAAE,GAAAD,EAAA,GAAAD,EAAA,IAAA,IAAA,IACAjE,SAAAiE,EAAA,GAAAE,GAAAD,EAAA,GAAAD,EAAA,IAAA,IAAA,IACAjE,SAAAiE,EAAA,GAAAE,GAAAD,EAAA,GAAAD,EAAA,IAAA,IAEAG,GAAA,KAAAH,GAAAC,EAAArb,WAAAob,EAAA,GAAAE,GAAAD,EAAA,GAAAD,EAAA,KAAA,GACAG,GAAA,SAXA,GAoDA,WAEA,SAAAG,EAAA9b,EAAAwN,EAAAvO,EAAAkM,GAcA,OAbAnL,EAAA5C,KAAAsN,IAAA8C,IACAxN,EAAAwN,EACArC,EAAAlM,EAAA,GAKAkM,EADA,IAAAqC,GAAA,IAAAxN,EACAf,GAAA,EAAA7B,KAAAC,IAAAD,KAAA2e,KAAA,GAGA9c,GAAA,EAAA7B,KAAAC,IAAAD,KAAA2e,KAAAvO,EAAAxN,IAGAA,EAAAA,EAAAwN,EAAAA,EAAAvO,EAAAA,EAAAkM,EAAAA,GAGA,SAAA6Q,EAAAC,EAAA/c,EAAA+Z,GACA,OAAAgD,EAAAjc,EACA5C,KAAAlL,IAAA,EAAA,IAAAgN,GAAA,IACA9B,KAAAK,KAAAyB,EAAA+Z,EAAAgD,EAAA9Q,IAAA,EAAA/N,KAAAC,IAAA4e,EAAAhd,GA8QA,SAAAid,EAAAhd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAA2O,EAAAlD,EAAA/Z,EAAA,EAAAsO,EAAAyL,GAAA/S,EAOA,SAAAiW,EAAAjd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAA/Z,GAAA+Z,GAAA,EAAA,KACAzL,GAAA,OAAAtO,EAAAA,GAAAgH,EAEAhH,EAAA,EAAA,KACAsO,GAAA,QAAAtO,GAAA,IAAA,MAAAA,EAAA,KAAAgH,EAEAhH,EAAA,IAAA,KACAsO,GAAA,QAAAtO,GAAA,KAAA,MAAAA,EAAA,OAAAgH,EAGAsH,GAAA,QAAAtO,GAAA,MAAA,MAAAA,EAAA,SAAAgH,EAoBApT,EAAA2F,KAAA2jB,MAMAC,WAAA,SAAAnd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAAtO,GAAA+Z,GAAA/Z,EAAAgH,GAOAoW,YAAA,SAAApd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAAtO,GAAA+Z,IAAA/Z,EAAA,GAAAgH,GAOAqW,cAAA,SAAArd,EAAAgH,EAAAsH,EAAAyL,GAEA,OADA/Z,GAAA+Z,EAAA,GACA,EACAzL,EAAA,EAAAtO,EAAAA,EAAAgH,GAEAsH,EAAA,KAAAtO,GAAAA,EAAA,GAAA,GAAAgH,GAOAsW,YAAA,SAAAtd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAAtO,GAAA+Z,GAAA/Z,EAAAA,EAAAgH,GAGAuW,aApVA,SAAAvd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,IAAAtO,EAAAA,EAAA+Z,EAAA,GAAA/Z,EAAAA,EAAA,GAAAgH,GAoVAwW,eA7UA,SAAAxd,EAAAgH,EAAAsH,EAAAyL,GAEA,IADA/Z,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,EAAAtO,EAAAA,EAAAA,EAAAgH,EAEA,OAAAsH,EAAA,IAAAtO,GAAA,GAAAA,EAAAA,EAAA,GAAAgH,GAyUAyW,YAlUA,SAAAzd,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAAtO,GAAA+Z,GAAA/Z,EAAAA,EAAAA,EAAAgH,GAkUA0W,aA3TA,SAAA1d,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,IAAAtO,EAAAA,EAAA+Z,EAAA,GAAA/Z,EAAAA,EAAAA,EAAA,GAAAgH,GA2TA2W,eApTA,SAAA3d,EAAAgH,EAAAsH,EAAAyL,GAEA,IADA/Z,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,EAAAtO,EAAAA,EAAAA,EAAAA,EAAAgH,EAEA,OAAAsH,EAAA,IAAAtO,GAAA,GAAAA,EAAAA,EAAAA,EAAA,GAAAgH,GAgTA4W,YAzSA,SAAA5d,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAAtO,GAAA+Z,GAAA/Z,EAAAA,EAAAA,EAAAA,EAAAgH,GAySA6W,aAlSA,SAAA7d,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,IAAAtO,EAAAA,EAAA+Z,EAAA,GAAA/Z,EAAAA,EAAAA,EAAAA,EAAA,GAAAgH,GAkSA8W,eA3RA,SAAA9d,EAAAgH,EAAAsH,EAAAyL,GAEA,IADA/Z,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,EAAAtO,EAAAA,EAAAA,EAAAA,EAAAA,EAAAgH,EAEA,OAAAsH,EAAA,IAAAtO,GAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAA,GAAAgH,GAuRA+W,WAhRA,SAAA/d,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAApQ,KAAAE,IAAA4B,EAAA+Z,GAAA7b,KAAAC,GAAA,IAAAmQ,EAAAtH,GAgRAgX,YAzQA,SAAAhe,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAApQ,KAAAK,IAAAyB,EAAA+Z,GAAA7b,KAAAC,GAAA,IAAA6I,GAyQAiX,cAlQA,SAAAje,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAA,GAAApQ,KAAAE,IAAAF,KAAAC,GAAA6B,EAAA+Z,GAAA,GAAA/S,GAkQAkX,WA3PA,SAAAle,EAAAgH,EAAAsH,EAAAyL,GACA,OAAA,IAAA/Z,EAAAgH,EAAAsH,EAAApQ,KAAAlL,IAAA,EAAA,IAAAgN,EAAA+Z,EAAA,IAAA/S,GA2PAmX,YApPA,SAAAne,EAAAgH,EAAAsH,EAAAyL,GACA,OAAA/Z,IAAA+Z,EAAA/S,EAAAsH,EAAAA,GAAA,EAAApQ,KAAAlL,IAAA,GAAA,GAAAgN,EAAA+Z,IAAA/S,GAoPAoX,cA7OA,SAAApe,EAAAgH,EAAAsH,EAAAyL,GACA,GAAA,IAAA/Z,EACA,OAAAgH,EAEA,GAAAhH,IAAA+Z,EACA,OAAA/S,EAAAsH,EAGA,IADAtO,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,EAAApQ,KAAAlL,IAAA,EAAA,IAAAgN,EAAA,IAAAgH,EAEA,OAAAsH,EAAA,GAAA,EAAApQ,KAAAlL,IAAA,GAAA,KAAAgN,IAAAgH,GAmOAqX,WA5NA,SAAAre,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,GAAApQ,KAAApL,KAAA,GAAAkN,GAAA+Z,GAAA/Z,GAAA,GAAAgH,GA4NAsX,YArNA,SAAAte,EAAAgH,EAAAsH,EAAAyL,GACA,OAAAzL,EAAApQ,KAAApL,KAAA,GAAAkN,EAAAA,EAAA+Z,EAAA,GAAA/Z,GAAAgH,GAqNAuX,cA9MA,SAAAve,EAAAgH,EAAAsH,EAAAyL,GAEA,IADA/Z,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,GAAApQ,KAAApL,KAAA,EAAAkN,EAAAA,GAAA,GAAAgH,EAEA,OAAAsH,EAAA,GAAApQ,KAAApL,KAAA,GAAAkN,GAAA,GAAAA,GAAA,GAAAgH,GA0MAwX,cAnMA,SAAAxe,EAAAgH,EAAAsH,EAAAyL,GACA,IAAAha,EAAA,EAAAe,EAAAwN,EACA,GAAA,IAAAtO,EACA,OAAAgH,EAGA,GAAA,IADAhH,GAAA+Z,GAEA,OAAA/S,EAAAsH,EAEAvO,IACAA,EAAA,GAAAga,GAGA,OAAA+C,EADAF,EAAA9b,EAAAwN,EAAAvO,EAXA,SAYAC,EAAA+Z,GAAA/S,GAuLAyX,eAhLA,SAAAze,EAAAgH,EAAAsH,EAAAyL,GACA,IAAAha,EAAA,EAAAe,EAAAwN,EACA,GAAA,IAAAtO,EACA,OAAAgH,EAGA,GAAA,IADAhH,GAAA+Z,GAEA,OAAA/S,EAAAsH,EAEAvO,IACAA,EAAA,GAAAga,GAEA,IAAAgD,EAAAH,EAAA9b,EAAAwN,EAAAvO,EAXA,SAYA,OAAAgd,EAAAjc,EAAA5C,KAAAlL,IAAA,GAAA,GAAAgN,GAAA9B,KAAAK,KAAAyB,EAAA+Z,EAAAgD,EAAA9Q,IAAA,EAAA/N,KAAAC,IAAA4e,EAAAhd,GAAAgd,EAAAzO,EAAAtH,GAoKA0X,iBA7JA,SAAA1e,EAAAgH,EAAAsH,EAAAyL,GACA,IAAAha,EAAA,EAAAe,EAAAwN,EACA,GAAA,IAAAtO,EACA,OAAAgH,EAGA,GAAA,IADAhH,GAAA+Z,EAAA,GAEA,OAAA/S,EAAAsH,EAEAvO,IACAA,EAAAga,GAAA,GAAA,MAEA,IAAAgD,EAAAH,EAAA9b,EAAAwN,EAAAvO,EAXA,SAYA,GAAAC,EAAA,EACA,OAAA,GAAA8c,EAAAC,EAAA/c,EAAA+Z,GAAA/S,EAEA,OAAA+V,EAAAjc,EAAA5C,KAAAlL,IAAA,GAAA,IAAAgN,GAAA,IACA9B,KAAAK,KAAAyB,EAAA+Z,EAAAgD,EAAA9Q,IAAA,EAAA/N,KAAAC,IAAA4e,EAAAhd,GAAA,GAAAgd,EAAAzO,EAAAtH,GA6IA2X,WAtIA,SAAA3e,EAAAgH,EAAAsH,EAAAyL,EAAA9N,QACAmK,IAAAnK,IACAA,EAAA,SAEA,OAAAqC,GAAAtO,GAAA+Z,GAAA/Z,IAAAiM,EAAA,GAAAjM,EAAAiM,GAAAjF,GAmIA4X,YA5HA,SAAA5e,EAAAgH,EAAAsH,EAAAyL,EAAA9N,QACAmK,IAAAnK,IACAA,EAAA,SAEA,OAAAqC,IAAAtO,EAAAA,EAAA+Z,EAAA,GAAA/Z,IAAAiM,EAAA,GAAAjM,EAAAiM,GAAA,GAAAjF,GAyHA6X,cAlHA,SAAA7e,EAAAgH,EAAAsH,EAAAyL,EAAA9N,QACAmK,IAAAnK,IACAA,EAAA,SAGA,IADAjM,GAAA+Z,EAAA,GACA,EACA,OAAAzL,EAAA,GAAAtO,EAAAA,IAAA,GAAAiM,GAAA,QAAAjM,EAAAiM,IAAAjF,EAEA,OAAAsH,EAAA,IAAAtO,GAAA,GAAAA,IAAA,GAAAiM,GAAA,QAAAjM,EAAAiM,GAAA,GAAAjF,GA2GAgW,aAAAA,EACAC,cAAAA,EACA6B,gBA3EA,SAAA9e,EAAAgH,EAAAsH,EAAAyL,GACA,GAAA/Z,EAAA+Z,EAAA,EACA,MAAA,GAAAiD,EAAA,EAAAhd,EAAA,EAAAsO,EAAAyL,GAAA/S,EAEA,MAAA,GAAAiW,EAAA,EAAAjd,EAAA+Z,EAAA,EAAAzL,EAAAyL,GAAA,GAAAzL,EAAAtH,IAnUA,GAgZA,SAAAnU,GAEA,aAOA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACA3c,EAAAG,EAAA2F,KAAA6B,OAAA3H,MACAC,EAAAE,EAAA2F,KAAA7F,QACA0N,EAAAxN,EAAA2F,KAAA6H,UACA2F,EAAAnT,EAAA2F,KAAAwN,0BAQAgY,GACA7S,GAAA,OACA1M,EAAA,OACAuB,EAAA,SACAoL,GAAA,MACA1M,EAAA,MACAuf,QAAA,UACAC,WAAA,UACA7e,UAAA,kBACA8e,eAAA,cACAC,YAAA,WACAC,cAAA,aACAC,YAAA,WACAC,aAAA,YACAC,cAAA,aACAC,iBAAA,cACAC,cAAA,aACAC,mBAAA,kBACAC,oBAAA,mBACAC,iBAAA,gBACAC,kBAAA,iBACAC,oBAAA,mBACAC,iBAAA,gBACAC,eAAA,cACAC,kBAAA,iBACAC,cAAA,aACArM,QAAA,UACAsM,YAAA,WACAC,YAAA,WACAC,gBAAA,iBAGAC,GACAC,OAAA,gBACA9mB,KAAA,eAcA,SAAA+mB,EAAArK,GAEA,OAAAA,KAAA4I,EACAA,EAAA5I,GAEAA,EAGA,SAAAsK,EAAAtK,EAAA3b,EAAAkmB,EAAArf,GACA,IACAsf,EADAC,EAAA,mBAAAzb,OAAAC,UAAAC,SAAApL,KAAAO,GAGA,GAAA,SAAA2b,GAAA,WAAAA,GAAA,SAAA3b,EAGA,GAAA,kBAAA2b,EACA3b,EAAA,uBAAAA,OAEA,GAAA,oBAAA2b,EAEA3b,EADA,SAAAA,EACA,KAGAA,EAAAuW,QAAA,KAAA,KAAAzO,MAAA,OAAAiI,IAAArJ,iBAGA,GAAA,oBAAAiV,EAEA3b,EADAkmB,GAAAA,EAAAG,gBACA9Z,EACA2Z,EAAAG,gBAAAjtB,EAAAktB,wBAAAtmB,IAGA5G,EAAAktB,wBAAAtmB,QAGA,GAAA,YAAA2b,EACA3b,EAAA,SAAAA,GAAA,WAAAA,EAEAkmB,IAAA,IAAAA,EAAAK,UACAvmB,GAAA,QAGA,GAAA,YAAA2b,EACA3b,EAAA0G,WAAA1G,GACAkmB,QAAA,IAAAA,EAAA7M,UACArZ,GAAAkmB,EAAA7M,cAGA,GAAA,eAAAsC,EACA3b,EAAA,UAAAA,EAAA,OAAA,QAAAA,EAAA,QAAA,cAEA,GAAA,gBAAA2b,EAEAwK,EAAAvf,EAAA5G,EAAA6G,GAAAA,EAAA,SAEA,GAAA,eAAA8U,EAAA,CACA,IAAA6K,EAAAxmB,EAAAlB,QAAA,QACA2nB,EAAAzmB,EAAAlB,QAAA,UACAkB,EAAA,OACAwmB,GAAA,GAAAC,GAAA,GAAAA,EAAAD,EACAxmB,EAAA,UAEA,IAAAwmB,GAAAC,GAAA,IACAzmB,EAAA,cAGA,CAAA,GAAA,SAAA2b,GAAA,eAAAA,EACA,OAAA3b,EAGAmmB,EAAAC,EAAApmB,EAAA+P,IAAAnJ,GAAAA,EAAA5G,EAAA6G,QAzDA7G,EAAA,GA4DA,OAAAomB,GAAAhQ,MAAA+P,GAAAnmB,EAAAmmB,EAMA,SAAAO,EAAAlL,GACA,OAAA,IAAAmL,OAAA,KAAAnL,EAAAvL,KAAA,KAAA,OAAA,KAkCA,SAAA2W,EAAAxJ,EAAAyJ,GACA,IAAAC,EAAAC,EAAAlnB,EAAAC,EAAAknB,KACA,IAAAnnB,EAAA,EAAAC,EAAA+mB,EAAAznB,OAAAS,EAAAC,EAAAD,IACAinB,EAAAD,EAAAhnB,GACAknB,EAAA3J,EAAAhB,qBAAA0K,GACAE,EAAAA,EAAAvlB,OAAA0O,MAAAvF,UAAAnD,MAAAhI,KAAAsnB,IAEA,OAAAC,EA6MA,SAAAC,EAAA5O,EAAA6O,GACA,IAAAC,EAAAC,GAAA,EAMA,OAJAD,EAAAE,EAAAhP,EAAA6O,EAAAhY,SACAgY,EAAA9nB,SACAgoB,EAKA,SAAA/O,EAAA6O,GACA,IAAAI,EAAAF,GAAA,EACA,KAAA/O,EAAArP,YAAA,IAAAqP,EAAArP,WAAAuS,UAAA2L,EAAA9nB,QACAgoB,IACAE,EAAAJ,EAAAhY,OAEAmJ,EAAAA,EAAArP,WACAoe,EAAAC,EAAAhP,EAAAiP,GAEA,OAAA,IAAAJ,EAAA9nB,OAdAmoB,CAAAlP,EAAA6O,IAEAC,GAAAC,GAAA,IAAAF,EAAA9nB,OAkBA,SAAAioB,EAAAhP,EAAAiP,GACA,IAEAE,EAAA3nB,EAFAinB,EAAAzO,EAAAyO,SACAW,EAAApP,EAAAqP,aAAA,SACA/K,EAAAtE,EAAAqP,aAAA,MASA,GANAF,EAAA,IAAAb,OAAA,IAAAG,EAAA,KACAQ,EAAAA,EAAA/Q,QAAAiR,EAAA,IACA7K,GAAA2K,EAAAloB,SACAooB,EAAA,IAAAb,OAAA,IAAAhK,EAAA,mBAAA,KACA2K,EAAAA,EAAA/Q,QAAAiR,EAAA,KAEAC,GAAAH,EAAAloB,OAEA,IADAqoB,EAAAA,EAAA3f,MAAA,KACAjI,EAAA4nB,EAAAroB,OAAAS,KACA2nB,EAAA,IAAAb,OAAA,MAAAc,EAAA5nB,GAAA,mBAAA,KACAynB,EAAAA,EAAA/Q,QAAAiR,EAAA,IAGA,OAAA,IAAAF,EAAAloB,OAOA,SAAAuoB,EAAAvK,EAAAT,GACA,IAAA9B,EAEA,GADAuC,EAAAR,iBAAA/B,EAAAuC,EAAAR,eAAAD,IACA9B,EACA,OAAAA,EAEA,IAAA+M,EAAA/nB,EAAAC,EAAA+nB,EAAAzK,EAAAhB,qBAAA,KACA,IAAAvc,EAAA,EAAAC,EAAA+nB,EAAAzoB,OAAAS,EAAAC,EAAAD,IAEA,GADA+nB,EAAAC,EAAAhoB,GACA8c,IAAAiL,EAAAF,aAAA,MACA,OAAAE,EA5YAxuB,EAAA0uB,sBAAApB,GA7CA,OAAA,SAAA,UAAA,WAAA,UAAA,OAAA,OACA,QAAA,SA6CAttB,EAAA2uB,wBAAArB,GA5CA,SAAA,QAAA,SAAA,UAAA,OAAA,QA6CAttB,EAAA4uB,yBAAAtB,GA5CA,UAAA,OAAA,SAAA,WAAA,WAAA,OAAA,SA6CAttB,EAAA6uB,qBAAAvB,GA5CA,SAAA,IAAA,IAAA,MAAA,WAAA,SA8CAttB,EAAA8uB,YACA9uB,EAAA+uB,gBACA/uB,EAAAgvB,aAsIAhvB,EAAAktB,wBAAA,WAyBA,SAAA+B,EAAA1a,EAAA8H,EAAAuM,GACArU,EAAAqU,GAAAte,KAAA+J,IAAArU,EAAA2F,KAAAjG,iBAAA2c,EAAA,KAWA,IAAAzY,EAAA5D,EAAA4D,QAGAwJ,EAAApN,EAAAwD,MAEA0rB,EAAA,uBAEAxb,EAAA,yBAAAtG,EAAA,YAEAuG,EAAA,yBAAAvG,EAAA,YAEAkF,EAAA,0BAAAlF,EAAA,OACA8hB,EAAA,IAAA9hB,EAAA,IACA8hB,EAAA,IAAA9hB,EAAA,cAEAzL,EAAA,yBAAAyL,EAAA,OACA8hB,EAAA,IAAA9hB,EAAA,cAEA3L,EAAA,6BAAA2L,EAAA,OACA8hB,EAAA,IAAA9hB,EAAA,cAEAmH,EAAA,0BACAnH,EAAA,IAAA8hB,EACA,IAAA9hB,EAAA,IAAA8hB,EACA,IAAA9hB,EAAA,IAAA8hB,EACA,IAAA9hB,EAAA,IAAA8hB,EACA,IAAA9hB,EAAA,IAAA8hB,EACA,IAAA9hB,EAAA,YAGAZ,EAAA,MACA+H,EAAA,IACA9S,EAAA,IACAE,EAAA,IACA2Q,EAAA,IACAoB,EAAA,IACAC,EACA,IAEAwb,EAAA,MAAA3iB,EAAA,MAAA0iB,EAAA,IAAA1iB,EAAA,MAEA4iB,EAAA,WAAAD,EAAA,UAGAE,EAAA,IAAA9B,OAAA6B,GAGAE,EAAA,IAAA/B,OAAA/gB,EAAA,KAEA,OAAA,SAAA+iB,GAGA,IAAAhb,EAAA3Q,EAAAyE,SACAmnB,KAIA,IAAAD,GAAAA,IAAAF,EAAA5O,KAAA8O,GACA,OAAAhb,EAGAgb,EAAApS,QAAAmS,EAAA,SAAAxa,GAEA,IAAA2a,EAAA,IAAAlC,OAAA/gB,GAAAmB,KAAAmH,GAAAnO,OAAA,SAAAmO,GAEA,QAAAA,IAEA4a,EAAAD,EAAA,GACApT,EAAAoT,EAAAphB,MAAA,GAAAsI,IAAArJ,YAEA,OAAAoiB,GACA,IAAA,aA/EA,SAAAnb,EAAA8H,GACA9H,EAAA,GAAA8H,EAAA,GACA,IAAAA,EAAArW,SACAuO,EAAA,GAAA8H,EAAA,IA6EAsT,CAAApb,EAAA8H,GACA,MACA,IAAA,SACAA,EAAA,GAAArc,EAAA2F,KAAAjG,iBAAA2c,EAAA,IA/GA,SAAA9H,EAAA8H,GACA,IAAA7R,EAAAxK,EAAA2F,KAAA6E,IAAA6R,EAAA,IAAA1R,EAAA3K,EAAA2F,KAAAgF,IAAA0R,EAAA,IACAzQ,EAAA,EAAAC,EAAA,EACA,IAAAwQ,EAAArW,SACA4F,EAAAyQ,EAAA,GACAxQ,EAAAwQ,EAAA,IAGA9H,EAAA,GAAA/J,EACA+J,EAAA,GAAA5J,EACA4J,EAAA,IAAA5J,EACA4J,EAAA,GAAA/J,EACA+J,EAAA,GAAA3I,GAAApB,EAAAoB,EAAAjB,EAAAkB,GACA0I,EAAA,GAAA1I,GAAAlB,EAAAiB,EAAApB,EAAAqB,GAmGA+jB,CAAArb,EAAA8H,GACA,MACA,IAAA,SAlGA,SAAA9H,EAAA8H,GACA,IAAAwT,EAAAxT,EAAA,GACAyT,EAAA,IAAAzT,EAAArW,OAAAqW,EAAA,GAAAA,EAAA,GAEA9H,EAAA,GAAAsb,EACAtb,EAAA,GAAAub,EA8FA7b,CAAAM,EAAA8H,GACA,MACA,IAAA,QACA4S,EAAA1a,EAAA8H,EAAA,GACA,MACA,IAAA,QACA4S,EAAA1a,EAAA8H,EAAA,GACA,MACA,IAAA,SACA9H,EAAA8H,EAKAmT,EAAArpB,KAAAoO,EAAAlM,UAEAkM,EAAA3Q,EAAAyE,WAIA,IADA,IAAA0nB,EAAAP,EAAA,GACAA,EAAAxpB,OAAA,GACAwpB,EAAA7Q,QACAoR,EAAA/vB,EAAA2F,KAAAwN,0BAAA4c,EAAAP,EAAA,IAEA,OAAAO,GA5IA,GA6TA,IAAAC,EAAA,IAAAzC,OACA,SACAvtB,EAAAwD,MAAA,gBACAxD,EAAAwD,MAAA,gBACAxD,EAAAwD,MAAA,gBACAxD,EAAAwD,MAAA,WAOA,SAAAysB,EAAAhR,GAEA,IAKAiR,EAAAC,EAAA5b,EAAAkN,EALA2O,EAAAnR,EAAAqP,aAAA,WACA9a,EAAA,EACAC,EAAA,EACA/G,EAAA,EACAG,EAAA,EAEAwjB,EAAApR,EAAAqP,aAAA,SACAgC,EAAArR,EAAAqP,aAAA,UACA1iB,EAAAqT,EAAAqP,aAAA,MAAA,EACAziB,EAAAoT,EAAAqP,aAAA,MAAA,EACAiC,EAAAtR,EAAAqP,aAAA,wBAAA,GACAkC,GAAAJ,IAAApwB,EAAA2uB,wBAAAlO,KAAAxB,EAAAyO,aACA0C,EAAAA,EAAAtb,MAAAkb,IACAS,GAAAJ,IAAAC,GAAA,SAAAD,GAAA,SAAAC,EACAI,EAAAF,GAAAC,EACAE,KAAAhB,EAAA,GAAAiB,EAAA,EAAAC,EAAA,EAMA,GAJAF,EAAA7uB,MAAA,EACA6uB,EAAAjvB,OAAA,EACAivB,EAAAD,WAAAA,EAEAA,EACA,OAAAC,EAGA,GAAAH,EAGA,OAFAG,EAAA7uB,MAAA0L,EAAA6iB,GACAM,EAAAjvB,OAAA8L,EAAA8iB,GACAK,EAiDA,GA/CAjkB,GAAAY,WAAA8iB,EAAA,IACAvjB,GAAAS,WAAA8iB,EAAA,IACAF,EAAA5iB,WAAA8iB,EAAA,IACAD,EAAA7iB,WAAA8iB,EAAA,IACAO,EAAAjkB,KAAAA,EACAikB,EAAA9jB,KAAAA,EACA8jB,EAAAT,aAAAA,EACAS,EAAAR,cAAAA,EACAM,GAOAE,EAAA7uB,MAAAouB,EACAS,EAAAjvB,OAAAyuB,IAPAQ,EAAA7uB,MAAA0L,EAAA6iB,GACAM,EAAAjvB,OAAA8L,EAAA8iB,GACA9c,EAAAmd,EAAA7uB,MAAAouB,EACAzc,EAAAkd,EAAAjvB,OAAAyuB,GASA,UADAI,EAAAvwB,EAAA2F,KAAA4P,kCAAAgb,IACA5a,SAEA,SAAA4a,EAAA7a,cACAjC,EAAAD,EAAAA,EAAAC,EAAAA,EAAAD,GAGA,UAAA+c,EAAA7a,cACAjC,EAAAD,EAAAA,EAAAC,EAAAD,EAAAC,GAGAmd,EAAAD,EAAA7uB,MAAAouB,EAAA1c,EACAqd,EAAAF,EAAAjvB,OAAAyuB,EAAA3c,EACA,QAAA+c,EAAA5a,SACAib,GAAA,GAEA,QAAAL,EAAA3a,SACAib,GAAA,GAEA,QAAAN,EAAA5a,SACAib,EAAA,GAEA,QAAAL,EAAA3a,SACAib,EAAA,IAIA,IAAArd,GAAA,IAAAC,GAAA,IAAA/G,GAAA,IAAAG,GAAA,IAAAjB,GAAA,IAAAC,EACA,OAAA8kB,EAcA,IAXA/kB,GAAAC,KACA8jB,EAAA,cAAAniB,EAAA5B,GAAA,IAAA4B,EAAA3B,GAAA,MAGA0I,EAAAob,EAAA,WAAAnc,EACA,QAEAC,EAAA,KACA/G,EAAA8G,EAAAod,GAAA,KACA/jB,EAAA4G,EAAAod,GAAA,KACAF,EAAAG,iBAAA9wB,EAAAktB,wBAAA3Y,GACA,QAAA0K,EAAAyO,SAAA,CAGA,IAFAjM,EAAAxC,EAAAgF,cAAA8M,gBAAA/wB,EAAA6D,MAAA,KAEAob,EAAA+R,YACAvP,EAAA/R,YAAAuP,EAAA+R,YAEA/R,EAAAvP,YAAA+R,QAIAlN,GADAkN,EAAAxC,GACAqP,aAAA,aAAA/Z,EAGA,OADAkN,EAAAG,aAAA,YAAArN,GACAoc,EAkFA,SAAAM,EAAAjN,EAAAkN,GACA,IAEAC,EAAAD,EAAA5C,aADA,cACA8C,OAAA,GACAC,EAAA9C,EAAAvK,EAAAmN,GASA,GARAE,GAAAA,EAAA/C,aAHA,eAIA2C,EAAAjN,EAAAqN,IALA,oBAAA,KAAA,KAAA,KAAA,KAAA,gBAAA,KAAA,KAAA,IAAA,KAAA,MAOAjhB,QAAA,SAAAmS,GACA8O,IAAAH,EAAAI,aAAA/O,IAAA8O,EAAAC,aAAA/O,IACA2O,EAAAtP,aAAAW,EAAA8O,EAAA/C,aAAA/L,OAGA2O,EAAAK,SAAAvrB,OAEA,IADA,IAAAwrB,EAAAH,EAAAI,WAAA,GACAD,EAAAR,YACAE,EAAAxhB,YAAA8hB,EAAAR,YAGAE,EAAAQ,gBAjBA,cA3DA1xB,EAAA2xB,iBAAA,SAAA3N,EAAA/b,EAAA8H,EAAA6hB,GACA,GAAA5N,EAAA,EAvMA,SAAAA,GACA,IAAAyK,EAAAjB,EAAAxJ,GAAA,MAAA,YAAAvd,EAAA,EACA,KAAAgoB,EAAAzoB,QAAAS,EAAAgoB,EAAAzoB,QAAA,CACA,IAMAuc,EAAArH,EAAA2W,EAAAnrB,EANA+a,EAAAgN,EAAAhoB,GACAqrB,GAAArQ,EAAA6M,aAAA,eAAA7M,EAAA6M,aAAA,SAAA8C,OAAA,GACAxlB,EAAA6V,EAAA6M,aAAA,MAAA,EACAziB,EAAA4V,EAAA6M,aAAA,MAAA,EACAyD,EAAAxD,EAAAvK,EAAA8N,GAAAL,WAAA,GACAO,GAAAD,EAAAzD,aAAA,cAAA,IAAA,cAAA1iB,EAAA,KAAAC,EAAA,IACAomB,EAAAxD,EAAAzoB,OAAAgI,EAAAhO,EAAA6D,MAGA,GADAosB,EAAA8B,GACA,SAAAtR,KAAAsR,EAAArE,UAAA,CACA,IAAAwE,EAAAH,EAAA9N,cAAA8M,gBAAA/iB,EAAA,KACA,IAAAkN,EAAA,EAAA2W,EAAAE,EAAAvjB,WAAA9H,EAAAmrB,EAAA7rB,OAAAkV,EAAAxU,EAAAwU,IACAqH,EAAAsP,EAAAtpB,KAAA2S,GACAgX,EAAAC,eAAAnkB,EAAAuU,EAAAmL,SAAAnL,EAAA6P,WAGA,KAAAL,EAAAf,YACAkB,EAAAxiB,YAAAqiB,EAAAf,YAEAe,EAAAG,EAGA,IAAAhX,EAAA,EAAA2W,EAAApQ,EAAAjT,WAAA9H,EAAAmrB,EAAA7rB,OAAAkV,EAAAxU,EAAAwU,IAEA,OADAqH,EAAAsP,EAAAtpB,KAAA2S,IACAwS,UAAA,MAAAnL,EAAAmL,UACA,eAAAnL,EAAAmL,UAAA,SAAAnL,EAAAmL,WAIA,cAAAnL,EAAAmL,SACAsE,EAAAzP,EAAA6P,UAAA,IAAAJ,EAGAD,EAAAnQ,aAAAW,EAAAmL,SAAAnL,EAAA6P,YAIAL,EAAAnQ,aAAA,YAAAoQ,GACAD,EAAAnQ,aAAA,sBAAA,KACAmQ,EAAAL,gBAAA,MACAjQ,EAAA7R,WACAgU,aAAAmO,EAAAtQ,GAEAgN,EAAAzoB,SAAAisB,GACAxrB,KA4JA4rB,CAAArO,GAEA,IAAAvd,EAAAC,EAAA4rB,EAAAtyB,EAAAuR,OAAAghB,QACAhsB,EAAA0pB,EAAAjM,GACAwO,EAAAxyB,EAAA2F,KAAAwb,QAAA6C,EAAAhB,qBAAA,MAIA,GAHAzc,EAAAsI,YAAA+iB,GAAAA,EAAA/iB,YACAtI,EAAA+rB,OAAAA,EAEA,IAAAE,EAAAxsB,QAAAhG,EAAAoD,aAAA,CAGAovB,EAAAxO,EAAAyO,YAAA,uBACA,IAAArQ,KACA,IAAA3b,EAAA,EAAAC,EAAA8rB,EAAAxsB,OAAAS,EAAAC,EAAAD,IACA2b,EAAA3b,GAAA+rB,EAAA/rB,GAEA+rB,EAAApQ,EAGA,IAAArR,EAAAyhB,EAAA7rB,OAAA,SAAA8a,GAEA,OADAwO,EAAAxO,GACAzhB,EAAA0uB,sBAAAjO,KAAAgB,EAAAiM,SAAAvQ,QAAA,OAAA,OAhDA,SAAA8B,EAAAyO,GACA,KAAAzO,IAAAA,EAAAA,EAAArP,aACA,GAAAqP,EAAAyO,UAAAA,EAAAjN,KAAAxB,EAAAyO,SAAAvQ,QAAA,OAAA,OACA8B,EAAAqP,aAAA,uBACA,OAAA,EAGA,OAAA,EA0CAoE,CAAAjR,EAAAzhB,EAAA4uB,4BAGA,IAAA7d,GAAAA,IAAAA,EAAA/K,OACAiC,GAAAA,aADA,CAIA,IAAA+mB,KACAwD,EAAA7rB,OAAA,SAAA8a,GACA,MAAA,aAAAA,EAAAiM,SAAAvQ,QAAA,OAAA,MACA/M,QAAA,SAAAqR,GACA,IAAA8B,EAAA9B,EAAA6M,aAAA,MACAU,EAAAzL,GAAAvjB,EAAA2F,KAAAwb,QAAAM,EAAAuB,qBAAA,MAAArc,OAAA,SAAA8a,GACA,OAAAzhB,EAAA0uB,sBAAAjO,KAAAgB,EAAAiM,SAAAvQ,QAAA,OAAA,SAGAnd,EAAA+uB,aAAAuD,GAAAtyB,EAAA2yB,gBAAA3O,GACAhkB,EAAA8uB,SAAAwD,GAAAtyB,EAAA4yB,YAAA5O,GACAhkB,EAAAgvB,UAAAsD,GAAAtD,EAEAhvB,EAAA6yB,cAAA9hB,EAAA,SAAA+hB,EAAA/hB,GACA9I,IACAA,EAAA6qB,EAAAvsB,EAAAwK,EAAAyhB,UACAxyB,EAAA+uB,aAAAuD,UACAtyB,EAAA8uB,SAAAwD,UACAtyB,EAAAgvB,UAAAsD,KAEAzyB,EAAA0G,GAAAwJ,EAAA6hB,MAyBA,IAAAmB,EAAA,IAAAxF,OACA,qHAEAvtB,EAAAwD,MACA,2CAAAxD,EAAAwD,MAAA,eAEAgZ,EAAAxc,GASAgzB,qBAAA,SAAApsB,EAAAqsB,GACA,IAAAne,EAAAlO,EAAAkO,MAAAie,GAEA,GAAAje,EAAA,CAGA,IAAAoe,EAAApe,EAAA,GAGAqe,EAAAre,EAAA,GACArH,EAAAqH,EAAA,GACAse,EAAAte,EAAA,GACAkB,EAAAlB,EAAA,GAEAoe,IACAD,EAAAC,UAAAA,GAEAC,IACAF,EAAAE,WAAAnW,MAAA1P,WAAA6lB,IAAAA,EAAA7lB,WAAA6lB,IAEA1lB,IACAwlB,EAAAxlB,SAAAD,EAAAC,IAEAuI,IACAid,EAAAjd,WAAAA,GAEAod,IACAH,EAAAG,WAAA,WAAAA,EAAA,EAAAA,KAYAT,gBAAA,SAAA3O,GACA,IAMAvC,EADA4R,EAAA7F,EAAAxJ,GAJA,iBACA,iBACA,qBACA,uBAEA9I,EAAA,EAAA6T,KAEA,IADA7T,EAAAmY,EAAArtB,OACAkV,MACAuG,EAAA4R,EAAAnY,IACAoT,aAAA,eACA2C,EAAAjN,EAAAvC,GAEAsN,EAAAtN,EAAA6M,aAAA,OAAA7M,EAEA,OAAAsN,GAYAuE,gBAAA,SAAArU,EAAAzQ,EAAA8jB,GAEA,GAAArT,EAAA,CAIA,IAAArY,EAEA6G,EAAA8lB,EADAzG,UAGA,IAAAwF,IACAA,EAAArT,EAAAqP,aAAA,WAGArP,EAAArP,YAAA5P,EAAA6uB,qBAAApO,KAAAxB,EAAArP,WAAA8d,YACAZ,EAAA9sB,EAAAszB,gBAAArU,EAAArP,WAAApB,EAAA8jB,IAGA,IAAAkB,EAAAhlB,EAAA5F,OAAA,SAAAC,EAAA0Z,GAKA,OAJA3b,EAAAqY,EAAAqP,aAAA/L,MAEA1Z,EAAA0Z,GAAA3b,GAEAiC,OAIA4qB,EAAAjX,EAtdA,SAAAyC,EAAAqT,GACA,IAAA3R,KACA,IAAA,IAAA+S,KAAA1zB,EAAA8uB,SAAAwD,GACA,GAAAzE,EAAA5O,EAAAyU,EAAAhlB,MAAA,MACA,IAAA,IAAAtF,KAAApJ,EAAA8uB,SAAAwD,GAAAoB,GACA/S,EAAAvX,GAAApJ,EAAA8uB,SAAAwD,GAAAoB,GAAAtqB,GAIA,OAAAuX,EA8cAgT,CAAA1U,EAAAqT,GACAtyB,EAAA4zB,oBAAA3U,IAEAuU,EAAAhX,EACAgX,EACAC,GAEAA,EAhyBA,cAiyBAxU,EAAA2C,aAjyBA,YAiyBA6R,EAjyBA,cAmyBAhmB,EAAA8lB,EAAAzG,EAAArf,UAAAzN,EAAA4N,KAAAC,sBACA2lB,EApyBA,eAsyBAA,EAtyBA,aAsyBA/lB,EAAAD,EAAAgmB,EAtyBA,aAsyBAD,IAGA,IAAAM,EAAAC,EAAAC,KACA,IAAA,IAAAxR,KAAAiR,EACAK,EAAAjH,EAAArK,GACAuR,EAAAjH,EAAAgH,EAAAL,EAAAjR,GAAAuK,EAAArf,GACAsmB,EAAAF,GAAAC,EAEAC,GAAAA,EAAAC,MACAh0B,EAAAgzB,qBAAAe,EAAAC,KAAAD,GAEA,IAAAE,EAAAzX,EAAAsQ,EAAAiH,GACA,OAAA/zB,EAAA6uB,qBAAApO,KAAAxB,EAAAyO,UAAAuG,EAjtBA,SAAAzlB,GACA,IAAA,IAAA+T,KAAAmK,EAEA,QAAA,IAAAle,EAAAke,EAAAnK,KAAA,KAAA/T,EAAA+T,GAAA,CAIA,QAAA,IAAA/T,EAAA+T,GAAA,CACA,IAAAviB,EAAAuR,OAAAC,UAAA+Q,GACA,SAEA/T,EAAA+T,GAAAviB,EAAAuR,OAAAC,UAAA+Q,GAGA,GAAA,IAAA/T,EAAA+T,GAAA7c,QAAA,QAAA,CAIA,IAAAmjB,EAAA,IAAA7oB,EAAAuoB,MAAA/Z,EAAA+T,IACA/T,EAAA+T,GAAAsG,EAAAqL,SAAAp0B,EAAA+oB,EAAAsL,WAAA3lB,EAAAke,EAAAnK,IAAA,IAAA6R,UAEA,OAAA5lB,EA4rBA6lB,CAAAJ,KAYApB,cAAA,SAAA9hB,EAAA9I,EAAA1B,EAAAwJ,EAAA6hB,GACA,IAAA5xB,EAAAs0B,eAAAvjB,EAAA9I,EAAA1B,EAAAwJ,EAAA6hB,GAAA2C,SAUAX,oBAAA,SAAA3U,GACA,IAAAgU,KACAzjB,EAAAyP,EAAAqP,aAAA,SAEA,OAAA9e,GAIA,iBAAAA,EAhjBA,SAAAA,EAAAyjB,GACA,IAAA1Q,EAAA3b,EACA4I,EAAA2N,QAAA,QAAA,IAAAzO,MAAA,KAAA0B,QAAA,SAAAokB,GACA,IAAAC,EAAAD,EAAA9lB,MAAA,KAEA6T,EAAAkS,EAAA,GAAAC,OAAAze,cACArP,EAAA6tB,EAAA,GAAAC,OAEAzB,EAAA1Q,GAAA3b,IAyiBA+tB,CAAAnlB,EAAAyjB,GAliBA,SAAAzjB,EAAAyjB,GACA,IAAA1Q,EAAA3b,EACA,IAAA,IAAAX,KAAAuJ,OACA,IAAAA,EAAAvJ,KAIAsc,EAAAtc,EAAAgQ,cACArP,EAAA4I,EAAAvJ,GAEAgtB,EAAA1Q,GAAA3b,GA2hBAguB,CAAAplB,EAAAyjB,GAGAA,GAVAA,GAoBA4B,qBAAA,SAAAtoB,GAGA,IAAAA,EACA,OAAA,KAMAA,GAFAA,EAAAA,EAAA4Q,QAAA,KAAA,KAAAuX,QAEAhmB,MAAA,OACA,IAAAjI,EAAAC,EAAAouB,KAEA,IAAAruB,EAAA,EAAAC,EAAA6F,EAAAvG,OAAAS,EAAAC,EAAAD,GAAA,EACAquB,EAAA3uB,MACAyF,EAAA0B,WAAAf,EAAA9F,IACAoF,EAAAyB,WAAAf,EAAA9F,EAAA,MASA,OAAAquB,GAWAlC,YAAA,SAAA5O,GACA,IAAAvd,EAAAC,EAAAia,EAAAqD,EAAAhB,qBAAA,SACA+R,KAGA,IAAAtuB,EAAA,EAAAC,EAAAia,EAAA3a,OAAAS,EAAAC,EAAAD,IAAA,CAEA,IAAAuuB,EAAArU,EAAAla,GAAAwuB,aAAAtU,EAAAla,GAAAyuB,KAIA,MADAF,EAAAA,EAAA7X,QAAA,oBAAA,KACAuX,QAGAM,EAAAlgB,MAAA,sBACA6B,IAAA,SAAA+c,GAAA,OAAAA,EAAAgB,SAEAtkB,QAAA,SAAAsjB,GAEA,IAAA5e,EAAA4e,EAAA5e,MAAA,4BACAqgB,KAAAC,EAAAtgB,EAAA,GAAA4f,OACAW,EAAAD,EAAAjY,QAAA,KAAA,IAAAzO,MAAA,WAEA,IAAAjI,EAAA,EAAAC,EAAA2uB,EAAArvB,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAguB,EAAAY,EAAA5uB,GAAAiI,MAAA,WACAtF,EAAAqrB,EAAA,GACA7tB,EAAA6tB,EAAA,GACAU,EAAA/rB,GAAAxC,GAEA8sB,EAAA5e,EAAA,IACApG,MAAA,KAAA0B,QAAA,SAAAklB,GAEA,MADAA,EAAAA,EAAAnY,QAAA,QAAA,IAAAuX,UAIAK,EAAAO,GACAt1B,EAAA2F,KAAA6B,OAAAgV,OAAAuY,EAAAO,GAAAH,GAGAJ,EAAAO,GAAAt1B,EAAA2F,KAAA6B,OAAA3H,MAAAs1B,QAKA,OAAAJ,GAaAQ,eAAA,SAAA3mB,EAAA3G,EAAA8H,EAAAxJ,GAEAqI,EAAAA,EAAAuO,QAAA,SAAA,IAAAuX,OACA,IAAA10B,EAAA2F,KAAA2f,QAAA1W,GACAwN,OAAA,MACAmJ,WAGA,SAAApY,GAEA,IAAAqoB,EAAAroB,EAAAsoB,YACAD,IAAAA,EAAA1T,iBAAA9hB,EAAAG,OAAAu1B,eAAAvoB,EAAAwoB,gBACAH,EAAA,IAAAE,cAAA,qBACAE,MAAA,QAEAJ,EAAAK,QAAA1oB,EAAAwoB,aAAAxY,QAAA,qCAAA,MAEA,IAAAqY,IAAAA,EAAA1T,gBAEA,OADA7Z,GAAAA,EAAA,OACA,EAGAjI,EAAA2xB,iBAAA6D,EAAA1T,gBAAA,SAAAgU,EAAAC,EAAAhlB,EAAAilB,GACA/tB,GAAAA,EAAA6tB,EAAAC,EAAAhlB,EAAAilB,IACAjmB,EAAAxJ,OAaA0vB,kBAAA,SAAAhoB,EAAAhG,EAAA8H,EAAAxJ,GAEA,IAAAyd,EACA,GAFA/V,EAAAA,EAAAymB,YAEA,IAAA10B,EAAAG,OAAAa,UAAA,CACA,IAAAk1B,EAAA,IAAAl2B,EAAAG,OAAAa,UACAk1B,GAAAA,EAAAC,kBACAnS,EAAAkS,EAAAC,gBAAAloB,EAAA,kBAGAjO,EAAAG,OAAAu1B,iBACA1R,EAAA,IAAA0R,cAAA,qBACAE,MAAA,QAEA5R,EAAA6R,QAAA5nB,EAAAkP,QAAA,qCAAA,MAGAnd,EAAA2xB,iBAAA3N,EAAAlC,gBAAA,SAAAgU,EAAAC,EAAAhlB,EAAAilB,GACA/tB,EAAA6tB,EAAAC,EAAAhlB,EAAAilB,IACAjmB,EAAAxJ,MAljCA,CAsjCA,oBAAA8D,QAAAA,QAAA9H,MAGAvC,EAAAs0B,eAAA,SAAAvjB,EAAA9I,EAAA1B,EAAAwJ,EAAA6hB,EAAA5N,GACAzhB,KAAAwO,SAAAA,EACAxO,KAAA0F,SAAAA,EACA1F,KAAAgE,QAAAA,EACAhE,KAAAwN,QAAAA,EACAxN,KAAA+vB,OAAA/rB,GAAAA,EAAA+rB,QAAA,EACA/vB,KAAAqvB,eAAAA,EACArvB,KAAA6zB,SAAA,+BACA7zB,KAAAyhB,IAAAA,IAGAzkB,EAwIAS,EAAAs0B,eAAA9iB,WAvIA+iB,MAAA,WACAhyB,KAAAuwB,UAAA,IAAA/b,MAAAxU,KAAAwO,SAAA/K,QACAzD,KAAA8zB,YAAA9zB,KAAAwO,SAAA/K,OACAzD,KAAA+zB,iBAGA/2B,EAAA+2B,cAAA,WACA,IAAA9X,EAAAjc,KACAA,KAAAwO,SAAAX,QAAA,SAAA6O,EAAAxY,GACAwY,EAAA2C,aAAA,SAAApD,EAAA8T,QACA9T,EAAA+X,aAAAtX,EAAAxY,MAIAlH,EAAAi3B,QAAA,SAAA/U,GACA,OAAAzhB,EAAAA,EAAA2F,KAAAsI,OAAAoP,WAAAoE,EAAAD,QAAArE,QAAA,OAAA,OAGA5d,EAAAg3B,aAAA,SAAA9U,EAAAha,GACA,IAAA4I,EAAA9N,KAAAi0B,QAAA/U,GACA,GAAApR,GAAAA,EAAAomB,YACA,IACApmB,EAAAomB,YAAAhV,EAAAlf,KAAAm0B,eAAAjvB,EAAAga,GAAAlf,KAAAgE,SAEA,MAAA+a,GACAthB,EAAAgF,IAAAsc,QAIA/e,KAAAo0B,eAIAp3B,EAAAm3B,eAAA,SAAAjvB,EAAAga,GACA,IAAAjD,EAAAjc,KACA,OAAA,SAAAyH,GACA,IAAA+rB,EACAvX,EAAAoY,gBAAA5sB,EAAAyX,EAAA,QACAjD,EAAAoY,gBAAA5sB,EAAAyX,EAAA,UACAzX,aAAAhK,EAAA62B,OAAA7sB,EAAA8sB,mBACAf,EAAA/rB,EAAAuL,kCAAAkM,IAEAzX,EAAA+sB,uBAAAhB,GACAvX,EAAAwY,gBAAAhtB,EAAAyX,GACAjD,EAAAzO,SAAAyO,EAAAzO,QAAA0R,EAAAzX,GACAwU,EAAAsU,UAAArrB,GAAAuC,EACAwU,EAAAmY,gBAIAp3B,EAAA03B,0BAAA,SAAAjtB,EAAAZ,EAAA8tB,GACA,IAAAtwB,EAAAoD,EAAAZ,GAAA+tB,EAAA50B,KAAA6zB,SACA,GAAAe,EAAA1W,KAAA7Z,GAAA,CAGAuwB,EAAAC,UAAA,EACA,IAAA7T,EAAA4T,EAAAxpB,KAAA/G,GAAA,GAEA,OADAuwB,EAAAC,UAAA,EACAp3B,EAAAk3B,GAAA30B,KAAA+vB,QAAA/O,KAGAhkB,EAAAq3B,gBAAA,SAAA5sB,EAAAyX,EAAArY,GACA,IAAAiuB,EAAA90B,KAAA00B,0BAAAjtB,EAAAZ,EAAA,gBACA,GAAAiuB,EAAA,CACA,IAAAC,EAAA7V,EAAA6M,aAAAllB,EAAA,YACA8nB,EAAAlxB,EAAAsJ,SAAAmtB,YAAAY,EAAArtB,EAAAstB,EAAA/0B,KAAAgE,SACAyD,EAAAf,IAAAG,EAAA8nB,KAIA3xB,EAAAg4B,uBAAA,SAAAvtB,EAAAwtB,GACA,OAAA,SAAAC,GACAA,EAAAV,yBACAU,EAAAC,SAAAD,EAAAE,SACAH,EAAArxB,KAAAsxB,KAIAl4B,EAAAy3B,gBAAA,SAAAhtB,EAAA4tB,GACA,IACA3Y,EAAA4Y,EAAAL,EAAAM,EADAC,EAAAx1B,KAAA00B,0BAAAjtB,EAAA,WAAA,aAEA,GAAA+tB,EAAA,CACAP,KACAK,EAAA73B,EAAA2F,KAAAsH,gBAAAjD,EAAAguB,uBAIA,IAFA,IAAAC,EAAAF,EAAA,GAAAnoB,WACAsoB,EAAAN,EACAM,EAAAtoB,YAAAsoB,EAAA5J,aAAA,eAAAtkB,EAAA+tB,UACAG,EAAAA,EAAAtoB,WAEAsoB,EAAAtoB,WAAAF,YAAAuoB,GACA,IAAA,IAAAxxB,EAAA,EAAAA,EAAAsxB,EAAA/xB,OAAAS,IACAwY,EAAA8Y,EAAAtxB,GACAlE,KAAAi0B,QAAAvX,GACAwX,YACAxX,EACA1c,KAAAg1B,uBAAAvtB,EAAAwtB,GACAj1B,KAAAgE,SAIAwxB,EADA,IAAAP,EAAAxxB,OACAwxB,EAAA,GAGA,IAAAx3B,EAAAkR,MAAAsmB,GAEAM,EAAA93B,EAAA2F,KAAAwN,0BACA0kB,EACAE,EAAAC,uBAEAD,EAAAA,UACAx1B,KAAAy0B,gBAAAe,EAAAG,GAEA,IAAA3xB,EAAAvG,EAAA2F,KAAA2N,YAAAwkB,GACAC,EAAA7jB,OAAA,EACA6jB,EAAA5jB,OAAA,EACA4jB,EAAA9uB,IAAA,SAAA1C,EAAAiN,QACAukB,EAAA9uB,IAAA,SAAA1C,EAAAkN,QACAskB,EAAAttB,MAAAlE,EAAAkE,MACAstB,EAAArkB,MAAAnN,EAAAmN,MACAqkB,EAAApkB,MAAA,EACAokB,EAAAI,qBAAAvsB,EAAArF,EAAAqN,WAAA/H,EAAAtF,EAAAsN,YAAA,SAAA,UACA7J,EAAA+tB,SAAAA,IAIAx4B,EAAAo3B,YAAA,WACA,KAAAp0B,KAAA8zB,cACA9zB,KAAAuwB,UAAAvwB,KAAAuwB,UAAAnsB,OAAA,SAAA8a,GAEA,OAAA,MAAAA,IAEAlf,KAAA0F,SAAA1F,KAAAuwB,UAAAvwB,KAAAwO,YAMA,SAAA9R,GAEA,aAIA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAkBA,SAAA2L,EAAAC,EAAAC,GACAtJ,KAAAqJ,EAAAA,EACArJ,KAAAsJ,EAAAA,EAlBA7L,EAAA2L,MACA3L,EAAAgmB,KAAA,oCAIAhmB,EAAA2L,MAAAA,EAgBAA,EAAA6F,WAEApJ,KAAA,QAEA6V,YAAAtS,EAOAzE,IAAA,SAAAkxB,GACA,OAAA,IAAAzsB,EAAApJ,KAAAqJ,EAAAwsB,EAAAxsB,EAAArJ,KAAAsJ,EAAAusB,EAAAvsB,IASAC,UAAA,SAAAssB,GAGA,OAFA71B,KAAAqJ,GAAAwsB,EAAAxsB,EACArJ,KAAAsJ,GAAAusB,EAAAvsB,EACAtJ,MAQA81B,UAAA,SAAAC,GACA,OAAA,IAAA3sB,EAAApJ,KAAAqJ,EAAA0sB,EAAA/1B,KAAAsJ,EAAAysB,IASAC,gBAAA,SAAAD,GAGA,OAFA/1B,KAAAqJ,GAAA0sB,EACA/1B,KAAAsJ,GAAAysB,EACA/1B,MAQAi2B,SAAA,SAAAJ,GACA,OAAA,IAAAzsB,EAAApJ,KAAAqJ,EAAAwsB,EAAAxsB,EAAArJ,KAAAsJ,EAAAusB,EAAAvsB,IASAL,eAAA,SAAA4sB,GAGA,OAFA71B,KAAAqJ,GAAAwsB,EAAAxsB,EACArJ,KAAAsJ,GAAAusB,EAAAvsB,EACAtJ,MAQAk2B,eAAA,SAAAH,GACA,OAAA,IAAA3sB,EAAApJ,KAAAqJ,EAAA0sB,EAAA/1B,KAAAsJ,EAAAysB,IASAI,qBAAA,SAAAJ,GAGA,OAFA/1B,KAAAqJ,GAAA0sB,EACA/1B,KAAAsJ,GAAAysB,EACA/1B,MASA6R,SAAA,SAAAkkB,GACA,OAAA,IAAA3sB,EAAApJ,KAAAqJ,EAAA0sB,EAAA/1B,KAAAsJ,EAAAysB,IAUAK,eAAA,SAAAL,GAGA,OAFA/1B,KAAAqJ,GAAA0sB,EACA/1B,KAAAsJ,GAAAysB,EACA/1B,MASAq2B,OAAA,SAAAN,GACA,OAAA,IAAA3sB,EAAApJ,KAAAqJ,EAAA0sB,EAAA/1B,KAAAsJ,EAAAysB,IAUAO,aAAA,SAAAP,GAGA,OAFA/1B,KAAAqJ,GAAA0sB,EACA/1B,KAAAsJ,GAAAysB,EACA/1B,MAQAu2B,GAAA,SAAAV,GACA,OAAA71B,KAAAqJ,IAAAwsB,EAAAxsB,GAAArJ,KAAAsJ,IAAAusB,EAAAvsB,GAQAktB,GAAA,SAAAX,GACA,OAAA71B,KAAAqJ,EAAAwsB,EAAAxsB,GAAArJ,KAAAsJ,EAAAusB,EAAAvsB,GAQAmtB,IAAA,SAAAZ,GACA,OAAA71B,KAAAqJ,GAAAwsB,EAAAxsB,GAAArJ,KAAAsJ,GAAAusB,EAAAvsB,GASAotB,GAAA,SAAAb,GACA,OAAA71B,KAAAqJ,EAAAwsB,EAAAxsB,GAAArJ,KAAAsJ,EAAAusB,EAAAvsB,GAQAqtB,IAAA,SAAAd,GACA,OAAA71B,KAAAqJ,GAAAwsB,EAAAxsB,GAAArJ,KAAAsJ,GAAAusB,EAAAvsB,GASAstB,KAAA,SAAAf,EAAAhsB,GAKA,YAJA,IAAAA,IACAA,EAAA,IAEAA,EAAA9B,KAAA7K,IAAA6K,KAAA9K,IAAA,EAAA4M,GAAA,GACA,IAAAT,EAAApJ,KAAAqJ,GAAAwsB,EAAAxsB,EAAArJ,KAAAqJ,GAAAQ,EAAA7J,KAAAsJ,GAAAusB,EAAAvsB,EAAAtJ,KAAAsJ,GAAAO,IAQAgtB,aAAA,SAAAhB,GACA,IAAAtmB,EAAAvP,KAAAqJ,EAAAwsB,EAAAxsB,EACAmG,EAAAxP,KAAAsJ,EAAAusB,EAAAvsB,EACA,OAAAvB,KAAApL,KAAA4S,EAAAA,EAAAC,EAAAA,IAQAsnB,aAAA,SAAAjB,GACA,OAAA71B,KAAA42B,KAAAf,IAQA54B,IAAA,SAAA44B,GACA,OAAA,IAAAzsB,EAAArB,KAAA9K,IAAA+C,KAAAqJ,EAAAwsB,EAAAxsB,GAAAtB,KAAA9K,IAAA+C,KAAAsJ,EAAAusB,EAAAvsB,KAQApM,IAAA,SAAA24B,GACA,OAAA,IAAAzsB,EAAArB,KAAA7K,IAAA8C,KAAAqJ,EAAAwsB,EAAAxsB,GAAAtB,KAAA7K,IAAA8C,KAAAsJ,EAAAusB,EAAAvsB,KAOA4F,SAAA,WACA,OAAAlP,KAAAqJ,EAAA,IAAArJ,KAAAsJ,GASAytB,MAAA,SAAA1tB,EAAAC,GAGA,OAFAtJ,KAAAqJ,EAAAA,EACArJ,KAAAsJ,EAAAA,EACAtJ,MAQAg3B,KAAA,SAAA3tB,GAEA,OADArJ,KAAAqJ,EAAAA,EACArJ,MAQAi3B,KAAA,SAAA3tB,GAEA,OADAtJ,KAAAsJ,EAAAA,EACAtJ,MAQAk3B,aAAA,SAAArB,GAGA,OAFA71B,KAAAqJ,EAAAwsB,EAAAxsB,EACArJ,KAAAsJ,EAAAusB,EAAAvsB,EACAtJ,MAOAm3B,KAAA,SAAAtB,GACA,IAAAxsB,EAAArJ,KAAAqJ,EACAC,EAAAtJ,KAAAsJ,EACAtJ,KAAAqJ,EAAAwsB,EAAAxsB,EACArJ,KAAAsJ,EAAAusB,EAAAvsB,EACAusB,EAAAxsB,EAAAA,EACAwsB,EAAAvsB,EAAAA,GAOAhM,MAAA,WACA,OAAA,IAAA8L,EAAApJ,KAAAqJ,EAAArJ,KAAAsJ,MA5UA,CAgVA,oBAAAxB,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAGA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAaA,SAAA25B,EAAAC,GACAr3B,KAAAq3B,OAAAA,EACAr3B,KAAAgK,UAbAvM,EAAA25B,aACA35B,EAAAgmB,KAAA,2CAeAhmB,EAAA25B,aAAAA,EAEA35B,EAAA25B,aAAAnoB,WAEAyM,YAAA0b,EAQAE,YAAA,SAAAvuB,GAEA,OADA/I,KAAAgK,OAAApG,KAAAmF,GACA/I,MASAu3B,aAAA,SAAAvtB,GAEA,OADAhK,KAAAgK,OAAAhK,KAAAgK,OAAAlE,OAAAkE,GACAhK,OAcAvC,EAAA25B,aAAAI,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAphB,EACAqhB,GAAAD,EAAAvuB,EAAAsuB,EAAAtuB,IAAAouB,EAAAnuB,EAAAquB,EAAAruB,IAAAsuB,EAAAtuB,EAAAquB,EAAAruB,IAAAmuB,EAAApuB,EAAAsuB,EAAAtuB,GACAyuB,GAAAJ,EAAAruB,EAAAouB,EAAApuB,IAAAouB,EAAAnuB,EAAAquB,EAAAruB,IAAAouB,EAAApuB,EAAAmuB,EAAAnuB,IAAAmuB,EAAApuB,EAAAsuB,EAAAtuB,GACA0uB,GAAAH,EAAAtuB,EAAAquB,EAAAruB,IAAAouB,EAAAruB,EAAAouB,EAAApuB,IAAAuuB,EAAAvuB,EAAAsuB,EAAAtuB,IAAAquB,EAAApuB,EAAAmuB,EAAAnuB,GACA,GAAA,IAAAyuB,EAAA,CACA,IAAAC,EAAAH,EAAAE,EACAE,EAAAH,EAAAC,EACA,GAAAC,GAAAA,GAAA,GAAA,GAAAC,GAAAA,GAAA,GACAzhB,EAAA,IAAA4gB,EAAA,iBACAE,YAAA,IAAA75B,EAAA2L,MAAAquB,EAAApuB,EAAA2uB,GAAAN,EAAAruB,EAAAouB,EAAApuB,GAAAouB,EAAAnuB,EAAA0uB,GAAAN,EAAApuB,EAAAmuB,EAAAnuB,KAGAkN,EAAA,IAAA4gB,OAKA5gB,EAAA,IAAA4gB,EADA,IAAAS,GAAA,IAAAC,EACA,aAGA,YAGA,OAAAthB,GAaA/Y,EAAA25B,aAAAc,qBAAA,SAAAT,EAAAC,EAAA1tB,GACA,IAEA2tB,EAAAC,EAAAO,EAAAj0B,EAFAsS,EAAA,IAAA4gB,EACA3zB,EAAAuG,EAAAvG,OAGA,IAAAS,EAAA,EAAAA,EAAAT,EAAAS,IACAyzB,EAAA3tB,EAAA9F,GACA0zB,EAAA5tB,GAAA9F,EAAA,GAAAT,GACA00B,EAAAf,EAAAI,kBAAAC,EAAAC,EAAAC,EAAAC,GAEAphB,EAAA+gB,aAAAY,EAAAnuB,QAKA,OAHAwM,EAAAxM,OAAAvG,OAAA,IACA+S,EAAA6gB,OAAA,gBAEA7gB,GAUA/Y,EAAA25B,aAAAgB,wBAAA,SAAAC,EAAAC,GACA,IACAp0B,EADAsS,EAAA,IAAA4gB,EACA3zB,EAAA40B,EAAA50B,OAEA,IAAAS,EAAA,EAAAA,EAAAT,EAAAS,IAAA,CACA,IAAAuzB,EAAAY,EAAAn0B,GACAwzB,EAAAW,GAAAn0B,EAAA,GAAAT,GACA00B,EAAAf,EAAAc,qBAAAT,EAAAC,EAAAY,GAEA9hB,EAAA+gB,aAAAY,EAAAnuB,QAKA,OAHAwM,EAAAxM,OAAAvG,OAAA,IACA+S,EAAA6gB,OAAA,gBAEA7gB,GAWA/Y,EAAA25B,aAAAmB,0BAAA,SAAAvuB,EAAAwuB,EAAAC,GACA,IAAAx7B,EAAAu7B,EAAAv7B,IAAAw7B,GACAv7B,EAAAs7B,EAAAt7B,IAAAu7B,GACAC,EAAA,IAAAj7B,EAAA2L,MAAAlM,EAAAmM,EAAApM,EAAAqM,GACAqvB,EAAA,IAAAl7B,EAAA2L,MAAAnM,EAAAoM,EAAAnM,EAAAoM,GACAsvB,EAAAxB,EAAAc,qBAAAj7B,EAAAy7B,EAAA1uB,GACA6uB,EAAAzB,EAAAc,qBAAAQ,EAAAx7B,EAAA8M,GACA8uB,EAAA1B,EAAAc,qBAAAh7B,EAAAy7B,EAAA3uB,GACA+uB,EAAA3B,EAAAc,qBAAAS,EAAA17B,EAAA+M,GACAwM,EAAA,IAAA4gB,EAUA,OARA5gB,EAAA+gB,aAAAqB,EAAA5uB,QACAwM,EAAA+gB,aAAAsB,EAAA7uB,QACAwM,EAAA+gB,aAAAuB,EAAA9uB,QACAwM,EAAA+gB,aAAAwB,EAAA/uB,QAEAwM,EAAAxM,OAAAvG,OAAA,IACA+S,EAAA6gB,OAAA,gBAEA7gB,IAxKA,CA2KA,oBAAA1O,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAiBA,SAAAuoB,EAAAM,GACAA,EAIAtmB,KAAAg5B,iBAAA1S,GAHAtmB,KAAAi5B,WAAA,EAAA,EAAA,EAAA,IA0bA,SAAAC,EAAAtvB,EAAAuvB,EAAAtvB,GAOA,OANAA,EAAA,IACAA,GAAA,GAEAA,EAAA,IACAA,GAAA,GAEAA,EAAA,EAAA,EACAD,EAAA,GAAAuvB,EAAAvvB,GAAAC,EAEAA,EAAA,GACAsvB,EAEAtvB,EAAA,EAAA,EACAD,GAAAuvB,EAAAvvB,IAAA,EAAA,EAAAC,GAAA,EAEAD,EA3dAnM,EAAAuoB,MACAvoB,EAAAgmB,KAAA,qCAuBAhmB,EAAAuoB,MAAAA,EAEAvoB,EAAAuoB,MAAA/W,WAMA+pB,iBAAA,SAAA1S,GACA,IAAArf,EAEAqf,KAAAN,EAAAoT,eACA9S,EAAAN,EAAAoT,aAAA9S,IAGA,gBAAAA,IACArf,GAAA,IAAA,IAAA,IAAA,IAGAA,IACAA,EAAA+e,EAAAqT,cAAA/S,IAEArf,IACAA,EAAA+e,EAAAsT,cAAAhT,IAEArf,IACAA,EAAA+e,EAAAuT,cAAAjT,IAEArf,IAEAA,GAAA,EAAA,EAAA,EAAA,IAEAA,GACAjH,KAAAi5B,UAAAhyB,IAYAuyB,UAAA,SAAA5uB,EAAA6uB,EAAA5oB,GACAjG,GAAA,IAAA6uB,GAAA,IAAA5oB,GAAA,IAEA,IAAA6oB,EAAA5jB,EAAAhD,EACA5V,EAAAO,EAAA2F,KAAAC,MAAAnG,KAAA0N,EAAA6uB,EAAA5oB,IACA5T,EAAAQ,EAAA2F,KAAAC,MAAApG,KAAA2N,EAAA6uB,EAAA5oB,IAIA,GAFAiC,GAAA5V,EAAAD,GAAA,EAEAC,IAAAD,EACAy8B,EAAA5jB,EAAA,MAEA,CACA,IAAA8N,EAAA1mB,EAAAD,EAEA,OADA6Y,EAAAhD,EAAA,GAAA8Q,GAAA,EAAA1mB,EAAAD,GAAA2mB,GAAA1mB,EAAAD,GACAC,GACA,KAAA0N,EACA8uB,GAAAD,EAAA5oB,GAAA+S,GAAA6V,EAAA5oB,EAAA,EAAA,GACA,MACA,KAAA4oB,EACAC,GAAA7oB,EAAAjG,GAAAgZ,EAAA,EACA,MACA,KAAA/S,EACA6oB,GAAA9uB,EAAA6uB,GAAA7V,EAAA,EAGA8V,GAAA,EAGA,OACA3xB,KAAA4xB,MAAA,IAAAD,GACA3xB,KAAA4xB,MAAA,IAAA7jB,GACA/N,KAAA4xB,MAAA,IAAA7mB,KAQAmT,UAAA,WACA,OAAAjmB,KAAA45B,SAOAX,UAAA,SAAAhyB,GACAjH,KAAA45B,QAAA3yB,GAOA4yB,MAAA,WACA,IAAA5yB,EAAAjH,KAAAimB,YACA,MAAA,OAAAhf,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,KAOA4qB,OAAA,WACA,IAAA5qB,EAAAjH,KAAAimB,YACA,MAAA,QAAAhf,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,KAOA6yB,MAAA,WACA,IAAA7yB,EAAAjH,KAAAimB,YACA8T,EAAA/5B,KAAAw5B,UAAAvyB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,MAAA,OAAA8yB,EAAA,GAAA,IAAAA,EAAA,GAAA,KAAAA,EAAA,GAAA,MAOAC,OAAA,WACA,IAAA/yB,EAAAjH,KAAAimB,YACA8T,EAAA/5B,KAAAw5B,UAAAvyB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,MAAA,QAAA8yB,EAAA,GAAA,IAAAA,EAAA,GAAA,KAAAA,EAAA,GAAA,KAAA9yB,EAAA,GAAA,KAOAgzB,MAAA,WACA,IAAArvB,EAAA6uB,EAAA5oB,EAAA5J,EAAAjH,KAAAimB,YAWA,OARArb,EAAA,KADAA,EAAA3D,EAAA,GAAAiI,SAAA,KACAzL,OAAA,IAAAmH,EAAAA,EAGA6uB,EAAA,KADAA,EAAAxyB,EAAA,GAAAiI,SAAA,KACAzL,OAAA,IAAAg2B,EAAAA,EAGA5oB,EAAA,KADAA,EAAA5J,EAAA,GAAAiI,SAAA,KACAzL,OAAA,IAAAoN,EAAAA,EAEAjG,EAAAiB,cAAA4tB,EAAA5tB,cAAAgF,EAAAhF,eAOAquB,OAAA,WACA,IAAAvvB,EAAA1D,EAAAjH,KAAAimB,YAMA,OAFAtb,EAAA,KADAA,GADAA,EAAA5C,KAAA4xB,MAAA,IAAA1yB,EAAA,KACAiI,SAAA,KACAzL,OAAA,IAAAkH,EAAAA,EAEA3K,KAAAi6B,QAAAtvB,EAAAkB,eAOA+lB,SAAA,WACA,OAAA5xB,KAAAimB,YAAA,IAQA0L,SAAA,SAAAwI,GACA,IAAAlzB,EAAAjH,KAAAimB,YAGA,OAFAhf,EAAA,GAAAkzB,EACAn6B,KAAAi5B,UAAAhyB,GACAjH,MAOAo6B,YAAA,WACA,IAAAnzB,EAAAjH,KAAAimB,YACAoU,EAAAnY,UAAA,GAAAjb,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,IAAA1J,QAAA,GAAA,IACA+8B,EAAArzB,EAAA,GAEA,OADAjH,KAAAi5B,WAAAoB,EAAAA,EAAAA,EAAAC,IACAt6B,MAQAu6B,aAAA,SAAAC,GACA,IAAAvzB,EAAAjH,KAAAimB,YACAoU,GAAA,GAAApzB,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,IAAA1J,QAAA,GACA+8B,EAAArzB,EAAA,GAMA,OAJAuzB,EAAAA,GAAA,IAEAH,EAAArvB,OAAAqvB,GAAArvB,OAAAwvB,GAAA,EAAA,IACAx6B,KAAAi5B,WAAAoB,EAAAA,EAAAA,EAAAC,IACAt6B,MAQAy6B,YAAA,SAAAC,GACAA,aAAA1U,IACA0U,EAAA,IAAA1U,EAAA0U,IAGA,IAIAx2B,EAJAsS,KACA2jB,EAAAn6B,KAAA4xB,WAEA3qB,EAAAjH,KAAAimB,YACA0U,EAAAD,EAAAzU,YAEA,IAAA/hB,EAAA,EAAAA,EAAA,EAAAA,IACAsS,EAAA5S,KAAAmE,KAAA4xB,MAAA,GAAA1yB,EAAA/C,GALA,GAKAy2B,EAAAz2B,KAKA,OAFAsS,EAAA,GAAA2jB,EACAn6B,KAAAi5B,UAAAziB,GACAxW,OAWAvC,EAAAuoB,MAAA4U,OAAA,oIAQAn9B,EAAAuoB,MAAA6U,OAAA,gGAQAp9B,EAAAuoB,MAAA8U,MAAA,yDASAr9B,EAAAuoB,MAAAoT,cACA2B,UAAA,UACAC,aAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,MAAA,UACAC,OAAA,UACAC,MAAA,UACAC,eAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,UAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,MAAA,UACAC,eAAA,UACAC,SAAA,UACAC,QAAA,UACAC,KAAA,UACAC,SAAA,UACAC,SAAA,UACAC,cAAA,UACAC,SAAA,UACAC,SAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,eAAA,UACAC,WAAA,UACAC,WAAA,UACAC,QAAA,UACAC,WAAA,UACAC,aAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,SAAA,UACAC,YAAA,UACAC,QAAA,UACAC,QAAA,UACAC,WAAA,UACAC,UAAA,UACAC,YAAA,UACAC,YAAA,UACAC,QAAA,UACAC,UAAA,UACAC,WAAA,UACAC,KAAA,UACAC,UAAA,UACAC,KAAA,UACAC,KAAA,UACAC,MAAA,UACAC,YAAA,UACAC,SAAA,UACAC,QAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,SAAA,UACAC,cAAA,UACAC,UAAA,UACAC,aAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,qBAAA,UACAC,UAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,YAAA,UACAC,cAAA,UACAC,aAAA,UACAC,eAAA,UACAC,eAAA,UACAC,eAAA,UACAC,YAAA,UACAC,KAAA,UACAC,UAAA,UACAC,MAAA,UACAC,QAAA,UACAC,OAAA,UACAC,iBAAA,UACAC,WAAA,UACAC,aAAA,UACAC,aAAA,UACAC,eAAA,UACAC,gBAAA,UACAC,kBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,aAAA,UACAC,UAAA,UACAC,UAAA,UACAC,SAAA,UACAC,YAAA,UACAC,KAAA,UACAC,QAAA,UACAC,MAAA,UACAC,UAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,cAAA,UACAC,UAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,UAAA,UACAC,KAAA,UACAC,KAAA,UACAC,KAAA,UACAC,WAAA,UACAC,OAAA,UACAC,cAAA,UACAC,IAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,OAAA,UACAC,WAAA,UACAC,SAAA,UACAC,SAAA,UACAC,OAAA,UACAC,OAAA,UACAC,QAAA,UACAC,UAAA,UACAC,UAAA,UACAC,UAAA,UACAC,KAAA,UACAC,YAAA,UACAC,UAAA,UACAzxB,IAAA,UACA0xB,KAAA,UACAC,QAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,WAAA,UACAC,OAAA,UACAC,YAAA,WAmCAxmC,EAAAuoB,MAAAke,QAAA,SAAA5d,GACA,OAAAN,EAAAme,WAAAne,EAAAsT,cAAAhT,KASA7oB,EAAAuoB,MAAAsT,cAAA,SAAAhT,GACA,IAAA/T,EAAA+T,EAAA/T,MAAAyT,EAAA4U,QACA,GAAAroB,EAAA,CACA,IAAA3H,EAAAsX,SAAA3P,EAAA,GAAA,KAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,IAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,GACAknB,EAAAvX,SAAA3P,EAAA,GAAA,KAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,IAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,GACA1B,EAAAqR,SAAA3P,EAAA,GAAA,KAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,IAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,GAEA,OACA2P,SAAAtX,EAAA,IACAsX,SAAAuX,EAAA,IACAvX,SAAArR,EAAA,IACA0B,EAAA,GAAAxH,WAAAwH,EAAA,IAAA,KAaA9U,EAAAuoB,MAAAoe,SAAApe,EAAAke,QAQAzmC,EAAAuoB,MAAAqe,QAAA,SAAA/d,GACA,OAAAN,EAAAme,WAAAne,EAAAuT,cAAAjT,KAWA7oB,EAAAuoB,MAAAuT,cAAA,SAAAjT,GACA,IAAA/T,EAAA+T,EAAA/T,MAAAyT,EAAA6U,QACA,GAAAtoB,EAAA,CAIA,IAGA3H,EAAA6uB,EAAA5oB,EAHA6oB,GAAA3uB,WAAAwH,EAAA,IAAA,IAAA,KAAA,IAAA,IACAuD,EAAA/K,WAAAwH,EAAA,KAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,GACAO,EAAA/H,WAAAwH,EAAA,KAAA,KAAA2L,KAAA3L,EAAA,IAAA,IAAA,GAGA,GAAA,IAAAuD,EACAlL,EAAA6uB,EAAA5oB,EAAAiC,MAEA,CACA,IAAAqmB,EAAArmB,GAAA,GAAAA,GAAAgD,EAAA,GAAAhD,EAAAgD,EAAAhD,EAAAgD,EACAlM,EAAA,EAAAkJ,EAAAqmB,EAEAvuB,EAAAsuB,EAAAtvB,EAAAuvB,EAAAO,EAAA,EAAA,GACAD,EAAAP,EAAAtvB,EAAAuvB,EAAAO,GACA7oB,EAAAqoB,EAAAtvB,EAAAuvB,EAAAO,EAAA,EAAA,GAGA,OACA3xB,KAAA4xB,MAAA,IAAA/uB,GACA7C,KAAA4xB,MAAA,IAAAF,GACA1xB,KAAA4xB,MAAA,IAAA9oB,GACA0B,EAAA,GAAAxH,WAAAwH,EAAA,IAAA,KAYA9U,EAAAuoB,MAAAse,SAAAte,EAAAqe,QASA5mC,EAAAuoB,MAAAue,QAAA,SAAAje,GACA,OAAAN,EAAAme,WAAAne,EAAAqT,cAAA/S,KAUA7oB,EAAAuoB,MAAAqT,cAAA,SAAA/S,GACA,GAAAA,EAAA/T,MAAAyT,EAAA8U,OAAA,CACA,IAAAz2B,EAAAiiB,EAAAxa,MAAAwa,EAAAnjB,QAAA,KAAA,GACAqhC,EAAA,IAAAngC,EAAAZ,QAAA,IAAAY,EAAAZ,OACAghC,EAAA,IAAApgC,EAAAZ,QAAA,IAAAY,EAAAZ,OACAmH,EAAA45B,EAAAngC,EAAAuH,OAAA,GAAAvH,EAAAuH,OAAA,GAAAvH,EAAAwI,UAAA,EAAA,GACA4sB,EAAA+K,EAAAngC,EAAAuH,OAAA,GAAAvH,EAAAuH,OAAA,GAAAvH,EAAAwI,UAAA,EAAA,GACAgE,EAAA2zB,EAAAngC,EAAAuH,OAAA,GAAAvH,EAAAuH,OAAA,GAAAvH,EAAAwI,UAAA,EAAA,GACAlC,EAAA85B,EAAAD,EAAAngC,EAAAuH,OAAA,GAAAvH,EAAAuH,OAAA,GAAAvH,EAAAwI,UAAA,EAAA,GAAA,KAEA,OACAqV,SAAAtX,EAAA,IACAsX,SAAAuX,EAAA,IACAvX,SAAArR,EAAA,IACA9F,YAAAmX,SAAAvX,EAAA,IAAA,KAAApN,QAAA,OAYAE,EAAAuoB,MAAAme,WAAA,SAAAl9B,GACA,IAAAy9B,EAAA,IAAA1e,EAEA,OADA0e,EAAAzL,UAAAhyB,GACAy9B,IAxnBA,CA2nBA,oBAAA58B,QAAAA,QAAA9H,MAGA,WAGA,SAAA2kC,EAAAzlB,EAAA0lB,GACA,IAEAte,EAAAue,EAAAnnB,EAAAxZ,EAFA+I,EAAAiS,EAAA6M,aAAA,SACAnK,EAAA1C,EAAA6M,aAAA,WAAA,EAMA,GADAnK,GADAA,EAAA7W,WAAA6W,IAAA,KAAA1D,KAAA0D,GAAA,IAAA,IACA,EAAA,EAAAA,EAAA,EAAA,EAAAA,EACA3U,EAAA,CACA,IAAA63B,EAAA73B,EAAAd,MAAA,WAMA,IAJA,KAAA24B,EAAAA,EAAArhC,OAAA,IACAqhC,EAAAvxB,MAGArP,EAAA4gC,EAAArhC,OAAAS,KAAA,CAEA,IAAAiI,EAAA24B,EAAA5gC,GAAAiI,MAAA,WACAxE,EAAAwE,EAAA,GAAAgmB,OACA9tB,EAAA8H,EAAA,GAAAgmB,OAEA,eAAAxqB,EACA2e,EAAAjiB,EAEA,iBAAAsD,IACA+V,EAAArZ,IAiBA,OAZAiiB,IACAA,EAAApH,EAAA6M,aAAA,eAAA,cAEArO,IACAA,EAAAwB,EAAA6M,aAAA,iBAGAzF,EAAA,IAAA7oB,EAAAuoB,MAAAM,GACAue,EAAAve,EAAAsL,WACAlU,EAAAjD,MAAA1P,WAAA2S,IAAA,EAAA3S,WAAA2S,GACAA,GAAAmnB,EAAAD,GAGAhjB,OAAAA,EACA0E,MAAAA,EAAAuT,QACAnc,QAAAA,GAyBA,IAAApgB,EAAAG,EAAA2F,KAAA6B,OAAA3H,MA6ZA,SAAAynC,EAAAC,EAAAhhC,EAAAihC,EAAAC,GACA,IAAAC,EAAAC,EACAp2B,OAAAq2B,KAAArhC,GAAA6J,QAAA,SAAAnK,GAEA,cADAyhC,EAAAnhC,EAAAN,IAEA0hC,EAAA,EAEA,cAAAD,EACAC,EAAA,GAGAA,EAAAr6B,WAAA/G,EAAAN,GAAA,IACA,iBAAAyhC,GAAA,uBAAAjnB,KAAAinB,KACAC,GAAA,IACA,WAAAF,IAEA,OAAAxhC,GAAA,OAAAA,GAAA,OAAAA,IACA0hC,GAAAH,EAAAtX,cAAAsX,EAAA1lC,OAEA,OAAAmE,GAAA,OAAAA,IACA0hC,GAAAH,EAAArX,eAAAqX,EAAA9lC,WAKA6E,EAAAN,GAAA0hC,IA9aA3nC,EAAAsJ,SAAAtJ,EAAA2F,KAAA+Y,aAOAmpB,QAAA,EAOAC,QAAA,EAUAC,kBAAA,KAWAN,cAAA,SAOAr/B,KAAA,SAmBAwW,WAAA,SAAArY,GACAA,IAAAA,MACAA,EAAAgV,SAAAhV,EAAAgV,WAEA,IAAAA,EAAAiD,EAAAjc,KAGAgP,OAAAq2B,KAAArhC,GAAA6J,QAAA,SAAA43B,GACAxpB,EAAAwpB,GAAAzhC,EAAAyhC,KAGAzlC,KAAAghB,GACAhhB,KAAAghB,IAAA,IAAAvjB,EAAAuR,OAAAghB,QAGAhwB,KAAAghB,GAAAvjB,EAAAuR,OAAAghB,QAGAhX,GACAjB,GAAA/T,EAAAgV,OAAAjB,IAAA,EACAC,GAAAhU,EAAAgV,OAAAhB,IAAA,EACA5I,GAAApL,EAAAgV,OAAA5J,IAAA,EACAC,GAAArL,EAAAgV,OAAA3J,IAAA,GAGA,WAAArP,KAAA6F,OACAmT,EAAAwf,GAAAx0B,EAAAgV,OAAAwf,IAAA,EACAxf,EAAAyf,GAAAz0B,EAAAgV,OAAAyf,IAAA,GAGAz4B,KAAAgZ,OAAAA,EACAhZ,KAAA8G,WAAA9C,EAAA8C,WAAAgF,SAQA45B,aAAA,SAAA5+B,GACA,IAAA,IAAAoG,KAAApG,EAAA,CACA,IAAAwf,EAAA,IAAA7oB,EAAAuoB,MAAAlf,EAAAoG,IACAlN,KAAA8G,WAAAlD,MACAge,OAAA7W,WAAAmC,GACAoZ,MAAAA,EAAAuT,QACAnc,QAAA4I,EAAAsL,aAGA,OAAA5xB,MAQA2lC,SAAA,SAAAC,GACA,IAAA3gC,GACAY,KAAA7F,KAAA6F,KACAmT,OAAAhZ,KAAAgZ,OACAlS,WAAA9G,KAAA8G,WACAw+B,QAAAtlC,KAAAslC,QACAC,QAAAvlC,KAAAulC,QACAL,cAAAllC,KAAAklC,cACAM,kBAAAxlC,KAAAwlC,kBAAAxlC,KAAAwlC,kBAAA1/B,SAAA9F,KAAAwlC,mBAIA,OAFA/nC,EAAA2F,KAAAyL,uBAAA7O,KAAAiF,EAAA2gC,GAEA3gC,GASA4gC,MAAA,SAAA5gC,EAAAjB,GACA,IAAAE,EAAAC,EACA2hC,EAAAC,EADA/sB,EAAA1b,EAAA0C,KAAAgZ,QAAA,GAAAhV,EAAAA,MACA8C,EAAAxJ,EAAA0C,KAAA8G,YAAA,GACAk/B,EAAAhtB,EAAAwf,GAAAxf,EAAAyf,GACAxuB,EAAAjK,KAAAwlC,kBAAAxlC,KAAAwlC,kBAAA1/B,SAAArI,EAAA4D,QAAAyE,SACAw/B,GAAAtlC,KAAAslC,QAAAC,GAAAvlC,KAAAulC,QACAU,IAAAjiC,EAAAkiC,oBACAhB,EAAA,WAAAllC,KAAAklC,cAAA,iBAAA,oBAqDA,GAnDAp+B,EAAAq/B,KAAA,SAAAx7B,EAAAkG,GACA,OAAAlG,EAAAiX,OAAA/Q,EAAA+Q,SAGA,sBAAAsjB,GACAI,GAAArgC,EAAA1F,MACAgmC,GAAAtgC,EAAA9F,SAGAmmC,GAAArgC,EAAA1F,MAAA,EACAgmC,GAAAtgC,EAAA9F,OAAA,GAEA,SAAA8F,EAAAY,OACAy/B,GAAArgC,EAAAmhC,WAAA/8B,EACAk8B,GAAAtgC,EAAAmhC,WAAA98B,GAIAW,EAAA,IAAAq7B,EACAr7B,EAAA,IAAAs7B,EAEAQ,EAAA,aAAA/lC,KAAAghB,GACA,oBAAAkkB,EAAA,IACAa,GAAA,wBAAAE,EACAjiC,EAAAkiC,oBAAA,IAAA,IAAAzoC,EAAA2F,KAAA+Q,YAAAlK,GAAA,KAEA,WAAAjK,KAAA6F,KACAigC,GACA,mBACAC,EACA,QAAA/sB,EAAAjB,GACA,SAAAiB,EAAAhB,GACA,SAAAgB,EAAA5J,GACA,SAAA4J,EAAA3J,GACA,QAGA,WAAArP,KAAA6F,OAEAigC,GACA,mBACAC,EACA,QAAAC,EAAAhtB,EAAAjB,GAAAiB,EAAA5J,GACA,SAAA42B,EAAAhtB,EAAAhB,GAAAgB,EAAA3J,GACA,QAAA22B,EAAAhtB,EAAAwf,GAAAxf,EAAAyf,GACA,SAAAuN,EAAAhtB,EAAA5J,GAAA4J,EAAAjB,GACA,SAAAiuB,EAAAhtB,EAAA3J,GAAA2J,EAAAhB,GACA,SAIA,WAAAhY,KAAA6F,KAAA,CACA,GAAAmgC,EAIA,KAFAl/B,EAAAA,EAAAhB,UACAugC,UACAniC,EAAA,EAAAC,EAAA2C,EAAArD,OAAAS,EAAAC,EAAAD,IACA4C,EAAA5C,GAAA0d,OAAA,EAAA9a,EAAA5C,GAAA0d,OAGA,IAAA0kB,EAAAv+B,KAAA9K,IAAA+b,EAAAwf,GAAAxf,EAAAyf,IACA,GAAA6N,EAAA,EAAA,CAEA,IAAAC,EAAAx+B,KAAA7K,IAAA8b,EAAAwf,GAAAxf,EAAAyf,IACA+N,EAAAF,EAAAC,EACA,IAAAriC,EAAA,EAAAC,EAAA2C,EAAArD,OAAAS,EAAAC,EAAAD,IACA4C,EAAA5C,GAAA0d,QAAA4kB,GAAA,EAAA1/B,EAAA5C,GAAA0d,SAKA,IAAA1d,EAAA,EAAAC,EAAA2C,EAAArD,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAuiC,EAAA3/B,EAAA5C,GACA4hC,EAAAliC,KACA,SACA,WAAA,IAAA6iC,EAAA7kB,OAAA,IACA,uBAAA6kB,EAAAngB,WACA,IAAAmgB,EAAA/oB,QAAA,kBAAA+oB,EAAA/oB,QAAA,IACA,SAMA,OAFAooB,EAAAliC,KAAA,WAAA5D,KAAA6F,KAAA,sBAAA,uBAEAigC,EAAAxxB,KAAA,KAUAoyB,OAAA,SAAA1nC,EAAAiG,GACA,IAAA0pB,EAAAzqB,EAAAC,EAAA6U,EAAAvb,EAAA2F,KAAA6B,OAAA3H,MAAA0C,KAAAgZ,QACAjB,EAAAiB,EAAAjB,GAAAC,EAAAgB,EAAAhB,GAAA5I,EAAA4J,EAAA5J,GAAAC,EAAA2J,EAAA3J,GACAs3B,EAAA3mC,KAAA8G,WAEA,GAAA9G,KAAA6F,KAAA,CAgBA,IAZAZ,aAAAxH,EAAA4N,MAAA,eAAArL,KAAAklC,gBACAntB,GAAA9S,EAAA1F,MACAyY,GAAA/S,EAAA9F,OACAiQ,GAAAnK,EAAA1F,MACA8P,GAAApK,EAAA9F,QAEA,WAAAa,KAAA6F,KACA8oB,EAAA3vB,EAAA4nC,qBAAA7uB,EAAAC,EAAA5I,EAAAC,GAEA,WAAArP,KAAA6F,OACA8oB,EAAA3vB,EAAA6nC,qBAAA9uB,EAAAC,EAAAgB,EAAAwf,GAAAppB,EAAAC,EAAA2J,EAAAyf,KAEAv0B,EAAA,EAAAC,EAAAwiC,EAAAljC,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAoiB,EAAAqgB,EAAAziC,GAAAoiB,MACA5I,EAAAipB,EAAAziC,GAAAwZ,QACAkE,EAAA+kB,EAAAziC,GAAA0d,YAEA,IAAAlE,IACA4I,EAAA,IAAA7oB,EAAAuoB,MAAAM,GAAAqL,SAAAjU,GAAAmU,UAEAlD,EAAA+W,aAAA9jB,EAAA0E,GAGA,OAAAqI,MAIAlxB,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAsJ,UAoBAmtB,YAAA,SAAAhV,EAAA8lB,EAAAjQ,EAAAkQ,GAkCA,IAAAL,EAAA75B,WAAAgqB,IAAA,KAAA7W,KAAA6W,GAAA,IAAA,GACA6P,EAAAA,EAAA,EAAA,EAAAA,EAAA,EAAA,EAAAA,EACAnqB,MAAAmqB,KACAA,EAAA,GAGA,IACA/+B,EAKAmT,EAAA9U,EACAwmB,EAPAoc,EAAA5nB,EAAAuB,qBAAA,QAEAykB,EAAA,mBAAAhmB,EAAA6M,aAAA,iBACA,SAAA,aACAyZ,EAAAtmB,EAAA6M,aAAA,sBAAA,GACAjlB,KACAw+B,EAAA,EAAAC,EAAA,EAWA,IATA,mBAAArmB,EAAAiM,UAAA,mBAAAjM,EAAAiM,UACAtlB,EAAA,SACAmT,EAxXA,SAAAkG,GACA,OACAnH,GAAAmH,EAAA6M,aAAA,OAAA,EACA/T,GAAAkH,EAAA6M,aAAA,OAAA,EACA3c,GAAA8P,EAAA6M,aAAA,OAAA,OACA1c,GAAA6P,EAAA6M,aAAA,OAAA,GAmXAgb,CAAA7nB,KAGArZ,EAAA,SACAmT,EAnXA,SAAAkG,GACA,OACAnH,GAAAmH,EAAA6M,aAAA,OAAA7M,EAAA6M,aAAA,OAAA,MACA/T,GAAAkH,EAAA6M,aAAA,OAAA7M,EAAA6M,aAAA,OAAA,MACAyM,GAAA,EACAppB,GAAA8P,EAAA6M,aAAA,OAAA,MACA1c,GAAA6P,EAAA6M,aAAA,OAAA,MACA0M,GAAAvZ,EAAA6M,aAAA,MAAA,OA4WAib,CAAA9nB,IAGAhb,EAAA4iC,EAAArjC,OAAAS,KACA4C,EAAAlD,KAAA+gC,EAAAmC,EAAA5iC,GAAA0gC,IAGAla,EAAAjtB,EAAAktB,wBAAA6a,GAEAT,EAAAC,EAAAhsB,EAAAisB,EAAAC,GAEA,WAAAA,IACAI,GAAAN,EAAAx6B,KACA+6B,GAAAP,EAAAv6B,KAGA,IAAAkkB,EAAA,IAAAlxB,EAAAsJ,UACAia,GAAA9B,EAAA6M,aAAA,MACAlmB,KAAAA,EACAmT,OAAAA,EACAlS,WAAAA,EACAo+B,cAAAA,EACAM,kBAAA9a,EACA4a,QAAAA,EACAC,QAAAA,IAGA,OAAA5W,GAaAsY,UAAA,SAAAx/B,EAAAzD,GAOA,OANAA,IAAAA,MACA+gC,EAAAt9B,EAAAzD,EAAAgV,OAAAhV,EAAAkhC,eAEAvX,aAAA,IACAC,cAAA,MAEA,IAAAnwB,EAAAsJ,SAAA/C,MA/dA,GAqgBA,WAEA,aAEA,IAAAzG,EAAAE,EAAA2F,KAAA7F,QAWAE,EAAAyJ,QAAAzJ,EAAA2F,KAAA+Y,aAOA+qB,OAAA,SAOA5B,QAAA,EAOAC,QAAA,EAQAj5B,YAAA,GAOA66B,iBAAA,KAQA9qB,WAAA,SAAArY,EAAA0B,GAKA,GAJA1B,IAAAA,MAEAhE,KAAAghB,GAAAvjB,EAAAuR,OAAAghB,QACAhwB,KAAAonC,WAAApjC,IACAA,EAAAiD,QAAAjD,EAAAiD,QAAA,iBAAAjD,EAAAiD,OACAvB,GAAAA,EAAA1F,WAIA,QAAA,IAAAvC,EAAA2F,KAAAkE,gBAAAtD,EAAAiD,QACAjH,KAAAiH,OAAA,IAAAM,SAAA9J,EAAA2F,KAAAkE,gBAAAtD,EAAAiD,SACAvB,GAAAA,EAAA1F,UAEA,CAEA,IAAAic,EAAAjc,KACAA,KAAAiH,OAAAxJ,EAAA2F,KAAAoJ,cACA/O,EAAA2F,KAAAgJ,UAAApI,EAAAiD,OAAA,SAAAsF,GACA0P,EAAAhV,OAAAsF,EACA7G,GAAAA,EAAAuW,IACA,KAAAjc,KAAAsM,eASAq5B,SAAA,SAAAC,GACA,IACA3+B,EAAAhC,EADAoP,EAAA5W,EAAAuR,OAAAqF,oBA2BA,MAvBA,mBAAArU,KAAAiH,OACAA,EAAAqL,OAAAtS,KAAAiH,QAGA,iBAAAjH,KAAAiH,OAAA2F,IACA3F,EAAAjH,KAAAiH,OAAA2F,IAGA,iBAAA5M,KAAAiH,QAAAjH,KAAAiH,OAAAmJ,YACAnJ,EAAAjH,KAAAiH,OAAAmJ,aAGAnL,GACAY,KAAA,UACAoB,OAAAA,EACAigC,OAAAlnC,KAAAknC,OACA56B,YAAAtM,KAAAsM,YACAg5B,QAAA/nC,EAAAyC,KAAAslC,QAAAjxB,GACAkxB,QAAAhoC,EAAAyC,KAAAulC,QAAAlxB,GACA8yB,iBAAAnnC,KAAAmnC,iBAAAnnC,KAAAmnC,iBAAArhC,SAAA,MAEArI,EAAA2F,KAAAyL,uBAAA7O,KAAAiF,EAAA2gC,GAEA3gC,GASA4gC,MAAA,SAAA5gC,GACA,IAAAoiC,EAAA,mBAAArnC,KAAAiH,OAAAjH,KAAAiH,SAAAjH,KAAAiH,OACAqgC,EAAAD,EAAA9nC,MAAA0F,EAAA1F,MACAgoC,EAAAF,EAAAloC,OAAA8F,EAAA9F,OACAqoC,EAAAxnC,KAAAslC,QAAArgC,EAAA1F,MACAkoC,EAAAznC,KAAAulC,QAAAtgC,EAAA9F,OACAuoC,EAAA,GAqBA,MApBA,aAAA1nC,KAAAknC,QAAA,cAAAlnC,KAAAknC,SACAK,EAAA,EACAE,IACAF,GAAAx/B,KAAAsN,IAAAoyB,KAGA,aAAAznC,KAAAknC,QAAA,cAAAlnC,KAAAknC,SACAI,EAAA,EACAE,IACAF,GAAAv/B,KAAAsN,IAAAmyB,KAIAH,EAAAz6B,IACA86B,EAAAL,EAAAz6B,IAEAy6B,EAAAj3B,YACAs3B,EAAAL,EAAAj3B,aAGA,sBAAApQ,KAAAghB,GACA,QAAAwmB,EACA,QAAAC,EACA,YAAAH,EACA,aAAAC,EAAA,iCAEAF,EAAA9nC,MACA,aAAA8nC,EAAAloC,OACA,iBAAAuoC,EACA,4BAKAN,WAAA,SAAApjC,GACA,IAAA,IAAAN,KAAAM,EACAhE,KAAA0D,GAAAM,EAAAN,IASAgjC,OAAA,SAAA1nC,GACA,IAAAiI,EAAA,mBAAAjH,KAAAiH,OAAAjH,KAAAiH,SAAAjH,KAAAiH,OAGA,IAAAA,EACA,MAAA,GAIA,QAAA,IAAAA,EAAA2F,IAAA,CACA,IAAA3F,EAAA0gC,SACA,MAAA,GAEA,GAAA,IAAA1gC,EAAA2gC,cAAA,IAAA3gC,EAAA4gC,cACA,MAAA,GAGA,OAAA7oC,EAAA8oC,cAAA7gC,EAAAjH,KAAAknC,WAnMA,GAyMA,SAAAxqC,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAF,EAAAE,EAAA2F,KAAA7F,QAEAE,EAAAsqC,OACAtqC,EAAAgmB,KAAA,sCAUAhmB,EAAAsqC,OAAAtqC,EAAA2F,KAAA+Y,aAOAmK,MAAA,aAMA0hB,KAAA,EAOA1C,QAAA,EAOAC,QAAA,EAOA0C,cAAA,EAOAC,sBAAA,EASAC,YAAA,EAOA9rB,WAAA,SAAArY,GAMA,IAAA,IAAAN,IAJA,iBAAAM,IACAA,EAAAhE,KAAAooC,aAAApkC,IAGAA,EACAhE,KAAA0D,GAAAM,EAAAN,GAGA1D,KAAAghB,GAAAvjB,EAAAuR,OAAAghB,SAQAoY,aAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAlW,OACAoW,EAAA9qC,EAAAsqC,OAAAS,iBAAAp9B,KAAAk9B,OACAhiB,EAAAgiB,EAAA1tB,QAAAnd,EAAAsqC,OAAAS,iBAAA,KAAA,aAEA,OACAliB,MAAAA,EAAA6L,OACAmT,QAAApjB,SAAAqmB,EAAA,GAAA,KAAA,EACAhD,QAAArjB,SAAAqmB,EAAA,GAAA,KAAA,EACAP,KAAA9lB,SAAAqmB,EAAA,GAAA,KAAA,IASAr5B,SAAA,WACA,OAAAlP,KAAAslC,QAAAtlC,KAAAulC,QAAAvlC,KAAAgoC,KAAAhoC,KAAAsmB,OAAAhS,KAAA,QASAuxB,MAAA,SAAA5gC,GACA,IAAAwjC,EAAA,GAAAC,EAAA,GAAAr0B,EAAA5W,EAAAuR,OAAAqF,oBACAuN,EAAAnkB,EAAA2F,KAAA+F,cACAE,EAAArJ,KAAAslC,QAAAh8B,EAAAtJ,KAAAulC,SACA9nC,EAAA2F,KAAAjG,kBAAA8H,EAAAiD,QACAoe,EAAA,IAAA7oB,EAAAuoB,MAAAhmB,KAAAsmB,OAeA,OAbArhB,EAAA1F,OAAA0F,EAAA9F,SAGAspC,EAAA,IAAAlrC,GAAAwK,KAAAsN,IAAAuM,EAAAvY,GAAArJ,KAAAgoC,MAAA/iC,EAAA1F,MAAA8U,GALA,GAMAq0B,EAAA,IAAAnrC,GAAAwK,KAAAsN,IAAAuM,EAAAtY,GAAAtJ,KAAAgoC,MAAA/iC,EAAA9F,OAAAkV,GANA,IAQApP,EAAA0M,QACAiQ,EAAAvY,IAAA,GAEApE,EAAA2M,QACAgQ,EAAAtY,IAAA,GAIA,qBAAAtJ,KAAAghB,GAAA,SAAA0nB,EAAA,eAAA,IAAA,EAAAA,GAAA,UACAD,EAAA,cAAA,IAAA,EAAAA,GAAA,0DAEAlrC,EAAAyC,KAAAgoC,KAAAhoC,KAAAgoC,KAAA,EAAA,EAAA3zB,GAAA,wCACA9W,EAAAqkB,EAAAvY,EAAAgL,GACA,SAAA9W,EAAAqkB,EAAAtY,EAAA+K,GAAA,0DACAiS,EAAAuT,QAAA,oBAAAvT,EAAAsL,WAAA,iLAcA+T,SAAA,WACA,GAAA3lC,KAAAkoC,qBACA,OACA5hB,MAAAtmB,KAAAsmB,MACA0hB,KAAAhoC,KAAAgoC,KACA1C,QAAAtlC,KAAAslC,QACAC,QAAAvlC,KAAAulC,QACA0C,aAAAjoC,KAAAioC,aACAE,WAAAnoC,KAAAmoC,YAGA,IAAA1gC,KAAAzK,EAAAS,EAAAsqC,OAAA94B,UAQA,OANA,QAAA,OAAA,UAAA,UAAA,eAAA,cAAApB,QAAA,SAAAnK,GACA1D,KAAA0D,KAAA1G,EAAA0G,KACA+D,EAAA/D,GAAA1D,KAAA0D,KAEA1D,MAEAyH,KAWAhK,EAAAsqC,OAAAS,iBAAA,0FAhMA,CAkMA,oBAAA1gC,QAAAA,QAAA9H,MAGA,WAEA,aAEA,GAAAvC,EAAAkrC,aACAlrC,EAAAgmB,KAAA,+CADA,CAMA,IAAAxJ,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAqH,EAAA7jB,EAAA2F,KAAAke,iBACAhZ,EAAA7K,EAAA2F,KAAAkF,gBACA/K,EAAAE,EAAA2F,KAAA7F,QACAoM,EAAAlM,EAAA2F,KAAAuG,eACAe,EAAAjN,EAAA2F,KAAAsH,gBACA4X,EAAA7kB,EAAA2F,KAAAkf,cACArS,EAAAxS,EAAA2F,KAAA6M,oBAEA24B,EAAA,IAAAC,MAAA,yCAeAprC,EAAAkrC,aAAAlrC,EAAA2F,KAAA+Y,YAAA1e,EAAA+I,eAQA6V,WAAA,SAAA6C,EAAAlb,GACAA,IAAAA,MACAhE,KAAA8oC,oBAAA9oC,KAAA+oC,eAAAC,KAAAhpC,MACAA,KAAAipC,sBAAAjpC,KAAA+E,iBAAAikC,KAAAhpC,MACAA,KAAAkpC,YAAAhqB,EAAAlb,IASAmlC,gBAAA,GAcAC,gBAAA,KASAC,aAAA,GAcAC,aAAA,KAQApB,sBAAA,EAOAqB,UAAA,EAYAzkC,mBAAA,EAYAsC,OAAA,KAOAoiC,sBAAA,EAOAC,qBAAA,EAOAC,uBAAA,EAOAC,kBAAAlsC,EAAA4D,QAAAyE,SAQA8jC,eAAA,EAQAC,YAAA,EAOAC,oBAAA,aASAC,qBAAA,EAWAC,aAYAC,eAAA,EASAzU,cAAAvV,EAOAipB,YAAA,SAAAhqB,EAAAlb,GACA,IAAAkmC,EAAAlqC,KAAAipC,sBACAjpC,KAAA0E,YACA1E,KAAAmqC,mBAAAjrB,GACAlf,KAAAoqC,aAAApmC,GACAhE,KAAAqqC,qBAEArqC,KAAAsqC,aACAtqC,KAAAuqC,qBAGAvmC,EAAAslC,cACAtpC,KAAAwqC,gBAAAxmC,EAAAslC,aAAAY,GAEAlmC,EAAAolC,iBACAppC,KAAAyqC,mBAAAzmC,EAAAolC,gBAAAc,GAEAlmC,EAAAmlC,iBACAnpC,KAAA0qC,mBAAA1mC,EAAAmlC,gBAAAe,GAEAlmC,EAAAqlC,cACArpC,KAAA2qC,gBAAA3mC,EAAAqlC,aAAAa,GAEAlqC,KAAA4qC,cAMAC,iBAAA,WACA,OAAA,IAAAptC,EAAAqE,kBAAA9B,KAAA+pC,qBAOAe,iBAAA,WACA,OAAA9qC,KAAA6qC,mBAAAptC,EAAAqE,iBAAA,GAMAyoC,mBAAA,WACA,GAAAvqC,KAAA6qC,mBAAA,CAGA,IAAAE,EAAAttC,EAAAqE,iBACA9B,KAAAgrC,oBAAAD,EAAA/qC,KAAAirC,cAAAjrC,KAAAkrC,kBACAlrC,KAAAmrC,eACAnrC,KAAAgrC,oBAAAD,EAAA/qC,KAAAmrC,cAAAnrC,KAAAorC,cAIAJ,oBAAA,SAAAD,EAAAjsC,EAAA6G,GACA7G,EAAAugB,aAAA,QAAArf,KAAAT,MAAAwrC,GACAjsC,EAAAugB,aAAA,SAAArf,KAAAb,OAAA4rC,GACAplC,EAAAvG,MAAA2rC,EAAAA,IAUAH,WAAA,WAEA,OADA5qC,KAAAqrC,QAAA/pB,EAAAthB,KAAAirC,eACAjrC,MAkDAwqC,gBAAA,SAAAc,EAAA5lC,EAAA1B,GACA,OAAAhE,KAAAurC,oBAAA,eAAAD,EAAA5lC,EAAA1B,IAmDAymC,mBAAA,SAAAa,EAAA5lC,EAAA1B,GACA,OAAAhE,KAAAurC,oBAAA,kBAAAD,EAAA5lC,EAAA1B,IAwBA2mC,gBAAA,SAAAtB,EAAA3jC,GACA,OAAA1F,KAAAwrC,oBAAA,eAAAnC,EAAA3jC,IAwBAglC,mBAAA,SAAAvB,EAAAzjC,GACA,OAAA1F,KAAAwrC,oBAAA,kBAAArC,EAAAzjC,IAOA2kC,mBAAA,WACA,IAAArrC,EAAAgB,KAAAf,aAEAD,EAAA0qC,sBAAA1qC,EAAA0qC,uBAAA1qC,EAAAysC,6BACAzsC,EAAA0sC,0BAAA1sC,EAAA2sC,yBAAA3sC,EAAA4sC,uBACA5sC,EAAA0qC,sBAAA1pC,KAAA0pC,uBAWA6B,oBAAA,SAAA1kC,EAAAykC,EAAA5lC,EAAA1B,GAkBA,MAjBA,iBAAAsnC,EACA7tC,EAAA2F,KAAAgJ,UAAAk/B,EAAA,SAAA/+B,GACA,GAAAA,EAAA,CACA,IAAAy4B,EAAA,IAAAvnC,EAAA62B,MAAA/nB,EAAAvI,GACAhE,KAAA6G,GAAAm+B,EACAA,EAAAlmC,OAAAkB,KAEA0F,GAAAA,EAAA6G,IACAvM,KAAAgE,GAAAA,EAAAsI,cAGAtI,GAAAsnC,EAAAlE,WAAApjC,GACAhE,KAAA6G,GAAAykC,EACAA,IAAAA,EAAAxsC,OAAAkB,MACA0F,GAAAA,EAAA4lC,IAGAtrC,MAUAwrC,oBAAA,SAAA3kC,EAAAyf,EAAA5gB,GAIA,OAHA1F,KAAA6G,GAAAyf,EACAtmB,KAAA2G,cAAA2f,EAAAzf,GACA7G,KAAAgH,aAAAsf,EAAAzf,EAAAnB,GACA1F,MAMA6rC,qBAAA,WACA,IAAAnvB,EAAAzM,IACA,IAAAyM,EACA,MAAAksB,EAKA,GAHAlsB,EAAAzP,QACAyP,EAAAzP,eAEA,IAAAyP,EAAAzd,WACA,MAAA2pC,EAEA,OAAAlsB,GAOA0tB,aAAA,SAAApmC,GACA,IAAAinC,EAAAjrC,KAAAirC,cACAjrC,KAAAyG,YAAAzC,GAEAhE,KAAAT,MAAAS,KAAAT,OAAA2iB,SAAA+oB,EAAA1rC,MAAA,KAAA,EACAS,KAAAb,OAAAa,KAAAb,QAAA+iB,SAAA+oB,EAAA9rC,OAAA,KAAA,EAEAa,KAAAirC,cAAAh+B,QAIAg+B,EAAA1rC,MAAAS,KAAAT,MACA0rC,EAAA9rC,OAAAa,KAAAb,OAEA8rC,EAAAh+B,MAAA1N,MAAAS,KAAAT,MAAA,KACA0rC,EAAAh+B,MAAA9N,OAAAa,KAAAb,OAAA,KAEAa,KAAA2pC,kBAAA3pC,KAAA2pC,kBAAA79B,UAQAq+B,mBAAA,SAAA95B,GAEAA,GAAAA,EAAApR,WACAe,KAAAirC,cAAA56B,EAGArQ,KAAAirC,cAAAxtC,EAAA2F,KAAA2d,QAAA1Q,IAAArQ,KAAA6rC,uBAGApuC,EAAA2F,KAAA8d,SAAAlhB,KAAAirC,cAAA,gBAEAjrC,KAAAsqC,aACAtqC,KAAA8rC,kBAAA9rC,KAAAirC,eAGAjrC,KAAAkrC,iBAAAlrC,KAAAirC,cAAAhsC,WAAA,OAOA8sC,SAAA,WACA,OAAA/rC,KAAAT,OAOAysC,UAAA,WACA,OAAAhsC,KAAAb,QAYA8sC,SAAA,SAAA5nC,EAAAL,GACA,OAAAhE,KAAAksC,eAAA3sC,MAAA8E,GAAAL,IAYAmoC,UAAA,SAAA9nC,EAAAL,GACA,OAAAhE,KAAAksC,eAAA/sC,OAAAkF,GAAAL,IAcAkoC,cAAA,SAAAE,EAAApoC,GACA,IAAAqoC,EAIA,IAAA,IAAA3oC,KAFAM,EAAAA,MAEAooC,EACAC,EAAAD,EAAA1oC,GAEAM,EAAAsoC,UACAtsC,KAAAusC,uBAAA7oC,EAAA0oC,EAAA1oC,IACA2oC,GAAA,KACArsC,KAAAwsC,gBAAA,GAGAxoC,EAAAyoC,eACAzsC,KAAA0sC,iBAAAhpC,EAAA2oC,GAcA,OAXArsC,KAAA2sC,qBACA3sC,KAAA4sC,kBAAA5sC,KAAA4sC,iBAAAC,kBAEA7sC,KAAAuqC,qBACAvqC,KAAAqqC,qBACArqC,KAAA4qC,aAEA5mC,EAAAsoC,SACAtsC,KAAA+E,mBAGA/E,MAWAusC,uBAAA,SAAA7oC,EAAAW,GAaA,OAZArE,KAAAirC,cAAAvnC,GAAAW,EAEArE,KAAAmrC,gBACAnrC,KAAAmrC,cAAAznC,GAAAW,GAGArE,KAAA8sC,gBACA9sC,KAAA8sC,cAAAppC,GAAAW,GAGArE,KAAA0D,GAAAW,EAEArE,MAWA0sC,iBAAA,SAAAhpC,EAAAW,GAWA,OAVArE,KAAAirC,cAAAh+B,MAAAvJ,GAAAW,EAEArE,KAAAmrC,gBACAnrC,KAAAmrC,cAAAl+B,MAAAvJ,GAAAW,GAGArE,KAAA+sC,YACA/sC,KAAA+sC,UAAA9/B,MAAAvJ,GAAAW,GAGArE,MAOAgtC,QAAA,WACA,OAAAhtC,KAAA2pC,kBAAA,IASAsD,qBAAA,SAAAC,GACA,IAAAjoC,EAAAf,EAAAC,EAAAgpC,EAAAntC,KAAAotC,cAEA,IADAptC,KAAA2pC,kBAAAuD,EACAhpC,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,KACAe,EAAAjF,KAAA0E,SAAAR,IACAmpC,OAAApoC,EAAAqoC,WAJA,GAAA,GAWA,OALAH,GAAA,oBAAAA,EAAAtnC,MACAsnC,EAAAG,WAPA,GAAA,GASAttC,KAAAutC,yBACAvtC,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAUAwtC,YAAA,SAAAzkC,EAAA1E,GAEA,IAAAopC,EAAA1kC,EAAAmkC,EAAAltC,KAAA2pC,kBAAA79B,MAAA,GACA/C,EAAAY,EAAAZ,EAAA2B,EAAA1K,KAAA2pC,oBACAuD,EAAA,GAAA7oC,EACA6oC,EAAA,GAAA7oC,EACA,IAAAqpC,EAAA/jC,EAAAZ,EAAAmkC,GAGA,OAFAA,EAAA,IAAAO,EAAApkC,EAAAqkC,EAAArkC,EACA6jC,EAAA,IAAAO,EAAAnkC,EAAAokC,EAAApkC,EACAtJ,KAAAitC,qBAAAC,IASAS,QAAA,SAAAtpC,GAEA,OADArE,KAAAwtC,YAAA,IAAA/vC,EAAA2L,MAAA,EAAA,GAAA/E,GACArE,MASA4tC,YAAA,SAAA7kC,GACA,IAAAmkC,EAAAltC,KAAA2pC,kBAAA79B,MAAA,GAGA,OAFAohC,EAAA,IAAAnkC,EAAAM,EACA6jC,EAAA,IAAAnkC,EAAAO,EACAtJ,KAAAitC,qBAAAC,IASAW,YAAA,SAAA9kC,GACA,OAAA/I,KAAA4tC,YAAA,IAAAnwC,EAAA2L,OACAL,EAAAM,EAAArJ,KAAA2pC,kBAAA,IACA5gC,EAAAO,EAAAtJ,KAAA2pC,kBAAA,MAQAmE,WAAA,WACA,OAAA9tC,KAAAirC,eAOApmC,eAAA,SAAA4C,GACAzH,KAAAupC,UAAA9hC,EAAAsmC,aACAtmC,EAAAC,KAAA,SAAA1H,MACAyH,EAAA6lC,YACAttC,KAAA+D,KAAA,gBAAAoO,OAAA1K,IACAA,EAAA1D,KAAA,UAOAyB,iBAAA,SAAAiC,GACAzH,KAAA+D,KAAA,kBAAAoO,OAAA1K,IACAA,EAAA1D,KAAA,kBACA0D,EAAA3I,QASAkvC,aAAA,SAAAhvC,GAEA,OADAA,EAAAivC,UAAA,EAAA,EAAAjuC,KAAAT,MAAAS,KAAAb,QACAa,MAOAf,WAAA,WACA,OAAAe,KAAAkrC,kBAQAgD,MAAA,WAcA,OAbAluC,KAAA0E,SAAAjB,OAAA,EACAzD,KAAAopC,gBAAA,KACAppC,KAAAspC,aAAA,KACAtpC,KAAAmpC,gBAAA,GACAnpC,KAAAqpC,aAAA,GACArpC,KAAAmuC,oBACAnuC,KAAAuE,IAAA,WAAAvE,KAAAouC,sBACApuC,KAAAquC,gBAAA,KACAruC,KAAAmuC,mBAAA,GAEAnuC,KAAAguC,aAAAhuC,KAAAkrC,kBACAlrC,KAAA+D,KAAA,kBACA/D,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAQAsuC,UAAA,WACA,IAAAC,EAAAvuC,KAAAkrC,iBAEA,OADAlrC,KAAAwuC,aAAAD,EAAAvuC,KAAA0E,UACA1E,MAaA+oC,eAAA,WACA/oC,KAAAyuC,YAAA,EACAzuC,KAAAsuC,aAUAvpC,iBAAA,WAIA,OAHA/E,KAAAyuC,cACAzuC,KAAAyuC,YAAAhxC,EAAA2F,KAAAmhB,iBAAAvkB,KAAA8oC,sBAEA9oC,MAUAutC,uBAAA,WACA,IAAAvjC,KAAAzK,EAAAS,KAAAT,MAAAJ,EAAAa,KAAAb,OACAuvC,EAAAhkC,EAAA1K,KAAA2pC,mBAMA,OALA3/B,EAAA2kC,GAAAhlC,GAAAN,EAAA,EAAAC,EAAA,GAAAolC,GACA1kC,EAAA4kC,GAAAjlC,GAAAN,EAAA9J,EAAA+J,EAAAnK,GAAAuvC,GACA1kC,EAAA6kC,GAAA,IAAApxC,EAAA2L,MAAAY,EAAA4kC,GAAAvlC,EAAAW,EAAA2kC,GAAArlC,GACAU,EAAA8kC,GAAA,IAAArxC,EAAA2L,MAAAY,EAAA2kC,GAAAtlC,EAAAW,EAAA4kC,GAAAtlC,GACAtJ,KAAAgqC,UAAAhgC,EACAA,GAGA+kC,sBAAA,WACA/uC,KAAAyuC,cACAhxC,EAAA2F,KAAAuiB,gBAAA3lB,KAAAyuC,aACAzuC,KAAAyuC,YAAA,IAWAD,aAAA,SAAAxvC,EAAAoG,GACA,IAAA8D,EAAAlJ,KAAA2pC,kBAAAl7B,EAAAzO,KAAAw1B,SACAx1B,KAAA+uC,wBACA/uC,KAAAutC,yBACAvtC,KAAAguC,aAAAhvC,GACAgB,KAAA+D,KAAA,iBAAA/E,IAAAA,IACAgB,KAAAoH,QACA3J,EAAA2F,KAAAoN,YAAAxQ,KAAAhB,GAEAgB,KAAAgvC,kBAAAhwC,GAEAA,EAAA6Q,OAEA7Q,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAlJ,KAAAivC,eAAAjwC,EAAAoG,GACApG,EAAAgR,WACAhQ,KAAAwpC,sBAAAxpC,KAAAsqC,aACAtqC,KAAAkvC,aAAAlwC,GAEAgB,KAAAoH,QACApI,EAAAgR,UAEAvB,IACAA,EAAA3P,OAAAkB,KAEAyO,EAAA0gC,cACA1gC,EAAA2gC,gBAAA,EACA3gC,EAAA4gC,aAAAC,aAAA,IACAtvC,KAAAuvC,qBAAAvwC,IAEAgB,KAAAwvC,eAAAxwC,GACAgB,KAAAwpC,sBAAAxpC,KAAAsqC,aACAtqC,KAAAkvC,aAAAlwC,GAEAgB,KAAA+D,KAAA,gBAAA/E,IAAAA,KAOAuwC,qBAAA,SAAAvwC,GACA,IAAAkK,EAAAlJ,KAAA2pC,kBAAAl7B,EAAAzO,KAAAw1B,SACAx2B,EAAA6Q,OACA7Q,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGAlK,EAAAywC,yBAAA,iBACAhhC,EAAAxE,UAAAjL,GACAA,EAAAI,MAAA,EAAAqP,EAAAihC,MAAA,EAAAjhC,EAAAkhC,OACA3wC,EAAAM,UAAAmP,EAAAmhC,cAAAnhC,EAAAohC,mBAAAphC,EAAAqhC,mBACA9wC,EAAAgR,WAQAi/B,eAAA,SAAAjwC,EAAAoG,GACA,IAAAlB,EAAAC,EACA,IAAAD,EAAA,EAAAC,EAAAiB,EAAA3B,OAAAS,EAAAC,IAAAD,EACAkB,EAAAlB,IAAAkB,EAAAlB,GAAA6rC,OAAA/wC,IASAgxC,2BAAA,SAAAhxC,EAAA6H,GACA,IAAAvD,EAAAtD,KAAA6G,EAAA,SAAA5B,EAAAjF,KAAA6G,EAAA,SACAqC,EAAAlJ,KAAA2pC,kBAAAsG,EAAAjwC,KAAA6G,EAAA,OACA,GAAAvD,GAAA2B,EAAA,CAGA,GAAA3B,EAAA,CACAtE,EAAA6Q,OACA7Q,EAAA0R,YACA1R,EAAA8Q,OAAA,EAAA,GACA9Q,EAAAkxC,OAAAlwC,KAAAT,MAAA,GACAP,EAAAkxC,OAAAlwC,KAAAT,MAAAS,KAAAb,QACAH,EAAAkxC,OAAA,EAAAlwC,KAAAb,QACAH,EAAAmxC,YACAnxC,EAAAoxC,UAAA9sC,EAAAojC,OACApjC,EAAAojC,OAAA1nC,EAAAgB,MACAsD,EACA2sC,GACAjxC,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAlK,EAAAiL,UAAA,EAAA,EAAA,EAAA,EAAA3G,EAAAgiC,SAAA,EAAAhiC,EAAAiiC,SAAA,GACA,IAAArY,EAAA5pB,EAAAkiC,mBAAAliC,EAAA6jC,iBACAja,GAAAluB,EAAAiL,UAAAijB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAluB,EAAAsE,OACAtE,EAAAgR,UAEA/K,IACAjG,EAAA6Q,OACAogC,GACAjxC,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAjE,EAAA8qC,OAAA/wC,GACAA,EAAAgR,aAQAg/B,kBAAA,SAAAhwC,GACAgB,KAAAgwC,2BAAAhxC,EAAA,eAOAwwC,eAAA,SAAAxwC,GACAgB,KAAAgwC,2BAAAhxC,EAAA,YAQAqxC,UAAA,WACA,OACA5lC,IAAAzK,KAAAb,OAAA,EACAqL,KAAAxK,KAAAT,MAAA,IASA+wC,cAAA,SAAArrC,GACA,OAAAjF,KAAAuwC,cAAAtrC,EAAA,IAAAxH,EAAA2L,MAAApJ,KAAAqwC,YAAA7lC,KAAAvF,EAAAurC,iBAAAlnC,KASAmnC,cAAA,SAAAxrC,GACA,OAAAjF,KAAAuwC,cAAAtrC,EAAA,IAAAxH,EAAA2L,MAAAnE,EAAAurC,iBAAAnnC,EAAArJ,KAAAqwC,YAAA5lC,OASAimC,aAAA,SAAAzrC,GACA,IAAA0rC,EAAA3wC,KAAAqwC,YAEA,OAAArwC,KAAAuwC,cAAAtrC,EAAA,IAAAxH,EAAA2L,MAAAunC,EAAAnmC,KAAAmmC,EAAAlmC,OASAmmC,qBAAA,SAAA3rC,GACA,IAAA4rC,EAAA7wC,KAAA8wC,cAEA,OAAA9wC,KAAAuwC,cAAAtrC,EAAA4rC,IASAE,sBAAA,SAAA9rC,GACA,IAAA4rC,EAAA7wC,KAAA8wC,cAEA,OADA9wC,KAAAuwC,cAAAtrC,EAAA,IAAAxH,EAAA2L,MAAAynC,EAAAxnC,EAAApE,EAAAurC,iBAAAlnC,IACAtJ,MASAgxC,sBAAA,SAAA/rC,GACA,IAAA4rC,EAAA7wC,KAAA8wC,cAEA,OAAA9wC,KAAAuwC,cAAAtrC,EAAA,IAAAxH,EAAA2L,MAAAnE,EAAAurC,iBAAAnnC,EAAAwnC,EAAAvnC,KAQAwnC,YAAA,WACA,IAAAH,EAAA3wC,KAAAqwC,YACA3B,EAAAhkC,EAAA1K,KAAA2pC,mBACA,OAAAhgC,GAAAN,EAAAsnC,EAAAnmC,KAAAlB,EAAAqnC,EAAAlmC,KAAAikC,IAUA6B,cAAA,SAAAtrC,EAAA0rC,GAIA,OAHA1rC,EAAA2wB,oBAAA+a,EAAA,SAAA,UACA1rC,EAAAqoC,YACAttC,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAQAixC,eAAA,SAAArL,GACA,OAAA5lC,KAAAkxC,iBAAAtL,IAQAD,SAAA,SAAAC,GACA,OAAA5lC,KAAAmxC,gBAAA,WAAAvL,IAQAsL,iBAAA,SAAAtL,GACA,OAAA5lC,KAAAmxC,gBAAA,mBAAAvL,IAMAuL,gBAAA,SAAAp1B,EAAA6pB,GAEA,IAAApQ,EAAAx1B,KAAAw1B,SAAAziB,GACArV,QAAAD,EAAAC,QACA0H,QAAApF,KAAAoxC,WAAAr1B,EAAA6pB,IASA,OAPApQ,IACAziB,EAAAyiB,SAAAx1B,KAAAqxC,UAAArxC,KAAAw1B,SAAAzZ,EAAA6pB,IAEA3rB,EAAAlH,EAAA/S,KAAAsxC,qBAAAv1B,EAAA6pB,IAEAnoC,EAAA2F,KAAAyL,uBAAA7O,KAAA+S,EAAA6yB,GAEA7yB,GAMAq+B,WAAA,SAAAr1B,EAAA6pB,GACA,OAAA5lC,KAAA0E,SAAAN,OAAA,SAAAa,GACA,OAAAA,EAAAssC,oBACAn9B,IAAA,SAAA4wB,GACA,OAAAhlC,KAAAqxC,UAAArM,EAAAjpB,EAAA6pB,IACA5lC,OAMAqxC,UAAA,SAAArM,EAAAjpB,EAAA6pB,GACA,IAAA4L,EAEAxxC,KAAAkoC,uBACAsJ,EAAAxM,EAAAkD,qBACAlD,EAAAkD,sBAAA,GAGA,IAAAjjC,EAAA+/B,EAAAjpB,GAAA6pB,GAIA,OAHA5lC,KAAAkoC,uBACAlD,EAAAkD,qBAAAsJ,GAEAvsC,GAMAqsC,qBAAA,SAAAv1B,EAAA6pB,GACA,IAAA7yB,KAAA0+B,EAAAzxC,KAAAopC,gBAAAsI,EAAA1xC,KAAAspC,aAoBA,OAlBAtpC,KAAAmpC,kBACAp2B,EAAA4+B,WAAA3xC,KAAAmpC,gBAAAxD,SACA3lC,KAAAmpC,gBAAAxD,SAAAC,GACA5lC,KAAAmpC,iBAGAnpC,KAAAqpC,eACAt2B,EAAA2+B,QAAA1xC,KAAAqpC,aAAA1D,SACA3lC,KAAAqpC,aAAA1D,SAAAC,GACA5lC,KAAAqpC,cAEAoI,IAAAA,EAAAF,oBACAx+B,EAAAq2B,gBAAAppC,KAAAqxC,UAAAI,EAAA11B,EAAA6pB,IAEA8L,IAAAA,EAAAH,oBACAx+B,EAAAu2B,aAAAtpC,KAAAqxC,UAAAK,EAAA31B,EAAA6pB,IAGA7yB,GAUA6+B,2BAAA,EAuCA/L,MAAA,SAAA7hC,EAAAwJ,GACAxJ,IAAAA,MACAA,EAAAwJ,QAAAA,EACA,IAAAs4B,KAkBA,OAhBA9lC,KAAA6xC,gBAAA/L,EAAA9hC,GACAhE,KAAA8xC,cAAAhM,EAAA9hC,GACAhE,KAAAw1B,UACAsQ,EAAAliC,KAAA,sBAAA5D,KAAAw1B,SAAAuc,WAAA,UAEA/xC,KAAAgyC,sBAAAlM,EAAA,cACA9lC,KAAAiyC,sBAAAnM,EAAA,kBAAAt4B,GACAxN,KAAAkyC,eAAApM,EAAAt4B,GACAxN,KAAAw1B,UACAsQ,EAAAliC,KAAA,UAEA5D,KAAAgyC,sBAAAlM,EAAA,WACA9lC,KAAAiyC,sBAAAnM,EAAA,eAAAt4B,GAEAs4B,EAAAliC,KAAA,UAEAkiC,EAAAxxB,KAAA,KAMAu9B,gBAAA,SAAA/L,EAAA9hC,GACAA,EAAAmuC,kBAGArM,EAAAliC,KACA,iCAAAI,EAAAouC,UAAA,QAAA,yBACA,kDACA,0DAOAN,cAAA,SAAAhM,EAAA9hC,GACA,IAEAkpC,EAFA3tC,EAAAyE,EAAAzE,OAAAS,KAAAT,MACAJ,EAAA6E,EAAA7E,QAAAa,KAAAb,OACAkzC,EAAA,gBAAAryC,KAAAT,MAAA,IAAAS,KAAAb,OAAA,KACAkV,EAAA5W,EAAAuR,OAAAqF,oBAEArQ,EAAAquC,QACAA,EAAA,YACAruC,EAAAquC,QAAAhpC,EAAA,IACArF,EAAAquC,QAAA/oC,EAAA,IACAtF,EAAAquC,QAAA9yC,MAAA,IACAyE,EAAAquC,QAAAlzC,OAAA,KAGAa,KAAA4xC,4BACA1E,EAAAltC,KAAA2pC,kBACA0I,EAAA,YACA90C,GAAA2vC,EAAA,GAAAA,EAAA,GAAA74B,GAAA,IACA9W,GAAA2vC,EAAA,GAAAA,EAAA,GAAA74B,GAAA,IACA9W,EAAAyC,KAAAT,MAAA2tC,EAAA,GAAA74B,GAAA,IACA9W,EAAAyC,KAAAb,OAAA+tC,EAAA,GAAA74B,GAAA,MAIAyxB,EAAAliC,KACA,QACA,sCACA,8CACA,iBACA,UAAArE,EAAA,KACA,WAAAJ,EAAA,KACAkzC,EACA,0BACA,gCAAA50C,EAAAC,QAAA,YACA,WACAsC,KAAAsyC,2BACAtyC,KAAAuyC,6BACAvyC,KAAAwyC,wBAAAxuC,GACA,cAIAwuC,wBAAA,SAAAxuC,GACA,IAAAwxB,EAAAx1B,KAAAw1B,SACA,OAAAA,GACAA,EAAAuc,WAAA,YAAAt0C,EAAAuR,OAAAghB,QACA,iBAAAwF,EAAAuc,WAAA,QACA/xC,KAAAw1B,SAAAid,cAAAzuC,EAAAwJ,SACA,iBAEA,IAOA+kC,2BAAA,WACA,IAAAt2B,EAAAjc,KACA8lC,GAAA,aAAA,WAAA1xB,IAAA,SAAA1Q,GACA,IAAAJ,EAAA2Y,EAAAvY,EAAA,SACA,GAAAJ,GAAAA,EAAAojC,OAAA,CACA,IAAAgM,EAAAz2B,EAAAvY,EAAA,OAAAwpC,EAAAjxB,EAAA0tB,kBACA1kC,GACA1F,MAAA0c,EAAA1c,OAAAmzC,EAAAxF,EAAA,GAAA,GACA/tC,OAAA8c,EAAA9c,QAAAuzC,EAAAxF,EAAA,GAAA,IAEA,OAAA5pC,EAAAuiC,MACA5gC,GACAihC,oBAAAwM,EAAAj1C,EAAA2F,KAAA+Q,YAAA+4B,GAAA,QAIA,OAAApH,EAAAxxB,KAAA,KAUAg+B,yBAAA,WACA,IAAA7qC,EAAAgM,EACAxG,EAAA0lC,EAAAC,EAAAC,EAAAC,EAAA5uC,EAAAC,EADA2hC,EAAA,GAAAiN,KAEA3xC,EAAA3D,EAAA2D,UAAAgE,EAAApF,KAAA0E,SAEA,IAAAR,EAAA,EAAAC,EAAAiB,EAAA3B,OAAAS,EAAAC,EAAAD,IAGA,GAFAuD,EAAArC,EAAAlB,GACAuP,EAAAhM,EAAAgM,YACA,IAAAhM,EAAA5B,KAAA1C,QAAA,UAAA4vC,EAAAt/B,IAAArS,EAAAqS,KAGAs/B,EAAAt/B,IAAA,EACAhM,EAAA2W,QAIA,IAAAw0B,KADA3lC,EAAAxF,EAAA2W,OAGA,IAAA00B,KADAH,EAAA1lC,EAAA2lC,GAEAC,EAAAF,EAAAG,GACAr/B,EAAAo/B,EAAAp/B,YACAs/B,EAAAt/B,IAAArS,EAAAqS,KACAs/B,EAAAt/B,IAAA,GAMA,IAAA,IAAAkF,KAAAo6B,EACAjN,IACA,qBACA,uBAAAntB,EAAA,OACA,mBAAAvX,EAAAuX,GAAA,QACA,WACArE,KAAA,IAaA,OAVAwxB,IACAA,GACA,4BACA,cACAA,EACA,MACA,cACAxxB,KAAA,KAGAwxB,GAMAoM,eAAA,SAAApM,EAAAt4B,GACA,IAAAw3B,EAAA9gC,EAAAC,EAAAiB,EAAApF,KAAA0E,SACA,IAAAR,EAAA,EAAAC,EAAAiB,EAAA3B,OAAAS,EAAAC,EAAAD,KACA8gC,EAAA5/B,EAAAlB,IACAqtC,mBAGAvxC,KAAAgzC,cAAAlN,EAAAd,EAAAx3B,IAOAwlC,cAAA,SAAAlN,EAAAd,EAAAx3B,GACAs4B,EAAAliC,KAAAohC,EAAAa,MAAAr4B,KAMAykC,sBAAA,SAAAnM,EAAAj/B,EAAA2G,GACAxN,KAAA6G,KAAA7G,KAAA6G,GAAA0qC,mBAAAvxC,KAAA6G,GAAAg/B,OACAC,EAAAliC,KAAA5D,KAAA6G,GAAAg/B,MAAAr4B,KAOAwkC,sBAAA,SAAAlM,EAAAj/B,GACA,IAAAD,EAAA5G,KAAA6G,EAAA,SAAAqmC,EAAAltC,KAAA2pC,kBAAAsJ,EAAAjzC,KAAAT,MACA2zC,EAAAlzC,KAAAb,OACA,GAAAyH,EAGA,GAAAA,EAAA8/B,OAAA,CACA,IAAAQ,EAAAtgC,EAAAsgC,OAAAwH,EAAAjxC,EAAA2F,KAAAsH,gBAAAwiC,GAAAiG,EAAAnzC,KAAA6G,EAAA,OACAq/B,EAAAiN,EAAA11C,EAAA2F,KAAA+Q,YAAAu6B,GAAA,GACA5I,EAAAliC,KACA,oBAAAsiC,EAAA,cAAA+M,EAAA,EAAA,IAAAC,EAAA,EAAA,KACA,OAAAtsC,EAAA0+B,QAAA2N,EAAA,EACA,QAAArsC,EAAA2+B,QAAA2N,EAAA,EAAA,KACA,UACA,aAAAhM,GAAA,cAAAA,EACAtgC,EAAAK,OAAA1H,MACA0zC,EACA,aACA,aAAA/L,GAAA,cAAAA,EACAtgC,EAAAK,OAAA9H,OACA+zC,EACA,sBAAAtsC,EAAAoa,GAAA,KACA,mBAIA8kB,EAAAliC,KACA,gDACA,SAAAgD,EAAA,IACA,eAaAwsC,WAAA,SAAAnuC,GACA,IAAAA,EACA,OAAAjF,KAEA,IACAkE,EAAAuD,EAAA4rC,EADAC,EAAAtzC,KAAAotC,cAEA,GAAAnoC,IAAAquC,GAAA,oBAAAruC,EAAAY,KAEA,IADAwtC,EAAAC,EAAA5uC,SACAR,EAAAmvC,EAAA5vC,OAAAS,KACAuD,EAAA4rC,EAAAnvC,GACAoE,EAAAtI,KAAA0E,SAAA+C,GACAzH,KAAA0E,SAAA6uC,QAAA9rC,QAIAa,EAAAtI,KAAA0E,SAAAO,GACAjF,KAAA0E,SAAA6uC,QAAAtuC,GAGA,OADAjF,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAUAwzC,aAAA,SAAAvuC,GACA,IAAAA,EACA,OAAAjF,KAEA,IACAkE,EAAAuD,EAAA4rC,EADAC,EAAAtzC,KAAAotC,cAEA,GAAAnoC,IAAAquC,GAAA,oBAAAruC,EAAAY,KAEA,IADAwtC,EAAAC,EAAA5uC,SACAR,EAAA,EAAAA,EAAAmvC,EAAA5vC,OAAAS,IACAuD,EAAA4rC,EAAAnvC,GACAoE,EAAAtI,KAAA0E,SAAA+C,GACAzH,KAAA0E,SAAAd,KAAA6D,QAIAa,EAAAtI,KAAA0E,SAAAO,GACAjF,KAAA0E,SAAAd,KAAAqB,GAGA,OADAjF,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAcAyzC,cAAA,SAAAxuC,EAAAyuC,GACA,IAAAzuC,EACA,OAAAjF,KAEA,IACAkE,EAAAuD,EAAAc,EAAAorC,EAAAN,EADAC,EAAAtzC,KAAAotC,cACAwG,EAAA,EAEA,GAAA3uC,IAAAquC,GAAA,oBAAAruC,EAAAY,KAEA,IADAwtC,EAAAC,EAAA5uC,SACAR,EAAA,EAAAA,EAAAmvC,EAAA5vC,OAAAS,IACAuD,EAAA4rC,EAAAnvC,IACAqE,EAAAvI,KAAA0E,SAAAvB,QAAAsE,IACA,EAAAmsC,IACAD,EAAAprC,EAAA,EACAD,EAAAtI,KAAA0E,SAAA+C,GACAzH,KAAA0E,SAAAW,OAAAsuC,EAAA,EAAAlsC,IAEAmsC,SAKA,KADArrC,EAAAvI,KAAA0E,SAAAvB,QAAA8B,MAGA0uC,EAAA3zC,KAAA6zC,mBAAA5uC,EAAAsD,EAAAmrC,GACAprC,EAAAtI,KAAA0E,SAAAO,GACAjF,KAAA0E,SAAAW,OAAAsuC,EAAA,EAAA1uC,IAIA,OADAjF,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAMA6zC,mBAAA,SAAA5uC,EAAAsD,EAAAmrC,GACA,IAAAC,EAAAzvC,EAEA,GAAAwvC,EAIA,IAHAC,EAAAprC,EAGArE,EAAAqE,EAAA,EAAArE,GAAA,IAAAA,EAAA,CAEA,IAAA4vC,EAAA7uC,EAAA8uC,qBAAA/zC,KAAA0E,SAAAR,KACAe,EAAA+uC,wBAAAh0C,KAAA0E,SAAAR,KACAlE,KAAA0E,SAAAR,GAAA8vC,wBAAA/uC,GAEA,GAAA6uC,EAAA,CACAH,EAAAzvC,EACA,YAKAyvC,EAAAprC,EAAA,EAGA,OAAAorC,GAcAM,aAAA,SAAAhvC,EAAAyuC,GACA,IAAAzuC,EACA,OAAAjF,KAEA,IACAkE,EAAAuD,EAAAc,EAAAorC,EAAAN,EADAC,EAAAtzC,KAAAotC,cACAwG,EAAA,EAEA,GAAA3uC,IAAAquC,GAAA,oBAAAruC,EAAAY,KAEA,IADAwtC,EAAAC,EAAA5uC,SACAR,EAAAmvC,EAAA5vC,OAAAS,KACAuD,EAAA4rC,EAAAnvC,IACAqE,EAAAvI,KAAA0E,SAAAvB,QAAAsE,IACAzH,KAAA0E,SAAAjB,OAAA,EAAAmwC,IACAD,EAAAprC,EAAA,EACAD,EAAAtI,KAAA0E,SAAA+C,GACAzH,KAAA0E,SAAAW,OAAAsuC,EAAA,EAAAlsC,IAEAmsC,SAIArrC,EAAAvI,KAAA0E,SAAAvB,QAAA8B,MACAjF,KAAA0E,SAAAjB,OAAA,IAEAkwC,EAAA3zC,KAAAk0C,mBAAAjvC,EAAAsD,EAAAmrC,GACAprC,EAAAtI,KAAA0E,SAAAO,GACAjF,KAAA0E,SAAAW,OAAAsuC,EAAA,EAAA1uC,IAIA,OADAjF,KAAA8E,mBAAA9E,KAAA+E,mBACA/E,MAMAk0C,mBAAA,SAAAjvC,EAAAsD,EAAAmrC,GACA,IAAAC,EAAAzvC,EAAAC,EAEA,GAAAuvC,EAIA,IAHAC,EAAAprC,EAGArE,EAAAqE,EAAA,EAAApE,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,IAAAD,EAAA,CAEA,IAAA4vC,EAAA7uC,EAAA8uC,qBAAA/zC,KAAA0E,SAAAR,KACAe,EAAA+uC,wBAAAh0C,KAAA0E,SAAAR,KACAlE,KAAA0E,SAAAR,GAAA8vC,wBAAA/uC,GAEA,GAAA6uC,EAAA,CACAH,EAAAzvC,EACA,YAKAyvC,EAAAprC,EAAA,EAGA,OAAAorC,GAUA7jC,OAAA,SAAA7K,EAAAC,GAGA,OAFAoD,EAAAtI,KAAA0E,SAAAO,GACAjF,KAAA0E,SAAAW,OAAAH,EAAA,EAAAD,GACAjF,KAAA8E,mBAAA9E,KAAA+E,oBAQAovC,QAAA,WAsBA,OApBAn0C,KAAAyuC,cACAhxC,EAAA2F,KAAAuiB,gBAAA3lB,KAAAyuC,aACAzuC,KAAAyuC,YAAA,GAEAzuC,KAAAyF,cAAA,SAAAR,GACAA,EAAAkvC,SAAAlvC,EAAAkvC,YAEAn0C,KAAA0E,YACA1E,KAAAopC,iBAAAppC,KAAAopC,gBAAA+K,SACAn0C,KAAAopC,gBAAA+K,UAEAn0C,KAAAopC,gBAAA,KACAppC,KAAAspC,cAAAtpC,KAAAspC,aAAA6K,SACAn0C,KAAAspC,aAAA6K,UAEAn0C,KAAAspC,aAAA,KACAtpC,KAAAquC,gBAAA,KACAruC,KAAAkrC,iBAAA,KACAztC,EAAA2F,KAAAsf,iBAAA1iB,KAAAirC,eACAjrC,KAAAirC,mBAAAhrB,EACAjgB,MAOAkP,SAAA,WACA,MAAA,oBAAAlP,KAAAoG,aAAA,iBACApG,KAAA0E,SAAAjB,OAAA,SAIAwW,EAAAxc,EAAAkrC,aAAA15B,UAAAxR,EAAA6G,YACA2V,EAAAxc,EAAAkrC,aAAA15B,UAAAxR,EAAAgH,YACAwV,EAAAxc,EAAAkrC,aAAA15B,UAAAxR,EAAA22C,iBAEAn6B,EAAAxc,EAAAkrC,cAOA0L,WAAA,yCAWAC,SAAA,SAAAv4B,GACA,IAAAmD,EAAAjP,IAEA,IAAAiP,IAAAA,EAAAjgB,WACA,OAAA,KAGA,IAAAD,EAAAkgB,EAAAjgB,WAAA,MACA,IAAAD,EACA,OAAA,KAGA,OAAA+c,GAEA,IAAA,cACA,YAAA,IAAA/c,EAAAu1C,YAEA,QACA,OAAA,SAoBA92C,EAAAkrC,aAAA15B,UAAAulC,OAAA/2C,EAAAkrC,aAAA15B,UAAA02B,SAEAloC,EAAAoD,eACApD,EAAAkrC,aAAA15B,UAAAwlC,gBAAA,WACA,IAAAlyB,EAAAD,EAAAtiB,KAAAirC,eACA,OAAA1oB,GAAAA,EAAAkyB,mBAEAh3C,EAAAkrC,aAAA15B,UAAAylC,iBAAA,SAAA9tB,GACA,IAAArE,EAAAD,EAAAtiB,KAAAirC,eACA,OAAA1oB,GAAAA,EAAAmyB,iBAAA9tB,MAr1DA,GAg2DAnpB,EAAAk3C,UAAAl3C,EAAA2F,KAAA+Y,aAOAmK,MAAA,eAOA/mB,MAAA,EASA8oC,OAAA,KAOAuM,cAAA,QAOAC,eAAA,QAOAC,iBAAA,GAOAC,gBAAA,KAQAC,UAAA,SAAAhxC,GAEA,OADAhE,KAAAqoC,OAAA,IAAA5qC,EAAAsqC,OAAA/jC,GACAhE,MAOA6sC,gBAAA,WACA,IAAA7tC,EAAAgB,KAAAlB,OAAAssC,WACApsC,EAAAi2C,YAAAj1C,KAAAsmB,MACAtnB,EAAAk2C,UAAAl1C,KAAAT,MACAP,EAAAm2C,QAAAn1C,KAAA40C,cACA51C,EAAAo2C,WAAAp1C,KAAA80C,iBACA91C,EAAAq2C,SAAAr1C,KAAA60C,eACAp3C,EAAAkrC,aAAA2L,SAAA,gBACAt1C,EAAAu1C,YAAAv0C,KAAA+0C,sBASAO,kBAAA,SAAAt2C,GACA,IAAAkK,EAAAlJ,KAAAlB,OAAA6qC,kBACA3qC,EAAA6Q,OACA7Q,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAOAqsC,WAAA,WACA,GAAAv1C,KAAAqoC,OAAA,CAIA,IAAAvpC,EAAAkB,KAAAlB,OACAupC,EAAAroC,KAAAqoC,OACArpC,EAAAF,EAAAssC,WACAntB,EAAAnf,EAAAkuC,UACAluC,GAAAA,EAAA+rC,qBACA5sB,GAAAxgB,EAAAqE,kBAGA9C,EAAAw2C,YAAAnN,EAAA/hB,MACAtnB,EAAAy2C,WAAApN,EAAAL,KAAA/pB,EACAjf,EAAA02C,cAAArN,EAAA/C,QAAArnB,EACAjf,EAAA22C,cAAAtN,EAAA9C,QAAAtnB,IAGA23B,gBAAA,WACA,IAAAtvB,EAAA,IAAA7oB,EAAAuoB,MAAAhmB,KAAAsmB,OACA,OAAAA,EAAAsL,WAAA,KAAA5xB,KAAAqoC,QAOAwN,aAAA,WACA,IAAA72C,EAAAgB,KAAAlB,OAAAssC,WAEApsC,EAAAw2C,YAAA,GACAx2C,EAAAy2C,WAAAz2C,EAAA02C,cAAA12C,EAAA22C,cAAA,KAWAl4C,EAAAq4C,YAAAr4C,EAAA2F,KAAA+Y,YAAA1e,EAAAk3C,WAOAoB,SAAA,GAOA15B,WAAA,SAAAvd,GACAkB,KAAAlB,OAAAA,EACAkB,KAAAg2C,YAOAC,aAAA,SAAAj3C,EAAAk3C,EAAAC,GACA,IAAAC,EAAAF,EAAApf,aAAAqf,GAEA,OADAn3C,EAAAq3C,iBAAAH,EAAA7sC,EAAA6sC,EAAA5sC,EAAA8sC,EAAA/sC,EAAA+sC,EAAA9sC,GACA8sC,GAOAE,YAAA,SAAAC,EAAAvyC,GACAhE,KAAAlB,OAAA03C,aAAAxyC,EAAA6c,KAGA7gB,KAAAy2C,mBAAAF,GAGAv2C,KAAA02C,oBAAAH,GACAv2C,KAAA22C,YAOAC,YAAA,SAAAL,EAAAvyC,GACA,GAAAhE,KAAAlB,OAAA03C,aAAAxyC,EAAA6c,IAGA7gB,KAAA02C,oBAAAH,IAAAv2C,KAAAg2C,QAAAvyC,OAAA,EACA,GAAAzD,KAAA41C,kBAGA51C,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAA22C,cAEA,CACA,IAAA3sC,EAAAhK,KAAAg2C,QAAAvyC,EAAAuG,EAAAvG,OAAAzE,EAAAgB,KAAAlB,OAAAssC,WAEAprC,KAAAs1C,kBAAAt2C,GACAgB,KAAA62C,SACA73C,EAAA0R,YACA1R,EAAA8Q,OAAA9P,KAAA62C,OAAAxtC,EAAArJ,KAAA62C,OAAAvtC,IAEAtJ,KAAA62C,OAAA72C,KAAAi2C,aAAAj3C,EAAAgL,EAAAvG,EAAA,GAAAuG,EAAAvG,EAAA,IAAA,GACAzE,EAAAorB,SACAprB,EAAAgR,YAQA8mC,UAAA,SAAA9yC,GACA,OAAAhE,KAAAlB,OAAA03C,aAAAxyC,EAAA6c,KAGA7gB,KAAA62C,YAAA52B,EACAjgB,KAAA+2C,uBACA,IAOAN,mBAAA,SAAAF,GAEA,IAAA3sC,EAAA,IAAAnM,EAAA2L,MAAAmtC,EAAAltC,EAAAktC,EAAAjtC,GAEAtJ,KAAAg3C,SACAh3C,KAAAi3C,UAAArtC,GACA5J,KAAAlB,OAAAssC,WAAAt7B,OAAAlG,EAAAP,EAAAO,EAAAN,IAOA2tC,UAAA,SAAAluC,GACA,QAAA/I,KAAAg2C,QAAAvyC,OAAA,GAAAsF,EAAAwtB,GAAAv2B,KAAAg2C,QAAAh2C,KAAAg2C,QAAAvyC,OAAA,MAGAzD,KAAAg2C,QAAApyC,KAAAmF,GACA,KAOAiuC,OAAA,WACAh3C,KAAAg2C,WACAh2C,KAAA6sC,kBACA7sC,KAAAu1C,cAOAmB,oBAAA,SAAAH,GACA,IAAAW,EAAA,IAAAz5C,EAAA2L,MAAAmtC,EAAAltC,EAAAktC,EAAAjtC,GACA,OAAAtJ,KAAAi3C,UAAAC,IAOAP,QAAA,WACA,IAAAzyC,EAAAC,EAAAnF,EAAAgB,KAAAlB,OAAAssC,WACA8K,EAAAl2C,KAAAg2C,QAAA,GACAG,EAAAn2C,KAAAg2C,QAAA,GAQA,GANAh2C,KAAAs1C,kBAAAt2C,GACAA,EAAA0R,YAKA,IAAA1Q,KAAAg2C,QAAAvyC,QAAAyyC,EAAA7sC,IAAA8sC,EAAA9sC,GAAA6sC,EAAA5sC,IAAA6sC,EAAA7sC,EAAA,CACA,IAAA/J,EAAAS,KAAAT,MAAA,IACA22C,EAAA,IAAAz4C,EAAA2L,MAAA8sC,EAAA7sC,EAAA6sC,EAAA5sC,GACA6sC,EAAA,IAAA14C,EAAA2L,MAAA+sC,EAAA9sC,EAAA8sC,EAAA7sC,GACA4sC,EAAA7sC,GAAA9J,EACA42C,EAAA9sC,GAAA9J,EAIA,IAFAP,EAAA8Q,OAAAomC,EAAA7sC,EAAA6sC,EAAA5sC,GAEApF,EAAA,EAAAC,EAAAnE,KAAAg2C,QAAAvyC,OAAAS,EAAAC,EAAAD,IAGAlE,KAAAi2C,aAAAj3C,EAAAk3C,EAAAC,GACAD,EAAAl2C,KAAAg2C,QAAA9xC,GACAiyC,EAAAn2C,KAAAg2C,QAAA9xC,EAAA,GAKAlF,EAAAkxC,OAAAgG,EAAA7sC,EAAA6sC,EAAA5sC,GACAtK,EAAAorB,SACAprB,EAAAgR,WAQAmnC,uBAAA,SAAAntC,GACA,IAAA9F,EAAAuK,KAAAlP,EAAAS,KAAAT,MAAA,IACA22C,EAAA,IAAAz4C,EAAA2L,MAAAY,EAAA,GAAAX,EAAAW,EAAA,GAAAV,GACA6sC,EAAA,IAAA14C,EAAA2L,MAAAY,EAAA,GAAAX,EAAAW,EAAA,GAAAV,GACAnF,EAAA6F,EAAAvG,OAAA2zC,EAAA,EAAAC,EAAA,EAAAC,EAAAnzC,EAAA,EAOA,IALAmzC,IACAF,EAAAptC,EAAA,GAAAX,EAAA8sC,EAAA9sC,GAAA,EAAAW,EAAA,GAAAX,IAAA8sC,EAAA9sC,EAAA,EAAA,EACAguC,EAAArtC,EAAA,GAAAV,EAAA6sC,EAAA7sC,GAAA,EAAAU,EAAA,GAAAV,IAAA6sC,EAAA7sC,EAAA,EAAA,GAEAmF,EAAA7K,KAAA,KAAAsyC,EAAA7sC,EAAA+tC,EAAA73C,EAAA,IAAA22C,EAAA5sC,EAAA+tC,EAAA93C,EAAA,KACA2E,EAAA,EAAAA,EAAAC,EAAAD,IAAA,CACA,IAAAgyC,EAAA3f,GAAA4f,GAAA,CACA,IAAAC,EAAAF,EAAApf,aAAAqf,GAIA1nC,EAAA7K,KAAA,KAAAsyC,EAAA7sC,EAAA,IAAA6sC,EAAA5sC,EAAA,IAAA8sC,EAAA/sC,EAAA,IAAA+sC,EAAA9sC,EAAA,KAEA4sC,EAAAlsC,EAAA9F,GACAA,EAAA,EAAA8F,EAAAvG,SACA0yC,EAAAnsC,EAAA9F,EAAA,IAQA,OALAozC,IACAF,EAAAlB,EAAA7sC,EAAAW,EAAA9F,EAAA,GAAAmF,EAAA,EAAA6sC,EAAA7sC,IAAAW,EAAA9F,EAAA,GAAAmF,EAAA,GAAA,EACAguC,EAAAnB,EAAA5sC,EAAAU,EAAA9F,EAAA,GAAAoF,EAAA,EAAA4sC,EAAA5sC,IAAAU,EAAA9F,EAAA,GAAAoF,EAAA,GAAA,GAEAmF,EAAA7K,KAAA,KAAAsyC,EAAA7sC,EAAA+tC,EAAA73C,EAAA,IAAA22C,EAAA5sC,EAAA+tC,EAAA93C,GACAkP,GAQA8oC,WAAA,SAAAC,GACA,IAAA/oC,EAAA,IAAAhR,EAAAg6C,KAAAD,GACAl0C,KAAA,KACA8mB,OAAApqB,KAAAsmB,MACAoxB,YAAA13C,KAAAT,MACAq1C,cAAA50C,KAAA40C,cACAE,iBAAA90C,KAAA80C,iBACAD,eAAA70C,KAAA60C,eACAE,gBAAA/0C,KAAA+0C,kBAOA,OALA/0C,KAAAqoC,SACAroC,KAAAqoC,OAAAJ,cAAA,EACAx5B,EAAAumC,UAAAh1C,KAAAqoC,SAGA55B,GAMAkpC,eAAA,SAAA3tC,EAAA4tC,GACA,GAAA5tC,EAAAvG,QAAA,EACA,OAAAuG,EAEA,IACA9F,EADA+Z,EAAAje,KAAAlB,OAAAkuC,UAAA6K,EAAA9vC,KAAAlL,IAAA+6C,EAAA35B,EAAA,GACAnL,EAAA9I,EAAAvG,OAAA,EAAAq0C,EAAA9tC,EAAA,GAAA+tC,GAAAD,GAEA,IAAA5zC,EAAA,EAAAA,EAAA4O,EAAA5O,IACA6D,KAAAlL,IAAAi7C,EAAAzuC,EAAAW,EAAA9F,GAAAmF,EAAA,GAAAtB,KAAAlL,IAAAi7C,EAAAxuC,EAAAU,EAAA9F,GAAAoF,EAAA,IACAuuC,IACAC,EAAA9tC,EAAA9F,GACA6zC,EAAAn0C,KAAAk0C,IAMA,OAHA,IAAAC,EAAAt0C,QACAs0C,EAAAn0C,KAAA,IAAAnG,EAAA2L,MAAA2uC,EAAA,GAAA1uC,EAAA0uC,EAAA,GAAAzuC,IAEAyuC,GAQAhB,oBAAA,WACA,IAAA/3C,EAAAgB,KAAAlB,OAAAssC,WACApsC,EAAAmxC,YACAnwC,KAAA+1C,WACA/1C,KAAAg2C,QAAAh2C,KAAA23C,eAAA33C,KAAAg2C,QAAAh2C,KAAA+1C,WAEA,IAAAyB,EAAAx3C,KAAAm3C,uBAAAn3C,KAAAg2C,SAAA1hC,KAAA,IACA,GAAA,0BAAAkjC,EAAA,CASA,IAAA/oC,EAAAzO,KAAAu3C,WAAAC,GACAx3C,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAAlB,OAAA6F,IAAA8J,GACAzO,KAAAlB,OAAAiG,mBACA0J,EAAA6+B,YACAttC,KAAA61C,eAIA71C,KAAAlB,OAAAiF,KAAA,gBAAA0K,KAAAA,SAbAzO,KAAAlB,OAAAiG,sBAuBAtH,EAAAu6C,YAAAv6C,EAAA2F,KAAA+Y,YAAA1e,EAAAk3C,WAOAp1C,MAAA,GAOA8c,WAAA,SAAAvd,GACAkB,KAAAlB,OAAAA,EACAkB,KAAAgK,WAOAiuC,QAAA,SAAA1B,GACA,IAAAxtC,EAAA/I,KAAAk4C,SAAA3B,GACAv3C,EAAAgB,KAAAlB,OAAAssC,WACAprC,KAAAs1C,kBAAAt2C,GACAgB,KAAAm4C,IAAAn5C,EAAA+J,GACA/J,EAAAgR,WAGAmoC,IAAA,SAAAn5C,EAAA+J,GACA/J,EAAAoxC,UAAArnC,EAAAzF,KACAtE,EAAA0R,YACA1R,EAAAo5C,IAAArvC,EAAAM,EAAAN,EAAAO,EAAAP,EAAAsvC,OAAA,EAAA,EAAAtwC,KAAAC,IAAA,GACAhJ,EAAAmxC,YACAnxC,EAAAsE,QAMAgzC,YAAA,SAAAC,GACAv2C,KAAAgK,OAAAvG,OAAA,EACAzD,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAAu1C,aACAv1C,KAAAi4C,QAAA1B,IAOAI,QAAA,WACA,IAAAzyC,EAAAC,EAAAnF,EAAAgB,KAAAlB,OAAAssC,WACAphC,EAAAhK,KAAAgK,OAEA,IADAhK,KAAAs1C,kBAAAt2C,GACAkF,EAAA,EAAAC,EAAA6F,EAAAvG,OAAAS,EAAAC,EAAAD,IACAlE,KAAAm4C,IAAAn5C,EAAAgL,EAAA9F,IAEAlF,EAAAgR,WAOA4mC,YAAA,SAAAL,GACAv2C,KAAA41C,mBACA51C,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAAk4C,SAAA3B,GACAv2C,KAAA22C,WAGA32C,KAAAi4C,QAAA1B,IAOAO,UAAA,WACA,IAAA5yC,EAAAC,EAAAm0C,EAAAt4C,KAAAlB,OAAAgG,kBACA9E,KAAAlB,OAAAgG,mBAAA,EAEA,IAAAyzC,KAEA,IAAAr0C,EAAA,EAAAC,EAAAnE,KAAAgK,OAAAvG,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAA6E,EAAA/I,KAAAgK,OAAA9F,GACAs0C,EAAA,IAAA/6C,EAAAg7C,QACAJ,OAAAtvC,EAAAsvC,OACA7tC,KAAAzB,EAAAM,EACAoB,IAAA1B,EAAAO,EACAovC,QAAA,SACAC,QAAA,SACAr1C,KAAAyF,EAAAzF,OAGAtD,KAAAqoC,QAAAmQ,EAAAxD,UAAAh1C,KAAAqoC,QAEAkQ,EAAA30C,KAAA40C,GAEA,IAAAnL,EAAA,IAAA5vC,EAAAkR,MAAA4pC,GACAlL,EAAAvuC,OAAAkB,KAAAlB,OAEAkB,KAAAlB,OAAA6F,IAAA0oC,GACArtC,KAAAlB,OAAAiF,KAAA,gBAAA0K,KAAA4+B,IAEArtC,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAA61C,eACA71C,KAAAlB,OAAAgG,kBAAAwzC,EACAt4C,KAAAlB,OAAAiG,oBAOAmzC,SAAA,SAAA3B,GACA,IAAAW,EAAA,IAAAz5C,EAAA2L,MAAAmtC,EAAAltC,EAAAktC,EAAAjtC,GAEAsvC,EAAAn7C,EAAA2F,KAAAoF,aACAT,KAAA7K,IAAA,EAAA8C,KAAAT,MAAA,IAAAS,KAAAT,MAAA,IAAA,EAEAs5C,EAAA,IAAAp7C,EAAAuoB,MAAAhmB,KAAAsmB,OACAqL,SAAAl0B,EAAA2F,KAAAoF,aAAA,EAAA,KAAA,KACAqpB,SAOA,OALAqlB,EAAAmB,OAAAO,EACA1B,EAAA5zC,KAAAu1C,EAEA74C,KAAAgK,OAAApG,KAAAszC,GAEAA,KASAz5C,EAAAq7C,WAAAr7C,EAAA2F,KAAA+Y,YAAA1e,EAAAk3C,WAOAp1C,MAAA,GAOAw5C,QAAA,GAOAC,SAAA,EAOAC,iBAAA,EAOAC,eAAA,EAOAC,qBAAA,EAOA98B,WAAA,SAAAvd,GACAkB,KAAAlB,OAAAA,EACAkB,KAAAo5C,gBAOA9C,YAAA,SAAAC,GACAv2C,KAAAo5C,YAAA31C,OAAA,EACAzD,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAAu1C,aAEAv1C,KAAAq5C,cAAA9C,GACAv2C,KAAA+vC,OAAA/vC,KAAAs5C,mBAOA1C,YAAA,SAAAL,GACAv2C,KAAAq5C,cAAA9C,GACAv2C,KAAA+vC,OAAA/vC,KAAAs5C,mBAMAxC,UAAA,WACA,IAAAwB,EAAAt4C,KAAAlB,OAAAgG,kBACA9E,KAAAlB,OAAAgG,mBAAA,EAIA,IAFA,IAAAy0C,KAEAr1C,EAAA,EAAAs1C,EAAAx5C,KAAAo5C,YAAA31C,OAAAS,EAAAs1C,EAAAt1C,IAGA,IAFA,IAAAu1C,EAAAz5C,KAAAo5C,YAAAl1C,GAEAyU,EAAA,EAAAC,EAAA6gC,EAAAh2C,OAAAkV,EAAAC,EAAAD,IAAA,CAEA,IAAA+gC,EAAA,IAAAj8C,EAAAk8C,MACAp6C,MAAAk6C,EAAA9gC,GAAApZ,MACAJ,OAAAs6C,EAAA9gC,GAAApZ,MACAiL,KAAAivC,EAAA9gC,GAAAtP,EAAA,EACAoB,IAAAgvC,EAAA9gC,GAAArP,EAAA,EACAovC,QAAA,SACAC,QAAA,SACAr1C,KAAAtD,KAAAsmB,QAEAizB,EAAA31C,KAAA81C,GAIA15C,KAAAm5C,sBACAI,EAAAv5C,KAAA45C,mBAAAL,IAGA,IAAAlM,EAAA,IAAA5vC,EAAAkR,MAAA4qC,GACAv5C,KAAAqoC,QAAAgF,EAAA2H,UAAAh1C,KAAAqoC,QACAroC,KAAAlB,OAAA6F,IAAA0oC,GACArtC,KAAAlB,OAAAiF,KAAA,gBAAA0K,KAAA4+B,IAEArtC,KAAAlB,OAAAkvC,aAAAhuC,KAAAlB,OAAAssC,YACAprC,KAAA61C,eACA71C,KAAAlB,OAAAgG,kBAAAwzC,EACAt4C,KAAAlB,OAAAiG,oBAOA60C,mBAAA,SAAAL,GAGA,IAAA5xC,EAAAzD,EAAAC,EAAA01C,KAEA,IAAA31C,EAAA,EAAAC,EAAAo1C,EAAA91C,OAAAS,EAAAC,EAAAD,IACAyD,EAAA4xC,EAAAr1C,GAAAsG,KAAA,GAAA+uC,EAAAr1C,GAAAuG,IACAovC,EAAAlyC,KACAkyC,EAAAlyC,GAAA4xC,EAAAr1C,IAGA,IAAA41C,KACA,IAAAnyC,KAAAkyC,EACAC,EAAAl2C,KAAAi2C,EAAAlyC,IAGA,OAAAmyC,GAMA/J,OAAA,SAAA0J,GACA,IAAAv1C,EAAAC,EAAAnF,EAAAgB,KAAAlB,OAAAssC,WAKA,IAJApsC,EAAAoxC,UAAApwC,KAAAsmB,MAEAtmB,KAAAs1C,kBAAAt2C,GAEAkF,EAAA,EAAAC,EAAAs1C,EAAAh2C,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAA6E,EAAA0wC,EAAAv1C,QACA,IAAA6E,EAAA2U,UACA1e,EAAA+6C,YAAAhxC,EAAA2U,SAEA1e,EAAAg7C,SAAAjxC,EAAAM,EAAAN,EAAAO,EAAAP,EAAAxJ,MAAAwJ,EAAAxJ,OAEAP,EAAAgR,WAMA2mC,QAAA,WACA,IAAAzyC,EAAAs1C,EAAAx6C,EAAAgB,KAAAlB,OAAAssC,WAKA,IAJApsC,EAAAoxC,UAAApwC,KAAAsmB,MAEAtmB,KAAAs1C,kBAAAt2C,GAEAkF,EAAA,EAAAs1C,EAAAx5C,KAAAo5C,YAAA31C,OAAAS,EAAAs1C,EAAAt1C,IACAlE,KAAA+vC,OAAA/vC,KAAAo5C,YAAAl1C,IAEAlF,EAAAgR,WAMAqpC,cAAA,SAAA9C,GACAv2C,KAAAs5C,oBAEA,IAAAjwC,EAAAC,EAAA/J,EAAA2E,EAAAm0C,EAAAr4C,KAAAT,MAAA,EAEA,IAAA2E,EAAA,EAAAA,EAAAlE,KAAA+4C,QAAA70C,IAAA,CAEAmF,EAAA5L,EAAA2F,KAAAoF,aAAA+tC,EAAAltC,EAAAgvC,EAAA9B,EAAAltC,EAAAgvC,GACA/uC,EAAA7L,EAAA2F,KAAAoF,aAAA+tC,EAAAjtC,EAAA+uC,EAAA9B,EAAAjtC,EAAA+uC,GAGA94C,EADAS,KAAAi5C,iBACAx7C,EAAA2F,KAAAoF,aAEAT,KAAA7K,IAAA,EAAA8C,KAAAg5C,SAAAh5C,KAAAi5C,kBACAj5C,KAAAg5C,SAAAh5C,KAAAi5C,kBAGAj5C,KAAAg5C,SAGA,IAAAjwC,EAAA,IAAAtL,EAAA2L,MAAAC,EAAAC,GACAP,EAAAxJ,MAAAA,EAEAS,KAAAk5C,gBACAnwC,EAAA2U,QAAAjgB,EAAA2F,KAAAoF,aAAA,EAAA,KAAA,KAGAxI,KAAAs5C,iBAAA11C,KAAAmF,GAGA/I,KAAAo5C,YAAAx1C,KAAA5D,KAAAs5C,qBAUA77C,EAAAw8C,aAAAx8C,EAAA2F,KAAA+Y,YAAA1e,EAAAq4C,aAEAoE,cAAA,WAEA,IAEAC,EAAA18C,EAAA2F,KAAA6M,sBACAmqC,EAAAD,EAAAl7C,WAAA,MAUA,OARAk7C,EAAA56C,MAAA46C,EAAAh7C,OAAA65C,GAEAoB,EAAAhK,UAAApwC,KAAAsmB,MACA8zB,EAAA1pC,YACA0pC,EAAAhC,IAAAY,GAAAA,GAAAA,GAAA,EAAA,EAAAjxC,KAAAC,IAAA,GACAoyC,EAAAjK,YACAiK,EAAA92C,OAEA62C,GAGAE,sBAAA,WACA,OAAA/nC,OAAAtS,KAAAk6C,eAAAt/B,QAAA,aAAA,IAAA5a,KAAAsmB,MAAA,MAMAg0B,WAAA,WACA,OAAAt6C,KAAAlB,OAAAssC,WAAAtD,cAAA9nC,KAAAiH,QAAAjH,KAAAk6C,gBAAA,WAMArN,gBAAA,WACA7sC,KAAA8b,UAAA,mBACA9b,KAAAlB,OAAAssC,WAAA6J,YAAAj1C,KAAAs6C,cAMA/C,WAAA,SAAAC,GACA,IAAA/oC,EAAAzO,KAAA8b,UAAA,aAAA07B,GACA+C,EAAA9rC,EAAA+rC,oBAAA1kB,UAAArnB,EAAAipC,YAAA,GAOA,OALAjpC,EAAA2b,OAAA,IAAA3sB,EAAAyJ,SACAD,OAAAjH,KAAAiH,QAAAjH,KAAAq6C,wBACA/U,SAAAiV,EAAAlxC,EACAk8B,SAAAgV,EAAAjxC,IAEAmF,KAKA,WAEA,IAAAqO,EAAArf,EAAA2F,KAAA0Z,WACA3f,EAAAM,EAAA2F,KAAAjG,iBACAyL,EAAAnL,EAAA2F,KAAAwF,iBACAhM,EAAAmL,KAAAnL,MACAyY,EAAAtN,KAAAsN,IACAolC,EAAAh9C,EAAAkrC,aAAA2L,SAAA,eA8sDA,IAAA,IAAA5wC,KA/pDAjG,EAAAe,OAAAf,EAAA2F,KAAA+Y,YAAA1e,EAAAkrC,cAQAtsB,WAAA,SAAA6C,EAAAlb,GACAA,IAAAA,MACAhE,KAAA8oC,oBAAA9oC,KAAA+oC,eAAAC,KAAAhpC,MACAA,KAAAipC,sBAAAjpC,KAAA+E,iBAAAikC,KAAAhpC,MACAA,KAAAkpC,YAAAhqB,EAAAlb,GACAhE,KAAA06C,mBACA16C,KAAA26C,sBAQAC,mBAAA,EAWAC,YAAA,WASAC,iBAAA,EASAC,kBAAA,EAWAC,YAAA,SAWAC,aAAA,WAOA3Q,aAAA,EAOA4Q,WAAA,EAYAC,aAAA,WAcAC,gBAAA,KAOAC,eAAA,2BAOAC,sBAOAC,qBAAA,2BAOAC,mBAAA,EAOAC,yBAAA,EAOAC,YAAA,OAOAC,WAAA,OAOAC,cAAA,UAOAC,kBAAA,YAOAC,eAAA,YAQAC,iBAAA,cAOAC,eAAA,mBAOAC,oBAAA,EAOAC,oBAAA,EAOAC,gBAAA,EAUAC,eAAA,EAQAC,wBAAA,EAQAC,UAAA,EASAC,cAAA,KAQAC,iBAAA,EAQAC,gBAAA,EAQAC,iBAAA,EAMAC,WAOAC,eAAA,KAOAC,mBAKAnC,iBAAA,WACA16C,KAAA88C,kBAAA,KACA98C,KAAA+8C,eAAA,KACA/8C,KAAAg9C,sBACAh9C,KAAAi9C,qBACAj9C,KAAAk9C,sBAEAl9C,KAAAuqC,qBAEAvqC,KAAA4sC,iBAAAnvC,EAAAq4C,aAAA,IAAAr4C,EAAAq4C,YAAA91C,MAEAA,KAAA4qC,cAQAuS,uBAAA,WACA,IACAl4C,EAAAm4C,EAAAC,EADAC,EAAAt9C,KAAAu9C,mBAGA,GAAAD,EAAA75C,OAAA,IAAAzD,KAAAq8C,uBAAA,CACAe,KACAC,KACA,IAAA,IAAAn5C,EAAA,EAAAT,EAAAzD,KAAA0E,SAAAjB,OAAAS,EAAAT,EAAAS,IACAe,EAAAjF,KAAA0E,SAAAR,IACA,IAAAo5C,EAAAn6C,QAAA8B,GACAm4C,EAAAx5C,KAAAqB,GAGAo4C,EAAAz5C,KAAAqB,GAGAq4C,EAAA75C,OAAA,IACAzD,KAAAotC,cAAA1oC,SAAA24C,GAEAD,EAAAx5C,KAAAgB,MAAAw4C,EAAAC,QAGAD,EAAAp9C,KAAA0E,SAEA,OAAA04C,GAQA9O,UAAA,YACAtuC,KAAAw9C,iBAAAx9C,KAAA+8C,gBAAA/8C,KAAAo8C,gBACAp8C,KAAAguC,aAAAhuC,KAAAorC,YACAprC,KAAAw9C,iBAAA,GAEAx9C,KAAAwsC,gBACAxsC,KAAAy9C,eAAAz9C,KAAAorC,YAEA,IAAAmD,EAAAvuC,KAAAkrC,iBAEA,OADAlrC,KAAAwuC,aAAAD,EAAAvuC,KAAAm9C,0BACAn9C,MAGAy9C,eAAA,SAAAz+C,GACAA,EAAA6Q,OACA7P,KAAAo8C,eAAAp8C,KAAA2sC,sBACA3sC,KAAA4sC,kBAAA5sC,KAAA4sC,iBAAA+J,UACA32C,KAAAw9C,iBAAA,GAGAx9C,KAAAk7C,WAAAl7C,KAAA+8C,iBACA/8C,KAAA09C,eAAA1+C,GACAgB,KAAAw9C,iBAAA,GAEAx+C,EAAAgR,WASA2tC,UAAA,WACA,IAAA3+C,EAAAgB,KAAAorC,WAIA,OAHAprC,KAAAguC,aAAAhvC,GACAgB,KAAAy9C,eAAAz+C,GACAgB,KAAA+D,KAAA,gBACA/D,MAOA49C,uBAAA,WACA,IAAA/zC,EAAA7J,KAAA88C,kBAEAjzC,EAAAsI,OAAAzL,KACAuK,OAAApH,EAAAg0C,SAAA5sC,OACAC,OAAArH,EAAAg0C,SAAA3sC,OACAC,MAAAtH,EAAAg0C,SAAA1sC,MACAC,MAAAvH,EAAAg0C,SAAAzsC,MACA5G,KAAAX,EAAAg0C,SAAArzC,KACAC,IAAAZ,EAAAg0C,SAAApzC,MAGAzK,KAAA89C,uBAAAj0C,EAAAsI,SACA,WAAAtI,EAAA6uC,UACA,UAAA7uC,EAAA6uC,QACA7uC,EAAAk0C,YAAA,EAGAl0C,EAAAk0C,WAAA,GAGA,WAAAl0C,EAAA8uC,UACA,WAAA9uC,EAAA8uC,QACA9uC,EAAAm0C,YAAA,EAGAn0C,EAAAm0C,WAAA,GAIAn0C,EAAA6uC,QAAA,SACA7uC,EAAA8uC,QAAA,WAGA9uC,EAAA6uC,QAAA7uC,EAAAg0C,SAAAnF,QACA7uC,EAAA8uC,QAAA9uC,EAAAg0C,SAAAlF,UAWAsF,cAAA,SAAAp9B,EAAA1O,EAAApJ,GACA,IAEAm1C,EADA3H,EAAAxtC,GAAA/I,KAAA8c,WAAA+D,GADA,GAYA,OAPAq9B,EADA/rC,EAAAk7B,OAAAl7B,EAAAk7B,QAAArtC,KAAAotC,eAAA,oBAAAj7B,EAAAk7B,MAAAxnC,KACA7F,KAAAm+C,kBAAAhsC,EAAAk7B,MAAAkJ,IAGAltC,EAAAktC,EAAAltC,EAAAC,EAAAitC,EAAAjtC,GAIA6I,EAAA8rC,cAAAC,IAAA/rC,EAAAisC,kBAAA7H,IAMA4H,kBAAA,SAAAl5C,EAAAsxC,GACA,IAAArpB,EAAAjoB,EAAAwwB,sBACA4oB,EAAA5gD,EAAA2F,KAAAsH,gBAAAwiB,GACAoxB,EAAAt+C,KAAAu+C,kBAAAhI,GACA,OAAA94C,EAAA2F,KAAAuG,eAAA20C,EAAAD,IAUAG,oBAAA,SAAArsC,EAAA9I,EAAAC,GAGA,GAAA6I,EAAAg9B,eAAAh9B,EAAAy9B,cAAAz9B,IAAAnS,KAAAotC,cAAA,CACA,IAAAqR,EAAAz+C,KAAAm+C,kBAAAhsC,GAAA9I,EAAAA,EAAAC,EAAAA,IACAo1C,EAAA32C,KAAA7K,IAAAiV,EAAA09B,kBAAA4O,EAAAp1C,EAAA8I,EAAAu9B,MAAA,GACAiP,EAAA52C,KAAA7K,IAAAiV,EAAA29B,kBAAA2O,EAAAn1C,EAAA6I,EAAAw9B,MAAA,GAEAn9B,EAAA/U,EAAA2F,KAAAoP,cACAL,EAAAysC,cAAA72C,KAAA4xB,MAAA+kB,GAAA32C,KAAA4xB,MAAAglB,GAAA3+C,KAAAk8C,qBAEA,OAAA1pC,EAGA,IAAAxT,EAAAgB,KAAA6+C,aACAC,EAAA3sC,EAAA4sC,yBAAA71C,EAAAlJ,KAAA2pC,kBAEAx3B,EAAA4sC,yBAAA,GAEA/+C,KAAAguC,aAAAhvC,GAEAA,EAAA6Q,OACA7Q,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAiJ,EAAA49B,OAAA/wC,GACAA,EAAAgR,UAEAmC,IAAAnS,KAAAotC,eAAAj7B,EAAA6sC,gBAAAhgD,GACAigD,YAAA,EACAC,oBAAA,IAEAD,YAAA,IAGA9sC,EAAA4sC,yBAAAD,EAEA,IAAAtsC,EAAA/U,EAAA2F,KAAAoP,cACAxT,EAAAqK,EAAAC,EAAAtJ,KAAAk8C,qBAEA,OAAA1pC,GAQA2sC,uBAAA,SAAAt+B,GAUA,MAPA,mBAAA7R,OAAAC,UAAAC,SAAApL,KAAA9D,KAAAm7C,gBACAn7C,KAAAm7C,aAAA3hC,KAAA,SAAA7R,GAAA,OAAA,IAAAkZ,EAAAlZ,KAGAkZ,EAAA7gB,KAAAm7C,eAWAiE,sBAAA,SAAAv+B,EAAA1O,GACA,IAAAmrC,EAAAt9C,KAAAu9C,mBACApQ,EAAAntC,KAAAotC,cAEA,OACAj7B,GAEAA,GACAg7B,GACAmQ,EAAA75C,OAAA,IACA,IAAA65C,EAAAn6C,QAAAgP,IACAg7B,IAAAh7B,IACAnS,KAAAm/C,uBAAAt+B,IAEA1O,IAAAA,EAAAktC,SAEAltC,IACAA,EAAAmtC,YACAnS,GACAA,IAAAh7B,GAUA2rC,uBAAA,SAAA3rC,GACA,GAAAA,EAAA,CAIA,IACAotC,EADA11C,EAAA7J,KAAA88C,kBAUA,MAPA,UAAAjzC,EAAA21C,QAAA,WAAA31C,EAAA21C,QAAA,WAAA31C,EAAA21C,OACAD,EAAAv/C,KAAA86C,iBAAA3oC,EAAA2oC,gBAEA,WAAAjxC,EAAA21C,SACAD,EAAAv/C,KAAA+6C,kBAAA5oC,EAAA4oC,kBAGAwE,GAAA11C,EAAA41C,OAAA51C,EAAA41C,SAMAC,qBAAA,SAAAvtC,EAAAwtC,GACA,IAAA32C,GACAK,EAAA8I,EAAAumC,QACApvC,EAAA6I,EAAAwmC,SAiBA,MAdA,OAAAgH,GAAA,OAAAA,GAAA,OAAAA,EACA32C,EAAAK,EAAA,QAEA,OAAAs2C,GAAA,OAAAA,GAAA,OAAAA,IACA32C,EAAAK,EAAA,QAGA,OAAAs2C,GAAA,OAAAA,GAAA,OAAAA,EACA32C,EAAAM,EAAA,SAEA,OAAAq2C,GAAA,OAAAA,GAAA,OAAAA,IACA32C,EAAAM,EAAA,OAGAN,GAUA42C,qBAAA,SAAAC,EAAAF,EAAA9+B,GACA,IAAA8+B,IAAAE,EACA,MAAA,OAGA,OAAAF,GACA,IAAA,MACA,MAAA,SACA,IAAA,KACA,IAAA,KACA,OAAA9+B,EAAA7gB,KAAAi7C,cAAA,QAAA,SACA,IAAA,KACA,IAAA,KACA,OAAAp6B,EAAA7gB,KAAAi7C,cAAA,QAAA,SACA,QACA,MAAA,UASA6E,uBAAA,SAAAj/B,EAAA1O,EAAA0tC,GACA,GAAA1tC,EAAA,CAIA,IAAAokC,EAAAv2C,KAAA8c,WAAA+D,GACA8+B,EAAAxtC,EAAAisC,kBAAAp+C,KAAA8c,WAAA+D,GAAA,IACA2+B,EAAAx/C,KAAA4/C,qBAAAC,EAAAF,EAAA9+B,EAAA1O,GACAnJ,EAAAhJ,KAAA0/C,qBAAAvtC,EAAAwtC,GAEA3/C,KAAA88C,mBACA3qC,OAAAA,EACAqtC,OAAAA,EACAG,OAAAA,EACA1uC,OAAAkB,EAAAlB,OACAC,OAAAiB,EAAAjB,OACAC,MAAAgB,EAAAhB,MACAC,MAAAe,EAAAf,MAEAk0B,QAAAiR,EAAAltC,EAAA8I,EAAA3H,KACA+6B,QAAAgR,EAAAjtC,EAAA6I,EAAA1H,IACAiuC,QAAA1vC,EAAAK,EACAsvC,QAAA3vC,EAAAM,EACAy2C,GAAAxJ,EAAAltC,EACA22C,GAAAzJ,EAAAjtC,EACA22C,MAAA1J,EAAAltC,EACA62C,MAAA3J,EAAAjtC,EAIAkI,MAAArU,EAAAgV,EAAAjK,OAEA3I,MAAA4S,EAAA5S,MAAA4S,EAAAlB,OACA8sC,WAAA,EACAC,WAAA,EACAmC,SAAAt/B,EAAAs/B,SACAV,OAAA5+B,EAAA7gB,KAAAg7C,aACA6C,SAAApgD,EAAA2F,KAAAgP,oBAAAD,IAGAnS,KAAA88C,kBAAAe,SAAAnF,QAAA1vC,EAAAK,EACArJ,KAAA88C,kBAAAe,SAAAlF,QAAA3vC,EAAAM,EAEAtJ,KAAA49C,yBACA59C,KAAAogD,iBAAAv/B,KAUAw/B,iBAAA,SAAAh3C,EAAAC,GACA,IAAAW,EAAAjK,KAAA88C,kBACA3qC,EAAAlI,EAAAkI,OACAmuC,EAAAj3C,EAAAY,EAAAq7B,QACAib,EAAAj3C,EAAAW,EAAAs7B,QACAib,GAAAruC,EAAAvK,IAAA,kBAAAuK,EAAA3H,OAAA81C,EACAG,GAAAtuC,EAAAvK,IAAA,kBAAAuK,EAAA1H,MAAA81C,EAIA,OAFAC,GAAAruC,EAAAzL,IAAA,OAAA45C,GACAG,GAAAtuC,EAAAzL,IAAA,MAAA65C,GACAC,GAAAC,GAQAC,2BAAA,SAAAC,EAAA92C,EAAA+2C,GACA,IAAA/5C,EAAA,UAAAg6C,GAAAC,EAAA,UACAC,EAAAl3C,EAAAsI,OAAAhB,MAAA6vC,EAAA,OAAAC,EAAA,QACAtB,EAAA,OAAA91C,EAAA81C,QAAA,OAAA91C,EAAA81C,OAAA,GAAA,EACAuB,EAAA,EAEAP,EAAAA,EAAA,EAAA,GAAA,EACA,MAAAC,IACAG,EAAAl3C,EAAAsI,OAAAf,MACA4vC,EAAA,MACAC,EAAA,SACAp6C,EAAA,WAEAg6C,GAAA,GAAAG,EACAH,EAAA,GAAAI,EAEAp3C,EAAAsI,OAAAR,QAAAuvC,IAAA,GACAr3C,EAAAsI,OAAAP,QAAAsvC,IAAA,GAEA,IAAAH,GACAl3C,EAAAs3C,UAAAxB,EAAAgB,EAAAO,EACAr3C,EAAAhD,GAAAg6C,GAAAF,KAGAI,EAAAA,EAAA,EAAA,GAAA,EACAl3C,EAAAs3C,SAAAJ,EACAl3C,EAAAhD,GAAAg6C,EAAAE,EAAApB,EAAAuB,KAYAE,YAAA,SAAA/3C,EAAAC,EAAAs3C,GACA,IAAA/2C,EAAA7J,KAAA88C,kBACA3qC,EAAAtI,EAAAsI,OAAAkvC,GAAA,EACAC,EAAAnvC,EAAAvK,IAAA,gBACA25C,EAAApvC,EAAAvK,IAAA,gBAEA,GAAA05C,GAAA,MAAAV,GAAAW,GAAA,MAAAX,EACA,OAAA,EAIA,IAGAY,EAAAC,EAHA9Q,EAAAx+B,EAAAq+B,iBACAkR,EAAAvvC,EAAAwvC,aAAA,IAAAlkD,EAAA2L,MAAAC,EAAAC,GAAA,SAAA,UAAAs3C,GACAgB,EAAAzvC,EAAAwvC,aAAA,IAAAlkD,EAAA2L,MAAAS,EAAAo2C,MAAAp2C,EAAAq2C,OAAA,SAAA,UAAAU,GACAiB,EAAA1vC,EAAA2vC,4BAWA,OATA9hD,KAAA0gD,2BAAAgB,EAAAE,EAAA/3C,EAAA+2C,GACAY,EAAArvC,EAAAwvC,aAAA,IAAAlkD,EAAA2L,MAAAC,EAAAC,GAAAO,EAAA6uC,QAAA7uC,EAAA8uC,SAAAiI,GACAa,EAAAtvC,EAAA4vC,uBAAApR,EAAA9mC,EAAA6uC,QAAA7uC,EAAA8uC,SAEA0I,EAAArhD,KAAAgiD,eAAAR,EAAA33C,EAAA+2C,EAAAiB,GACAh4C,EAAAo2C,MAAA52C,EACAQ,EAAAq2C,MAAA52C,EAEA6I,EAAAyjB,oBAAA6rB,EAAA53C,EAAA6uC,QAAA7uC,EAAA8uC,SACA0I,GAQAW,eAAA,SAAAC,EAAAh4C,EAAA22C,EAAAsB,GACA,IAAAC,EACAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAtxC,EAAAC,EAFAe,EAAAlI,EAAAkI,OAAAkvC,GAAA,EACAF,EAAAl3C,EAAAk3C,SAmCA,MAhCA,MAAAP,GACA0B,EAAA,IACAC,EAAA,IACAC,EAAA,IACArxC,EAAA,EACAC,EAAAe,EAAAf,QAGAkxC,EAAA,IACAC,EAAA,IACAC,EAAA,IACArxC,EAAAgB,EAAAhB,MACAC,EAAA,GAGAixC,EAAAlwC,EAAA2vC,0BAAA3wC,EAAAC,IACAqxC,EAAA,EAAA16C,KAAAsN,IAAA4sC,GAAAI,EAAAzB,KACA,EACAuB,EAAA,GAGAA,EAAAhB,EAAAp5C,KAAA26C,KAAAD,EAAAtwC,EAAA,QAAAqwC,IACAH,EAAAC,GAAAnwC,EAAA,QAAAowC,KACAJ,EAAA1kD,EAAA2F,KAAAwF,iBAAAu5C,IAEAd,EAAAlvC,EAAA,OAAAqwC,KAAAL,EACAhwC,EAAAzL,IAAA,OAAA87C,EAAAL,GACA,IAAAhwC,EAAA,OAAAowC,KACAH,EAAAjwC,EAAA2vC,4BACAK,EAAAD,EAAAI,GAAAF,EAAAE,GAAAnwC,EAAA,QAAAowC,GACApwC,EAAAzL,IAAA,QAAA67C,EAAAJ,IAEAd,GAYAsB,aAAA,SAAAt5C,EAAAC,EAAAs3C,GACA,IAAA/2C,EAAA7J,KAAA88C,kBACA3qC,EAAAtI,EAAAsI,OACAywC,EAAAzwC,EAAAywC,aACAC,EAAA1wC,EAAA0wC,aACAC,EAAA3wC,EAAA2wC,gBAEA,GAAAF,GAAAC,EACA,OAAA,EAIA,IAAApB,EAAAtvC,EAAA4vC,uBAAA5vC,EAAAq+B,iBAAA3mC,EAAA6uC,QAAA7uC,EAAA8uC,SACAsJ,EAAA9vC,EAAAwvC,aAAA,IAAAlkD,EAAA2L,MAAAC,EAAAC,GAAAO,EAAA6uC,QAAA7uC,EAAA8uC,SACAkJ,EAAA1vC,EAAA2vC,4BAAAiB,GAAA,EASA,OAPA/iD,KAAAgjD,eAAAf,EAAAp4C,GAGAk5C,EAAA/iD,KAAAijD,gBAAAhB,EAAAp4C,EAAA+4C,EAAAC,EAAAjC,EAAAkC,EAAAjB,GAGA1vC,EAAAyjB,oBAAA6rB,EAAA53C,EAAA6uC,QAAA7uC,EAAA8uC,SACAoK,GAOAE,gBAAA,SAAAhB,EAAAh4C,EAAA24C,EAAAC,EAAAjC,EAAAkC,EAAAZ,GACA,IAAA/vC,EAAAlI,EAAAkI,OAAA+wC,GAAA,EAAAC,GAAA,EAAAJ,GAAA,EACA9xC,EAAAgxC,EAAA54C,EAAA8I,EAAAlB,OAAAixC,EAAA74C,EACA6H,EAAA+wC,EAAA34C,EAAA6I,EAAAjB,OAAAgxC,EAAA54C,EACA85C,EAAAjxC,EAAAlB,SAAAA,EACAoyC,EAAAlxC,EAAAjB,SAAAA,EAIA,GAFAjH,EAAAq5C,UAAAryC,EACAhH,EAAAs5C,UAAAryC,EACAzT,EAAA+lD,SAAA,MAAA5C,GAAAzuC,aAAA1U,EAAA+lD,QAAA,CACA,IAAAC,EAAAtxC,EAAA5S,OAAA0iD,EAAA54C,EAAA64C,EAAA74C,GACA,OAAAo6C,GAAAtxC,EAAAuxC,gBACAX,EAAAU,IAAAtxC,EAAA5S,MACA4S,EAAAzL,IAAA,QAAA+8C,GACAV,GA6BA,OAxBAD,GAAA7xC,GAAA,GAAAA,EAAAkB,EAAAlB,SACAiyC,GAAA,EACAjB,EAAA54C,EAAA,GAGAy5C,GAAA5xC,GAAA,GAAAA,EAAAiB,EAAAjB,SACAiyC,GAAA,EACAlB,EAAA34C,EAAA,GAGA,YAAAs3C,GAAAgC,GAAAC,EAGAjC,EAIA,MAAAA,GAAAzuC,EAAAvK,IAAA,kBAGA,MAAAg5C,GAAAzuC,EAAAvK,IAAA,mBACAu7C,GAAAN,GAAA1wC,EAAAzL,IAAA,SAAAwK,KAAA6xC,EAAAM,GAHAH,GAAAN,GAAAzwC,EAAAzL,IAAA,SAAAuK,KAAA8xC,EAAAK,IAJAF,GAAAN,GAAAzwC,EAAAzL,IAAA,SAAAuK,KAAA8xC,EAAAA,GAAAK,GACAD,GAAAN,GAAA1wC,EAAAzL,IAAA,SAAAwK,KAAA6xC,EAAAA,GAAAM,IAJAN,EAAA/iD,KAAA2jD,oBAAA1B,EAAA9vC,EAAAlI,EAAAi4C,GAYAgB,GAAAC,GAAAnjD,KAAA4jD,YAAA35C,EAAA22C,GACAmC,GAOAY,oBAAA,SAAA1B,EAAA9vC,EAAAlI,EAAAi4C,GAEA,IAGAa,EACAO,EAAAC,EAJAM,EAAA5B,EAAA34C,EAAA24C,EAAA54C,EACAy6C,EAAA5B,EAAA54C,EAAAW,EAAA4zC,SAAA3sC,OAAAiB,EAAAjB,OACAgxC,EAAA74C,EAAAY,EAAA4zC,SAAA5sC,OAAAkB,EAAAlB,OACA8yC,EAAA9B,EAAA54C,EAAA,GAAA,EAAA,EACA26C,EAAA/B,EAAA34C,EAAA,GAAA,EAAA,EASA,OALAg6C,EAAAS,EAAAh8C,KAAAsN,IAAApL,EAAA4zC,SAAA5sC,OAAA4yC,EAAAC,GACAP,EAAAS,EAAAj8C,KAAAsN,IAAApL,EAAA4zC,SAAA3sC,OAAA2yC,EAAAC,GACAf,EAAAO,IAAAnxC,EAAAlB,QAAAsyC,IAAApxC,EAAAjB,OACAiB,EAAAzL,IAAA,SAAA48C,GACAnxC,EAAAzL,IAAA,SAAA68C,GACAR,GAMAa,YAAA,SAAA35C,EAAA22C,GACA32C,EAAAq5C,UAAA,GAAA,MAAA1C,IACA,SAAA32C,EAAAyuC,QACAzuC,EAAAyuC,QAAA,QAEA,UAAAzuC,EAAAyuC,UACAzuC,EAAAyuC,QAAA,SAIAzuC,EAAAs5C,UAAA,GAAA,MAAA3C,IACA,QAAA32C,EAAA0uC,QACA1uC,EAAA0uC,QAAA,SAEA,WAAA1uC,EAAA0uC,UACA1uC,EAAA0uC,QAAA,SAQAqK,eAAA,SAAAf,EAAAp4C,GACA,IAAAsI,EAAAtI,EAAAsI,OAAA8L,EAAAje,KAAAgtC,UACAiX,EAAA9xC,EAAA8xC,QAAAhmC,EAEA,UAAApU,EAAA6uC,QACAuJ,EAAA54C,IAAA,EAEA,WAAAQ,EAAA6uC,UACAuJ,EAAA54C,GAAA,EAAAQ,EAAAk0C,WACAkE,EAAA54C,EAAA,IACAQ,EAAAk0C,YAAAl0C,EAAAk0C,aAIA,WAAAl0C,EAAA8uC,QACAsJ,EAAA34C,IAAA,EAEA,WAAAO,EAAA8uC,UACAsJ,EAAA34C,GAAA,EAAAO,EAAAm0C,WACAiE,EAAA34C,EAAA,IACAO,EAAAm0C,YAAAn0C,EAAAm0C,aAKA3oC,EAAA4sC,EAAA54C,GAAA46C,EACAhC,EAAA54C,EAAA,EACA44C,EAAA54C,GAAA46C,EAGAhC,EAAA54C,GAAA46C,EAIAhC,EAAA54C,EAAA,EAGAgM,EAAA4sC,EAAA34C,GAAA26C,EACAhC,EAAA34C,EAAA,EACA24C,EAAA34C,GAAA26C,EAGAhC,EAAA34C,GAAA26C,EAIAhC,EAAA34C,EAAA,GAWA46C,cAAA,SAAA76C,EAAAC,GAEA,IAAAO,EAAA7J,KAAA88C,kBACA3qC,EAAAtI,EAAAsI,OACAsvC,EAAAtvC,EAAA4vC,uBAAA5vC,EAAAq+B,iBAAA3mC,EAAA6uC,QAAA7uC,EAAA8uC,SAEA,GAAAxmC,EAAAgyC,aACA,OAAA,EAGA,IAAAC,EAAAxnD,EAAAiN,EAAAm2C,GAAAyB,EAAAn4C,EAAAO,EAAAk2C,GAAA0B,EAAAp4C,GACAg7C,EAAAznD,EAAA0M,EAAAm4C,EAAAn4C,EAAAD,EAAAo4C,EAAAp4C,GACAnB,EAAAU,EAAAy7C,EAAAD,EAAAv6C,EAAA2H,OACA8yC,GAAA,EAEA,GAAAnyC,EAAAmqC,UAAA,EAAA,CACA,IAAAA,EAAAnqC,EAAAmqC,UACAC,EAAApqC,EAAAoqC,eAAAD,EACAiI,EAAAx8C,KAAAwO,KAAArO,EAAAo0C,GAAAA,EACAkI,EAAAz8C,KAAAU,MAAAP,EAAAo0C,GAAAA,EAEAv0C,KAAAsN,IAAAnN,EAAAs8C,GAAAjI,EACAr0C,EAAAs8C,EAEAz8C,KAAAsN,IAAAnN,EAAAq8C,GAAAhI,IACAr0C,EAAAq8C,GAoBA,OAfAr8C,EAAA,IACAA,EAAA,IAAAA,GAEAA,GAAA,IAEAiK,EAAAjK,QAAAA,EACAo8C,GAAA,GAIAnyC,EAAAjK,MAAAA,EAEAiK,EAAAyjB,oBAAA6rB,EAAA53C,EAAA6uC,QAAA7uC,EAAA8uC,UAGA2L,GAQAG,UAAA,SAAApgD,GACArE,KAAAmrC,cAAAl+B,MAAAy3C,OAAArgD,GAOAq5C,eAAA,SAAA1+C,GACA,IAAA2lD,EAAA3kD,KAAA+8C,eACAvyC,EAAAm6C,EAAAn6C,KACAC,EAAAk6C,EAAAl6C,IACAm6C,EAAAvvC,EAAA7K,GACAq6C,EAAAxvC,EAAA5K,GAaA,GAXAzK,KAAAq7C,iBACAr8C,EAAAoxC,UAAApwC,KAAAq7C,eAEAr8C,EAAAg7C,SACA2K,EAAA5E,IAAAv1C,EAAA,EAAA,GAAAA,GACAm6C,EAAA3E,IAAAv1C,EAAA,EAAA,GAAAA,GACAm6C,EACAC,IAIA7kD,KAAAw7C,oBAAAx7C,KAAAu7C,qBAOA,GAJAv8C,EAAAk2C,UAAAl1C,KAAAw7C,mBACAx8C,EAAAi2C,YAAAj1C,KAAAu7C,qBAGAv7C,KAAAs7C,mBAAA73C,OAAA,IAAAg3C,EAAA,CAEA,IAAAnlC,EAAAqvC,EAAA5E,GAhoCA,IAgoCAv1C,EAAA,EAAA,EAAAo6C,GACArvC,EAAAovC,EAAA3E,GAjoCA,IAioCAv1C,EAAA,EAAA,EAAAo6C,GAEA7lD,EAAA0R,YAEAjT,EAAA2F,KAAA+L,eAAAnQ,EAAAsW,EAAAC,EAAAD,EAAAsvC,EAAArvC,EAAAvV,KAAAs7C,oBACA79C,EAAA2F,KAAA+L,eAAAnQ,EAAAsW,EAAAC,EAAAsvC,EAAA,EAAAvvC,EAAAsvC,EAAArvC,EAAAsvC,EAAA,EAAA7kD,KAAAs7C,oBACA79C,EAAA2F,KAAA+L,eAAAnQ,EAAAsW,EAAAC,EAAAD,EAAAC,EAAAsvC,EAAA7kD,KAAAs7C,oBACA79C,EAAA2F,KAAA+L,eAAAnQ,EAAAsW,EAAAsvC,EAAA,EAAArvC,EAAAD,EAAAsvC,EAAA,EAAArvC,EAAAsvC,EAAA7kD,KAAAs7C,oBAEAt8C,EAAAmxC,YACAnxC,EAAAorB,cAGA3sB,EAAAuR,OAAAC,UAAA61C,aAAAhhD,KAAA9D,KAAAhB,EAAAgB,KAAAs7C,oBACAt8C,EAAA+lD,WACAJ,EAAA5E,GAhpCA,IAgpCAv1C,EAAA,EAAA,EAAAo6C,GACAD,EAAA3E,GAjpCA,IAipCAv1C,EAAA,EAAA,EAAAo6C,GACAD,EACAC,IAcAG,WAAA,SAAAnkC,EAAAokC,GACA,IAAAjlD,KAAAm8C,eAAA,CAIA,IAIA+I,EAAAC,EAHA5O,EAAAv2C,KAAA8c,WAAA+D,GADA,GAEAssB,EAAAntC,KAAAotC,cACAgY,EAAAplD,KAAAu9C,mBAQA,GAFAv9C,KAAA28C,WAEAyI,EAAA3hD,OAAA,IAAAwhD,GAAA9X,IAAAntC,KAAAqlD,wBAAAlY,GAAAoJ,GACA,OAAApJ,EAGA,GAAA,IAAAiY,EAAA3hD,QAAA0pC,EAAAiR,kBAAA7H,GACA,OAAApJ,EAEA,GAAA,IAAAiY,EAAA3hD,QACA0pC,IAAAntC,KAAAqlD,wBAAAlY,GAAAoJ,GAAA,CACA,IAAAv2C,KAAAq8C,uBACA,OAAAlP,EAGA+X,EAAA/X,EACAgY,EAAAnlD,KAAA28C,QACA38C,KAAA28C,WAGA,IAAAxqC,EAAAnS,KAAAqlD,uBAAArlD,KAAA0E,SAAA6xC,GAKA,OAJA11B,EAAA7gB,KAAAo7C,kBAAAjpC,GAAA+yC,GAAA/yC,IAAA+yC,IACA/yC,EAAA+yC,EACAllD,KAAA28C,QAAAwI,GAEAhzC,IAWAmzC,aAAA,SAAA/O,EAAA9uC,EAAA89C,GACA,GAAA99C,GACAA,EAAAmjB,SACAnjB,EAAA43C,SACAr/C,KAAAi+C,cAAA,KAAAx2C,EAAA8uC,GAAA,CACA,IAAAv2C,KAAAi8C,qBAAAx0C,EAAAw0C,oBAAAx0C,EAAA+9C,UAOA,OAAA,EANA,IAAAhzC,EAAAxS,KAAAw+C,oBAAA/2C,EAAA89C,EAAAl8C,EAAAk8C,EAAAj8C,GACA,IAAAkJ,EACA,OAAA,IAgBA6yC,uBAAA,SAAAjgD,EAAAmxC,GAKA,IAHA,IAAApkC,EAAAszC,EAAAvhD,EAAAkB,EAAA3B,OAGAS,KAAA,CACA,IAAAwhD,EAAAtgD,EAAAlB,GACAyhD,EAAAD,EAAArY,OAAA,oBAAAqY,EAAArY,MAAAxnC,KACA7F,KAAAm+C,kBAAAuH,EAAArY,MAAAkJ,GAAAA,EACA,GAAAv2C,KAAAslD,aAAAK,EAAAD,EAAAnP,GAAA,EACApkC,EAAA/M,EAAAlB,IACA0hD,gBAAAzzC,aAAA1U,EAAAkR,QACA82C,EAAAzlD,KAAAqlD,uBAAAlzC,EAAAzN,SAAA6xC,KACAv2C,KAAA28C,QAAA/4C,KAAA6hD,GAEA,OAGA,OAAAtzC,GAQAosC,kBAAA,SAAAhI,GACA,OAAA94C,EAAA2F,KAAAuG,eACA4sC,EACA94C,EAAA2F,KAAAsH,gBAAA1K,KAAA2pC,qBAsBA7sB,WAAA,SAAA+D,EAAAglC,GAEA,GAAA7lD,KAAA8lD,mBAAAD,EACA,OAAA7lD,KAAA8lD,iBAEA,GAAA9lD,KAAA+lD,UAAAF,EACA,OAAA7lD,KAAA+lD,SAGA,IAKAC,EALAzP,EAAAz5B,EAAA+D,GACAsqB,EAAAnrC,KAAAmrC,cACA1yB,EAAA0yB,EAAAhpB,wBACA8jC,EAAAxtC,EAAAlZ,OAAA,EACA2mD,EAAAztC,EAAAtZ,QAAA,EAGA8mD,GAAAC,IACA,QAAAztC,GAAA,WAAAA,IACAytC,EAAAn+C,KAAAsN,IAAAoD,EAAAhO,IAAAgO,EAAA0tC,SAEA,UAAA1tC,GAAA,SAAAA,IACAwtC,EAAAl+C,KAAAsN,IAAAoD,EAAA2tC,MAAA3tC,EAAAjO,QAIAxK,KAAA4qC,aACA2L,EAAAltC,EAAAktC,EAAAltC,EAAArJ,KAAAqrC,QAAA7gC,KACA+rC,EAAAjtC,EAAAitC,EAAAjtC,EAAAtJ,KAAAqrC,QAAA5gC,IACAo7C,IACAtP,EAAAv2C,KAAAu+C,kBAAAhI,IAGA,IAAA8P,EAAArmD,KAAA8qC,mBAiBA,OAhBA,IAAAub,IACA9P,EAAAltC,GAAAg9C,EACA9P,EAAAjtC,GAAA+8C,GAKAL,EAFA,IAAAC,GAAA,IAAAC,GAEA3mD,MAAA,EAAAJ,OAAA,IAIAI,MAAA4rC,EAAA5rC,MAAA0mD,EACA9mD,OAAAgsC,EAAAhsC,OAAA+mD,IAKA78C,EAAAktC,EAAAltC,EAAA28C,EAAAzmD,MACA+J,EAAAitC,EAAAjtC,EAAA08C,EAAA7mD,SAQA89C,mBAAA,WACA,IAAAqJ,EAAAtmD,KAAAirC,cAAA9rB,UAAAvE,QAAA,qBAAA,IACAqwB,EAAAjrC,KAAAirC,cAAAE,EAAAnrC,KAAAmrC,cAGAA,EACAA,EAAAhsB,UAAA,IAGAgsB,EAAAnrC,KAAA6rC,uBACA7rC,KAAAmrC,cAAAA,GAEA1tC,EAAA2F,KAAA8d,SAAAiqB,EAAA,gBAAAmb,GAEAtmD,KAAA+sC,UAAA5/B,YAAAg+B,GAEAnrC,KAAAumD,iBAAAtb,EAAAE,GACAnrC,KAAA8rC,kBAAAX,GACAnrC,KAAAorC,WAAAD,EAAAlsC,WAAA,OAMA07C,mBAAA,WACA36C,KAAA8sC,cAAA9sC,KAAA6rC,uBACA7rC,KAAA8sC,cAAAztB,aAAA,QAAArf,KAAAT,OACAS,KAAA8sC,cAAAztB,aAAA,SAAArf,KAAAb,QACAa,KAAA6+C,aAAA7+C,KAAA8sC,cAAA7tC,WAAA,OAMA+9C,oBAAA,WACAh9C,KAAA+sC,UAAAtvC,EAAA2F,KAAA+d,YAAAnhB,KAAAirC,cAAA,OACAub,MAAAxmD,KAAAg8C,iBAEAv+C,EAAA2F,KAAA+a,SAAAne,KAAA+sC,WACAxtC,MAAAS,KAAAT,MAAA,KACAJ,OAAAa,KAAAb,OAAA,KACA+N,SAAA,aAEAzP,EAAA2F,KAAA+c,wBAAAngB,KAAA+sC,YAOAjB,kBAAA,SAAApvB,GACA,IAAAnd,EAAAS,KAAAT,OAAAmd,EAAAnd,MACAJ,EAAAa,KAAAb,QAAAud,EAAAvd,OAEA1B,EAAA2F,KAAA+a,SAAAzB,GACAxP,SAAA,WACA3N,MAAAA,EAAA,KACAJ,OAAAA,EAAA,KACAqL,KAAA,EACAC,IAAA,EACAg8C,eAAAzmD,KAAAypC,oBAAA,eAAA,OACAid,mBAAA1mD,KAAAypC,oBAAA,eAAA,SAEA/sB,EAAAnd,MAAAA,EACAmd,EAAAvd,OAAAA,EACA1B,EAAA2F,KAAA+c,wBAAAzD,IASA6pC,iBAAA,SAAAI,EAAAC,GACAA,EAAA35C,MAAAqR,QAAAqoC,EAAA15C,MAAAqR,SAOAuoC,oBAAA,WACA,OAAA7mD,KAAAorC,YAOA0b,oBAAA,WACA,OAAA9mD,KAAAmrC,eAOA4b,gBAAA,WACA,OAAA/mD,KAAAotC,eAOAmQ,iBAAA,WACA,IAAAyJ,EAAAhnD,KAAAotC,cACA,OAAA4Z,EACA,oBAAAA,EAAAnhD,MAAAmhD,EAAAtiD,SACAsiD,EAAAtiD,SAAAoH,MAAA,IAGAk7C,OAUAxhD,iBAAA,SAAAiC,GAEAA,IAAAzH,KAAAotC,gBACAptC,KAAA+D,KAAA,4BAAAoO,OAAA1K,IACAzH,KAAAinD,uBACAjnD,KAAA+D,KAAA,qBAAAoO,OAAA1K,IACAA,EAAA1D,KAAA,eAEA0D,IAAAzH,KAAA48C,iBACA58C,KAAA48C,eAAA,KACA58C,KAAA68C,oBAEA78C,KAAA8b,UAAA,mBAAArU,IAQAy/C,qBAAA,SAAAC,EAAAtmC,GACA,IAAAumC,GAAA,EAAAhiD,EAAApF,KAAAu9C,mBACA8J,KAAAC,KAAAC,GAAA1mC,EAAAA,GACAsmC,EAAAt5C,QAAA,SAAA25C,IACA,IAAApiD,EAAAjC,QAAAqkD,KACAJ,GAAA,EACAI,EAAAzjD,KAAA,aAAAwjD,GACAD,EAAA1jD,KAAA4jD,MAGApiD,EAAAyI,QAAA,SAAA5I,IACA,IAAAkiD,EAAAhkD,QAAA8B,KACAmiD,GAAA,EACAniD,EAAAlB,KAAA,WAAAwjD,GACAF,EAAAzjD,KAAAqB,MAGAkiD,EAAA1jD,OAAA,GAAA2B,EAAA3B,OAAA,GACA8jD,EAAAE,SAAAJ,EACAE,EAAAG,WAAAJ,EAEAC,EAAAI,QAAAN,EAAA,IAAAC,EAAA,GACAC,EAAAp1C,OAAAnS,KAAAotC,cACAga,GAAApnD,KAAA+D,KAAA,oBAAAwjD,IAEAniD,EAAA3B,OAAA,GAEA,IAAA2B,EAAA3B,SACA8jD,EAAAp1C,OAAAk1C,EAAA,GACArnD,KAAA+D,KAAA,kBAAAwjD,IAEAA,EAAAE,SAAAJ,EAEAE,EAAAp1C,OAAAnS,KAAAotC,cACAptC,KAAA+D,KAAA,oBAAAwjD,IAEAJ,EAAA1jD,OAAA,IACA8jD,EAAAG,WAAAJ,EACAtnD,KAAA+D,KAAA,oBAAAwjD,KAWAK,gBAAA,SAAA3iD,EAAA4b,GACA,IAAAgnC,EAAA7nD,KAAAu9C,mBAGA,OAFAv9C,KAAA8nD,iBAAA7iD,EAAA4b,GACA7gB,KAAAknD,qBAAAW,EAAAhnC,GACA7gB,MASA8nD,iBAAA,SAAA7iD,EAAA4b,GACA,OAAA7gB,KAAAotC,gBAAAnoC,MAGAjF,KAAAinD,qBAAApmC,EAAA5b,MAGAA,EAAA8iD,UAAAlnC,EAAAA,MAGA7gB,KAAAotC,cAAAnoC,GACA,MAMAgiD,qBAAA,SAAApmC,EAAA5b,GACA,IAAAwC,EAAAzH,KAAAotC,cACA,GAAA3lC,EAAA,CAEA,GAAAA,EAAAugD,YAAAnnC,EAAAA,EAAA5b,OAAAA,IACA,OAAA,EAEAjF,KAAAotC,cAAA,KAEA,OAAA,GAYA6a,oBAAA,SAAApnC,GACA,IAAAgnC,EAAA7nD,KAAAu9C,mBAAApQ,EAAAntC,KAAA+mD,kBAMA,OALAc,EAAApkD,QACAzD,KAAA+D,KAAA,4BAAAoO,OAAAg7B,EAAAtsB,EAAAA,IAEA7gB,KAAAinD,qBAAApmC,GACA7gB,KAAAknD,qBAAAW,EAAAhnC,GACA7gB,MAQAm0C,QAAA,WACA,IAAA/yB,EAAAphB,KAAA+sC,UAeA,OAdA/sC,KAAAkoD,kBACA9mC,EAAA9T,YAAAtN,KAAAmrC,eACA/pB,EAAA9T,YAAAtN,KAAAirC,eACAjrC,KAAA6+C,aAAA,KACA7+C,KAAAorC,WAAA,MACA,gBAAA,iBAAAv9B,QAAA,SAAA6O,GACAjf,EAAA2F,KAAAsf,iBAAA1iB,KAAA0c,IACA1c,KAAA0c,QAAAuD,GACA+oB,KAAAhpC,OACAohB,EAAA/T,YACA+T,EAAA/T,WAAAgU,aAAArhB,KAAAirC,cAAAjrC,KAAA+sC,kBAEA/sC,KAAA+sC,UACAtvC,EAAAkrC,aAAA15B,UAAAklC,QAAArwC,KAAA9D,MACAA,MAQAkuC,MAAA,WAIA,OAFAluC,KAAAioD,sBACAjoD,KAAAguC,aAAAhuC,KAAAorC,YACAprC,KAAA8b,UAAA,UAOAozB,aAAA,SAAAlwC,GACA,IAAAmuC,EAAAntC,KAAAotC,cAEAD,GACAA,EAAA6R,gBAAAhgD,IAOAqyC,UAAA,SAAArM,EAAAjpB,EAAA6pB,GAKA,IAAAuiB,EAAAnoD,KAAAooD,+BAAApjB,GACA//B,EAAAjF,KAAA8b,UAAA,YAAAkpB,EAAAjpB,EAAA6pB,GAGA,OADA5lC,KAAAqoD,8BAAArjB,EAAAmjB,GACAljD,GASAmjD,+BAAA,SAAApjB,GACA,GAAAA,EAAAqI,OAAA,oBAAArI,EAAAqI,MAAAxnC,MAAA7F,KAAAotC,gBAAApI,EAAAqI,MAAA,CACA,IAEAib,KAKA,OAPA,QAAA,QAAA,QAAA,OAAA,SAAA,SAAA,QAAA,QAAA,OAGAz6C,QAAA,SAAAnK,GACA4kD,EAAA5kD,GAAAshC,EAAAthC,KAEA1D,KAAAotC,cAAAmb,iBAAAvjB,GACAsjB,EAGA,OAAA,MAUAD,8BAAA,SAAArjB,EAAAsjB,GACAA,GACAtjB,EAAAt+B,IAAA4hD,IAOAtV,cAAA,SAAAlN,EAAAd,EAAAx3B,GAGA,IAAA26C,EAAAnoD,KAAAooD,+BAAApjB,GACAhlC,KAAA8b,UAAA,gBAAAgqB,EAAAd,EAAAx3B,GACAxN,KAAAqoD,8BAAArjB,EAAAmjB,IAGAlb,qBAAA,SAAAC,GACAltC,KAAA8E,mBAAA9E,KAAAotC,eAAAptC,KAAAotC,cAAAoY,WACAxlD,KAAAotC,cAAAob,kBAEA/qD,EAAAkrC,aAAA15B,UAAAg+B,qBAAAnpC,KAAA9D,KAAAktC,MAMAzvC,EAAAkrC,aACA,cAAAjlC,IACAjG,EAAAe,OAAAkF,GAAAjG,EAAAkrC,aAAAjlC,IAvtDA,GA6tDA,WAEA,IAAA+kD,GACA/vC,GAAA,EACAm2B,GAAA,EACA6Z,GAAA,EACA9Z,GAAA,EACA+Z,GAAA,EACA7Z,GAAA,EACA8Z,GAAA,EACAja,GAAA,GAEAlyB,EAAAhf,EAAA2F,KAAAqZ,YACAG,EAAAnf,EAAA2F,KAAAwZ,eAEAisC,GAAAC,SAAA,GAEA,SAAAC,EAAAloC,EAAAxc,GACA,OAAAwc,EAAAmoC,QAAAnoC,EAAAmoC,SAAA3kD,EAAA,EAGA5G,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAe,OAAAyQ,WAMAg6C,WACA,WACA,YACA,WACA,YACA,WACA,YACA,WACA,aAQAC,YAAA,KAMAhM,oBAAA,WAIAl9C,KAAAkoD,kBACAloD,KAAAmpD,cACAnpD,KAAAopD,YAAA3sC,EAAA,QAOA4sC,gBAAA,WACA,OAAArpD,KAAAspD,oBAAA,UAAA,SAGAF,YAAA,SAAAG,EAAAC,GACA,IAAAC,EAAAzpD,KAAAmrC,cACAue,EAAA1pD,KAAAqpD,kBACAE,EAAA9rD,EAAAG,OAAA,SAAAoC,KAAA2pD,WACAJ,EAAAE,EAAAC,EAAA,OAAA1pD,KAAA4pD,cACAL,EAAAE,EAAAC,EAAA,OAAA1pD,KAAA6pD,aAAAhB,GACAU,EAAAE,EAAAC,EAAA,MAAA1pD,KAAA8pD,aACAP,EAAAE,EAAAC,EAAA,QAAA1pD,KAAA+pD,eACAR,EAAAE,EAAA,QAAAzpD,KAAAgqD,eACAT,EAAAE,EAAA,cAAAzpD,KAAAiqD,gBACAV,EAAAE,EAAA,WAAAzpD,KAAAkqD,gBACAX,EAAAE,EAAA,WAAAzpD,KAAAmqD,aACAZ,EAAAE,EAAA,YAAAzpD,KAAAoqD,cACAb,EAAAE,EAAA,YAAAzpD,KAAAqqD,cACAd,EAAAE,EAAA,OAAAzpD,KAAAsqD,SACAtqD,KAAAspD,qBACAC,EAAAE,EAAA,aAAAzpD,KAAAuqD,cAAA1B,GAEA,oBAAA2B,SAAAhB,KAAAgB,UACAA,QAAAhB,GAAAC,EAAA,UAAAzpD,KAAAyqD,YACAD,QAAAhB,GAAAC,EAAA,OAAAzpD,KAAA0qD,SACAF,QAAAhB,GAAAC,EAAA,cAAAzpD,KAAA2qD,sBACAH,QAAAhB,GAAAC,EAAA,QAAAzpD,KAAA4qD,UACAJ,QAAAhB,GAAAC,EAAA,YAAAzpD,KAAA6qD,gBAOA3C,gBAAA,WACAloD,KAAAopD,YAAAxsC,EAAA,UAEA,IAAA8sC,EAAA1pD,KAAAqpD,kBACAzsC,EAAAnf,EAAAE,SAAA+rD,EAAA,KAAA1pD,KAAA8qD,YACAluC,EAAAnf,EAAAE,SAAA,WAAAqC,KAAA+qD,YAAAlC,GACAjsC,EAAAnf,EAAAE,SAAA+rD,EAAA,OAAA1pD,KAAA6pD,aAAAhB,GACAjsC,EAAAnf,EAAAE,SAAA,YAAAqC,KAAA6pD,aAAAhB,IAMAM,YAAA,WACAnpD,KAAAgrD,cAIAhrD,KAAA4pD,aAAA5pD,KAAA4pD,aAAA5gB,KAAAhpC,MACAA,KAAAuqD,cAAAvqD,KAAAuqD,cAAAvhB,KAAAhpC,MACAA,KAAA6pD,aAAA7pD,KAAA6pD,aAAA7gB,KAAAhpC,MACAA,KAAA8qD,WAAA9qD,KAAA8qD,WAAA9hB,KAAAhpC,MACAA,KAAA+qD,YAAA/qD,KAAA+qD,YAAA/hB,KAAAhpC,MACAA,KAAA2pD,UAAA3pD,KAAA2pD,UAAA3gB,KAAAhpC,MACAA,KAAAyqD,WAAAzqD,KAAAyqD,WAAAzhB,KAAAhpC,MACAA,KAAA0qD,QAAA1qD,KAAA0qD,QAAA1hB,KAAAhpC,MACAA,KAAA4qD,SAAA5qD,KAAA4qD,SAAA5hB,KAAAhpC,MACAA,KAAA6qD,aAAA7qD,KAAA6qD,aAAA7hB,KAAAhpC,MACAA,KAAA2qD,qBAAA3qD,KAAA2qD,qBAAA3hB,KAAAhpC,MACAA,KAAAgqD,cAAAhqD,KAAAgqD,cAAAhhB,KAAAhpC,MACAA,KAAA8pD,YAAA9pD,KAAA8pD,YAAA9gB,KAAAhpC,MACAA,KAAA+pD,cAAA/pD,KAAA+pD,cAAA/gB,KAAAhpC,MACAA,KAAAiqD,eAAAjqD,KAAAiqD,eAAAjhB,KAAAhpC,MACAA,KAAAkqD,eAAAlqD,KAAAkqD,eAAAlhB,KAAAhpC,MACAA,KAAAmqD,YAAAnqD,KAAAmqD,YAAAnhB,KAAAhpC,MACAA,KAAAoqD,aAAApqD,KAAAirD,oBAAAjiB,KAAAhpC,KAAA,aACAA,KAAAqqD,aAAArqD,KAAAirD,oBAAAjiB,KAAAhpC,KAAA,aACAA,KAAAsqD,QAAAtqD,KAAAirD,oBAAAjiB,KAAAhpC,KAAA,QACAA,KAAAgrD,aAAA,IAQAP,WAAA,SAAA5pC,EAAAqqC,GACAlrD,KAAAmrD,sBAAAnrD,KAAAmrD,qBAAAtqC,EAAAqqC,IAQAR,QAAA,SAAA7pC,EAAAqqC,GACAlrD,KAAAorD,UAAAprD,KAAAorD,SAAAvqC,EAAAqqC,IAOAlB,cAAA,SAAAnpC,GACA7gB,KAAAqrD,eAAAxqC,IAOAipC,YAAA,SAAAjpC,GACA,IAAA1O,EAAAnS,KAAA48C,eACA58C,KAAA+D,KAAA,aAAAoO,OAAAA,EAAA0O,EAAAA,IACA7gB,KAAA48C,eAAA,KACAzqC,GAAAA,EAAApO,KAAA,YAAA8c,EAAAA,IAEA,IAAA5E,EAAAjc,KACAA,KAAA68C,gBAAAhvC,QAAA,SAAAy9C,GACArvC,EAAAlY,KAAA,aAAAoO,OAAAA,EAAA0O,EAAAA,IACAyqC,GAAAn5C,EAAApO,KAAA,YAAA8c,EAAAA,MAEA7gB,KAAA68C,mBAEA78C,KAAAquC,iBACAruC,KAAAquC,gBAAAxgC,QAAA,SAAApG,GACAA,EAAA+9C,WACA/9C,EAAA8jD,eAAAC,WAUAzB,cAAA,SAAAlpC,GAOA7gB,KAAAyrD,kBAAAzrD,KAAAglD,WAAAnkC,KACA7gB,KAAA+D,KAAA,cAAAoO,OAAA,KAAA0O,EAAAA,IACA7gB,KAAA48C,eAAA,KACA58C,KAAA68C,qBASA8N,qBAAA,SAAA9pC,EAAAqqC,GACAlrD,KAAA0rD,uBAAA1rD,KAAA0rD,sBAAA7qC,EAAAqqC,IAQAN,SAAA,SAAA/pC,EAAAqqC,GACAlrD,KAAA2rD,WAAA3rD,KAAA2rD,UAAA9qC,EAAAqqC,IAQAL,aAAA,SAAAhqC,EAAAqqC,GACAlrD,KAAA4rD,eAAA5rD,KAAA4rD,cAAA/qC,EAAAqqC,IAQAf,YAAA,SAAAtpC,GACAA,EAAAgrC,iBACA,IAAA15C,EAAAnS,KAAAirD,oBAAA,WAAApqC,GACA7gB,KAAA8rD,sBAAA35C,EAAA0O,IAOAopC,eAAA,SAAAppC,GAKA,OAJA7gB,KAAAw8C,kBACA37B,EAAAkrC,kBACAlrC,EAAAgrC,mBAEA,GAOA3B,eAAA,SAAArpC,GACA7gB,KAAAgsD,yBAAAnrC,GACA7gB,KAAAisD,aAAAprC,EAAA,YACA7gB,KAAAksD,yBAAArrC,IASAsrC,aAAA,SAAAC,GACA,IAAAhvC,EAAAgvC,EAAAhvC,eAEA,OAAAA,EACAA,EAAA,IAAAA,EAAA,GAAAivC,WAGArsD,KAAAspD,oBACA8C,EAAAE,WAGA,GAQA9V,aAAA,SAAA4V,GACA,OAAA,IAAAA,EAAAG,YAGA,IAAAH,EAAAG,YAGA,aAAAH,EAAAvmD,MAAA,IAAAumD,EAAAI,QAAA/oD,UAGA2oD,EAAAhvC,gBACAgvC,EAAAhvC,eAAA,GAAAivC,aAAArsD,KAAAkpD,eASAqB,cAAA,SAAA1pC,GACAA,EAAAgrC,iBACA,OAAA7rD,KAAAkpD,cACAlpD,KAAAkpD,YAAAlpD,KAAAmsD,aAAAtrC,IAEA7gB,KAAAysD,cAAA5rC,GACA7gB,KAAAksD,2BACA,IAAAzC,EAAAzpD,KAAAmrC,cACAue,EAAA1pD,KAAAqpD,kBACA5sC,EAAAhf,EAAAE,SAAA,WAAAqC,KAAA+qD,YAAAlC,GACApsC,EAAAhf,EAAAE,SAAA,YAAAqC,KAAA6pD,aAAAhB,GAEAjsC,EAAA6sC,EAAAC,EAAA,OAAA1pD,KAAA4pD,eAOAA,aAAA,SAAA/oC,GACA7gB,KAAAysD,cAAA5rC,GACA7gB,KAAAksD,2BACA,IAAAzC,EAAAzpD,KAAAmrC,cACAue,EAAA1pD,KAAAqpD,kBACAzsC,EAAA6sC,EAAAC,EAAA,OAAA1pD,KAAA6pD,aAAAhB,GACApsC,EAAAhf,EAAAE,SAAA+rD,EAAA,KAAA1pD,KAAA8qD,YACAruC,EAAAhf,EAAAE,SAAA+rD,EAAA,OAAA1pD,KAAA6pD,aAAAhB,IAOAkC,YAAA,SAAAlqC,GACA,KAAAA,EAAA2rC,QAAA/oD,OAAA,GAAA,CAIAzD,KAAA0sD,YAAA7rC,GACA7gB,KAAAksD,2BACAlsD,KAAAkpD,YAAA,KACA,IAAAQ,EAAA1pD,KAAAqpD,kBACAzsC,EAAAnf,EAAAE,SAAA,WAAAqC,KAAA+qD,YAAAlC,GACAjsC,EAAAnf,EAAAE,SAAA,YAAAqC,KAAA6pD,aAAAhB,GACA,IAAA5sC,EAAAjc,KACAA,KAAA2sD,mBACAroC,aAAAtkB,KAAA2sD,mBAEA3sD,KAAA2sD,kBAAAxoC,WAAA,WAGA1H,EAAAR,EAAAkvB,cAAAue,EAAA,OAAAztC,EAAA2tC,cACA3tC,EAAA0wC,kBAAA,GACA,OAOA7B,WAAA,SAAAjqC,GACA7gB,KAAA0sD,YAAA7rC,GACA7gB,KAAAksD,2BACA,IAAAzC,EAAAzpD,KAAAmrC,cACAue,EAAA1pD,KAAAqpD,kBACArpD,KAAAw2C,aAAA31B,KACAjE,EAAAnf,EAAAE,SAAA+rD,EAAA,KAAA1pD,KAAA8qD,YACAluC,EAAAnf,EAAAE,SAAA+rD,EAAA,OAAA1pD,KAAA6pD,aAAAhB,GACApsC,EAAAgtC,EAAAC,EAAA,OAAA1pD,KAAA6pD,aAAAhB,KAQAgB,aAAA,SAAAhpC,IACA7gB,KAAAypC,qBAAA5oB,EAAAgrC,gBAAAhrC,EAAAgrC,iBACA7rD,KAAA4sD,cAAA/rC,IAMA8oC,UAAA,WACA3pD,KAAA4qC,cAQAiiB,cAAA,SAAA16C,GACA,IAAAg7B,EAAAntC,KAAAotC,cAEA,WACAD,KAAAh7B,GACAg7B,GAAAh7B,GAAAg7B,IAAAh7B,KAMAg7B,GAAAA,EAAAqY,WAGA,IAYAkH,YAAA,SAAA7rC,GACA,IAAA1O,EAAAlI,EAAAjK,KAAA88C,kBACA6H,EAAA3kD,KAAA+8C,eAAA+P,GAAA,EACAC,GAAApI,GAAA,IAAAA,EAAAn6C,MAAA,IAAAm6C,EAAAl6C,IAMA,GALAzK,KAAAgsD,yBAAAnrC,GACA1O,EAAAnS,KAAAsrD,QACAtrD,KAAAisD,aAAAprC,EAAA,cAGAkoC,EAAAloC,EA1aA,GAibA,OAAAkoC,EAAAloC,EAjbA,IAkbA7gB,KAAA08C,iBACA18C,KAAAisD,aAAAprC,EAAA,KAnbA,EAmbAksC,QAEA/sD,KAAAksD,iCAIAlsD,KAAAo8C,eAAAp8C,KAAA2sC,oBACA3sC,KAAAgtD,wBAAAnsC,GAIA7gB,KAAAw2C,aAAA31B,KAGA5W,IACAjK,KAAAitD,0BAAApsC,GACAisC,EAAA7iD,EAAAijD,iBAGAH,IACA/sD,KAAAmtD,mBAAAtsC,GACAisC,IAAAA,EAAA9sD,KAAA6sD,cAAA16C,KAEAA,IACAA,EAAAi7C,UAAA,GAEAptD,KAAAqtD,oBAAAxsC,EAAA1O,GACAnS,KAAAisD,aAAAprC,EAAA,KA9cA,EA8cAksC,GACA/sD,KAAA+8C,eAAA,KACA/8C,KAAA88C,kBAAA,KAEA3qC,IAAAA,EAAAm7C,SAAA,GACAR,EACA9sD,KAAA+E,mBAEAgoD,GACA/sD,KAAA29C,cA5CA39C,KAAAy8C,gBACAz8C,KAAAisD,aAAAprC,EAAA,KA5aA,EA4aAksC,IAsDA9B,oBAAA,SAAAsC,EAAA1sC,GACA,IAAA1O,EAAAnS,KAAAglD,WAAAnkC,GACA87B,EAAA38C,KAAA28C,QACA34C,GACA6c,EAAAA,EACA1O,OAAAA,EACAq7C,WAAA7Q,GAIA,GAFA38C,KAAA+D,KAAAwpD,EAAAvpD,GACAmO,GAAAA,EAAApO,KAAAwpD,EAAAvpD,IACA24C,EACA,OAAAxqC,EAEA,IAAA,IAAAjO,EAAA,EAAAA,EAAAy4C,EAAAl5C,OAAAS,IACAy4C,EAAAz4C,GAAAH,KAAAwpD,EAAAvpD,GAEA,OAAAmO,GAYA85C,aAAA,SAAAprC,EAAA0sC,EAAAvE,EAAA+D,GACA,IAAA56C,EAAAnS,KAAAsrD,QACA3O,EAAA38C,KAAA28C,YACA34C,GACA6c,EAAAA,EACA1O,OAAAA,EACAq7C,WAAA7Q,EACAqM,OAAAA,GArgBA,EAsgBA+D,QAAAA,IAAA,EACAxW,QAAAv2C,KAAA+lD,SACA0H,gBAAAztD,KAAA8lD,iBACA77C,UAAAjK,KAAA88C,mBAEA98C,KAAA+D,KAAA,SAAAwpD,EAAAvpD,GACAmO,GAAAA,EAAApO,KAAA,QAAAwpD,EAAAvpD,GACA,IAAA,IAAAE,EAAA,EAAAA,EAAAy4C,EAAAl5C,OAAAS,IACAy4C,EAAAz4C,GAAAH,KAAA,QAAAwpD,EAAAvpD,IAQAipD,0BAAA,SAAApsC,GAEA,IAEA9d,EAFAkH,EAAAjK,KAAA88C,kBACA3qC,EAAAlI,EAAAkI,OAEAnO,GACA6c,EAAAA,EACA1O,OAAAA,EACAlI,UAAAA,GAGAkI,EAAAu7C,WACAv7C,EAAAu7C,UAAA,GAGAv7C,EAAAm7B,aAEArjC,EAAAijD,iBAAAltD,KAAAupC,UAAAp3B,EAAAw7C,qBACA1jD,EAAAijD,kBACAnqD,EAAA/C,KAAA4tD,iBAAA5pD,EAAAiG,GACAjK,KAAA6tD,MAAA9qD,EAAAiB,IAEAhE,KAAA6tD,MAAA,WAAA7pD,KAUA4pD,iBAAA,SAAA5pD,EAAAiG,GAGA,IAAAlH,EAAA69C,EACA,OAAA32C,EAAAu1C,QACA,IAAA,SACAz8C,EAAA,SACA69C,EAAA,IACA,MACA,IAAA,SACA79C,EAAA,SACA69C,EAAA,IACA,MACA,IAAA,QACA79C,EAAA,SACA69C,EAAA,IACA,MACA,IAAA,QACA79C,EAAA,SACA69C,EAAA,IACA,MACA,IAAA,QACA79C,EAAA,SACA69C,EAAA,UACA,MACA,IAAA,SACA79C,EAAA,UACA,MACA,IAAA,OACAA,EAAA,QAIA,OADAiB,EAAA48C,GAAAA,EACA79C,GAOA+qD,0BAAA,SAAAjtC,GACA7gB,KAAA2sC,qBAAA,EACA3sC,KAAA+mD,mBACA/mD,KAAAioD,oBAAApnC,GAAA9b,mBAEA/E,KAAAoH,QACA3J,EAAA2F,KAAAoN,YAAAxQ,KAAAA,KAAAorC,YAEA,IAAAmL,EAAAv2C,KAAA8c,WAAA+D,GACA7gB,KAAA4sC,iBAAA0J,YAAAC,GAAA11B,EAAAA,EAAA01B,QAAAA,IACAv2C,KAAAisD,aAAAprC,EAAA,SAOAktC,0BAAA,SAAAltC,GACA,GAAA7gB,KAAA2sC,oBAAA,CACA,IAAA4J,EAAAv2C,KAAA8c,WAAA+D,GACA7gB,KAAA4sC,iBAAAgK,YAAAL,GAAA11B,EAAAA,EAAA01B,QAAAA,IAEAv2C,KAAAykD,UAAAzkD,KAAA67C,mBACA77C,KAAAisD,aAAAprC,EAAA,SAOAmsC,wBAAA,SAAAnsC,GACA7gB,KAAAoH,QACApH,KAAAorC,WAAAp7B,UAEA,IAAAumC,EAAAv2C,KAAA8c,WAAA+D,GACA7gB,KAAA2sC,oBAAA3sC,KAAA4sC,iBAAAkK,WAAAj2B,EAAAA,EAAA01B,QAAAA,IACAv2C,KAAAisD,aAAAprC,EAAA,OAWA4rC,cAAA,SAAA5rC,GACA7gB,KAAAgsD,yBAAAnrC,GACA7gB,KAAAisD,aAAAprC,EAAA,eACA,IAAA1O,EAAAnS,KAAAsrD,QAEA,GAAAvC,EAAAloC,EAlpBA,GAmpBA7gB,KAAAy8C,gBACAz8C,KAAAisD,aAAAprC,EAAA,OAppBA,QAypBA,GAAAkoC,EAAAloC,EAzpBA,GA0pBA7gB,KAAA08C,iBACA18C,KAAAisD,aAAAprC,EAAA,OA3pBA,QAgqBA,GAAA7gB,KAAAo8C,cACAp8C,KAAA8tD,0BAAAjtC,QAIA,GAAA7gB,KAAAw2C,aAAA31B,KAKA7gB,KAAA88C,kBAAA,CAIA,IAAAvG,EAAAv2C,KAAA+lD,SAEA/lD,KAAAguD,iBAAAzX,EACA,IAAAuW,EAAA9sD,KAAA6sD,cAAA16C,GACA87C,EAAAjuD,KAAAkuD,aAAArtC,EAAA1O,GAmBA,GAlBAnS,KAAAo/C,sBAAAv+B,EAAA1O,GACAnS,KAAAioD,oBAAApnC,GAEAotC,IACAjuD,KAAAmuD,gBAAAttC,EAAA1O,GACAA,EAAAnS,KAAAotC,gBAGAptC,KAAAk7C,WAAA/oC,IACAA,EAAAmtC,YAAAntC,EAAAqzC,WAAArzC,IAAAnS,KAAAotC,iBACAptC,KAAA+8C,gBACAgD,GAAAxJ,EAAAltC,EACA22C,GAAAzJ,EAAAjtC,EACAmB,IAAA,EACAD,KAAA,IAIA2H,EAAA,CACA,IAAA0tC,EAAA1tC,IAAAnS,KAAAotC,cACAj7B,EAAAmtC,YACAt/C,KAAA4nD,gBAAAz1C,EAAA0O,GAEA1O,IAAAnS,KAAAotC,gBAAAj7B,EAAAm7C,UAAAW,GACAjuD,KAAA8/C,uBAAAj/B,EAAA1O,EAAA0tC,GAGA7/C,KAAAisD,aAAAprC,EAAA,SAEAisC,GAAAmB,IAAAjuD,KAAA+E,qBAOAmnD,yBAAA,WACAlsD,KAAAsrD,QAAA,KACAtrD,KAAA+lD,SAAA,KACA/lD,KAAA8lD,iBAAA,MAQAkG,yBAAA,SAAAnrC,GAEA7gB,KAAAksD,2BACAlsD,KAAA+lD,SAAA/lD,KAAA8c,WAAA+D,GAAA,GACA7gB,KAAA8lD,iBAAA9lD,KAAAu+C,kBAAAv+C,KAAA+lD,UACA/lD,KAAAsrD,QAAAtrD,KAAA88C,kBAAA98C,KAAA88C,kBAAA3qC,OAAAnS,KAAAglD,WAAAnkC,IAAA,MAMAu/B,iBAAA,SAAAv/B,GACA,IAAAhX,EAAA7J,KAAA88C,kBACA98C,KAAAupC,UAAA1/B,EAAAsI,OAAAi8C,YACApuD,KAAA+D,KAAA,oBACA8c,EAAAA,EACA5W,UAAAJ,IAGAA,EAAA81C,QACA3/C,KAAA8pC,oBAAAjgC,EAAAsI,SAaAy6C,cAAA,SAAA/rC,GAGA,IAAA1O,EAAAokC,EAEA,GAJAv2C,KAAAisD,aAAAprC,EAAA,eACA7gB,KAAAgsD,yBAAAnrC,GAGA7gB,KAAAo8C,cACAp8C,KAAA+tD,0BAAAltC,QAIA,GAAA7gB,KAAAw2C,aAAA31B,GAAA,CAIA,IAAA8jC,EAAA3kD,KAAA+8C,eAGA4H,GACApO,EAAAv2C,KAAA+lD,SAEApB,EAAAn6C,KAAA+rC,EAAAltC,EAAAs7C,EAAA5E,GACA4E,EAAAl6C,IAAA8rC,EAAAjtC,EAAAq7C,EAAA3E,GAEAhgD,KAAA29C,aAEA39C,KAAA88C,kBAMA98C,KAAAquD,iBAAAxtC,IALA1O,EAAAnS,KAAAglD,WAAAnkC,IAAA,KACA7gB,KAAAqtD,oBAAAxsC,EAAA1O,GACAnS,KAAAsuD,mBAAAn8C,EAAA0O,IAKA7gB,KAAAisD,aAAAprC,EAAA,QACA7gB,KAAAksD,6BASAoC,mBAAA,SAAAn8C,EAAA0O,GACA,IAAA+7B,EAAA58C,KAAA48C,eACAC,EAAA78C,KAAA68C,gBAAAF,EAAA38C,KAAA28C,QACAl5C,EAAAsE,KAAA7K,IAAA2/C,EAAAp5C,OAAAk5C,EAAAl5C,QAEAzD,KAAAuuD,yBAAAp8C,EAAA0O,GACA2tC,UAAA5R,EACA6R,OAAA,WACAC,aAAA,YACAC,MAAA,YACAC,YAAA,eAEA,IAAA,IAAA1qD,EAAA,EAAAA,EAAAT,EAAAS,IACAlE,KAAAuuD,yBAAA5R,EAAAz4C,GAAA2c,GACA2tC,UAAA3R,EAAA34C,GACAuqD,OAAA,WACAE,MAAA,cAGA3uD,KAAA48C,eAAAzqC,EACAnS,KAAA68C,gBAAA78C,KAAA28C,QAAA72C,UASAgmD,sBAAA,SAAA35C,EAAA0O,GACA,IAAAguC,EAAA7uD,KAAA6uD,mBACAhS,EAAA78C,KAAA68C,gBAAAF,EAAA38C,KAAA28C,QACAl5C,EAAAsE,KAAA7K,IAAA2/C,EAAAp5C,OAAAk5C,EAAAl5C,QAEAzD,KAAAuuD,yBAAAp8C,EAAA0O,GACA2tC,UAAAK,EACAJ,OAAA,YACAE,MAAA,cAEA,IAAA,IAAAzqD,EAAA,EAAAA,EAAAT,EAAAS,IACAlE,KAAAuuD,yBAAA5R,EAAAz4C,GAAA2c,GACA2tC,UAAA3R,EAAA34C,GACAuqD,OAAA,YACAE,MAAA,cAGA3uD,KAAA6uD,mBAAA18C,GAeAo8C,yBAAA,SAAAp8C,EAAA0O,EAAAiuC,GACA,IAAAC,EAAAC,EAAAC,EAAAT,EAAAM,EAAAN,UACAU,EAAAV,IAAAr8C,EAAAy8C,EAAAE,EAAAF,YAAAF,EAAAI,EAAAJ,aACAQ,IACAH,GAAAluC,EAAAA,EAAA1O,OAAAA,EAAAg9C,eAAAX,GACAQ,GAAAnuC,EAAAA,EAAA1O,OAAAq8C,EAAAY,WAAAj9C,IAEA88C,EAAA98C,GAAA+8C,EACAV,GAAAU,IAEAR,GAAA1uD,KAAA+D,KAAA2qD,EAAAM,GACAR,EAAAzqD,KAAA+qD,EAAAL,OAAAO,IAEAC,IACAL,GAAA5uD,KAAA+D,KAAA6qD,EAAAG,GACA58C,EAAApO,KAAA+qD,EAAAH,MAAAI,KAQA1D,eAAA,SAAAxqC,GACA7gB,KAAAgsD,yBAAAnrC,GACA7gB,KAAAisD,aAAAprC,EAAA,SACA7gB,KAAAksD,4BAOAmC,iBAAA,SAAAxtC,GACA,IAAA01B,EAAAv2C,KAAA8c,WAAA+D,GACA5W,EAAAjK,KAAA88C,kBAEA7yC,EAAAolD,OAAA,EACAplD,EAAAkI,OAAAi7C,UAAA,EACAnjD,EAAAk2C,SAAAt/B,EAAAs/B,SACAl2C,EAAAw1C,OAAA5+B,EAAA7gB,KAAAg7C,aAEAh7C,KAAAsvD,sBAAAzuC,EAAA5W,GACAjK,KAAAuvD,wBAAA1uC,EAAA5W,EAAAssC,GAEAtsC,EAAAijD,iBAAAltD,KAAA+E,oBAMAwqD,wBAAA,SAAA1uC,EAAA5W,EAAAssC,GACA,IAAAltC,EAAAktC,EAAAltC,EACAC,EAAAitC,EAAAjtC,EACAk2C,EAAAv1C,EAAAu1C,OACA0N,GAAA,EACAlpD,GACAmO,OAAAlI,EAAAkI,OACA0O,EAAAA,EACA5W,UAAAA,EACAssC,QAAAA,GAGA,WAAAiJ,GACA0N,EAAAltD,KAAAkkD,cAAA76C,EAAAC,KAAAtJ,KAAA6tD,MAAA,WAAA7pD,GAEA,UAAAw7C,GACA0N,EAAAltD,KAAAwvD,SAAA3uC,EAAA5W,EAAAZ,EAAAC,KAAAtJ,KAAA6tD,MAAA,UAAA7pD,GAEA,WAAAw7C,GACA0N,EAAAltD,KAAA2iD,aAAAt5C,EAAAC,EAAA,OAAAtJ,KAAA6tD,MAAA,UAAA7pD,GAEA,WAAAw7C,GACA0N,EAAAltD,KAAA2iD,aAAAt5C,EAAAC,EAAA,OAAAtJ,KAAA6tD,MAAA,UAAA7pD,GAEA,UAAAw7C,GACA0N,EAAAltD,KAAAohD,YAAA/3C,EAAAC,EAAA,OAAAtJ,KAAA6tD,MAAA,UAAA7pD,GAEA,UAAAw7C,GACA0N,EAAAltD,KAAAohD,YAAA/3C,EAAAC,EAAA,OAAAtJ,KAAA6tD,MAAA,UAAA7pD,IAGAkpD,EAAAltD,KAAAqgD,iBAAAh3C,EAAAC,MAEAtJ,KAAA6tD,MAAA,SAAA7pD,GACAhE,KAAAykD,UAAAzgD,EAAAmO,OAAAwpC,YAAA37C,KAAA27C,aAGA1xC,EAAAijD,gBAAAjjD,EAAAijD,iBAAAA,GAMAW,MAAA,SAAA9qD,EAAAiB,GACAhE,KAAA+D,KAAA,UAAAhB,EAAAiB,GACAA,EAAAmO,OAAApO,KAAAhB,EAAAiB,IAMAsrD,sBAAA,SAAAzuC,EAAA5W,GACA,GAAA,UAAAA,EAAAu1C,QAAA,WAAAv1C,EAAAu1C,QAAA,WAAAv1C,EAAAu1C,OAAA,CACA,IAAAD,EAAAv/C,KAAA89C,uBAAA7zC,EAAAkI,SAGAotC,IAAA,WAAAt1C,EAAAyuC,SAAA,WAAAzuC,EAAA0uC,WAEA4G,GAAA,WAAAt1C,EAAAyuC,SAAA,WAAAzuC,EAAA0uC,WAEA34C,KAAA49C,yBACA3zC,EAAAolD,OAAA,KAaAG,SAAA,SAAA3uC,EAAA5W,EAAAZ,EAAAC,GACA,OAAAtJ,KAAAyvD,oBAAA5uC,EAAA5W,EAAAkI,SACAlI,EAAAylD,cAAA,QACA1vD,KAAA2iD,aAAAt5C,EAAAC,KAIAW,EAAAolD,OAAA,UAAAplD,EAAAylD,eACA1vD,KAAA49C,yBAGA3zC,EAAAylD,cAAA,eACA1vD,KAAA2iD,aAAAt5C,EAAAC,EAAA,aAUAmmD,oBAAA,SAAA5uC,EAAA1O,GACA,OAAA0O,EAAA7gB,KAAA66C,cAAA76C,KAAA46C,qBAAAzoC,EAAAvK,IAAA,mBASAylD,oBAAA,SAAAxsC,EAAA1O,GACA,IAAAA,EAEA,OADAnS,KAAAykD,UAAAzkD,KAAA47C,gBACA,EAEA,IAAAF,EAAAvpC,EAAAupC,aAAA17C,KAAA07C,YACApI,EAAAtzC,KAAAotC,eAAA,oBAAAptC,KAAAotC,cAAAvnC,KACA7F,KAAAotC,cAAA,KAEAuS,IAAArM,IAAAA,EAAAntC,SAAAgM,KACAA,EAAAisC,kBAAAp+C,KAAA8c,WAAA+D,GAAA,IAEA8+B,EAWA3/C,KAAAykD,UAAAzkD,KAAA2vD,gBAAAhQ,EAAAxtC,EAAA0O,KAVA1O,EAAAyzC,gBAGA5lD,KAAA28C,QAAA72C,SAAAugC,UAAAjyB,IAAA,SAAAk3C,GACA5P,EAAA4P,EAAA5P,aAAAA,IAGA17C,KAAAykD,UAAA/I,KAUAiU,gBAAA,SAAAhQ,EAAAxtC,EAAA0O,GACA,OAAA7gB,KAAA4vD,iBAAAjQ,EAAAxtC,EAAA0O,GACA7gB,KAAA+7C,iBAEA4D,KAAA8I,EACAzoD,KAAA6vD,wBAAAlQ,EAAAxtC,EAAA0O,GAEA,QAAA8+B,GAAAxtC,EAAA29C,iBACA9vD,KAAA87C,eAGA97C,KAAA47C,eAIAgU,iBAAA,SAAAjQ,EAAAxtC,EAAA0O,GACA,MAAA,OAAA8+B,GAAA,OAAAA,EACA9+B,EAAA7gB,KAAAi7C,cAAA9oC,EAAAmvC,aAAAnvC,EAAA0wC,aAEA,OAAAlD,GAAA,OAAAA,EACA9+B,EAAA7gB,KAAAi7C,cAAA9oC,EAAAovC,aAAApvC,EAAAywC,aAEA,QAAAjD,EACAxtC,EAAAgyC,aAGAnkD,KAAAyvD,oBAAA5uC,EAAA1O,GACAA,EAAAywC,cAAAzwC,EAAA0wC,aAAA1wC,EAAAywC,cAAAzwC,EAAA0wC,cAOAgN,wBAAA,SAAAlQ,EAAAxtC,EAAA0O,GACA,IAAAkvC,EAAAhoD,KAAA4xB,MAAAxnB,EAAAjK,MAAA,IAAA,IAaA,OAXA6nD,EAAA,IACAA,GAAA,GAEAA,GAAAtH,EAAA9I,GACA9+B,EAAA7gB,KAAAi7C,eAAAwN,EAAA9I,GAAA,GAAA,IAEAoQ,GAAA,GAGAA,GAAA,EAEA/vD,KAAAipD,UAAA8G,MApmCA,GA4mCA9yD,EAAA8K,KAAA9K,IACAC,EAAA6K,KAAA7K,IAEAO,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAe,OAAAyQ,WAQAi/C,aAAA,SAAArtC,EAAA1O,GACA,IAAAg7B,EAAAntC,KAAAotC,cACA,OAAAD,GAAAntC,KAAAm/C,uBAAAt+B,IAAA1O,GAAAA,EAAAmtC,YAAAt/C,KAAAk7C,YACA/N,IAAAh7B,GAAA,oBAAAg7B,EAAAtnC,QAAAsM,EAAA41C,UAAAlnC,EAAAA,KAQAstC,gBAAA,SAAAttC,EAAA1O,GACA,IAAAg7B,EAAAntC,KAAAotC,cAEAD,EAAAmgB,WAGAn7C,IAAAg7B,IAEAh7B,EAAAnS,KAAAglD,WAAAnkC,GAAA,KAEA1O,EAAAmtC,cAIAnS,GAAA,oBAAAA,EAAAtnC,KACA7F,KAAAgwD,uBAAA79C,EAAA0O,GAGA7gB,KAAAiwD,uBAAA99C,EAAA0O,KAOAmvC,uBAAA,SAAA79C,EAAA0O,GACA,IAAAyyB,EAAAtzC,KAAAotC,cACA8iB,EAAA5c,EAAA5uC,SAAAoH,MAAA,GACAwnC,EAAAntC,SAAAgM,IACAmhC,EAAA6c,iBAAAh+C,GACAnS,KAAA48C,eAAAzqC,EACAnS,KAAA68C,gBAAA78C,KAAA28C,QAAA72C,SACA,IAAAwtC,EAAAptC,QAEAlG,KAAA8nD,iBAAAxU,EAAAttC,KAAA,GAAA6a,KAIAyyB,EAAA8c,cAAAj+C,GACAnS,KAAA48C,eAAAtJ,EACAtzC,KAAA68C,gBAAA78C,KAAA28C,QAAA72C,UAEA9F,KAAAknD,qBAAAgJ,EAAArvC,IAMAovC,uBAAA,SAAA99C,EAAA0O,GACA,IAAAgnC,EAAA7nD,KAAAu9C,mBAAAlQ,EAAArtC,KAAAqwD,aAAAl+C,GACAnS,KAAA48C,eAAAvP,EAIArtC,KAAA8nD,iBAAAza,EAAAxsB,GACA7gB,KAAAknD,qBAAAW,EAAAhnC,IAOAwvC,aAAA,SAAAl+C,GACA,IAAA/M,EAAApF,KAAA0E,SACA4rD,EAAAlrD,EAAAjC,QAAAnD,KAAAotC,eAAAhoC,EAAAjC,QAAAgP,GACAo+C,EAAAD,GACAtwD,KAAAotC,cAAAj7B,IACAA,EAAAnS,KAAAotC,eAEA,OADAptC,KAAAotC,cAAAoY,WAAAxlD,KAAAotC,cAAAojB,cACA,IAAA/yD,EAAAgzD,gBAAAF,GACAzxD,OAAAkB,QAQA0wD,sBAAA,SAAA7vC,GAEA,IACA8vC,EADAtjB,EAAArtC,KAAA4wD,gBAAA/vC,GAIA,IAAAwsB,EAAA5pC,OACAzD,KAAA4nD,gBAAAva,EAAA,GAAAxsB,GAEAwsB,EAAA5pC,OAAA,IACAktD,EAAA,IAAAlzD,EAAAgzD,gBAAApjB,EAAAhH,WACAvnC,OAAAkB,OAEAA,KAAA4nD,gBAAA+I,EAAA9vC,KAOA+vC,gBAAA,SAAA/vC,GAYA,IAXA,IACAgwC,EADAxjB,KAEAt1B,EAAA/X,KAAA+8C,eAAAgD,GACA/nC,EAAAhY,KAAA+8C,eAAAiD,GACA5wC,EAAA2I,EAAA/X,KAAA+8C,eAAAvyC,KACA6E,EAAA2I,EAAAhY,KAAA+8C,eAAAtyC,IACAqmD,EAAA,IAAArzD,EAAA2L,MAAAnM,EAAA8a,EAAA3I,GAAAnS,EAAA+a,EAAA3I,IACA0hD,EAAA,IAAAtzD,EAAA2L,MAAAlM,EAAA6a,EAAA3I,GAAAlS,EAAA8a,EAAA3I,IACA2hD,GAAAhxD,KAAAy7C,wBACAsR,EAAAh1C,IAAA3I,GAAA4I,IAAA3I,EAEAnL,EAAAlE,KAAA0E,SAAAjB,OAAAS,QACA2sD,EAAA7wD,KAAA0E,SAAAR,KAEA2sD,EAAAvR,YAAAuR,EAAAjmC,UAIAomC,GAAAH,EAAAI,mBAAAH,EAAAC,IACAF,EAAAK,sBAAAJ,EAAAC,IACAC,GAAAH,EAAA5S,cAAA6S,IACAE,GAAAH,EAAA5S,cAAA8S,MAEA1jB,EAAAzpC,KAAAitD,GAEA9D,MAYA,OANA1f,EAAA5pC,OAAA,IACA4pC,EAAAA,EAAAjpC,OAAA,SAAAa,GACA,OAAAA,EAAA8iD,UAAAlnC,EAAAA,OAIAwsB,GAMA8f,mBAAA,SAAAtsC,GACA7gB,KAAAk7C,WAAAl7C,KAAA+8C,gBACA/8C,KAAA0wD,sBAAA7vC,GAEA7gB,KAAAykD,UAAAzkD,KAAA47C,eAEA57C,KAAA+8C,eAAA,QAQAt/C,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAkrC,aAAA15B,WAkCAmB,UAAA,SAAApM,GACAA,IAAAA,MAEA,IAAAsM,EAAAtM,EAAAsM,QAAA,MACAC,EAAAvM,EAAAuM,SAAA,EACAq0B,GAAA5gC,EAAA4gC,YAAA,IAAA5gC,EAAA+lC,oBAAA/pC,KAAA8qC,mBAAA,GACAz6B,EAAArQ,KAAAmxD,gBAAAvsB,EAAA5gC,GACA,OAAAvG,EAAA2F,KAAAgN,UAAAC,EAAAC,EAAAC,IAgBA4gD,gBAAA,SAAAvsB,EAAAwsB,GACAxsB,EAAAA,GAAA,EAEA,IAAAysB,IADAD,EAAAA,OACA7xD,OAAAS,KAAAT,OAAAqlC,EACA0sB,GAAAF,EAAAjyD,QAAAa,KAAAb,QAAAylC,EACA3mB,EAAAje,KAAAgtC,UACAukB,EAAAvxD,KAAAT,MACAiyD,EAAAxxD,KAAAb,OACAsyD,EAAAxzC,EAAA2mB,EACA8sB,EAAA1xD,KAAA2pC,kBACAt4B,GAAAqgD,EAAA,IAAAN,EAAA5mD,MAAA,IAAAo6B,EACAtzB,GAAAogD,EAAA,IAAAN,EAAA3mD,KAAA,IAAAm6B,EACA+sB,EAAA3xD,KAAAsqC,YACAsnB,GAAAH,EAAA,EAAA,EAAAA,EAAApgD,EAAAC,GACAugD,EAAA7xD,KAAA+pC,oBACA15B,EAAA5S,EAAA2F,KAAA6M,sBACA6hD,EAAA9xD,KAAAorC,WAkBA,OAjBA/6B,EAAA9Q,MAAA8xD,EACAhhD,EAAAlR,OAAAmyD,EACAtxD,KAAAorC,WAAA,KACAprC,KAAA+pC,qBAAA,EACA/pC,KAAAsqC,aAAA,EACAtqC,KAAA2pC,kBAAAioB,EACA5xD,KAAAT,MAAA8xD,EACArxD,KAAAb,OAAAmyD,EACAtxD,KAAAutC,yBACAvtC,KAAAwuC,aAAAn+B,EAAApR,WAAA,MAAAe,KAAA0E,UACA1E,KAAA2pC,kBAAA+nB,EACA1xD,KAAAT,MAAAgyD,EACAvxD,KAAAb,OAAAqyD,EACAxxD,KAAAutC,yBACAvtC,KAAAsqC,YAAAqnB,EACA3xD,KAAA+pC,oBAAA8nB,EACA7xD,KAAAorC,WAAA0mB,EACAzhD,KAOA5S,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAkrC,aAAA15B,WAeA8iD,qBAAA,SAAAC,EAAAtsD,EAAA8H,GACA,OAAAxN,KAAAiyD,aAAAD,EAAAtsD,EAAA8H,IAwBAykD,aAAA,SAAAD,EAAAtsD,EAAA8H,GACA,GAAAwkD,EAAA,CAKA,IAAAE,EAAA,iBAAAF,EACAG,KAAAngC,MAAAggC,GACAv0D,EAAA2F,KAAA6B,OAAA3H,MAAA00D,GAEA/1C,EAAAjc,KACAw1B,EAAA08B,EAAA18B,SACA1wB,EAAA9E,KAAA8E,kBAoBA,OAlBA9E,KAAA8E,mBAAA,SAEAotD,EAAA18B,SAEAx1B,KAAAoyD,gBAAAF,EAAA9sD,QAAA,SAAAqI,GACAwO,EAAAiyB,QACAjyB,EAAAo2C,cAAAH,EAAA,WACA18B,EACAvZ,EAAAm2C,iBAAA58B,GAAA,SAAA88B,GACAr2C,EAAAuZ,SAAA88B,EAAA,GACAr2C,EAAAs2C,cAAAzuD,KAAAmY,EAAAi2C,EAAAzkD,EAAA3I,EAAAY,KAIAuW,EAAAs2C,cAAAzuD,KAAAmY,EAAAi2C,EAAAzkD,EAAA3I,EAAAY,MAGA8H,GACAxN,OAUAuyD,cAAA,SAAAL,EAAAzkD,EAAA3I,EAAAY,GACA,IAAAuW,EAAAjc,KACAyN,EAAAI,QAAA,SAAApG,EAAAvC,GAGA+W,EAAAjX,SAAAyC,EAAAvC,KAEAlF,KAAA8E,kBAAAA,SAEAotD,EAAA9sD,eACA8sD,EAAA9oB,uBACA8oB,EAAA5oB,oBACA4oB,EAAAvgB,kBACAugB,EAAAxgB,QAKA1xC,KAAAyG,YAAAyrD,GACAlyD,KAAAsuC,YACA5oC,GAAAA,KAQA2sD,cAAA,SAAAH,EAAAxsD,GACA,IAAA8sD,GACArpB,iBAAA,EACAE,cAAA,EACAD,iBAAA,EACAE,cAAA,GAGA,GAAA4oB,EAAA9oB,iBAAA8oB,EAAA5oB,cAAA4oB,EAAAvgB,YAAAugB,EAAAxgB,QAAA,CAKA,IAAA+gB,EAAA,WACAD,EAAAppB,iBAAAopB,EAAAlpB,cAAAkpB,EAAArpB,iBAAAqpB,EAAAnpB,cACA3jC,GAAAA,KAIA1F,KAAA0yD,eAAA,kBAAAR,EAAA9oB,gBAAAopB,EAAAC,GACAzyD,KAAA0yD,eAAA,eAAAR,EAAA5oB,aAAAkpB,EAAAC,GACAzyD,KAAA0yD,eAAA,kBAAAR,EAAAvgB,WAAA6gB,EAAAC,GACAzyD,KAAA0yD,eAAA,eAAAR,EAAAxgB,QAAA8gB,EAAAC,QAbA/sD,GAAAA,KAuBAgtD,eAAA,SAAA7rD,EAAAxC,EAAAmuD,EAAA9sD,GACA,IAAAuW,EAAAjc,KAEA,IAAAqE,EAGA,OAFAmuD,EAAA3rD,IAAA,OACAnB,GAAAA,KAIA,oBAAAmB,GAAA,iBAAAA,EACApJ,EAAA2F,KAAAmK,gBAAAlJ,GAAA,SAAAsuD,GACA12C,EAAApV,GAAA8rD,EAAA,GACAH,EAAA3rD,IAAA,EACAnB,GAAAA,MAIA1F,KAAA,MAAAvC,EAAA2F,KAAAsI,OAAAoP,WAAAjU,GAAA,IAAAxC,EAAA,WACAmuD,EAAA3rD,IAAA,EACAnB,GAAAA,OAWA0sD,gBAAA,SAAAhtD,EAAAM,EAAA8H,GACApI,GAAA,IAAAA,EAAA3B,OAKAhG,EAAA2F,KAAAmK,eAAAnI,EAAA,SAAAqI,GACA/H,GAAAA,EAAA+H,IACA,KAAAD,GANA9H,GAAAA,OAcAktD,WAAA,SAAAtiD,EAAA5K,GACA1F,KAAA1C,MAAA,SAAAA,GACAoI,EAAApI,EAAA8S,UAAAE,OAUAuiD,yBAAA,SAAAviD,EAAAs0B,EAAAl/B,GACA1F,KAAA1C,MAAA,SAAAA,GACAoI,EAAApI,EAAAw1D,wBAAAxiD,EAAAs0B,OASAtnC,MAAA,SAAAoI,EAAAqJ,GACA,IAAAgE,EAAAo/C,KAAAY,UAAA/yD,KAAAw0C,OAAAzlC,IACA/O,KAAAgzD,iBAAA,SAAA11D,GACAA,EAAA20D,aAAAl/C,EAAA,WACArN,GAAAA,EAAApI,QAWA01D,iBAAA,SAAAttD,GACA,IAAAwZ,EAAAzhB,EAAA2F,KAAA6M,sBAEAiP,EAAA3f,MAAAS,KAAAT,MACA2f,EAAA/f,OAAAa,KAAAb,OAEA,IAAA7B,EAAA,IAAAG,EAAAe,OAAA0gB,GACA5hB,EAAA8J,OAAApH,KAAAoH,OACApH,KAAAopC,iBACA9rC,EAAAmtC,mBAAAzqC,KAAAopC,gBAAAx8B,IAAA,WACAtP,EAAAgxC,YACA5oC,GAAAA,EAAApI,KAEAA,EAAA21D,uBAAAjzD,KAAAizD,uBACA31D,EAAA41D,uBAAAlzD,KAAAkzD,wBAGAxtD,GAAAA,EAAApI,MAMA,SAAAZ,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACA3c,EAAAG,EAAA2F,KAAA6B,OAAA3H,MACAC,EAAAE,EAAA2F,KAAA7F,QACAud,EAAArd,EAAA2F,KAAAsI,OAAAoP,WACA3d,EAAAM,EAAA2F,KAAAjG,iBACAg2D,EAAA11D,EAAAkrC,aAAA2L,SAAA,eACA8e,GAAA31D,EAAAoD,aAGApD,EAAAuR,SAuCAvR,EAAAuR,OAAAvR,EAAA2F,KAAA+Y,YAAA1e,EAAA+I,eASAX,KAAA,SAQA6yC,QAAA,OAQAC,QAAA,MAOAluC,IAAA,EAOAD,KAAA,EAOAjL,MAAA,EAOAJ,OAAA,EAOA8R,OAAA,EAOAC,OAAA,EAOAS,OAAA,EAOAC,OAAA,EAOA8L,QAAA,EAOAxV,MAAA,EAOAiJ,MAAA,EAOAC,MAAA,EAOAiiD,WAAA,GAOAnU,oBAAA,EAOAxD,YAAA,KAOAC,WAAA,KAOAsI,QAAA,EAOAqP,YAAA,yBAOAC,gBAAA,KAOAC,YAAA,wBAQAC,kBAAA,KAOAC,YAAA,OAOAC,gBAAA,KAUA7Y,iBAAA,EAUAC,kBAAA,EAQAz3C,KAAA,aASA6xB,SAAA,UAOAsa,yBAAA,cAQAtG,gBAAA,GAQA4V,yBAAA,GAQA30B,OAAA,KAOAstB,YAAA,EAMA3C,gBAAA,KAOA6e,iBAAA,EAOAhf,cAAA,OAOAC,eAAA,QAOAC,iBAAA,EAOAzM,OAAA,KAOAwrB,wBAAA,GAOAC,kBAAA,EAYAppC,gBAAA,KAOAqpC,cAAA,EAQAzU,YAAA,EAOAD,SAAA,EAOAz0B,SAAA,EAOAopC,aAAA,EAOA/U,YAAA,EAOA6Q,kBAAA,EAOAmE,oBAAA,GAOAhY,oBAAA,EAOA/T,sBAAA,EAUA9gC,OAAA,KAOA8sD,eAAA,EAOAC,eAAA,EAOAhQ,cAAA,EAOAvB,cAAA,EAOAC,cAAA,EAOAuR,gBAAA,EAOA9S,cAAA,EAOAC,cAAA,EAOAuB,iBAAA,EAQAvR,mBAAA,EAUA6hB,cAAAA,EAYAiB,gBAAA,EAWAC,cAAA,EAYAC,eAAA,EAQAC,OAAA,EAUAlH,SAAA,EAOAmH,WAAA,OAQAC,gBAAA,6TAKAvoD,MAAA,KASAwoD,gBAAA,wKAGAxoD,MAAA,KASAqpB,cAAAvV,EASA20C,UAAA,EAYAC,oBAAA,EAMAx4C,WAAA,SAAArY,GACAA,GACAhE,KAAAonC,WAAApjC,IAQA22C,mBAAA,WACA36C,KAAA80D,oBACA90D,KAAA4vC,aAAAnyC,EAAA2F,KAAA6M,sBACAjQ,KAAA4+C,cAAA5+C,KAAA4vC,aAAA3wC,WAAA,MACAe,KAAA+0D,qBAEA/0D,KAAAw0D,OAAA,GAkBAQ,gBAAA,SAAAC,GACA,IAAA1zD,EAAA9D,EAAA8D,mBACAhC,EAAA01D,EAAA11D,MAAAJ,EAAA81D,EAAA91D,OACAjC,EAAAO,EAAA+D,kBAAAvE,EAAAQ,EAAAgE,kBACA,GAAAlC,GAAArC,GAAAiC,GAAAjC,GAAAqC,EAAAJ,GAAAoC,EAOA,OANAhC,EAAAtC,IACAg4D,EAAA11D,MAAAtC,GAEAkC,EAAAlC,IACAg4D,EAAA91D,OAAAlC,GAEAg4D,EAEA,IAAArhD,EAAArU,EAAAJ,EAAA+1D,EAAAz3D,EAAA2F,KAAAuQ,gBAAAC,EAAArS,GACAyS,EAAAvW,EAAA2F,KAAA4Q,SACA3K,EAAA2K,EAAA/W,EAAAi4D,EAAA7rD,EAAAnM,GACAoM,EAAA0K,EAAA/W,EAAAi4D,EAAA5rD,EAAApM,GAWA,OAVAqC,EAAA8J,IACA4rD,EAAAvlB,OAAAnwC,EAAA8J,EACA4rD,EAAA11D,MAAA8J,EACA4rD,EAAAE,QAAA,GAEAh2D,EAAAmK,IACA2rD,EAAAtlB,OAAAxwC,EAAAmK,EACA2rD,EAAA91D,OAAAmK,EACA2rD,EAAAE,QAAA,GAEAF,GAcAG,0BAAA,WACA,IAAAC,EAAAr1D,KAAAs1D,wBAEAzT,EAAA7hD,KAAA8hD,0BAAA,EAAA,GACAyT,EAAA1T,EAAAx4C,EAAAgsD,EAAApkD,OAAAjR,KAAAiR,OACAukD,EAAA3T,EAAAv4C,EAAA+rD,EAAAnkD,OAAAlR,KAAAkR,OACA,OAIA3R,MAAAg2D,EAluBA,EAmuBAp2D,OAAAq2D,EAnuBA,EAouBA9lB,MAAA2lB,EAAApkD,OACA0+B,MAAA0lB,EAAAnkD,OACA7H,EAAAksD,EACAjsD,EAAAksD,IAUAT,mBAAA,WACA,IAAAh2D,EAAAiB,KAAAlB,OACA,GAAAkB,KAAAs0D,cAAAv1D,GAAAA,EAAA+9C,kBAAA,CACA,IAAA3qC,EAAApT,EAAA+9C,kBAAA3qC,OACAqtC,EAAAzgD,EAAA+9C,kBAAA0C,OACA,GAAAx/C,OAAAmS,GAAAqtC,EAAA1zC,OAAA,UAAA0zC,EAAA1zC,MAAA,EAAA,GACA,OAAA,EAGA,IAGA2pD,EAAAC,EAHA52D,EAAAkB,KAAA4vC,aACAqlB,EAAAj1D,KAAAg1D,gBAAAh1D,KAAAo1D,6BACAO,EAAAl4D,EAAAgE,kBACAlC,EAAA01D,EAAA11D,MAAAJ,EAAA81D,EAAA91D,OACAuwC,EAAAulB,EAAAvlB,MAAAC,EAAAslB,EAAAtlB,MACAimB,EAAAr2D,IAAAS,KAAA61D,YAAA12D,IAAAa,KAAA81D,YACAC,EAAA/1D,KAAA0vC,QAAAA,GAAA1vC,KAAA2vC,QAAAA,EACAqmB,EAAAJ,GAAAG,EACAE,EAAA,EAAAC,EAAA,EAAAC,GAAA,EACA,GAAAP,EAAA,CACA,IAAAQ,EAAAp2D,KAAA4vC,aAAArwC,MACA82D,EAAAr2D,KAAA4vC,aAAAzwC,OACAm3D,EAAA/2D,EAAA62D,GAAAj3D,EAAAk3D,EACAE,GAAAh3D,EAAA,GAAA62D,GAAAj3D,EAAA,GAAAk3D,IACAD,EAAAT,GAAAU,EAAAV,EACAQ,EAAAG,GAAAC,EACAD,IAAArB,EAAAE,SAAA51D,EAAAo2D,GAAAx2D,EAAAw2D,KACAM,EAAA,GAAA12D,EACA22D,EAAA,GAAA/2D,GAGA,QAAA62D,IACAG,GACAr3D,EAAAS,MAAAwI,KAAAwO,KAAAhX,EAAA02D,GACAn3D,EAAAK,OAAA4I,KAAAwO,KAAApX,EAAA+2D,KAGAl2D,KAAA4+C,cAAA4X,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACAx2D,KAAA4+C,cAAA3Q,UAAA,EAAA,EAAAnvC,EAAAS,MAAAT,EAAAK,SAEAs2D,EAAAR,EAAA5rD,EAAA,EACAqsD,EAAAT,EAAA3rD,EAAA,EACAtJ,KAAA6vC,kBAAA9nC,KAAA4xB,MAAA76B,EAAAS,MAAA,EAAAk2D,GAAAA,EACAz1D,KAAA8vC,kBAAA/nC,KAAA4xB,MAAA76B,EAAAK,OAAA,EAAAu2D,GAAAA,EACA11D,KAAA61D,WAAAt2D,EACAS,KAAA81D,YAAA32D,EACAa,KAAA4+C,cAAA1/C,UAAAc,KAAA6vC,kBAAA7vC,KAAA8vC,mBACA9vC,KAAA4+C,cAAAx/C,MAAAswC,EAAAC,GACA3vC,KAAA0vC,MAAAA,EACA1vC,KAAA2vC,MAAAA,GACA,IASAvI,WAAA,SAAApjC,GACAhE,KAAAyG,YAAAzC,GACAhE,KAAA2G,cAAA3C,EAAAV,KAAA,QACAtD,KAAA2G,cAAA3C,EAAAomB,OAAA,UACApqB,KAAAmH,cAAAnD,GACAhE,KAAAgH,aAAAhD,EAAAV,KAAA,QACAtD,KAAAgH,aAAAhD,EAAAomB,OAAA,WAOAngB,UAAA,SAAAjL,GACA,IAAAkuB,EAEAA,EADAltB,KAAAqtC,QAAArtC,KAAAqtC,MAAA+B,eACApvC,KAAAy1B,sBAGAz1B,KAAAy2D,gBAEAz3D,EAAAiL,UAAAijB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAQAyY,SAAA,SAAAC,GACA,IAAAvxB,EAAA5W,EAAAuR,OAAAqF,oBAEApP,GACAY,KAAA7F,KAAA6F,KACAnI,QAAAD,EAAAC,QACAg7C,QAAA14C,KAAA04C,QACAC,QAAA34C,KAAA24C,QACAnuC,KAAAjN,EAAAyC,KAAAwK,KAAA6J,GACA5J,IAAAlN,EAAAyC,KAAAyK,IAAA4J,GACA9U,MAAAhC,EAAAyC,KAAAT,MAAA8U,GACAlV,OAAA5B,EAAAyC,KAAAb,OAAAkV,GACA/Q,KAAAtD,KAAAsD,MAAAtD,KAAAsD,KAAAqiC,SAAA3lC,KAAAsD,KAAAqiC,WAAA3lC,KAAAsD,KACA8mB,OAAApqB,KAAAoqB,QAAApqB,KAAAoqB,OAAAub,SAAA3lC,KAAAoqB,OAAAub,WAAA3lC,KAAAoqB,OACAstB,YAAAn6C,EAAAyC,KAAA03C,YAAArjC,GACA0gC,gBAAA/0C,KAAA+0C,gBAAA/0C,KAAA+0C,gBAAAjvC,SAAA9F,KAAA+0C,gBACAH,cAAA50C,KAAA40C,cACAgf,iBAAA5zD,KAAA4zD,iBACA/e,eAAA70C,KAAA60C,eACAC,iBAAAv3C,EAAAyC,KAAA80C,iBAAAzgC,GACApD,OAAA1T,EAAAyC,KAAAiR,OAAAoD,GACAnD,OAAA3T,EAAAyC,KAAAkR,OAAAmD,GACAnM,MAAA3K,EAAAyC,KAAAkI,MAAAmM,GACA1C,MAAA3R,KAAA2R,MACAC,MAAA5R,KAAA4R,MACA8L,QAAAngB,EAAAyC,KAAA0d,QAAArJ,GACAg0B,OAAAroC,KAAAqoC,QAAAroC,KAAAqoC,OAAA1C,SAAA3lC,KAAAqoC,OAAA1C,WAAA3lC,KAAAqoC,OACAzd,QAAA5qB,KAAA4qB,QACAxjB,OAAApH,KAAAoH,QAAAkL,OAAAtS,KAAAoH,QACA+hC,gBAAAnpC,KAAAmpC,gBACAhU,SAAAn1B,KAAAm1B,SACAs/B,WAAAz0D,KAAAy0D,WACAhlB,yBAAAzvC,KAAAyvC,yBACA/kB,gBAAA1qB,KAAA0qB,gBAAA1qB,KAAA0qB,gBAAA5kB,SAAA,KACAqL,MAAA5T,EAAAyC,KAAAmR,MAAAkD,GACAjD,MAAA7T,EAAAyC,KAAAoR,MAAAiD,IAcA,OAXArU,KAAAw1B,WACAvwB,EAAAuwB,SAAAx1B,KAAAw1B,SAAAmQ,SAAAC,GACA3gC,EAAAuwB,SAAAo/B,SAAA50D,KAAAw1B,SAAAo/B,SACA3vD,EAAAuwB,SAAAq/B,mBAAA70D,KAAAw1B,SAAAq/B,oBAGAp3D,EAAA2F,KAAAyL,uBAAA7O,KAAAiF,EAAA2gC,GACA5lC,KAAAkoC,uBACAjjC,EAAAjF,KAAA02D,qBAAAzxD,IAGAA,GAQAisC,iBAAA,SAAAtL,GAEA,OAAA5lC,KAAA2lC,SAAAC,IAOA8wB,qBAAA,SAAAzxD,GACA,IAAAgK,EAAAxR,EAAA2F,KAAAoI,SAAAvG,EAAAY,MAAAoJ,UACAylD,EAAAzlD,EAAAylD,gBAiBA,OAhBAA,EAAA7mD,QAAA,SAAAnK,GACA,GAAA,SAAAA,GAAA,QAAAA,EAAA,CAGAuB,EAAAvB,KAAAuL,EAAAvL,WACAuB,EAAAvB,GAEA,IAAA+mB,EAAA,mBAAAzb,OAAAC,UAAAC,SAAApL,KAAAmB,EAAAvB,KACA,mBAAAsL,OAAAC,UAAAC,SAAApL,KAAAmL,EAAAvL,IAGA+mB,GAAA,IAAAxlB,EAAAvB,GAAAD,QAAA,IAAAwL,EAAAvL,GAAAD,eACAwB,EAAAvB,MAIAuB,GAOAiK,SAAA,WACA,MAAA,YAAA4L,EAAA9a,KAAA6F,MAAA,KAOA8wD,iBAAA,WACA,IAAA1lD,EAAAjR,KAAAiR,OAAAC,EAAAlR,KAAAkR,OACA,GAAAlR,KAAAqtC,MAAA,CACA,IAAAupB,EAAA52D,KAAAqtC,MAAAspB,mBACA1lD,GAAA2lD,EAAA3lD,OACAC,GAAA0lD,EAAA1lD,OAEA,OAAAD,OAAAA,EAAAC,OAAAA,IAOAokD,sBAAA,WACA,IAAAl2D,EAAAY,KAAA22D,mBAAA1lD,EAAA7R,EAAA6R,OAAAC,EAAA9R,EAAA8R,OACA,GAAAlR,KAAAlB,OAAA,CACA,IAAAmf,EAAAje,KAAAlB,OAAAkuC,UACA6pB,EAAA72D,KAAAlB,OAAAgsC,mBACA75B,GAAAgN,EAAA44C,EACA3lD,GAAA+M,EAAA44C,EAEA,OAAA5lD,OAAAA,EAAAC,OAAAA,IAOA4lD,iBAAA,WACA,IAAAp5C,EAAA1d,KAAA0d,QAIA,OAHA1d,KAAAqtC,QACA3vB,GAAA1d,KAAAqtC,MAAAypB,oBAEAp5C,GASAhW,KAAA,SAAAC,EAAAtD,GACA,IAAA0yD,EAAA,WAAApvD,GAAA,WAAAA,EACAqvD,EAAAh3D,KAAA2H,KAAAtD,EAAA4yD,GAAA,EAiCA,OA/BAF,IACA1yD,EAAArE,KAAAk3D,gBAAA7yD,IAEA,WAAAsD,GAAAtD,EAAA,GACArE,KAAA2R,OAAA3R,KAAA2R,MACAtN,IAAA,GAEA,WAAAsD,GAAAtD,EAAA,GACArE,KAAA4R,OAAA5R,KAAA4R,MACAvN,IAAA,GAEA,WAAAsD,IAAAtD,GAAAA,aAAA5G,EAAAsqC,OAGA,UAAApgC,GAAA3H,KAAAqtC,OACArtC,KAAAqtC,MAAA3mC,IAAA,QAAArC,GAHAA,EAAA,IAAA5G,EAAAsqC,OAAA1jC,GAMArE,KAAA2H,GAAAtD,EAEA2yD,IACAC,EAAAj3D,KAAAqtC,OAAArtC,KAAAqtC,MAAA8pB,aACAn3D,KAAA20D,gBAAAxxD,QAAAwE,IAAA,GACA3H,KAAAw0D,OAAA,EACAyC,GAAAj3D,KAAAqtC,MAAA3mC,IAAA,SAAA,IAEAuwD,GAAAj3D,KAAA00D,gBAAAvxD,QAAAwE,IAAA,GACA3H,KAAAqtC,MAAA3mC,IAAA,SAAA,IAIA1G,MASAo3D,WAAA,aAUAC,qBAAA,WACA,OAAAr3D,KAAAlB,QAAAkB,KAAAlB,OAAA6qC,kBACA3pC,KAAAlB,OAAA6qC,kBAEAlsC,EAAA4D,QAAAyE,UASAwxD,aAAA,WACA,OAAA,IAAAt3D,KAAA0d,SACA,IAAA1d,KAAAT,OAAA,IAAAS,KAAAb,QAAA,IAAAa,KAAA03C,cACA13C,KAAA4qB,SAOAmlB,OAAA,SAAA/wC,GAEAgB,KAAAs3D,gBAGAt3D,KAAAlB,QAAAkB,KAAAlB,OAAAmrC,gBAAAjqC,KAAAqtC,QAAArtC,KAAAu3D,eAGAv4D,EAAA6Q,OACA7P,KAAAw3D,yBAAAx4D,GACAgB,KAAAy3D,wBAAAz4D,GACAgB,KAAAiK,UAAAjL,GACAgB,KAAA03D,YAAA14D,GACAgB,KAAAu1C,WAAAv2C,EAAAgB,MACAA,KAAA0qB,iBACA1rB,EAAAiL,UAAArF,MAAA5F,EAAAgB,KAAA0qB,iBAEA1qB,KAAAoH,QAAA3J,EAAA2F,KAAAoN,YAAAxQ,KAAAhB,GACAgB,KAAAmvC,eACAnvC,KAAAqvC,cACArvC,KAAA23D,kBAAA34D,KAGAgB,KAAA43D,qBACA53D,KAAAw0D,OAAA,EACAx0D,KAAA63D,WAAA74D,GACAgB,KAAAozD,eAAApzD,KAAAq0D,gBACAr0D,KAAAouD,WAAA0J,YAAA,qBAGA93D,KAAAoH,QAAApI,EAAAgR,UACAhR,EAAAgR,YAGAq/B,YAAA,SAAArrC,GACAA,EAAAA,MACAhE,KAAA4vC,cACA5vC,KAAA26C,qBAEA36C,KAAA+3D,iBACA/3D,KAAAq0D,gBAAAr0D,KAAAouD,WAAA0J,YAAA,oBACA93D,KAAA63D,WAAA73D,KAAA4+C,cAAA56C,EAAAsrC,aACAtvC,KAAAw0D,OAAA,IAOAoD,mBAAA,WACA53D,KAAA4vC,aAAA,KACA5vC,KAAA61D,WAAA,EACA71D,KAAA81D,YAAA,GAaAkC,UAAA,WACA,OAAAh4D,KAAAoqB,QAAA,gBAAApqB,KAAAoqB,QAAA,IAAApqB,KAAA03C,aAaAugB,QAAA,WACA,OAAAj4D,KAAAsD,MAAA,gBAAAtD,KAAAsD,MAWA40D,iBAAA,WACA,QAAA,WAAAl4D,KAAAy0D,aACAz0D,KAAAi4D,YAAAj4D,KAAAg4D,aAAA,iBAAAh4D,KAAAqoC,WAGAroC,KAAAw1B,UAeA2Z,YAAA,WAKA,OAJAnvC,KAAAm4D,WAAAn4D,KAAAk4D,oBACAl4D,KAAAozD,iBACApzD,KAAAqtC,QAAArtC,KAAAqtC,MAAA8pB,cAEAn3D,KAAAm4D,YAQAC,eAAA,WACA,QAAAp4D,KAAAqoC,SAAA,IAAAroC,KAAAqoC,OAAA/C,SAAA,IAAAtlC,KAAAqoC,OAAA9C,UAOA8yB,oBAAA,SAAAr5D,GACA,IAAAyP,EAAAzO,KAAAw1B,SAWA,GAVAx2B,EAAA6Q,OAGApB,EAAAmmD,SACA51D,EAAAywC,yBAAA,kBAGAzwC,EAAAywC,yBAAA,iBAGAhhC,EAAAomD,mBAAA,CACA,IAAA3nC,EAAAzvB,EAAA2F,KAAAsH,gBAAA1K,KAAAy1B,uBACAz2B,EAAAiL,UAAAijB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAze,EAAAxE,UAAAjL,GACAA,EAAAI,MAAA,EAAAqP,EAAAihC,MAAA,EAAAjhC,EAAAkhC,OACA3wC,EAAAM,UAAAmP,EAAAmhC,cAAAnhC,EAAAohC,mBAAAphC,EAAAqhC,mBACA9wC,EAAAgR,WAOA6nD,WAAA,SAAA74D,EAAAswC,GACA,IAAAgpB,EAAAt4D,KAAAsD,KAAAi1D,EAAAv4D,KAAAoqB,OACAklB,GACAtvC,KAAAsD,KAAA,QACAtD,KAAAoqB,OAAA,GACApqB,KAAAw4D,uBAAAx5D,KAGAgB,KAAAgvC,kBAAAhwC,GACAgB,KAAAy4D,iBAAAz5D,EAAAgB,MACAA,KAAA04D,eAAA15D,EAAAgB,OAEAA,KAAA22C,QAAA33C,GACAgB,KAAA24D,cAAA35D,GACAgB,KAAAsD,KAAAg1D,EACAt4D,KAAAoqB,OAAAmuC,GAGAI,cAAA,SAAA35D,GACA,IAAAyP,EAAAzO,KAAAw1B,SACA/mB,IAIAA,EAAA3P,OAAAkB,KAAAlB,OACA2P,EAAA0gC,cACA1gC,EAAA2gC,gBAAA,EACA3gC,EAAA4gC,aAAAC,aAAA,IACAtvC,KAAAq4D,oBAAAr5D,KAOA24D,kBAAA,SAAA34D,GACAA,EAAAI,MAAA,EAAAY,KAAA0vC,MAAA,EAAA1vC,KAAA2vC,OACA3wC,EAAAM,UAAAU,KAAA4vC,cAAA5vC,KAAA6vC,mBAAA7vC,KAAA8vC,oBAQAioB,aAAA,SAAAa,GACA,GAAA54D,KAAAs3D,eACA,OAAA,EAEA,GAAAt3D,KAAA4vC,eAAAgpB,GAAA54D,KAAA+0D,qBAEA,OAAA,EAGA,GAAA/0D,KAAAw0D,OACAx0D,KAAAw1B,UAAAx1B,KAAAw1B,SAAAq/B,oBACA70D,KAAAq0D,gBAAAr0D,KAAA2tD,gBAAA,mBACA,CACA,GAAA3tD,KAAA4vC,eAAAgpB,EAAA,CACA,IAAAr5D,EAAAS,KAAA61D,WAAA71D,KAAA0vC,MACAvwC,EAAAa,KAAA81D,YAAA91D,KAAA2vC,MACA3vC,KAAA4+C,cAAA3Q,WAAA1uC,EAAA,GAAAJ,EAAA,EAAAI,EAAAJ,GAEA,OAAA,EAGA,OAAA,GAQA6vC,kBAAA,SAAAhwC,GACA,GAAAgB,KAAAmpC,gBAAA,CAGA,IAAA0Y,EAAA7hD,KAAA64D,+BACA75D,EAAAoxC,UAAApwC,KAAAmpC,gBAEAnqC,EAAAg7C,UACA6H,EAAAx4C,EAAA,GACAw4C,EAAAv4C,EAAA,EACAu4C,EAAAx4C,EACAw4C,EAAAv4C,GAIAtJ,KAAA84D,cAAA95D,KAOA04D,YAAA,SAAA14D,GACAgB,KAAAqtC,QAAArtC,KAAAqtC,MAAA+B,eACApwC,EAAA+6C,YAAA/5C,KAAA82D,mBAGA93D,EAAA+6C,aAAA/5C,KAAA0d,SAIA+6C,iBAAA,SAAAz5D,EAAA+5D,GACAA,EAAA3uC,SACAprB,EAAAk2C,UAAA6jB,EAAArhB,YACA14C,EAAAm2C,QAAA4jB,EAAAnkB,cACA51C,EAAAg6D,eAAAD,EAAAnF,iBACA50D,EAAAq2C,SAAA0jB,EAAAlkB,eACA71C,EAAAo2C,WAAA2jB,EAAAjkB,iBACA91C,EAAAi2C,YAAA8jB,EAAA3uC,OAAAsc,OACAqyB,EAAA3uC,OAAAsc,OAAA1nC,EAAAgB,MACA+4D,EAAA3uC,SAIAsuC,eAAA,SAAA15D,EAAA+5D,GACAA,EAAAz1D,OACAtE,EAAAoxC,UAAA2oB,EAAAz1D,KAAAojC,OACAqyB,EAAAz1D,KAAAojC,OAAA1nC,EAAAgB,MACA+4D,EAAAz1D,OAIAk1D,uBAAA,SAAAx5D,GACAA,EAAA+6C,YAAA,EACA/6C,EAAAi2C,YAAA,cACAj2C,EAAAoxC,UAAA,WAUA0U,aAAA,SAAA9lD,EAAAi6D,EAAAC,GACAD,GAAA,IAAAA,EAAAx1D,SAIA,EAAAw1D,EAAAx1D,QACAw1D,EAAAr1D,KAAAgB,MAAAq0D,EAAAA,GAEA9F,EACAn0D,EAAAu1C,YAAA0kB,GAGAC,GAAAA,EAAAl6D,KASAggD,gBAAA,SAAAhgD,EAAAm6D,GACA,IAEAn1D,EAAAo1D,EAAAlqB,EAFAhC,EAAAltC,KAAAq3D,uBACArlD,EAAAhS,KAAAy1B,sBAGA2jC,OAAA,KADAD,EAAAA,OACAla,WAAAka,EAAAla,WAAAj/C,KAAAi/C,WACA/P,OAAA,IAAAiqB,EAAAnF,YAAAmF,EAAAnF,YAAAh0D,KAAAg0D,YACAhiD,EAAAvU,EAAA2F,KAAAwN,0BAAAs8B,EAAAl7B,GACAhO,EAAAvG,EAAA2F,KAAA2N,YAAAiB,GACAhT,EAAA6Q,OACA7Q,EAAAE,UAAA8E,EAAAqN,WAAArN,EAAAsN,YACAtS,EAAAk2C,UAAA,EAAAl1C,KAAA8zD,kBACA9zD,KAAAqtC,QACAruC,EAAA+6C,YAAA/5C,KAAAotD,SAAAptD,KAAA6zD,wBAAA,GAEAsF,EAAAE,oBACAr6D,EAAA+Q,OAAA5S,EAAA6G,EAAAkE,QACAkxD,GAAAp5D,KAAAs5D,mBAAAt6D,EAAAgF,EAAAm1D,KAGAn6D,EAAA+Q,OAAA5S,EAAA6C,KAAAkI,QACAkxD,GAAAp5D,KAAAo5D,YAAAp6D,EAAAm6D,IAEAjqB,GAAAlvC,KAAAkvC,aAAAlwC,EAAAm6D,GACAn6D,EAAAgR,WAOAulC,WAAA,SAAAv2C,GACA,GAAAgB,KAAAqoC,OAAA,CAIA,IAAAuuB,EAAAvuB,EAAAroC,KAAAqoC,OAAAvpC,EAAAkB,KAAAlB,OACAy6D,EAAAz6D,GAAAA,EAAA6qC,kBAAA,IAAA,EACA6vB,EAAA16D,GAAAA,EAAA6qC,kBAAA,IAAA,EAEAitB,EADAvuB,EAAAF,YACAl3B,OAAA,EAAAC,OAAA,GAGAlR,KAAA22D,mBAEA73D,GAAAA,EAAA+rC,qBACA0uB,GAAA97D,EAAAqE,iBACA03D,GAAA/7D,EAAAqE,kBAEA9C,EAAAw2C,YAAAnN,EAAA/hB,MACAtnB,EAAAy2C,WAAApN,EAAAL,KAAAvqC,EAAAwE,2BACAs3D,EAAAC,IAAA5C,EAAA3lD,OAAA2lD,EAAA1lD,QAAA,EACAlS,EAAA02C,cAAArN,EAAA/C,QAAAi0B,EAAA3C,EAAA3lD,OACAjS,EAAA22C,cAAAtN,EAAA9C,QAAAi0B,EAAA5C,EAAA1lD,SAOA4nD,cAAA,SAAA95D,GACAgB,KAAAqoC,SAIArpC,EAAAw2C,YAAA,GACAx2C,EAAAy2C,WAAAz2C,EAAA02C,cAAA12C,EAAA22C,cAAA,IAUA8jB,+BAAA,SAAAz6D,EAAA4H,GACA,IAAAA,IAAAA,EAAA8/B,OACA,OAAApB,QAAA,EAAAC,QAAA,GAEA,IAAA17B,EAAAjD,EAAA4+B,mBAAA5+B,EAAAugC,iBACA7B,GAAAtlC,KAAAT,MAAA,EAAAqH,EAAA0+B,SAAA,EACAC,GAAAvlC,KAAAb,OAAA,EAAAyH,EAAA2+B,SAAA,EAWA,MATA,eAAA3+B,EAAAs+B,cACAlmC,EAAAiL,UAAAjK,KAAAT,MAAA,EAAA,EAAAS,KAAAb,OAAAmmC,EAAAC,GAGAvmC,EAAAiL,UAAA,EAAA,EAAA,EAAA,EAAAq7B,EAAAC,GAEA17B,GACA7K,EAAAiL,UAAAJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAy7B,QAAAA,EAAAC,QAAAA,IAOAm0B,oBAAA,SAAA16D,GACA,WAAAgB,KAAAy0D,YACAz0D,KAAA25D,cAAA36D,GACAgB,KAAA45D,YAAA56D,KAGAgB,KAAA45D,YAAA56D,GACAgB,KAAA25D,cAAA36D,KAWA23C,QAAA,aAQAijB,YAAA,SAAA56D,GACAgB,KAAAsD,OAIAtE,EAAA6Q,OACA7P,KAAAy5D,+BAAAz6D,EAAAgB,KAAAsD,MACA,YAAAtD,KAAAm1B,SACAn2B,EAAAsE,KAAA,WAGAtE,EAAAsE,OAEAtE,EAAAgR,YAOA2pD,cAAA,SAAA36D,GACAgB,KAAAoqB,QAAA,IAAApqB,KAAA03C,cAIA13C,KAAAqoC,SAAAroC,KAAAqoC,OAAAJ,cACAjoC,KAAA84D,cAAA95D,GAGAA,EAAA6Q,OACA7P,KAAAu0D,eACAv1D,EAAAI,MAAA,EAAAY,KAAAiR,OAAA,EAAAjR,KAAAkR,QAEAlR,KAAA8kD,aAAA9lD,EAAAgB,KAAA+0C,gBAAA/0C,KAAA65D,qBACA75D,KAAAoqB,OAAAsc,QAAA,eAAA1mC,KAAAoqB,OAAA8a,cAKAllC,KAAA85D,oCAAA96D,EAAAgB,KAAAoqB,QAGApqB,KAAAy5D,+BAAAz6D,EAAAgB,KAAAoqB,QAEAprB,EAAAorB,SACAprB,EAAAgR,YAcA8pD,oCAAA,SAAA96D,EAAA4H,GACA,IACAmzD,EADA9E,EAAAj1D,KAAAg1D,gBAAAh1D,KAAAo1D,6BACA4E,EAAAv8D,EAAA2F,KAAA6M,sBAAAo2C,EAAArmD,KAAAlB,OAAAgsC,mBACAvrC,EAAA01D,EAAA5rD,EAAArJ,KAAAiR,OAAAo1C,EAAAlnD,EAAA81D,EAAA3rD,EAAAtJ,KAAAkR,OAAAm1C,EACA2T,EAAAz6D,MAAAA,EACAy6D,EAAA76D,OAAAA,GACA46D,EAAAC,EAAA/6D,WAAA,OACAyR,YAAAqpD,EAAAjqD,OAAA,EAAA,GAAAiqD,EAAA7pB,OAAA3wC,EAAA,GAAAw6D,EAAA7pB,OAAA3wC,EAAAJ,GACA46D,EAAA7pB,OAAA,EAAA/wC,GAAA46D,EAAA5pB,YACA4pB,EAAA76D,UAAAK,EAAA,EAAAJ,EAAA,GACA46D,EAAA36D,MACA61D,EAAAvlB,MAAA1vC,KAAAiR,OAAAo1C,EACA4O,EAAAtlB,MAAA3vC,KAAAkR,OAAAm1C,GAEArmD,KAAAy5D,+BAAAM,EAAAnzD,GACAmzD,EAAA3pB,UAAAxpC,EAAA8/B,OAAA1nC,GACA+6D,EAAAz2D,OACAtE,EAAAE,WAAAc,KAAAT,MAAA,EAAAS,KAAA03C,YAAA,GAAA13C,KAAAb,OAAA,EAAAa,KAAA03C,YAAA,GACA14C,EAAAI,MACAinD,EAAArmD,KAAAiR,OAAAgkD,EAAAvlB,MACA2W,EAAArmD,KAAAkR,OAAA+jD,EAAAtlB,OAEA3wC,EAAAi2C,YAAA8kB,EAAAjyB,cAAAkyB,EAAA,cASAC,uBAAA,WACA,OAAA5wD,EAAArJ,KAAAwK,KAAAxK,KAAAT,MAAA,EAAA+J,EAAAtJ,KAAAyK,IAAAzK,KAAAb,OAAA,IAUA+6D,4BAAA,WACA,GAAAl6D,KAAA0qB,gBAAA,CACA,IAAA1mB,EAAAvG,EAAA2F,KAAA2N,YAAA/Q,KAAA0qB,iBACA1qB,KAAA2R,OAAA,EACA3R,KAAA4R,OAAA,EACA5R,KAAA0G,IAAA,SAAA1C,EAAAiN,QACAjR,KAAA0G,IAAA,SAAA1C,EAAAkN,QACAlR,KAAAkI,MAAAlE,EAAAkE,MACAlI,KAAAmR,MAAAnN,EAAAmN,MACAnR,KAAAoR,MAAA,IAWAojB,uBAAA,SAAA2lC,GACA,IAAAxpB,EAAA3wC,KAAAi6D,yBACAj6D,KAAA0qB,kBACA1qB,KAAAk6D,8BACAvpB,EAAAlzC,EAAA2F,KAAAuG,eAAAgnC,EAAA3wC,KAAA0qB,kBAEA1qB,KAAA0qB,gBAAA,KACAyvC,IACAn6D,KAAAiR,QAAAkpD,EAAAlpD,OACAjR,KAAAkR,QAAAipD,EAAAjpD,OACAlR,KAAAo6D,MAAAD,EAAAC,MACAp6D,KAAAq6D,MAAAF,EAAAE,MACA1pB,EAAAtnC,GAAA8wD,EAAAG,WACA3pB,EAAArnC,GAAA6wD,EAAAI,UACAv6D,KAAAT,MAAA46D,EAAA56D,MACAS,KAAAb,OAAAg7D,EAAAh7D,QAEAa,KAAA41B,oBAAA+a,EAAA,SAAA,WAQArzC,MAAA,SAAAoI,EAAAkgC,GACA,IAAA40B,EAAAx6D,KAAA2lC,SAAAC,GACA5lC,KAAA0b,YAAA3N,WACA/N,KAAA0b,YAAA3N,WAAAysD,EAAA90D,GAGAjI,EAAAuR,OAAAyrD,YAAA,SAAAD,EAAA90D,IAqBAg1D,aAAA,SAAAh1D,EAAA1B,GACA,IAAAqM,EAAArQ,KAAAmxD,gBAAAntD,GAIA,OAHA0B,GACAA,EAAA,IAAAjI,EAAA62B,MAAAjkB,IAEArQ,MAgBAmxD,gBAAA,SAAAntD,GACAA,IAAAA,MAEA,IAAA22D,EAAAl9D,EAAA2F,KAAAw3D,EAAAD,EAAAvoD,oBAAApS,MACA66D,EAAA76D,KAAAqtC,MACAytB,EAAA96D,KAAAqoC,OAAAhzB,EAAAtN,KAAAsN,IACAuvB,GAAA5gC,EAAA4gC,YAAA,IAAA5gC,EAAA+lC,oBAAAtsC,EAAAqE,iBAAA,UACA9B,KAAAqtC,MACArpC,EAAA+2D,kBACAJ,EAAAzoD,qBAAAlS,MAEAgE,EAAAg3D,gBACAh7D,KAAAqoC,OAAA,MAGA,IAGAuuB,EACAnhB,EACAl2C,EAAAJ,EALA+f,EAAAzhB,EAAA2F,KAAA6M,sBAEAgrD,EAAAj7D,KAAAk7D,iBAAA,GAAA,GACA7yB,EAAAroC,KAAAqoC,OACA8yB,GAAA9xD,EAAA,EAAAC,EAAA,GAGA++B,IACAoN,EAAApN,EAAAL,KAEA4uB,EADAvuB,EAAAF,YACAl3B,OAAA,EAAAC,OAAA,GAGAlR,KAAA22D,mBAGAwE,EAAA9xD,EAAA,EAAAtB,KAAA4xB,MAAAtkB,EAAAgzB,EAAA/C,SAAAmQ,GAAApgC,EAAAuhD,EAAA3lD,QACAkqD,EAAA7xD,EAAA,EAAAvB,KAAA4xB,MAAAtkB,EAAAgzB,EAAA9C,SAAAkQ,GAAApgC,EAAAuhD,EAAA1lD,SAEA3R,EAAA07D,EAAA17D,MAAA47D,EAAA9xD,EACAlK,EAAA87D,EAAA97D,OAAAg8D,EAAA7xD,EAGA4V,EAAA3f,MAAAwI,KAAAwO,KAAAhX,GACA2f,EAAA/f,OAAA4I,KAAAwO,KAAApX,GACA,IAAAL,EAAA,IAAArB,EAAAkrC,aAAAzpB,GACA6qB,qBAAA,EACAjlC,mBAAA,EACAmlC,eAAA,IAEA,SAAAjmC,EAAAsM,SACAxR,EAAAqqC,gBAAA,QAEAnpC,KAAA41B,oBAAA,IAAAn4B,EAAA2L,MAAAtK,EAAAS,MAAA,EAAAT,EAAAK,OAAA,GAAA,SAAA,UAEA,IAAAi8D,EAAAp7D,KAAAlB,OACAA,EAAA6F,IAAA3E,MACA,IAAAqQ,EAAAvR,EAAAqyD,gBAAAvsB,GAAA,EAAA5gC,GAcA,OAbAhE,KAAAqoC,OAAAyyB,EACA96D,KAAAlB,OAAAs8D,EACAP,IACA76D,KAAAqtC,MAAAwtB,GAEA76D,KAAA0G,IAAAk0D,GAAAttB,YAIAxuC,EAAA4F,YACA5F,EAAAq1C,UACAr1C,EAAA,KAEAuR,GAkBAD,UAAA,SAAApM,GAEA,OADAA,IAAAA,MACAvG,EAAA2F,KAAAgN,UAAApQ,KAAAmxD,gBAAAntD,GAAAA,EAAAsM,QAAA,MAAAtM,EAAAuM,SAAA,IAQA8qD,OAAA,SAAAx1D,GACA,OAAA7F,KAAA6F,OAAAA,GAOAO,WAAA,WACA,OAAA,GAQAouC,OAAA,SAAA5O,GAEA,OAAA5lC,KAAA2lC,SAAAC,IAqDA01B,YAAA,SAAAz0D,EAAA7C,GACAA,IAAAA,MAEA,IAAA2qB,GAAA7nB,eAkBA,OAhBA6nB,EAAA9oB,KAAA7B,EAAA6B,OAAA7B,EAAAw0B,IAAAx0B,EAAAy0B,GAAA,SAAA,UACA9J,EAAA3V,QACAjB,GAAA/T,EAAA+T,GACAC,GAAAhU,EAAAgU,GACA5I,GAAApL,EAAAoL,GACAC,GAAArL,EAAAqL,IAEAsf,EAAAuW,cAAAlhC,EAAAkhC,eAAA,UACAlhC,EAAAw0B,IAAAx0B,EAAAy0B,MACA9J,EAAA3V,OAAAwf,GAAAx0B,EAAAw0B,GACA7J,EAAA3V,OAAAyf,GAAAz0B,EAAAy0B,IAGA9J,EAAA6W,kBAAAxhC,EAAAwhC,kBACA/nC,EAAAsJ,SAAAkI,UAAAy2B,aAAA5hC,KAAA6qB,EAAA3qB,EAAA8C,YAEA9G,KAAA0G,IAAAG,EAAApJ,EAAAsJ,SAAAkgC,UAAAjnC,KAAA2uB,KAqBA4sC,eAAA,SAAAv3D,EAAA0B,GACA,OAAA1F,KAAA0G,IAAA,OAAA,IAAAjJ,EAAAyJ,QAAAlD,EAAA0B,KA0BAsvC,UAAA,SAAAhxC,GACA,OAAAhE,KAAA0G,IAAA,SAAA1C,EAAA,IAAAvG,EAAAsqC,OAAA/jC,GAAA,OAUAw3D,SAAA,SAAAl1C,GAEA,OADAtmB,KAAA0G,IAAA,OAAA4f,GACAtmB,MASA+P,OAAA,SAAA7H,GACA,IAAAuzD,GAAA,WAAAz7D,KAAA04C,SAAA,WAAA14C,KAAA24C,UAAA34C,KAAA+6C,iBAYA,OAVA0gB,GACAz7D,KAAA07D,qBAGA17D,KAAA0G,IAAA,QAAAwB,GAEAuzD,GACAz7D,KAAA27D,eAGA37D,MASA47D,QAAA,WAEA,OADA57D,KAAAlB,QAAAkB,KAAAlB,OAAAwxC,cAAAtwC,MACAA,MASA67D,gBAAA,WAEA,OADA77D,KAAAlB,QAAAkB,KAAAlB,OAAAiyC,sBAAA/wC,MACAA,MASA87D,QAAA,WAEA,OADA97D,KAAAlB,QAAAkB,KAAAlB,OAAA2xC,cAAAzwC,MACAA,MASA+7D,gBAAA,WAEA,OADA/7D,KAAAlB,QAAAkB,KAAAlB,OAAAkyC,sBAAAhxC,MACAA,MASA2wC,OAAA,WAEA,OADA3wC,KAAAlB,QAAAkB,KAAAlB,OAAA4xC,aAAA1wC,MACAA,MASAg8D,eAAA,WAEA,OADAh8D,KAAAlB,QAAAkB,KAAAlB,OAAA8xC,qBAAA5wC,MACAA,MASAi8D,gBAAA,SAAAp7C,EAAA01B,GACAA,EAAAA,GAAAv2C,KAAAlB,OAAAge,WAAA+D,GACA,IAAAq7C,EAAA,IAAAz+D,EAAA2L,MAAAmtC,EAAAltC,EAAAktC,EAAAjtC,GACA6yD,EAAAn8D,KAAAw6C,oBAKA,OAJAx6C,KAAAkI,QACAg0D,EAAAz+D,EAAA2F,KAAA0F,YACAozD,EAAAC,EAAAh/D,GAAA6C,KAAAkI,UAGAmB,EAAA6yD,EAAA7yD,EAAA8yD,EAAA9yD,EACAC,EAAA4yD,EAAA5yD,EAAA6yD,EAAA7yD,IASAkuD,yBAAA,SAAAx4D,GACAgB,KAAAyvC,2BACAzwC,EAAAywC,yBAAAzvC,KAAAyvC,6BAKAhyC,EAAA2F,KAAAg5D,iBAAA3+D,EAAA2F,KAAAg5D,gBAAA3+D,EAAAuR,QAEAiL,EAAAxc,EAAAuR,OAAAC,UAAAxR,EAAA6G,YAUA7G,EAAAuR,OAAAqF,oBAAA,EAEA5W,EAAAuR,OAAAyrD,YAAA,SAAAt7C,EAAAla,EAAAS,EAAA22D,GACA,IAAAvuD,EAAArQ,EAAA0hB,GACAla,EAAA3H,EAAA2H,GAAA,GACAxH,EAAA2F,KAAA6K,iBAAAhJ,EAAA3B,KAAA2B,EAAAmlB,QAAA,SAAAlc,QACA,IAAAA,EAAA,KACAjJ,EAAA3B,KAAA4K,EAAA,SAEA,IAAAA,EAAA,KACAjJ,EAAAmlB,OAAAlc,EAAA,IAEAzQ,EAAA2F,KAAAmK,gBAAAtI,EAAAuwB,UAAA,SAAA8mC,GACAr3D,EAAAuwB,SAAA8mC,EAAA,GACA,IAAAt3B,EAAAq3B,EAAA,IAAAvuD,EAAA7I,EAAAo3D,GAAAp3D,GAAA,IAAA6I,EAAA7I,GACAS,GAAAA,EAAAs/B,QAWAvnC,EAAAuR,OAAAghB,MAAA,GAvkEA,CAwkEA,oBAAAloB,QAAAA,QAAA9H,MAKA7C,EAAAM,EAAA2F,KAAAjG,iBACAC,GACAoN,MAAA,GACAmmC,OAAA,EACAyV,MAAA,IAEA/oD,GACAoN,KAAA,GACAkmC,OAAA,EACAwV,OAAA,IAGA1oD,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAWAstD,uBAAA,SAAAxzD,EAAAyzD,EAAAC,EAAAC,EAAAC,GACA,IAEAr3B,EAAAC,EAAAsc,EAFAx4C,EAAAN,EAAAM,EACAC,EAAAP,EAAAO,EAyCA,MAtCA,iBAAAkzD,EACAA,EAAAp/D,EAAAo/D,GAGAA,GAAA,GAGA,iBAAAE,EACAA,EAAAt/D,EAAAs/D,GAGAA,GAAA,GAGAp3B,EAAAo3B,EAAAF,EAEA,iBAAAC,EACAA,EAAAp/D,EAAAo/D,GAGAA,GAAA,GAGA,iBAAAE,EACAA,EAAAt/D,EAAAs/D,GAGAA,GAAA,GAGAp3B,EAAAo3B,EAAAF,GAEAn3B,GAAAC,KACAsc,EAAA7hD,KAAA8hD,4BACAz4C,EAAAN,EAAAM,EAAAi8B,EAAAuc,EAAAx4C,EACAC,EAAAP,EAAAO,EAAAi8B,EAAAsc,EAAAv4C,GAGA,IAAA7L,EAAA2L,MAAAC,EAAAC,IAUAszD,uBAAA,SAAA7zD,EAAA2vC,EAAAC,GACA,IAAA/uC,EAAA5J,KAAAu8D,uBAAAxzD,EAAA2vC,EAAAC,EAAA,SAAA,UACA,OAAA34C,KAAAkI,MACAzK,EAAA2F,KAAA0F,YAAAc,EAAAb,EAAA5L,EAAA6C,KAAAkI,QAEA0B,GAUAm4C,uBAAA,SAAApR,EAAA+H,EAAAC,GACA,IAAA/uC,EAAA5J,KAAAu8D,uBAAA5rB,EAAA,SAAA,SAAA+H,EAAAC,GACA,OAAA34C,KAAAkI,MACAzK,EAAA2F,KAAA0F,YAAAc,EAAA+mC,EAAAxzC,EAAA6C,KAAAkI,QAEA0B,GAOA4mC,eAAA,WACA,IAAAqsB,EAAA,IAAAp/D,EAAA2L,MAAApJ,KAAAwK,KAAAxK,KAAAyK,KACA,OAAAzK,KAAA48D,uBAAAC,EAAA78D,KAAA04C,QAAA14C,KAAA24C,UAkBAmkB,iBAAA,SAAApkB,EAAAC,GACA,IAAAhI,EAAA3wC,KAAAwwC,iBACA,OAAAxwC,KAAA+hD,uBAAApR,EAAA+H,EAAAC,IAUAgJ,aAAA,SAAA54C,EAAA2vC,EAAAC,GACA,IACA/uC,EAAAusC,EADAxF,EAAA3wC,KAAAwwC,iBAcA,OAVA5mC,OADA,IAAA8uC,QAAA,IAAAC,EACA34C,KAAAu8D,uBAAA5rB,EAAA,SAAA,SAAA+H,EAAAC,GAGA,IAAAl7C,EAAA2L,MAAApJ,KAAAwK,KAAAxK,KAAAyK,KAGA0rC,EAAA,IAAA14C,EAAA2L,MAAAL,EAAAM,EAAAN,EAAAO,GACAtJ,KAAAkI,QACAiuC,EAAA14C,EAAA2F,KAAA0F,YAAAqtC,EAAAxF,GAAAxzC,EAAA6C,KAAAkI,SAEAiuC,EAAAltC,eAAAW,IAmBAgsB,oBAAA,SAAAvP,EAAAqyB,EAAAC,GACA,IAAAhI,EAAA3wC,KAAA48D,uBAAAv2C,EAAAqyB,EAAAC,GACAzrC,EAAAlN,KAAA+hD,uBAAApR,EAAA3wC,KAAA04C,QAAA14C,KAAA24C,SACA34C,KAAA0G,IAAA,OAAAwG,EAAA7D,GACArJ,KAAA0G,IAAA,MAAAwG,EAAA5D,IAMAyzD,eAAA,SAAAC,GACA,IAIAC,EAAAC,EAJAh1D,EAAA/K,EAAA6C,KAAAkI,OACAi1D,EAAAn9D,KAAAo9D,iBACAC,EAAA5/D,EAAA2F,KAAA6E,IAAAC,GAAAi1D,EACAG,EAAA7/D,EAAA2F,KAAAgF,IAAAF,GAAAi1D,EAKAF,EADA,iBAAAj9D,KAAA04C,QACAt7C,EAAA4C,KAAA04C,SAGA14C,KAAA04C,QAAA,GAGAwkB,EADA,iBAAAF,EACA5/D,EAAA4/D,GAGAA,EAAA,GAEAh9D,KAAAwK,MAAA6yD,GAAAH,EAAAD,GACAj9D,KAAAyK,KAAA6yD,GAAAJ,EAAAD,GACAj9D,KAAAstC,YACAttC,KAAA04C,QAAAskB,GAQAtB,mBAAA,WACA17D,KAAAu9D,iBAAAv9D,KAAA04C,QACA14C,KAAAw9D,iBAAAx9D,KAAA24C,QAEA,IAAAhI,EAAA3wC,KAAAwwC,iBAEAxwC,KAAA04C,QAAA,SACA14C,KAAA24C,QAAA,SAEA34C,KAAAwK,KAAAmmC,EAAAtnC,EACArJ,KAAAyK,IAAAkmC,EAAArnC,GAQAqyD,aAAA,WACA,IAAA8B,EAAAz9D,KAAA+hD,uBACA/hD,KAAAwwC,iBACAxwC,KAAAu9D,iBACAv9D,KAAAw9D,kBAEAx9D,KAAA04C,QAAA14C,KAAAu9D,iBACAv9D,KAAA24C,QAAA34C,KAAAw9D,iBAEAx9D,KAAAwK,KAAAizD,EAAAp0D,EACArJ,KAAAyK,IAAAgzD,EAAAn0D,EAEAtJ,KAAAu9D,iBAAA,KACAv9D,KAAAw9D,iBAAA,MAMAhjB,kBAAA,WACA,OAAAx6C,KAAA+hD,uBAAA/hD,KAAAwwC,iBAAA,OAAA,UAOA,WAWA,IAAArzC,EAAAM,EAAA2F,KAAAjG,iBACAugE,EAAAjgE,EAAA2F,KAAAwN,0BACAjH,EAAAlM,EAAA2F,KAAAuG,eAEAlM,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAcA0uD,QAAA,KAcAC,QAAA,KAKAC,eAAA,KAKAC,YAAA,KAKAC,UAAA,SAAAC,EAAAC,GACAj+D,KAAA29D,SACA39D,KAAAstC,YAEA,IAAAt0B,EAAAglD,EAAAh+D,KAAA49D,QAAA59D,KAAA29D,QACA,OA7DA,SAAA3kD,GACA,OACA,IAAAvb,EAAA2L,MAAA4P,EAAA21B,GAAAtlC,EAAA2P,EAAA21B,GAAArlC,GACA,IAAA7L,EAAA2L,MAAA4P,EAAA61B,GAAAxlC,EAAA2P,EAAA61B,GAAAvlC,GACA,IAAA7L,EAAA2L,MAAA4P,EAAA41B,GAAAvlC,EAAA2P,EAAA41B,GAAAtlC,GACA,IAAA7L,EAAA2L,MAAA4P,EAAA81B,GAAAzlC,EAAA2P,EAAA81B,GAAAxlC,IAwDAy0D,CAAAE,EAAAj+D,KAAAk+D,WAAAF,GAAAhlD,IAWAi4C,mBAAA,SAAAkN,EAAAC,EAAAJ,EAAAC,GACA,IAAAjlD,EAAAhZ,KAAA+9D,UAAAC,EAAAC,GACAI,EAAA5gE,EAAA25B,aAAAmB,0BACAvf,EACAmlD,EACAC,GAEA,MAAA,iBAAAC,EAAAhnC,QAUA0c,qBAAA,SAAAuqB,EAAAN,EAAAC,GACA,IAAAI,EAAA5gE,EAAA25B,aAAAgB,wBACAp4B,KAAA+9D,UAAAC,EAAAC,GACAK,EAAAP,UAAAC,EAAAC,IAGA,MAAA,iBAAAI,EAAAhnC,QACAinC,EAAAtqB,wBAAAh0C,KAAAg+D,EAAAC,IACAj+D,KAAAg0C,wBAAAsqB,EAAAN,EAAAC,IAUAjqB,wBAAA,SAAAsqB,EAAAN,EAAAC,GAKA,IAJA,IAAAj0D,EAAAhK,KAAA+9D,UAAAC,EAAAC,GACA/5D,EAAA,EAAAq6D,EAAAD,EAAAE,eACAP,EAAAK,EAAAJ,WAAAF,GAAAA,EAAAM,EAAAV,QAAAU,EAAAX,SAEAz5D,EAAA,EAAAA,IACA,IAAAo6D,EAAArgB,cAAAj0C,EAAA9F,GAAAq6D,GACA,OAAA,EAGA,OAAA,GAWArN,sBAAA,SAAAiN,EAAAC,EAAAJ,EAAAC,GACA,IAAAhD,EAAAj7D,KAAAk7D,gBAAA8C,EAAAC,GAEA,OACAhD,EAAAzwD,MAAA2zD,EAAA90D,GACA4xD,EAAAzwD,KAAAywD,EAAA17D,OAAA6+D,EAAA/0D,GACA4xD,EAAAxwD,KAAA0zD,EAAA70D,GACA2xD,EAAAxwD,IAAAwwD,EAAA97D,QAAAi/D,EAAA90D,GAYA20C,cAAA,SAAAl1C,EAAAw1D,EAAAP,EAAAC,GACA,IAAAM,EAAAA,GAAAv+D,KAAAw+D,eACAP,EAAAj+D,KAAAk+D,WAAAF,GAAAA,EAAAh+D,KAAA49D,QAAA59D,KAAA29D,SAEAzzD,EAAAlK,KAAAy+D,iBAAA11D,EAAAw1D,GAGA,OAAA,IAAAr0D,GAAAA,EAAA,GAAA,GASAqtD,WAAA,SAAA0G,GACA,IAAAj+D,KAAAlB,OACA,OAAA,EAIA,IAFA,IACAiK,EADAo1D,EAAAn+D,KAAAlB,OAAAkrC,UAAA2E,GAAAyvB,EAAAp+D,KAAAlB,OAAAkrC,UAAA4E,GACA5kC,EAAAhK,KAAA+9D,WAAA,EAAAE,GACA/5D,EAAA,EAAAA,EAAA,EAAAA,IAEA,IADA6E,EAAAiB,EAAA9F,IACAmF,GAAA+0D,EAAA/0D,GAAAN,EAAAM,GAAA80D,EAAA90D,GAAAN,EAAAO,GAAA80D,EAAA90D,GAAAP,EAAAO,GAAA60D,EAAA70D,EACA,OAAA,EAIA,QAAAtJ,KAAAixD,mBAAAkN,EAAAC,GAAA,EAAAH,IAGAj+D,KAAA0+D,wBAAAP,EAAAC,EAAAH,IAYAS,wBAAA,SAAAP,EAAAC,EAAAH,GAEA,IAAAvvD,GAAArF,GAAA80D,EAAA90D,EAAA+0D,EAAA/0D,GAAA,EAAAC,GAAA60D,EAAA70D,EAAA80D,EAAA90D,GAAA,GACA,QAAAtJ,KAAAi+C,cAAAvvC,EAAA,MAAA,EAAAuvD,IAWAU,oBAAA,SAAAV,GACA,IAAAj+D,KAAAlB,OACA,OAAA,EAEA,IAAAq/D,EAAAn+D,KAAAlB,OAAAkrC,UAAA2E,GAAAyvB,EAAAp+D,KAAAlB,OAAAkrC,UAAA4E,GACA,QAAA5uC,KAAAixD,mBAAAkN,EAAAC,GAAA,EAAAH,IAGAj+D,KAAA0+D,wBAAAP,EAAAC,EAAAH,IAQAO,eAAA,SAAAb,GACA,OACAiB,SACA74D,EAAA43D,EAAAhvB,GACA/qB,EAAA+5C,EAAA9uB,IAEAgwB,WACA94D,EAAA43D,EAAA9uB,GACAjrB,EAAA+5C,EAAA/uB,IAEAkwB,YACA/4D,EAAA43D,EAAA/uB,GACAhrB,EAAA+5C,EAAA7uB,IAEAiwB,UACAh5D,EAAA43D,EAAA7uB,GACAlrB,EAAA+5C,EAAAhvB,MAaA8vB,iBAAA,SAAA11D,EAAAw1D,GACA,IAAA5mC,EAAAC,EAAAH,EAAAC,EAAAsnC,EAEAC,EADAC,EAAA,EAGA,IAAA,IAAAC,KAAAZ,EAGA,MAFAU,EAAAV,EAAAY,IAEAp5D,EAAAuD,EAAAP,EAAAO,GAAA21D,EAAAr7C,EAAAta,EAAAP,EAAAO,GAIA21D,EAAAl5D,EAAAuD,GAAAP,EAAAO,GAAA21D,EAAAr7C,EAAAta,GAAAP,EAAAO,IAIA21D,EAAAl5D,EAAAsD,IAAA41D,EAAAr7C,EAAAva,GAAA41D,EAAAl5D,EAAAsD,GAAAN,EAAAM,EACA21D,EAAAC,EAAAl5D,EAAAsD,GAKAsuB,EAAA,EACAC,GAAAqnC,EAAAr7C,EAAAta,EAAA21D,EAAAl5D,EAAAuD,IAAA21D,EAAAr7C,EAAAva,EAAA41D,EAAAl5D,EAAAsD,GACAouB,EAAA1uB,EAAAO,EAAAquB,EAAA5uB,EAAAM,EACAquB,EAAAunC,EAAAl5D,EAAAuD,EAAAsuB,EAAAqnC,EAAAl5D,EAAAsD,EAEA21D,IAAAvnC,EAAAC,IAAAC,EAAAC,IAIAonC,GAAAj2D,EAAAM,IACA61D,GAAA,GAGA,IAAAA,IACA,MAGA,OAAAA,GAUAhE,gBAAA,SAAA8C,EAAAC,GACA,IAAAjlD,EAAAhZ,KAAA+9D,UAAAC,EAAAC,GACA,OAAAxgE,EAAA2F,KAAA2G,0BAAAiP,IAQAokD,eAAA,WACA,OAAAp9D,KAAA8hD,4BAAAz4C,GAQA+1D,gBAAA,WACA,OAAAp/D,KAAA8hD,4BAAAx4C,GASA4tD,gBAAA,SAAA7yD,GACA,OAAA0D,KAAAsN,IAAAhR,GAAArE,KAAA+zD,cACA1vD,EAAA,GACArE,KAAA+zD,cAGA/zD,KAAA+zD,cAGA,IAAA1vD,EACA,KAEAA,GASAjF,MAAA,SAAAiF,GAGA,OAFArE,KAAA0H,KAAA,SAAArD,GACArE,KAAA0H,KAAA,SAAArD,GACArE,KAAAstC,aAUA+xB,aAAA,SAAAh7D,EAAA25D,GAEA,IAAAsB,EAAAt/D,KAAAk7D,gBAAA8C,GAAAz+D,MAAAS,KAAAo9D,iBACA,OAAAp9D,KAAAZ,MAAAiF,EAAArE,KAAAT,MAAA+/D,IAUAC,cAAA,SAAAl7D,EAAA25D,GAEA,IAAAsB,EAAAt/D,KAAAk7D,gBAAA8C,GAAA7+D,OAAAa,KAAAo/D,kBACA,OAAAp/D,KAAAZ,MAAAiF,EAAArE,KAAAb,OAAAmgE,IAQApB,WAAA,SAAAF,GACA,IAAA3wC,EAAArtB,KAAAw/D,oBACApyC,EAAAptB,KAAAy/D,uBACAC,EAAAhC,EAAAtwC,EAAAC,GACA6f,EAAAltC,KAAAq3D,uBACAsI,EAAA3B,EAAA0B,EAAAhC,EAAAxwB,EAAAwyB,GACA7d,EAAA7hD,KAAA8hD,4BACA2B,EAAA5B,EAAAx4C,EAAA,EAAAqwB,EAAAmoB,EAAAv4C,EAAA,EACAqlC,EAAAhlC,GAAAN,GAAAo6C,EAAAn6C,GAAAowB,GAAAimC,GACA9wB,EAAAllC,GAAAN,EAAAo6C,EAAAn6C,GAAAowB,GAAAimC,GACA7wB,EAAAnlC,GAAAN,GAAAo6C,EAAAn6C,EAAAowB,GAAAimC,GACA/wB,EAAAjlC,GAAAN,EAAAo6C,EAAAn6C,EAAAowB,GAAAimC,GACA,IAAA3B,EAAA,CACA,IAAA/Z,EAAAjkD,KAAAikD,QAAA/7C,EAAA/K,EAAA6C,KAAAkI,OACAD,EAAAxK,EAAA2F,KAAA6E,IAAAC,GAAAE,EAAA3K,EAAA2F,KAAAgF,IAAAF,GACA03D,EAAA33D,EAAAg8C,EAAA4b,EAAAz3D,EAAA67C,EAAA6b,EAAAF,EAAAC,EACAE,EAAAH,EAAAC,EACA5b,IACAtV,EAAAtlC,GAAA02D,EACApxB,EAAArlC,GAAAw2D,EACAjxB,EAAAxlC,GAAAy2D,EACAjxB,EAAAvlC,GAAAy2D,EACAjxB,EAAAzlC,GAAAy2D,EACAhxB,EAAAxlC,GAAAy2D,EACAnxB,EAAAvlC,GAAA02D,EACAnxB,EAAAtlC,GAAAw2D,GAEA,IAAAlX,EAAA,IAAAnrD,EAAA2L,OAAAulC,EAAAtlC,EAAAylC,EAAAzlC,GAAA,GAAAslC,EAAArlC,EAAAwlC,EAAAxlC,GAAA,GACAoP,EAAA,IAAAjb,EAAA2L,OAAAylC,EAAAxlC,EAAAslC,EAAAtlC,GAAA,GAAAwlC,EAAAvlC,EAAAqlC,EAAArlC,GAAA,GACAo/C,EAAA,IAAAjrD,EAAA2L,OAAAwlC,EAAAvlC,EAAAwlC,EAAAxlC,GAAA,GAAAulC,EAAAtlC,EAAAulC,EAAAvlC,GAAA,GACAq/C,EAAA,IAAAlrD,EAAA2L,OAAAwlC,EAAAvlC,EAAAylC,EAAAzlC,GAAA,GAAAulC,EAAAtlC,EAAAwlC,EAAAxlC,GAAA,GACA02D,EAAA,IAAAviE,EAAA2L,MAAAsP,EAAArP,EAAAjB,EAAApI,KAAAi0D,oBAAAv7C,EAAApP,EAAArB,EAAAjI,KAAAi0D,qBAoBA,IAAAj7C,GAEA21B,GAAAA,EAAAE,GAAAA,EAAAD,GAAAA,EAAAE,GAAAA,GAWA,OATAkvB,IAEAhlD,EAAA4vC,GAAAA,EACA5vC,EAAAN,GAAAA,EACAM,EAAA0vC,GAAAA,EACA1vC,EAAA2vC,GAAAA,EAEA3vC,EAAAgnD,IAAAA,GAEAhnD,GAWAs0B,UAAA,SAAAuY,EAAAoa,GASA,OARAjgE,KAAA29D,QAAA39D,KAAAk+D,WAAArY,GACAoa,IACAjgE,KAAA49D,QAAA59D,KAAAk+D,YAAA,IAIArY,GAAA7lD,KAAAkgE,kBAAAlgE,KAAAkgE,mBAEAlgE,MAOAw/D,kBAAA,WACA,OAAA/hE,EAAA2F,KAAAmO,iBAAAvR,OAOAy/D,qBAAA,WACA,IAAA9uB,EAAA3wC,KAAAwwC,iBACA,OAAA,EAAA,EAAA,EAAA,EAAAG,EAAAtnC,EAAAsnC,EAAArnC,IAGA62D,mBAAA,SAAAlb,GACA,IAAAmb,EAAA,GAIA,OAHAnb,GAAAjlD,KAAAqtC,QACA+yB,EAAApgE,KAAAqtC,MAAA8yB,mBAAAlb,GAFA,KAIAmb,EAAApgE,KAAAyK,IAJA,IAIAzK,KAAAwK,KAJA,IAIAxK,KAAAiR,OAJA,IAIAjR,KAAAkR,OAJA,IAKAlR,KAAAmR,MALA,IAKAnR,KAAAoR,MALA,IAKApR,KAAAkI,MALA,IAKAlI,KAAA04C,QALA,IAKA14C,KAAA24C,QALA,IAMA34C,KAAAT,MANA,IAMAS,KAAAb,OANA,IAMAa,KAAA03C,YAAA13C,KAAA2R,MAAA3R,KAAA4R,OASA6jB,oBAAA,SAAAwvB,GACA,GAAAA,EACA,OAAAjlD,KAAAy2D,gBAEA,IAAA9uD,EAAA3H,KAAAmgE,qBAAAE,EAAArgE,KAAA89D,cAAA99D,KAAA89D,gBACA,GAAAuC,EAAA14D,MAAAA,EACA,OAAA04D,EAAAh8D,MAEA,IAAA2N,EAAAhS,KAAAy2D,gBAMA,OALAz2D,KAAAqtC,QACAr7B,EAAA0rD,EAAA19D,KAAAqtC,MAAA5X,sBAAAzjB,IAEAquD,EAAA14D,IAAAA,EACA04D,EAAAh8D,MAAA2N,EACAA,GAQAykD,cAAA,WACA,IAAA9uD,EAAA3H,KAAAmgE,oBAAA,GAAAE,EAAArgE,KAAA69D,iBAAA79D,KAAA69D,mBACA,GAAAwC,EAAA14D,MAAAA,EACA,OAAA04D,EAAAh8D,MAEA,IAAAi8D,EAAAtgE,KAAAy/D,uBAKA,OAJAz/D,KAAAqR,WAAAivD,EAAA,GACAtgE,KAAAsR,WAAAgvD,EAAA,GACAD,EAAA14D,IAAAA,EACA04D,EAAAh8D,MAAA5G,EAAA2F,KAAA2O,cAAA/R,MACAqgE,EAAAh8D,OAWAk8D,+BAAA,SAAApvD,EAAAC,EAAAovD,GACA,OAAA/iE,EAAA2F,KAAAqO,sBACAN,MAAAA,EACAC,MAAAA,EACAH,OAAAjR,KAAAiR,QAAAuvD,GAAAxgE,KAAA2R,OAAA,EAAA,GACAT,OAAAlR,KAAAkR,QAAAsvD,GAAAxgE,KAAA4R,OAAA,EAAA,MAUAinD,6BAAA,WACA,IAAAnhB,EAAA13C,KAAA03C,YACA+L,EAAAzjD,KAAAT,MAAAm4C,EACAhe,EAAA15B,KAAAb,OAAAu4C,EACA,OAAAruC,EAAAo6C,EAAAn6C,EAAAowB,IAaAooB,0BAAA,SAAA3wC,EAAAC,QACA,IAAAD,IACAA,EAAAnR,KAAAmR,YAEA,IAAAC,IACAA,EAAApR,KAAAoR,OAEA,IAAAqvD,EAAAC,EAAAt0B,EAAApsC,KAAA64D,+BACA8H,EAAA,IAAAxvD,GAAA,IAAAC,EAUA,GARApR,KAAAu0D,eACAkM,EAAAzgE,KAAAT,MACAmhE,EAAA1gE,KAAAb,SAGAshE,EAAAr0B,EAAA/iC,EACAq3D,EAAAt0B,EAAA9iC,GAEAq3D,EACA,OAAA3gE,KAAA4gE,oBAAAH,EAAAzgE,KAAAiR,OAAAyvD,EAAA1gE,KAAAkR,QAMA,IAAAlH,IAEAX,IALAo3D,GAAA,GAMAn3D,IALAo3D,GAAA,KAQAr3D,EAAAo3D,EACAn3D,GAAAo3D,IAGAr3D,GAAAo3D,EACAn3D,EAAAo3D,IAGAr3D,EAAAo3D,EACAn3D,EAAAo3D,IAEAh2C,EAAAjtB,EAAA2F,KAAAqO,sBACAR,OAAAjR,KAAAiR,OACAC,OAAAlR,KAAAkR,OACAC,MAAAA,EACAC,MAAAA,IAEAyvD,EAAApjE,EAAA2F,KAAA2G,0BAAAC,EAAA0gB,GACA,OAAA1qB,KAAA4gE,oBAAAC,EAAAthE,MAAAshE,EAAA1hE,SAWAyhE,oBAAA,SAAArhE,EAAAJ,GACA,OAAAa,KAAAu0D,eACAlrD,EAAA9J,EAAAS,KAAA03C,YAAApuC,EAAAnK,EAAAa,KAAA03C,cAEAruC,EAAA9J,EAAA+J,EAAAnK,IAMA2hE,4BAAA,WACA,IAAA5zB,EAAAltC,KAAAq3D,uBACAxV,EAAA7hD,KAAA8hD,4BACAl4C,EAAAnM,EAAA2F,KAAAuG,eAAAk4C,EAAA3U,GAAA,GAEA,OAAAtjC,EAAAksB,UAAA,EAAA91B,KAAAikD,YAlpBA,GAwpBAxmD,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAOAmkC,WAAA,WAOA,OANApzC,KAAAqtC,MACA5vC,EAAAkrC,aAAA15B,UAAAmkC,WAAAtvC,KAAA9D,KAAAqtC,MAAArtC,MAGAA,KAAAlB,OAAAs0C,WAAApzC,MAEAA,MAQAwzC,aAAA,WAOA,OANAxzC,KAAAqtC,MACA5vC,EAAAkrC,aAAA15B,UAAAukC,aAAA1vC,KAAA9D,KAAAqtC,MAAArtC,MAGAA,KAAAlB,OAAA00C,aAAAxzC,MAEAA,MASAyzC,cAAA,SAAAC,GAOA,OANA1zC,KAAAqtC,MACA5vC,EAAAkrC,aAAA15B,UAAAwkC,cAAA3vC,KAAA9D,KAAAqtC,MAAArtC,KAAA0zC,GAGA1zC,KAAAlB,OAAA20C,cAAAzzC,KAAA0zC,GAEA1zC,MASAi0C,aAAA,SAAAP,GAOA,OANA1zC,KAAAqtC,MACA5vC,EAAAkrC,aAAA15B,UAAAglC,aAAAnwC,KAAA9D,KAAAqtC,MAAArtC,KAAA0zC,GAGA1zC,KAAAlB,OAAAm1C,aAAAj0C,KAAA0zC,GAEA1zC,MASA8P,OAAA,SAAA5K,GAOA,OANAlF,KAAAqtC,OAAA,oBAAArtC,KAAAqtC,MAAAxnC,KACApI,EAAAkrC,aAAA15B,UAAAa,OAAAhM,KAAA9D,KAAAqtC,MAAArtC,KAAAkF,GAGAlF,KAAAlB,OAAAgR,OAAA9P,KAAAkF,GAEAlF,QAMA,WACA,SAAA+gE,EAAAr9D,EAAAW,GACA,GAAAA,EAGA,CAAA,GAAAA,EAAAqiC,OACA,OAAAhjC,EAAA,gBAAAW,EAAA2c,GAAA,MAGA,IAAAsF,EAAA,IAAA7oB,EAAAuoB,MAAA3hB,GACAiW,EAAA5W,EAAA,KAAA4iB,EAAAuT,QAAA,KACAnc,EAAA4I,EAAAsL,WAKA,OAJA,IAAAlU,IAEApD,GAAA5W,EAAA,aAAAga,EAAAxO,WAAA,MAEAoL,EAbA,OAAA5W,EAAA,WAiBA,IAAAnG,EAAAE,EAAA2F,KAAA7F,QAEAE,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAMA+xD,aAAA,SAAAC,GAEA,IAAA9rC,EAAAn1B,KAAAm1B,SAAAn1B,KAAAm1B,SAAA,UACAuiB,EAAA13C,KAAA03C,YAAA13C,KAAA03C,YAAA,IACA3C,EAAA/0C,KAAA+0C,gBAAA/0C,KAAA+0C,gBAAAzgC,KAAA,KAAA,OACAs/C,EAAA5zD,KAAA4zD,iBAAA5zD,KAAA4zD,iBAAA,IACAhf,EAAA50C,KAAA40C,cAAA50C,KAAA40C,cAAA,OACAC,EAAA70C,KAAA60C,eAAA70C,KAAA60C,eAAA,QACAC,EAAA90C,KAAA80C,iBAAA90C,KAAA80C,iBAAA,IACAp3B,OAAA,IAAA1d,KAAA0d,QAAA1d,KAAA0d,QAAA,IACAoL,EAAA9oB,KAAA4qB,QAAA,GAAA,uBACAxmB,EAAA68D,EAAA,GAAAjhE,KAAAkhE,eACA59D,EAAAy9D,EAAA,OAAA/gE,KAAAsD,MACA8mB,EAAA22C,EAAA,SAAA/gE,KAAAoqB,QAEA,OACAA,EACA,iBAAAstB,EAAA,KACA,qBAAA3C,EAAA,KACA,mBAAAH,EAAA,KACA,sBAAAgf,EAAA,KACA,oBAAA/e,EAAA,KACA,sBAAAC,EAAA,KACAxxC,EACA,cAAA6xB,EAAA,KACA,YAAAzX,EAAA,IACAtZ,EACA0kB,GACAxU,KAAA,KASA6sD,iBAAA,SAAAl0D,EAAAm0D,GACA,IACA3tD,EAAAxG,EAAAwG,WACA,kBAAA,IAAAxG,EAAAwG,WAAAtQ,QAAA,OAAA,IAAA8J,EAAAwG,WAAAtQ,QAAA,KACA,IAAA8J,EAAAwG,WAAA,IAAAxG,EAAAwG,YAHA,KAGA,GACAikC,EAAAzqC,EAAAyqC,YAAA,iBAAAzqC,EAAAyqC,YAJA,KAIA,GACAjkC,EAAAA,EACAvI,EAAA+B,EAAA/B,SAAA,cAAA+B,EAAA/B,SAAA,OAAA,GACAylB,EAAA1jB,EAAA0jB,UAAA,eAAA1jB,EAAA0jB,UAPA,KAOA,GACAC,EAAA3jB,EAAA2jB,WAAA,gBAAA3jB,EAAA2jB,WARA,KAQA,GACAttB,EAAA2J,EAAA3J,KAAAy9D,EAAA,OAAA9zD,EAAA3J,MAAA,GACA8mB,EAAAnd,EAAAmd,OAAA22C,EAAA,SAAA9zD,EAAAmd,QAAA,GACAi3C,EAAArhE,KAAAshE,qBAAAr0D,GACAs0D,EAAAt0D,EAAAs0D,OAAA,oBAAAt0D,EAAAs0D,OAAA,KAAA,GAKA,OAJAF,IACAA,EAAA,oBAAAA,EAdA,OAkBAj3C,EACAstB,EACAjkC,EACAvI,EACAylB,EACAC,EACAywC,EACA/9D,EACAi+D,EACAH,EAAA,qBAAA,IACA9sD,KAAA,KAQAgtD,qBAAA,SAAAr0D,GACA,MAAA,aAAAA,GAAA,cAAAA,GAAA,gBAAAA,GACAA,EAAAu0D,SAAA,YAAA,KACAv0D,EAAAw0D,UAAA,aAAA,KAAAx0D,EAAAy0D,YAAA,gBAAA,IAEA,IAOAR,aAAA,WACA,OAAAlhE,KAAAqoC,OAAA,sBAAAroC,KAAAqoC,OAAArnB,GAAA,KAAA,IAOA2gD,cAAA,WACA,OACA3hE,KAAAghB,GAAA,OAAAhhB,KAAAghB,GAAA,KAAA,GACAhhB,KAAAw1B,SAAA,mBAAAx1B,KAAAw1B,SAAAuc,WAAA,MAAA,IACAz9B,KAAA,KAQAstD,gBAAA,SAAAC,EAAA37B,GACA,IAAAj8B,EAAA43D,EAAA7hE,KAAAy1B,sBAAAz1B,KAAAy2D,gBACAqL,EAAA,cAAArkE,EAAA2F,KAAA+Q,YAAAlK,GACA,OAAA63D,GACA57B,GAAA,IAAAlmC,KAAA+hE,wBAAA,MAOAA,sBAAA,WACA,OAAA/hE,KAAA0qB,gBAAA,IAAAjtB,EAAA2F,KAAA+Q,YAAAnU,KAAA0qB,iBAAA,IAGAs3C,UAAA,SAAAC,GACA,GAAAjiE,KAAAmpC,gBAAA,CACA,IAAA90B,EAAA5W,EAAAuR,OAAAqF,oBACA4tD,EAAAr+D,KACA,aACA5D,KAAAkiE,mBAAAliE,KAAAmpC,iBACA,OACA5rC,GAAAyC,KAAAT,MAAA,EAAA8U,GACA,QACA9W,GAAAyC,KAAAb,OAAA,EAAAkV,GACA,YACA9W,EAAAyC,KAAAT,MAAA8U,GACA,aACA9W,EAAAyC,KAAAb,OAAAkV,GACA,iBASAwxB,MAAA,SAAAr4B,GACA,OAAAxN,KAAAmiE,qBAAAniE,KAAAoiE,OAAA50D,IAAAA,QAAAA,KAQAilC,cAAA,SAAAjlC,GACA,MAAA,KAAAxN,KAAAqiE,6BAAAriE,KAAAoiE,OAAA50D,IAAAA,QAAAA,KAMA60D,6BAAA,SAAAC,EAAAt+D,GAEA,IAAAwJ,GADAxJ,EAAAA,OACAwJ,QACA04B,EAAAliC,EAAAkiC,qBAAA,GACAq8B,GACAviE,KAAA4hE,iBAAA,EAAA17B,GACAlmC,KAAA2hE,iBACArtD,KAAA,IAEApP,EAAAo9D,EAAAn/D,QAAA,gBAEA,OADAm/D,EAAAp9D,GAAAq9D,EACA/0D,EAAAA,EAAA80D,EAAAhuD,KAAA,KAAAguD,EAAAhuD,KAAA,KAMA6tD,qBAAA,SAAAG,EAAAt+D,GAEA,IAQAu+D,EAAAC,EARAC,GADAz+D,EAAAA,OACAy+D,QACAj1D,EAAAxJ,EAAAwJ,QACAk1D,EAAAD,EAAA,GAAA,UAAAziE,KAAAghE,eAAA,KACA2B,EAAA3+D,EAAA4+D,WAAA,UAAA5iE,KAAAkhE,eAAA,KAAA,GACA1rC,EAAAx1B,KAAAw1B,SACAqtC,EAAA7iE,KAAAu0D,cAAA,sCAAA,GACAuO,EAAAttC,GAAAA,EAAAq/B,mBACAzqC,EAAApqB,KAAAoqB,OAAA9mB,EAAAtD,KAAAsD,KAAA+kC,EAAAroC,KAAAqoC,OACAvC,KAEA5gC,EAAAo9D,EAAAn/D,QAAA,gBACA+iC,EAAAliC,EAAAkiC,oBAwCA,OAvCA1Q,IACAA,EAAAuc,WAAA,YAAAt0C,EAAAuR,OAAAghB,QACAwyC,EAAA,iBAAAhtC,EAAAuc,WAAA,QACAvc,EAAAid,cAAAjlC,GACA,iBAEAs1D,GACAh9B,EAAAliC,KACA,MAAA++D,EAAA3iE,KAAA2hE,gBAAA,QAGA77B,EAAAliC,KACA,MACA5D,KAAA4hE,iBAAA,GACAkB,EAAA,GAAAH,EAAA3iE,KAAA2hE,gBACA,QAEAY,GACAG,EACAG,EACAJ,EAAA,GAAAziE,KAAA+iE,gBAAA,IACA78B,EAAA,cAAAA,EAAA,KAAA,IACA5xB,KAAA,IACAguD,EAAAp9D,GAAAq9D,EACAj/D,GAAAA,EAAAojC,QACAZ,EAAAliC,KAAAN,EAAAuiC,MAAA7lC,OAEAoqB,GAAAA,EAAAsc,QACAZ,EAAAliC,KAAAwmB,EAAAyb,MAAA7lC,OAEAqoC,GACAvC,EAAAliC,KAAAykC,EAAAxC,MAAA7lC,OAEAw1B,GACAsQ,EAAAliC,KAAA4+D,GAEA18B,EAAAliC,KAAA0+D,EAAAhuD,KAAA,KACAwxB,EAAAliC,KAAA,UACAk/D,GAAAh9B,EAAAliC,KAAA,UACA4J,EAAAA,EAAAs4B,EAAAxxB,KAAA,KAAAwxB,EAAAxxB,KAAA,KAGAyuD,cAAA,WACA,MAAA,SAAA/iE,KAAAy0D,WAAA,iBAAAz0D,KAAAy0D,WAAA,KAAA,MAtQA,GA6QA,WAEA,IAAAx6C,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OAMA,SAAA+oD,EAAAh6D,EAAA8F,EAAAm0D,GACA,IAAAC,KACAD,EAAAp1D,QAAA,SAAAnK,GACAw/D,EAAAx/D,GAAAsF,EAAAtF,KAEAuW,EAAAjR,EAAA8F,GAAAo0D,GAJA,GA+CAzlE,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAOA0+C,gBAAA,SAAAmK,GAEA,IAAAqL,EAAA,KADArL,EAAAA,GA7DA,mBA+DA,OAAA9oD,OAAAq2B,KAAArlC,KAAAmjE,IAAA1/D,OAAAzD,KAAA83D,GAAAr0D,SAlDA,SAAA2/D,EAAAC,EAAAC,EAAAC,GACA,GAAAF,IAAAC,EAEA,OAAA,EAEA,GAAA9uD,MAAAiW,QAAA44C,GAAA,CACA,IAAA7uD,MAAAiW,QAAA64C,IAAAD,EAAA5/D,SAAA6/D,EAAA7/D,OACA,OAAA,EAEA,IAAA,IAAAS,EAAA,EAAAC,EAAAk/D,EAAA5/D,OAAAS,EAAAC,EAAAD,IACA,IAAAk/D,EAAAC,EAAAn/D,GAAAo/D,EAAAp/D,IACA,OAAA,EAGA,OAAA,EAEA,GAAAm/D,GAAA,iBAAAA,EAAA,CACA,IAAA17D,EAAA09B,EAAAr2B,OAAAq2B,KAAAg+B,GACA,IAAAC,GACA,iBAAAA,IACAC,GAAAl+B,EAAA5hC,SAAAuL,OAAAq2B,KAAAi+B,GAAA7/D,OAEA,OAAA,EAEA,IAAA,IAAAS,EAAA,EAAAC,EAAAkhC,EAAA5hC,OAAAS,EAAAC,EAAAD,IAIA,GAAA,YAHAyD,EAAA09B,EAAAnhC,MAMAk/D,EAAAC,EAAA17D,GAAA27D,EAAA37D,IACA,OAAA,EAGA,OAAA,GAkBAy7D,CAAApjE,KAAAmjE,GAAAnjE,MAAA,IAQAouD,UAAA,SAAApqD,GACA,IAAA8zD,EAAA9zD,GAAAA,EAAA8zD,aA3EA,kBA4EAhpD,EAAA,IAAAgpD,EACA,OAAA93D,KAAA8O,IAGAk0D,EAAAhjE,KAAA8O,EAAA9O,KAAA83D,IACA9zD,GAAAA,EAAA0wD,iBACAsO,EAAAhjE,KAAA8O,EAAA9K,EAAA0wD,iBAEA10D,MANAA,KAAA+tC,WAAA/pC,IAcA+pC,WAAA,SAAA/pC,GAEA,IAAA8zD,GADA9zD,EAAAA,OACA8zD,aA9FA,kBAkGA,OAHA9zD,EAAA8zD,YAAAA,EACA93D,KAAA,IAAA83D,MACA93D,KAAAouD,UAAApqD,GACAhE,QArGA,GA2GA,WAEA,IAAA7C,EAAAM,EAAA2F,KAAAjG,iBAEAM,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAMAu0D,oBAAA,KAQAplB,kBAAA,SAAA7H,GAGA,IAAAv2C,KAAAg0D,aAAAh0D,KAAAqtC,QAAArtC,KAAAlB,QAAAkB,KAAAlB,OAAAsuC,gBAAAptC,KACA,OAAA,EAGA,IAEAkK,EACAq0D,EAHAxe,EAAAxJ,EAAAltC,EACA22C,EAAAzJ,EAAAjtC,EAIA,IAAA,IAAApF,KADAlE,KAAAstD,SAAA,EACAttD,KAAA29D,QAEA,GAAA39D,KAAAyjE,iBAAAv/D,KAIA,QAAAA,GAAAlE,KAAA8vD,qBAIA9vD,KAAA4H,IAAA,mBACA,OAAA1D,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,KAIAq6D,EAAAv+D,KAAAw+D,eAAAx+D,KAAA29D,QAAAz5D,GAAAy7C,QAiBA,KADAz1C,EAAAlK,KAAAy+D,kBAAAp1D,EAAA02C,EAAAz2C,EAAA02C,GAAAue,KACAr0D,EAAA,GAAA,GAEA,OADAlK,KAAAstD,SAAAppD,EACAA,EAGA,OAAA,GAQAg8D,iBAAA,WACA,IAOA72D,EAAAC,EAPA0P,EAAAhZ,KAAA29D,QACA+F,EAAAvmE,EAAA,GAAA6C,KAAAkI,OAGAy7D,EAAA,QAAA3jE,KAAAqzD,WACAuQ,EAAAD,EAAAlmE,EAAA2F,KAAA6E,IAAAy7D,GACAG,EAAAF,EAAAlmE,EAAA2F,KAAAgF,IAAAs7D,GAGA,IAAA,IAAA36D,KAAAiQ,EACA3P,EAAA2P,EAAAjQ,GAAAM,EACAC,EAAA0P,EAAAjQ,GAAAO,EACA0P,EAAAjQ,GAAA42C,QACAhR,IACAtlC,EAAAA,EAAAw6D,EACAv6D,EAAAA,EAAAs6D,GAEA/0B,IACAxlC,EAAAA,EAAAu6D,EACAt6D,EAAAA,EAAAu6D,GAEA/0B,IACAzlC,EAAAA,EAAAu6D,EACAt6D,EAAAA,EAAAu6D,GAEAj1B,IACAvlC,EAAAA,EAAAw6D,EACAv6D,EAAAA,EAAAs6D,KAeAnM,wBAAA,SAAAz4D,GACA,IAAAgB,KAAA++C,0BACA/+C,KAAAlB,SAAAkB,KAAAlB,OAAAwrC,aACAtqC,KAAAlB,QAAAkB,KAAAlB,OAAAsuC,gBAAAptC,KAEA,OAAAA,KAEAhB,EAAA6Q,OACA,IAAA8gC,EAAA3wC,KAAAwwC,iBAAAszB,EAAA9jE,KAAA8gE,8BACA5zB,EAAAltC,KAAAlB,OAAA6qC,kBAOA,OANA3qC,EAAAE,UAAAyxC,EAAAtnC,EAAAsnC,EAAArnC,GACAtK,EAAAI,MAAA,EAAA8tC,EAAA,GAAA,EAAAA,EAAA,IACAluC,EAAA+Q,OAAA5S,EAAA6C,KAAAkI,QACAlJ,EAAAoxC,UAAApwC,KAAA++C,yBACA//C,EAAAg7C,UAAA8pB,EAAAz6D,EAAA,GAAAy6D,EAAAx6D,EAAA,EAAAw6D,EAAAz6D,EAAAy6D,EAAAx6D,GACAtK,EAAAgR,UACAhQ,MAYAo5D,YAAA,SAAAp6D,EAAAm6D,GACAA,EAAAA,MACA,IAAA2K,EAAA9jE,KAAA8gE,8BACAppB,EAAA,EAAA13C,KAAA8zD,kBACAv0D,EAAAukE,EAAAz6D,EAAAquC,EACAv4C,EAAA2kE,EAAAx6D,EAAAouC,EACAqsB,OAAA,IAAA5K,EAAArJ,iBACAqJ,EAAArJ,iBAAA9vD,KAAA8vD,iBACAkE,OAAA,IAAAmF,EAAAnF,YACAmF,EAAAnF,YAAAh0D,KAAAg0D,YACAC,OAAA,IAAAkF,EAAAlF,oBACAkF,EAAAlF,oBAAAj0D,KAAAi0D,oBAaA,GAXAj1D,EAAA6Q,OACA7Q,EAAAi2C,YAAAkkB,EAAA7F,aAAAtzD,KAAAszD,YACAtzD,KAAA8kD,aAAA9lD,EAAAm6D,EAAA5F,iBAAAvzD,KAAAuzD,gBAAA,MAEAv0D,EAAA+lD,YACAxlD,EAAA,GACAJ,EAAA,EACAI,EACAJ,GAGA4kE,GAAA/jE,KAAAyjE,iBAAA,QAAAzP,EAAA,CAEA,IAAAgQ,GAAA7kE,EAAA,EAEAH,EAAA0R,YACA1R,EAAA8Q,OAAA,EAAAk0D,GACAhlE,EAAAkxC,OAAA,EAAA8zB,EAAA/P,GACAj1D,EAAAorB,SAIA,OADAprB,EAAAgR,UACAhQ,MAaAs5D,mBAAA,SAAAt6D,EAAAgF,EAAAm1D,GACAA,EAAAA,MACA,IAAAvvD,EAAA5J,KAAA64D,+BACA7mD,EAAAvU,EAAA2F,KAAA2O,eACAd,OAAAjN,EAAAiN,OACAC,OAAAlN,EAAAkN,OACAC,MAAAnN,EAAAmN,QAEA2yD,EAAArmE,EAAA2F,KAAAuG,eAAAC,EAAAoI,GACA0lC,EAAA,EAAA13C,KAAA8zD,kBACAv0D,EAAAukE,EAAAz6D,EAAAquC,EACAv4C,EAAA2kE,EAAAx6D,EAAAouC,EAcA,OAZA14C,EAAA6Q,OACA7P,KAAA8kD,aAAA9lD,EAAAm6D,EAAA5F,iBAAAvzD,KAAAuzD,gBAAA,MACAv0D,EAAAi2C,YAAAkkB,EAAA7F,aAAAtzD,KAAAszD,YAEAt0D,EAAA+lD,YACAxlD,EAAA,GACAJ,EAAA,EACAI,EACAJ,GAGAH,EAAAgR,UACAhQ,MAYAkvC,aAAA,SAAAlwC,EAAAm6D,GACAA,EAAAA,MACA,IAAA2K,EAAA9jE,KAAA8gE,8BACAvhE,EAAAukE,EAAAz6D,EACAlK,EAAA2kE,EAAAx6D,EACA26D,EAAA9K,EAAA9F,YAAArzD,KAAAqzD,WACA7oD,IAAAjL,EAAA0kE,GAAA,EACAx5D,IAAAtL,EAAA8kE,GAAA,EACA/kB,OAAA,IAAAia,EAAAja,mBACAia,EAAAja,mBAAAl/C,KAAAk/C,mBACA4Q,OAAA,IAAAqJ,EAAArJ,iBACAqJ,EAAArJ,iBAAA9vD,KAAA8vD,iBACA/zC,EAAAmjC,EAAA,SAAA,OA6DA,OA3DAlgD,EAAA6Q,OACA7Q,EAAAi2C,YAAAj2C,EAAAoxC,UAAA+oB,EAAA3F,aAAAxzD,KAAAwzD,YACAxzD,KAAAk/C,qBACAlgD,EAAAi2C,YAAAkkB,EAAA1F,mBAAAzzD,KAAAyzD,mBAEAzzD,KAAA8kD,aAAA9lD,EAAAm6D,EAAAxF,iBAAA3zD,KAAA2zD,gBAAA,MAGA3zD,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EACAC,EAAA0uD,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EAAAjL,EACAkL,EAAA0uD,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EACAC,EAAAtL,EAAAg6D,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EAAAjL,EACAkL,EAAAtL,EAAAg6D,GAEAn5D,KAAA4H,IAAA,oBAGA5H,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EAAAjL,EAAA,EACAkL,EAAA0uD,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EAAAjL,EAAA,EACAkL,EAAAtL,EAAAg6D,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EAAAjL,EACAkL,EAAAtL,EAAA,EAAAg6D,GAGAn5D,KAAAkkE,aAAA,KAAAllE,EAAA+c,EACAvR,EACAC,EAAAtL,EAAA,EAAAg6D,IAIArJ,GACA9vD,KAAAkkE,aAAA,MAAAllE,EAAA+c,EACAvR,EAAAjL,EAAA,EACAkL,EAAAzK,KAAAi0D,oBAAAkF,GAGAn6D,EAAAgR,UAEAhQ,MAMAkkE,aAAA,SAAAC,EAAAnlE,EAAA+c,EAAAvR,EAAAC,EAAA0uD,GAEA,GADAA,EAAAA,MACAn5D,KAAAyjE,iBAAAU,GAAA,CAGA,IAAAj+D,EAAAlG,KAAAqzD,WAAAjpC,GAAApqB,KAAAk/C,oBAAAl/C,KAAAyzD,kBACA,OAAA0F,EAAAzF,aAAA1zD,KAAA0zD,aACA,IAAA,SACA10D,EAAA0R,YACA1R,EAAAo5C,IAAA5tC,EAAAtE,EAAA,EAAAuE,EAAAvE,EAAA,EAAAA,EAAA,EAAA,EAAA,EAAA6B,KAAAC,IAAA,GACAhJ,EAAA+c,KACAqO,GACAprB,EAAAorB,SAEA,MACA,QACApqB,KAAAk/C,oBAAAlgD,EAAAivC,UAAAzjC,EAAAC,EAAAvE,EAAAA,GACAlH,EAAA+c,EAAA,QAAAvR,EAAAC,EAAAvE,EAAAA,GACAkkB,GACAprB,EAAA+lD,WAAAv6C,EAAAC,EAAAvE,EAAAA,MAUAu9D,iBAAA,SAAAW,GACA,OAAApkE,KAAAqkE,yBAAAD,IAUAE,kBAAA,SAAAF,EAAAx5C,GAEA,OADA5qB,KAAAqkE,yBAAAD,GAAAx5C,EACA5qB,MAkBAukE,sBAAA,SAAAvgE,GAGA,IAAA,IAAA4F,KAFA5F,IAAAA,MAEAA,EACAhE,KAAAskE,kBAAA16D,EAAA5F,EAAA4F,IAEA,OAAA5J,MAQAqkE,uBAAA,WAcA,OAbArkE,KAAAwjE,sBACAxjE,KAAAwjE,qBACA70B,IAAA,EACAE,IAAA,EACAD,IAAA,EACAE,IAAA,EACA8Z,IAAA,EACAlwC,IAAA,EACAgwC,IAAA,EACAC,IAAA,EACAqX,KAAA,IAGAhgE,KAAAwjE,qBASAxb,WAAA,aAWAD,SAAA,eAlaA,GAyaAtqD,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAkrC,aAAA15B,WAOAu1D,YAAA,IAWAC,gBAAA,SAAAx/D,EAAAy/D,GAGA,IAAAC,EAAA,aACA3hD,GAHA0hD,EAAAA,OAGA1hD,YAAA2hD,EACA5/C,EAAA2/C,EAAA3/C,UAAA4/C,EACA1oD,EAAAjc,KAiBA,OAfAvC,EAAA2F,KAAAohB,SACAU,WAAAjgB,EAAAuF,KACA2a,SAAAnlB,KAAAqwC,YAAA7lC,KACAqa,SAAA7kB,KAAAwkE,YACAz/C,SAAA,SAAA1gB,GACAY,EAAAyB,IAAA,OAAArC,GACA4X,EAAAlX,mBACAggB,KAEA/B,WAAA,WACA/d,EAAAqoC,YACAtqB,OAIAhjB,MAYA4kE,gBAAA,SAAA3/D,EAAAy/D,GAGA,IAAAC,EAAA,aACA3hD,GAHA0hD,EAAAA,OAGA1hD,YAAA2hD,EACA5/C,EAAA2/C,EAAA3/C,UAAA4/C,EACA1oD,EAAAjc,KAiBA,OAfAvC,EAAA2F,KAAAohB,SACAU,WAAAjgB,EAAAwF,IACA0a,SAAAnlB,KAAAqwC,YAAA5lC,IACAoa,SAAA7kB,KAAAwkE,YACAz/C,SAAA,SAAA1gB,GACAY,EAAAyB,IAAA,MAAArC,GACA4X,EAAAlX,mBACAggB,KAEA/B,WAAA,WACA/d,EAAAqoC,YACAtqB,OAIAhjB,MAYA6kE,SAAA,SAAA5/D,EAAAy/D,GAGA,IAAAC,EAAA,aACA3hD,GAHA0hD,EAAAA,OAGA1hD,YAAA2hD,EACA5/C,EAAA2/C,EAAA3/C,UAAA4/C,EACA1oD,EAAAjc,KAiBA,OAfAvC,EAAA2F,KAAAohB,SACAU,WAAAjgB,EAAAyY,QACAyH,SAAA,EACAN,SAAA7kB,KAAAwkE,YACAz/C,SAAA,SAAA1gB,GACAY,EAAAyB,IAAA,UAAArC,GACA4X,EAAAlX,mBACAggB,KAEA/B,WAAA,WACA/G,EAAA3W,OAAAL,GACA+d,OAIAhjB,QAIAvC,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAoBAuV,QAAA,WACA,GAAAhhB,UAAA,IAAA,iBAAAA,UAAA,GAAA,CACA,IAAAE,EAAAohE,EAAAC,KACA,IAAArhE,KAAAF,UAAA,GACAuhE,EAAAnhE,KAAAF,GAEA,IAAA,IAAAQ,EAAA,EAAAC,EAAA4gE,EAAAthE,OAAAS,EAAAC,EAAAD,IACAR,EAAAqhE,EAAA7gE,GACA4gE,EAAA5gE,IAAAC,EAAA,EACAnE,KAAAglE,SAAAthE,EAAAF,UAAA,GAAAE,GAAAF,UAAA,GAAAshE,QAIA9kE,KAAAglE,SAAApgE,MAAA5E,KAAAwD,WAEA,OAAAxD,MAUAglE,SAAA,SAAAn+D,EAAAm2D,EAAAh5D,EAAA8gE,GACA,IAAAG,EAAAhpD,EAAAjc,KAEAg9D,EAAAA,EAAA9tD,WAMAlL,EAJAA,EAIAvG,EAAA2F,KAAA6B,OAAA3H,MAAA0G,OAGA6C,EAAA1D,QAAA,OACA8hE,EAAAp+D,EAAAsF,MAAA,MAGA,IAAAm3D,EAAA2B,EACAjlE,KAAA4H,IAAAq9D,EAAA,IAAAA,EAAA,IACAjlE,KAAA4H,IAAAf,GAEA,SAAA7C,IACAA,EAAAkhE,KAAA5B,GAIAtG,GADAA,EAAA75D,QAAA,KACAmgE,EAAAv4D,WAAAiyD,EAAApiD,QAAA,IAAA,KAGA7P,WAAAiyD,GAGAv/D,EAAA2F,KAAAohB,SACAU,WAAAlhB,EAAAkhE,KACA//C,SAAA63C,EACA53C,QAAAphB,EAAA48C,GACA37B,OAAAjhB,EAAAihB,OACAJ,SAAA7gB,EAAA6gB,SACAG,MAAAhhB,EAAAghB,OAAA,WACA,OAAAhhB,EAAAghB,MAAAlhB,KAAAmY,IAEA8I,SAAA,SAAA1gB,EAAA8gE,EAAAC,GACAH,EACAhpD,EAAAgpD,EAAA,IAAAA,EAAA,IAAA5gE,EAGA4X,EAAAvV,IAAAG,EAAAxC,GAEAygE,GAGA9gE,EAAA+gB,UAAA/gB,EAAA+gB,SAAA1gB,EAAA8gE,EAAAC,IAEApiD,WAAA,SAAA3e,EAAA8gE,EAAAC,GACAN,IAIA7oD,EAAAqxB,YACAtpC,EAAAgf,YAAAhf,EAAAgf,WAAA3e,EAAA8gE,EAAAC,UAOA,SAAA1oE,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACA3c,EAAAG,EAAA2F,KAAA6B,OAAA3H,MACA+nE,GAAAttD,GAAA,EAAA3I,GAAA,EAAA4I,GAAA,EAAA3I,GAAA,GACA8jD,EAAA11D,EAAAkrC,aAAA2L,SAAA,eAqTA,SAAAgxB,EAAAC,EAAAC,GACA,IAAAx8D,EAAAu8D,EAAAv8D,OACAy8D,EAAAF,EAAAE,MACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,UACAC,EAAAJ,EAAAI,QACAj1B,EAAA60B,EAAA70B,OACAk1B,EAAAL,EAAAK,SAEA,OAAA,WACA,OAAA7lE,KAAA4H,IAAAoB,IACA,KAAA48D,EACA,OAAA79D,KAAA9K,IAAA+C,KAAA4H,IAAA69D,GAAAzlE,KAAA4H,IAAA89D,IACA,KAAA/0B,EACA,OAAA5oC,KAAA9K,IAAA+C,KAAA4H,IAAA69D,GAAAzlE,KAAA4H,IAAA89D,IAAA,GAAA1lE,KAAA4H,IAAA+9D,GACA,KAAAE,EACA,OAAA99D,KAAA7K,IAAA8C,KAAA4H,IAAA69D,GAAAzlE,KAAA4H,IAAA89D,MAnUAjoE,EAAAqoE,KACAroE,EAAAgmB,KAAA,mCAUAhmB,EAAAqoE,KAAAroE,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,OAOAkS,GAAA,EAOAC,GAAA,EAOA5I,GAAA,EAOAC,GAAA,EAEAslD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,KAAA,KAAA,KAAA,MAQAuW,WAAA,SAAArS,EAAAhG,GACAgG,IACAA,GAAA,EAAA,EAAA,EAAA,IAGAhK,KAAA8b,UAAA,aAAA9X,GAEAhE,KAAA0G,IAAA,KAAAsD,EAAA,IACAhK,KAAA0G,IAAA,KAAAsD,EAAA,IACAhK,KAAA0G,IAAA,KAAAsD,EAAA,IACAhK,KAAA0G,IAAA,KAAAsD,EAAA,IAEAhK,KAAA+lE,gBAAA/hE,IAOA+hE,gBAAA,SAAA/hE,GACAA,IAAAA,MAEAhE,KAAAT,MAAAwI,KAAAsN,IAAArV,KAAAoP,GAAApP,KAAA+X,IACA/X,KAAAb,OAAA4I,KAAAsN,IAAArV,KAAAqP,GAAArP,KAAAgY,IAEAhY,KAAAwK,KAAA,SAAAxG,EACAA,EAAAwG,KACAxK,KAAAgmE,oBAEAhmE,KAAAyK,IAAA,QAAAzG,EACAA,EAAAyG,IACAzK,KAAAimE,oBAQAv+D,KAAA,SAAAC,EAAAtD,GAKA,OAJArE,KAAA8b,UAAA,OAAAnU,EAAAtD,QACA,IAAAghE,EAAA19D,IACA3H,KAAA+lE,kBAEA/lE,MAOAgmE,kBAAAV,GAEAt8D,OAAA,UACAy8D,MAAA,KACAC,MAAA,KACAC,UAAA,UAGAC,QAAA,OACAj1B,OAAA,SACAk1B,SAAA,UAQAI,iBAAAX,GAEAt8D,OAAA,UACAy8D,MAAA,KACAC,MAAA,KACAC,UAAA,WAGAC,QAAA,MACAj1B,OAAA,SACAk1B,SAAA,WAQAlvB,QAAA,SAAA33C,GAGA,GAFAA,EAAA0R,aAEA1Q,KAAA+0C,iBAAA/0C,KAAA+0C,iBAAAoe,EAAA,CAGA,IAAAvpD,EAAA5J,KAAAkmE,iBACAlnE,EAAA8Q,OAAAlG,EAAAmO,GAAAnO,EAAAoO,IACAhZ,EAAAkxC,OAAAtmC,EAAAwF,GAAAxF,EAAAyF,IAGArQ,EAAAk2C,UAAAl1C,KAAA03C,YAKA,IAAAyuB,EAAAnnE,EAAAi2C,YACAj2C,EAAAi2C,YAAAj1C,KAAAoqB,QAAAprB,EAAAoxC,UACApwC,KAAAoqB,QAAApqB,KAAA25D,cAAA36D,GACAA,EAAAi2C,YAAAkxB,GAOAtM,oBAAA,SAAA76D,GACA,IAAA4K,EAAA5J,KAAAkmE,iBAEAlnE,EAAA0R,YACAjT,EAAA2F,KAAA+L,eAAAnQ,EAAA4K,EAAAmO,GAAAnO,EAAAoO,GAAApO,EAAAwF,GAAAxF,EAAAyF,GAAArP,KAAA+0C,iBACA/1C,EAAAmxC,aASA8pB,uBAAA,WACA,OACA5wD,GAAArJ,KAAA+X,GAAA/X,KAAAoP,IAAA,EACA9F,GAAAtJ,KAAAgY,GAAAhY,KAAAqP,IAAA,IAUAs2B,SAAA,SAAAC,GACA,OAAA3rB,EAAAja,KAAA8b,UAAA,WAAA8pB,GAAA5lC,KAAAkmE,mBAOArN,6BAAA,WACA,IAAAhX,EAAA7hD,KAAA8b,UAAA,gCASA,MARA,SAAA9b,KAAA40C,gBACA,IAAA50C,KAAAT,QACAsiD,EAAAv4C,GAAAtJ,KAAA03C,aAEA,IAAA13C,KAAAb,SACA0iD,EAAAx4C,GAAArJ,KAAA03C,cAGAmK,GAOAqkB,eAAA,WACA,IAAAE,EAAApmE,KAAA+X,IAAA/X,KAAAoP,IAAA,EAAA,EACAi3D,EAAArmE,KAAAgY,IAAAhY,KAAAqP,IAAA,EAAA,EACA0I,EAAAquD,EAAApmE,KAAAT,MAAA,GACAyY,EAAAquD,EAAArmE,KAAAb,OAAA,GACAiQ,EAAAg3D,EAAApmE,KAAAT,OAAA,GACA8P,EAAAg3D,EAAArmE,KAAAb,QAAA,GAEA,OACA4Y,GAAAA,EACA3I,GAAAA,EACA4I,GAAAA,EACA3I,GAAAA,IAUA+yD,OAAA,WACA,IAAAx4D,EAAA5J,KAAAkmE,iBACA,OACA,SAAA,eACA,OAAAt8D,EAAAmO,GACA,SAAAnO,EAAAoO,GACA,SAAApO,EAAAwF,GACA,SAAAxF,EAAAyF,GACA,aAaA5R,EAAAqoE,KAAAQ,gBAAA7oE,EAAAsD,kBAAA+E,OAAA,cAAAqG,MAAA,MAUA1O,EAAAqoE,KAAA5xC,YAAA,SAAAxX,EAAAhX,EAAA1B,GACAA,EAAAA,MACA,IAAAuiE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAAqoE,KAAAQ,iBACAt8D,GACAu8D,EAAAxuD,IAAA,EACAwuD,EAAAvuD,IAAA,EACAuuD,EAAAn3D,IAAA,EACAm3D,EAAAl3D,IAAA,GAEA3J,EAAA,IAAAjI,EAAAqoE,KAAA97D,EAAAiQ,EAAAssD,EAAAviE,MAWAvG,EAAAqoE,KAAA/3D,WAAA,SAAA9I,EAAAS,GAKA,IAAA1B,EAAA1G,EAAA2H,GAAA,GACAjB,EAAAgG,QAAA/E,EAAA8S,GAAA9S,EAAA+S,GAAA/S,EAAAmK,GAAAnK,EAAAoK,IACA5R,EAAAuR,OAAAyrD,YAAA,OAAAz2D,EANA,SAAAghC,UACAA,EAAAh7B,OACAtE,GAAAA,EAAAs/B,IAIA,YAvTA,CAmVA,oBAAAl9B,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACA+oE,EAAAz+D,KAAAC,GAEAvK,EAAAg7C,OACAh7C,EAAAgmB,KAAA,sCAUAhmB,EAAAg7C,OAAAh7C,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,SAOAwyC,OAAA,EASAouB,WAAA,EASAC,SAAA,EAAAF,EAEA7R,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,SAAA,aAAA,YAQA4B,KAAA,SAAAC,EAAAtD,GAOA,OANArE,KAAA8b,UAAA,OAAAnU,EAAAtD,GAEA,WAAAsD,GACA3H,KAAA2mE,UAAAtiE,GAGArE,MAQA2lC,SAAA,SAAAC,GACA,OAAA5lC,KAAA8b,UAAA,YAAA,SAAA,aAAA,YAAAhW,OAAA8/B,KAUAw8B,OAAA,WACA,IAAAwE,EACA1+D,GAAAlI,KAAA0mE,SAAA1mE,KAAAymE,aAAA,EAAAD,GAEA,GAAA,IAAAt+D,EACA0+D,GACA,WAAA,eACA,iBACA,MAAA5mE,KAAAq4C,OACA,cAGA,CACA,IAAAwuB,EAAAppE,EAAA2F,KAAA6E,IAAAjI,KAAAymE,YAAAzmE,KAAAq4C,OACAyuB,EAAArpE,EAAA2F,KAAAgF,IAAApI,KAAAymE,YAAAzmE,KAAAq4C,OACA0uB,EAAAtpE,EAAA2F,KAAA6E,IAAAjI,KAAA0mE,UAAA1mE,KAAAq4C,OACA2uB,EAAAvpE,EAAA2F,KAAAgF,IAAApI,KAAA0mE,UAAA1mE,KAAAq4C,OACA4uB,EAAA/+D,EAAAs+D,EAAA,IAAA,IACAI,GACA,cAAAC,EAAA,IAAAC,EACA,MAAA9mE,KAAAq4C,OAAA,IAAAr4C,KAAAq4C,OACA,OAAA4uB,EAAA,KAAA,IAAAF,EAAA,IAAAC,EACA,KAAA,eAAA,SAGA,OAAAJ,GAQAjwB,QAAA,SAAA33C,GACAA,EAAA0R,YACA1R,EAAAo5C,IACA,EACA,EACAp4C,KAAAq4C,OACAr4C,KAAAymE,WACAzmE,KAAA0mE,UAAA,GACA1mE,KAAA05D,oBAAA16D,IAOAkoE,WAAA,WACA,OAAAlnE,KAAA4H,IAAA,UAAA5H,KAAA4H,IAAA,WAOAu/D,WAAA,WACA,OAAAnnE,KAAA4H,IAAA,UAAA5H,KAAA4H,IAAA,WAOA++D,UAAA,SAAAtiE,GAEA,OADArE,KAAAq4C,OAAAh0C,EACArE,KAAA0G,IAAA,QAAA,EAAArC,GAAAqC,IAAA,SAAA,EAAArC,MAWA5G,EAAAg7C,OAAA6tB,gBAAA7oE,EAAAsD,kBAAA+E,OAAA,UAAAqG,MAAA,MAWA1O,EAAAg7C,OAAAvkB,YAAA,SAAAxX,EAAAhX,GACA,IAcAuG,EAdAs6D,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAAg7C,OAAA6tB,iBAEA,KAaA,WADAr6D,EAZAs6D,IAaAt6D,EAAAosC,QAAA,GAZA,MAAA,IAAAxP,MAAA,8DAGA09B,EAAA/7D,MAAA+7D,EAAA/7D,MAAA,GAAA+7D,EAAAluB,OACAkuB,EAAA97D,KAAA87D,EAAA97D,KAAA,GAAA87D,EAAAluB,OACA3yC,EAAA,IAAAjI,EAAAg7C,OAAA8tB,KAmBA9oE,EAAAg7C,OAAA1qC,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,SAAAx1D,EAAAS,KA3MA,CA8MA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAEAA,EAAA2pE,SACA3pE,EAAAgmB,KAAA,uCAWAhmB,EAAA2pE,SAAA3pE,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,WAOAtG,MAAA,IAOAJ,OAAA,IAMAw3C,QAAA,SAAA33C,GACA,IAAAqoE,EAAArnE,KAAAT,MAAA,EACA+nE,EAAAtnE,KAAAb,OAAA,EAEAH,EAAA0R,YACA1R,EAAA8Q,QAAAu3D,EAAAC,GACAtoE,EAAAkxC,OAAA,GAAAo3B,GACAtoE,EAAAkxC,OAAAm3B,EAAAC,GACAtoE,EAAAmxC,YAEAnwC,KAAA05D,oBAAA16D,IAOA66D,oBAAA,SAAA76D,GACA,IAAAqoE,EAAArnE,KAAAT,MAAA,EACA+nE,EAAAtnE,KAAAb,OAAA,EAEAH,EAAA0R,YACAjT,EAAA2F,KAAA+L,eAAAnQ,GAAAqoE,EAAAC,EAAA,GAAAA,EAAAtnE,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAA,GAAAsoE,EAAAD,EAAAC,EAAAtnE,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqoE,EAAAC,GAAAD,EAAAC,EAAAtnE,KAAA+0C,iBACA/1C,EAAAmxC,aASAiyB,OAAA,WACA,IAAAiF,EAAArnE,KAAAT,MAAA,EACA+nE,EAAAtnE,KAAAb,OAAA,EACA6K,IACAq9D,EAAA,IAAAC,EACA,MAAAA,EACAD,EAAA,IAAAC,GACAhzD,KAAA,KACA,OACA,YAAA,eACA,WAAAtK,EACA,WAaAvM,EAAA2pE,SAAAr5D,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,WAAAx1D,EAAAS,KAxGA,CA2GA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACA8pE,EAAA,EAAAx/D,KAAAC,GAEAvK,EAAA+pE,QACA/pE,EAAAgmB,KAAA,uCAWAhmB,EAAA+pE,QAAA/pE,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,UAOA4D,GAAA,EAOAC,GAAA,EAEAirD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,KAAA,MAOAuW,WAAA,SAAArY,GACAhE,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA0G,IAAA,KAAA1C,GAAAA,EAAAyF,IAAA,GACAzJ,KAAA0G,IAAA,KAAA1C,GAAAA,EAAA0F,IAAA,IASAhC,KAAA,SAAAC,EAAAtD,GAEA,OADArE,KAAA8b,UAAA,OAAAnU,EAAAtD,GACAsD,GAEA,IAAA,KACA3H,KAAAyJ,GAAApF,EACArE,KAAA0G,IAAA,QAAA,EAAArC,GACA,MAEA,IAAA,KACArE,KAAA0J,GAAArF,EACArE,KAAA0G,IAAA,SAAA,EAAArC,GAIA,OAAArE,MAOAynE,MAAA,WACA,OAAAznE,KAAA4H,IAAA,MAAA5H,KAAA4H,IAAA,WAOA8/D,MAAA,WACA,OAAA1nE,KAAA4H,IAAA,MAAA5H,KAAA4H,IAAA,WAQA+9B,SAAA,SAAAC,GACA,OAAA5lC,KAAA8b,UAAA,YAAA,KAAA,MAAAhW,OAAA8/B,KASAw8B,OAAA,WACA,OACA,YAAA,eACA,iBACA,OAAApiE,KAAAyJ,GACA,SAAAzJ,KAAA0J,GACA,WASAitC,QAAA,SAAA33C,GACAA,EAAA0R,YACA1R,EAAA6Q,OACA7Q,EAAAiL,UAAA,EAAA,EAAA,EAAAjK,KAAA0J,GAAA1J,KAAAyJ,GAAA,EAAA,GACAzK,EAAAo5C,IACA,EACA,EACAp4C,KAAAyJ,GACA,EACA89D,GACA,GACAvoE,EAAAgR,UACAhQ,KAAA05D,oBAAA16D,MAWAvB,EAAA+pE,QAAAlB,gBAAA7oE,EAAAsD,kBAAA+E,OAAA,cAAAqG,MAAA,MAUA1O,EAAA+pE,QAAAtzC,YAAA,SAAAxX,EAAAhX,GAEA,IAAA6gE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAA+pE,QAAAlB,iBAEAC,EAAA/7D,MAAA+7D,EAAA/7D,MAAA,GAAA+7D,EAAA98D,GACA88D,EAAA97D,KAAA87D,EAAA97D,KAAA,GAAA87D,EAAA78D,GACAhE,EAAA,IAAAjI,EAAA+pE,QAAAjB,KAYA9oE,EAAA+pE,QAAAz5D,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,UAAAx1D,EAAAS,KAjLA,CAoLA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OAEAxc,EAAAk8C,KACAl8C,EAAAgmB,KAAA,mCAWAhmB,EAAAk8C,KAAAl8C,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOA0lD,gBAAAj3D,EAAAuR,OAAAC,UAAAylD,gBAAA5uD,OAAA,KAAA,MAOAD,KAAA,OAOA4D,GAAA,EAOAC,GAAA,EAEAirD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,KAAA,MAOAuW,WAAA,SAAArY,GACAhE,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA2nE,aAOAA,UAAA,WACA3nE,KAAAyJ,KAAAzJ,KAAA0J,GACA1J,KAAA0J,GAAA1J,KAAAyJ,GAEAzJ,KAAA0J,KAAA1J,KAAAyJ,KACAzJ,KAAAyJ,GAAAzJ,KAAA0J,KAQAitC,QAAA,SAAA33C,GAKA,IAAAyK,EAAAzJ,KAAAyJ,GAAA1B,KAAA9K,IAAA+C,KAAAyJ,GAAAzJ,KAAAT,MAAA,GAAA,EACAmK,EAAA1J,KAAA0J,GAAA3B,KAAA9K,IAAA+C,KAAA0J,GAAA1J,KAAAb,OAAA,GAAA,EACAskD,EAAAzjD,KAAAT,MACAm6B,EAAA15B,KAAAb,OACAkK,GAAArJ,KAAAT,MAAA,EACA+J,GAAAtJ,KAAAb,OAAA,EACAyoE,EAAA,IAAAn+D,GAAA,IAAAC,EAEAiQ,EAAA,YACA3a,EAAA0R,YAEA1R,EAAA8Q,OAAAzG,EAAAI,EAAAH,GAEAtK,EAAAkxC,OAAA7mC,EAAAo6C,EAAAh6C,EAAAH,GACAs+D,GAAA5oE,EAAAqa,cAAAhQ,EAAAo6C,EAAA9pC,EAAAlQ,EAAAH,EAAAD,EAAAo6C,EAAAn6C,EAAAqQ,EAAAjQ,EAAAL,EAAAo6C,EAAAn6C,EAAAI,GAEA1K,EAAAkxC,OAAA7mC,EAAAo6C,EAAAn6C,EAAAowB,EAAAhwB,GACAk+D,GAAA5oE,EAAAqa,cAAAhQ,EAAAo6C,EAAAn6C,EAAAowB,EAAA/f,EAAAjQ,EAAAL,EAAAo6C,EAAA9pC,EAAAlQ,EAAAH,EAAAowB,EAAArwB,EAAAo6C,EAAAh6C,EAAAH,EAAAowB,GAEA16B,EAAAkxC,OAAA7mC,EAAAI,EAAAH,EAAAowB,GACAkuC,GAAA5oE,EAAAqa,cAAAhQ,EAAAsQ,EAAAlQ,EAAAH,EAAAowB,EAAArwB,EAAAC,EAAAowB,EAAA/f,EAAAjQ,EAAAL,EAAAC,EAAAowB,EAAAhwB,GAEA1K,EAAAkxC,OAAA7mC,EAAAC,EAAAI,GACAk+D,GAAA5oE,EAAAqa,cAAAhQ,EAAAC,EAAAqQ,EAAAjQ,EAAAL,EAAAsQ,EAAAlQ,EAAAH,EAAAD,EAAAI,EAAAH,GAEAtK,EAAAmxC,YAEAnwC,KAAA05D,oBAAA16D,IAOA66D,oBAAA,SAAA76D,GACA,IAAAqK,GAAArJ,KAAAT,MAAA,EACA+J,GAAAtJ,KAAAb,OAAA,EACAskD,EAAAzjD,KAAAT,MACAm6B,EAAA15B,KAAAb,OAEAH,EAAA0R,YACAjT,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAC,EAAAD,EAAAo6C,EAAAn6C,EAAAtJ,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAo6C,EAAAn6C,EAAAD,EAAAo6C,EAAAn6C,EAAAowB,EAAA15B,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAo6C,EAAAn6C,EAAAowB,EAAArwB,EAAAC,EAAAowB,EAAA15B,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAC,EAAAowB,EAAArwB,EAAAC,EAAAtJ,KAAA+0C,iBACA/1C,EAAAmxC,aAQAxK,SAAA,SAAAC,GACA,OAAA5lC,KAAA8b,UAAA,YAAA,KAAA,MAAAhW,OAAA8/B,KASAw8B,OAAA,WACA,IAAA/4D,GAAArJ,KAAAT,MAAA,EAAA+J,GAAAtJ,KAAAb,OAAA,EACA,OACA,SAAA,eACA,MAAAkK,EAAA,QAAAC,EACA,SAAAtJ,KAAAyJ,GAAA,SAAAzJ,KAAA0J,GACA,YAAA1J,KAAAT,MAAA,aAAAS,KAAAb,OACA,aAaA1B,EAAAk8C,KAAA2sB,gBAAA7oE,EAAAsD,kBAAA+E,OAAA,yBAAAqG,MAAA,MAUA1O,EAAAk8C,KAAAzlB,YAAA,SAAAxX,EAAAhX,EAAA1B,GACA,IAAA0Y,EACA,OAAAhX,EAAA,MAEA1B,EAAAA,MAEA,IAAAuiE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAAk8C,KAAA2sB,iBAEAC,EAAA/7D,KAAA+7D,EAAA/7D,MAAA,EACA+7D,EAAA97D,IAAA87D,EAAA97D,KAAA,EACA87D,EAAApnE,OAAAonE,EAAApnE,QAAA,EACAonE,EAAAhnE,MAAAgnE,EAAAhnE,OAAA,EACA,IAAAm6C,EAAA,IAAAj8C,EAAAk8C,KAAA1/B,EAAAjW,EAAAvG,EAAA2F,KAAA6B,OAAA3H,MAAA0G,MAAAuiE,IACA7sB,EAAA9uB,QAAA8uB,EAAA9uB,SAAA8uB,EAAAn6C,MAAA,GAAAm6C,EAAAv6C,OAAA,EACAuG,EAAAg0C,IAWAj8C,EAAAk8C,KAAA5rC,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,OAAAx1D,EAAAS,KA1MA,CA6MA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAhd,EAAAQ,EAAA2F,KAAAC,MAAApG,IACAC,EAAAO,EAAA2F,KAAAC,MAAAnG,IACAK,EAAAE,EAAA2F,KAAA7F,QAEAE,EAAAoqE,SACApqE,EAAAgmB,KAAA,uCAUAhmB,EAAAoqE,SAAApqE,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,WAOAmE,OAAA,KAEA2qD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,UAqBAuW,WAAA,SAAArS,EAAAhG,GACAA,EAAAA,MACAhE,KAAAgK,OAAAA,MACAhK,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA8nE,uBAAA9jE,IAGA8jE,uBAAA,SAAA9jE,GACA,IAAA+jE,EAAAC,EAAAhoE,KAAAioE,gBAAAjkE,GACAhE,KAAAT,MAAAyoE,EAAAzoE,MACAS,KAAAb,OAAA6oE,EAAA7oE,OACA6E,EAAAkkE,UACAH,EAAA/nE,KAAAu8D,wBACAlzD,EAAA2+D,EAAAx9D,KAAAxK,KAAA03C,YAAA,EAAApuC,EAAA0+D,EAAAv9D,IAAAzK,KAAA03C,YAAA,GACA,OACA,MACA13C,KAAA04C,QACA14C,KAAA24C,eAGA,IAAA30C,EAAAwG,OACAxK,KAAAwK,KAAAxG,EAAAkkE,QAAAF,EAAAx9D,KAAAu9D,EAAA1+D,QAEA,IAAArF,EAAAyG,MACAzK,KAAAyK,IAAAzG,EAAAkkE,QAAAF,EAAAv9D,IAAAs9D,EAAAz+D,GAEAtJ,KAAAomC,YACA/8B,EAAA2+D,EAAAx9D,KAAAxK,KAAAT,MAAA,EACA+J,EAAA0+D,EAAAv9D,IAAAzK,KAAAb,OAAA,IAcA8oE,gBAAA,WAEA,IAAAj+D,EAAAhK,KAAAgK,OACAG,EAAAlN,EAAA+M,EAAA,MAAA,EACAM,EAAArN,EAAA+M,EAAA,MAAA,EACAI,EAAAlN,EAAA8M,EAAA,MAAA,EACAO,EAAArN,EAAA8M,EAAA,MAAA,EACAzK,EAAA6K,EAAAD,EACAhL,EAAAoL,EAAAD,EAEA,OACAE,KAAAL,EACAM,IAAAH,EACA/K,MAAAA,EACAJ,OAAAA,IASAwmC,SAAA,SAAAC,GACA,OAAA3rB,EAAAja,KAAA8b,UAAA,WAAA8pB,IACA57B,OAAAhK,KAAAgK,OAAAlE,YAUAs8D,OAAA,WAIA,IAHA,IAAAp4D,KAAAm+D,EAAAnoE,KAAAomC,WAAA/8B,EAAA++D,EAAApoE,KAAAomC,WAAA98B,EACA+K,EAAA5W,EAAAuR,OAAAqF,oBAEAnQ,EAAA,EAAAC,EAAAnE,KAAAgK,OAAAvG,OAAAS,EAAAC,EAAAD,IACA8F,EAAApG,KACArG,EAAAyC,KAAAgK,OAAA9F,GAAAmF,EAAA8+D,EAAA9zD,GAAA,IACA9W,EAAAyC,KAAAgK,OAAA9F,GAAAoF,EAAA8+D,EAAA/zD,GAAA,KAGA,OACA,IAAArU,KAAA6F,KAAA,IAAA,eACA,WAAAmE,EAAAsK,KAAA,IACA,WAUA+zD,aAAA,SAAArpE,GACA,IAAA+J,EAAA5E,EAAAnE,KAAAgK,OAAAvG,OACA4F,EAAArJ,KAAAomC,WAAA/8B,EACAC,EAAAtJ,KAAAomC,WAAA98B,EAEA,IAAAnF,GAAAsW,MAAAza,KAAAgK,OAAA7F,EAAA,GAAAmF,GAGA,OAAA,EAEAtK,EAAA0R,YACA1R,EAAA8Q,OAAA9P,KAAAgK,OAAA,GAAAX,EAAAA,EAAArJ,KAAAgK,OAAA,GAAAV,EAAAA,GACA,IAAA,IAAApF,EAAA,EAAAA,EAAAC,EAAAD,IACA6E,EAAA/I,KAAAgK,OAAA9F,GACAlF,EAAAkxC,OAAAnnC,EAAAM,EAAAA,EAAAN,EAAAO,EAAAA,GAEA,OAAA,GAOAqtC,QAAA,SAAA33C,GACAgB,KAAAqoE,aAAArpE,IAGAgB,KAAA05D,oBAAA16D,IAOA66D,oBAAA,SAAA76D,GACA,IAAAk3C,EAAAC,EAEAn3C,EAAA0R,YACA,IAAA,IAAAxM,EAAA,EAAAC,EAAAnE,KAAAgK,OAAAvG,OAAAS,EAAAC,EAAAD,IACAgyC,EAAAl2C,KAAAgK,OAAA9F,GACAiyC,EAAAn2C,KAAAgK,OAAA9F,EAAA,IAAAgyC,EACAz4C,EAAA2F,KAAA+L,eAAAnQ,EAAAk3C,EAAA7sC,EAAA6sC,EAAA5sC,EAAA6sC,EAAA9sC,EAAA8sC,EAAA7sC,EAAAtJ,KAAA+0C,kBAQA3uC,WAAA,WACA,OAAApG,KAAA4H,IAAA,UAAAnE,UAWAhG,EAAAoqE,SAAAvB,gBAAA7oE,EAAAsD,kBAAA+E,SAUArI,EAAAoqE,SAAAS,qBAAA,SAAAC,GACA,OAAA,SAAA7rD,EAAAhX,EAAA1B,GACA,IAAA0Y,EACA,OAAAhX,EAAA,MAEA1B,IAAAA,MAEA,IAAAgG,EAAAvM,EAAA60B,qBAAA5V,EAAAqP,aAAA,WACAw6C,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAA8qE,GAAAjC,iBACAC,EAAA2B,SAAA,EACAxiE,EAAA,IAAAjI,EAAA8qE,GAAAv+D,EAAAiQ,EAAAssD,EAAAviE,OAIAvG,EAAAoqE,SAAA3zC,YAAAz2B,EAAAoqE,SAAAS,qBAAA,YAWA7qE,EAAAoqE,SAAA95D,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,WAAAx1D,EAAAS,EAAA,YA/PA,CAkQA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAEAA,EAAA+qE,QACA/qE,EAAAgmB,KAAA,sCAUAhmB,EAAA+qE,QAAA/qE,EAAA2F,KAAA+Y,YAAA1e,EAAAoqE,UAOAhiE,KAAA,UAMA8wC,QAAA,SAAA33C,GACAgB,KAAAqoE,aAAArpE,KAGAA,EAAAmxC,YACAnwC,KAAA05D,oBAAA16D,KAOA66D,oBAAA,SAAA76D,GACAgB,KAAA8b,UAAA,sBAAA9c,GACAA,EAAAmxC,eAWA1yC,EAAA+qE,QAAAlC,gBAAA7oE,EAAAsD,kBAAA+E,SAUArI,EAAA+qE,QAAAt0C,YAAAz2B,EAAAoqE,SAAAS,qBAAA,WAUA7qE,EAAA+qE,QAAAz6D,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,UAAAx1D,EAAAS,EAAA,YA5EA,CA+EA,oBAAAoC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAR,EAAAQ,EAAA2F,KAAAC,MAAApG,IACAC,EAAAO,EAAA2F,KAAAC,MAAAnG,IACA+c,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAwuD,EAAAz5D,OAAAC,UAAAC,SACA2J,EAAApb,EAAA2F,KAAAyV,QACAtb,EAAAE,EAAA2F,KAAA7F,QACAmrE,GACAx7C,EAAA,EACApa,EAAA,EACA4mB,EAAA,EACAxwB,EAAA,EACAiP,EAAA,EACArC,EAAA,EACAqjB,EAAA,EACAtvB,EAAA,EACAc,EAAA,GAEAg+D,GACAz7C,EAAA,IACA07C,EAAA,KAGAnrE,EAAAg6C,KACAh6C,EAAAgmB,KAAA,mCAWAhmB,EAAAg6C,KAAAh6C,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,OAOA4I,KAAA,KAEAkmD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,OAAA,YAEA4uD,gBAAAj3D,EAAAuR,OAAAC,UAAAylD,gBAAA5uD,OAAA,QAQAuW,WAAA,SAAA5N,EAAAzK,GACAA,EAAAA,MACAhE,KAAA8b,UAAA,aAAA9X,GAEAyK,IACAA,MAGA,IAAAo6D,EAAA,mBAAAJ,EAAA3kE,KAAA2K,GAEAzO,KAAAyO,KAAAo6D,EACAp6D,EAEAA,EAAA8D,OAAA9D,EAAA8D,MAAA,gCAEAvS,KAAAyO,OAIAo6D,IACA7oE,KAAAyO,KAAAzO,KAAA8oE,cAGArrE,EAAAoqE,SAAA54D,UAAA64D,uBAAAhkE,KAAA9D,KAAAgE,KAOA+kE,oBAAA,SAAA/pE,GACA,IAAAuH,EAQAyiE,EACAC,EARAC,EAAA,KACAC,EAAA,EACAC,EAAA,EACA//D,EAAA,EACAC,EAAA,EACA+/D,EAAA,EACAC,EAAA,EAGAx2D,GAAA9S,KAAAomC,WAAA/8B,EACAQ,GAAA7J,KAAAomC,WAAA98B,EAEAtK,EAAA0R,YAEA,IAAA,IAAAxM,EAAA,EAAAC,EAAAnE,KAAAyO,KAAAhL,OAAAS,EAAAC,IAAAD,EAAA,CAIA,QAFAqC,EAAAvG,KAAAyO,KAAAvK,IAEA,IAEA,IAAA,IACAmF,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAR,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAR,GAAA9C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAR,EAAA9C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAP,GAAA/C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAP,EAAA/C,EAAA,GACAvH,EAAAkxC,OAAA7mC,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAR,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACA4iE,EAAA9/D,EACA+/D,EAAA9/D,EACAtK,EAAA8Q,OAAAzG,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAR,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA4iE,EAAA9/D,EACA+/D,EAAA9/D,EACAtK,EAAA8Q,OAAAzG,EAAAyJ,EAAAxJ,EAAAO,GACA,MAEA,IAAA,IACAm/D,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GACA8iE,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GACAvH,EAAAqa,cACAhQ,EAAA9C,EAAA,GAAAuM,EACAxJ,EAAA/C,EAAA,GAAAsD,EACAw/D,EAAAv2D,EACAw2D,EAAAz/D,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACA5/D,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA8iE,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GACAvH,EAAAqa,cACA9S,EAAA,GAAAuM,EACAvM,EAAA,GAAAsD,EACAw/D,EAAAv2D,EACAw2D,EAAAz/D,EACAR,EAAAyJ,EACAxJ,EAAAO,GAEA,MAEA,IAAA,IAGAm/D,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GAEA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAGAtqE,EAAAqa,cACAgwD,EAAAv2D,EACAw2D,EAAAz/D,EACAR,EAAA9C,EAAA,GAAAuM,EACAxJ,EAAA/C,EAAA,GAAAsD,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAMAw/D,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GAEA8C,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACAD,EAAAziE,EAAA,GACA0iE,EAAA1iE,EAAA,GACA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAEAtqE,EAAAqa,cACAgwD,EAAAv2D,EACAw2D,EAAAz/D,EACAtD,EAAA,GAAAuM,EACAvM,EAAA,GAAAsD,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EAMAI,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GAEA,MAEA,IAAA,IAEAyiE,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GAEA8iE,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GAEAvH,EAAAq3C,iBACAgzB,EAAAv2D,EACAw2D,EAAAz/D,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACAD,EAAAziE,EAAA,GACA0iE,EAAA1iE,EAAA,GAEAvH,EAAAq3C,iBACA9vC,EAAA,GAAAuM,EACAvM,EAAA,GAAAsD,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EACAI,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GACA,MAEA,IAAA,IAGAyiE,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GAEA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAGAtqE,EAAAq3C,iBACAgzB,EAAAv2D,EACAw2D,EAAAz/D,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EAEA,MAEA,IAAA,IACAD,EAAAziE,EAAA,GACA0iE,EAAA1iE,EAAA,GAEA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAEAtqE,EAAAq3C,iBACAgzB,EAAAv2D,EACAw2D,EAAAz/D,EACAm/D,EAAAl2D,EACAm2D,EAAAp/D,GAEAR,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IAEApwD,EAAA7Z,EAAAqK,EAAAyJ,EAAAxJ,EAAAO,GACAtD,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GAAA8C,EAAAyJ,EACAvM,EAAA,GAAA+C,EAAAO,IAEAR,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACA,MAEA,IAAA,IAEAsS,EAAA7Z,EAAAqK,EAAAyJ,EAAAxJ,EAAAO,GACAtD,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GAAAuM,EACAvM,EAAA,GAAAsD,IAEAR,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA,MAEA,IAAA,IACA,IAAA,IACA8C,EAAA8/D,EACA7/D,EAAA8/D,EACApqE,EAAAmxC,YAGA+4B,EAAA3iE,IAQAowC,QAAA,SAAA33C,GACAgB,KAAA+oE,oBAAA/pE,GACAgB,KAAA05D,oBAAA16D,IAOAkQ,SAAA,WACA,MAAA,kBAAAlP,KAAAoG,aACA,eAAApG,KAAAyK,IAAA,aAAAzK,KAAAwK,KAAA,OAQAm7B,SAAA,SAAAC,GACA,OAAA3rB,EAAAja,KAAA8b,UAAA,WAAA8pB,IACAn3B,KAAAzO,KAAAyO,KAAA2F,IAAA,SAAApO,GAAA,OAAAA,EAAA8F,aASAolC,iBAAA,SAAAtL,GACA,IAAA7/B,EAAA/F,KAAA2lC,UAAA,cAAA7/B,OAAA8/B,IAIA,OAHA7/B,EAAA6I,mBACA7I,EAAA0I,KAEA1I,GASAq8D,OAAA,WACA,IAAA3zD,EAAAzO,KAAAyO,KAAA2F,IAAA,SAAA3F,GACA,OAAAA,EAAA6F,KAAA,OACAA,KAAA,KACA,OACA,SAAA,eACA,MAAA7F,EACA,4BACA,SAIA86D,oBAAA,WACA,IAAAC,EAAA/rE,EAAAuR,OAAAqF,oBACA,MAAA,cAAA9W,GAAAyC,KAAAomC,WAAA/8B,EAAAmgE,GAAA,KACAjsE,GAAAyC,KAAAomC,WAAA98B,EAAAkgE,GAAA,KAQA/2B,cAAA,SAAAjlC,GACA,IAAA04B,EAAAlmC,KAAAupE,sBACA,MAAA,KAAAvpE,KAAAqiE,6BACAriE,KAAAoiE,UAAA50D,QAAAA,EAAA04B,oBAAAA,KASAL,MAAA,SAAAr4B,GACA,IAAA04B,EAAAlmC,KAAAupE,sBACA,OAAAvpE,KAAAmiE,qBAAAniE,KAAAoiE,UAAA50D,QAAAA,EAAA04B,oBAAAA,KAQA9/B,WAAA,WACA,OAAApG,KAAAyO,KAAAhL,QAMAqlE,WAAA,WASA,IARA,IAEAW,EACAj/C,EAEAjY,EACAm3D,EAEAC,EARAnzD,KACAwC,KAGA4wD,EAAAnsE,EAAAyD,cAIAgD,EAAA,EAAAC,EAAAnE,KAAAyO,KAAAhL,OAAAS,EAAAC,EAAAD,IAAA,CAMA,IALAulE,EAAAzpE,KAAAyO,KAAAvK,GAEAwlE,EAAAD,EAAA39D,MAAA,GAAAqmB,OACAnZ,EAAAvV,OAAA,EAEA8O,EAAAq3D,EAAAx+D,KAAAs+D,IACA1wD,EAAApV,KAAA2O,EAAA,IAGAo3D,GAAAF,EAAA79D,OAAA,IAEA,IAAA,IAAA+M,EAAA,EAAAC,EAAAI,EAAAvV,OAAAkV,EAAAC,EAAAD,IACA6R,EAAAzf,WAAAiO,EAAAL,IACA8B,MAAA+P,IACAm/C,EAAA/lE,KAAA4mB,GAIA,IAAAq/C,EAAAF,EAAA,GACAG,EAAApB,EAAAmB,EAAAn2D,eACAq2D,EAAApB,EAAAkB,IAAAA,EAEA,GAAAF,EAAAlmE,OAAA,EAAAqmE,EACA,IAAA,IAAAnwD,EAAA,EAAAqwD,EAAAL,EAAAlmE,OAAAkW,EAAAqwD,EAAArwD,GAAAmwD,EACAtzD,EAAA5S,MAAAimE,GAAA/jE,OAAA6jE,EAAA79D,MAAA6N,EAAAA,EAAAmwD,KACAD,EAAAE,OAIAvzD,EAAA5S,KAAA+lE,GAIA,OAAAnzD,GAMAyxD,gBAAA,WAgBA,IAdA,IAEA1hE,EAQAyiE,EACAC,EACAxwD,EAZAwxD,KACAC,KAEAhB,EAAA,KACAC,EAAA,EACAC,EAAA,EACA//D,EAAA,EACAC,EAAA,EACA+/D,EAAA,EACAC,EAAA,EAKAplE,EAAA,EAAAC,EAAAnE,KAAAyO,KAAAhL,OAAAS,EAAAC,IAAAD,EAAA,CAIA,QAFAqC,EAAAvG,KAAAyO,KAAAvK,IAEA,IAEA,IAAA,IACAmF,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACAkS,KACA,MAEA,IAAA,IACApP,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACAkS,KACA,MAEA,IAAA,IACApP,GAAA9C,EAAA,GACAkS,KACA,MAEA,IAAA,IACApP,EAAA9C,EAAA,GACAkS,KACA,MAEA,IAAA,IACAnP,GAAA/C,EAAA,GACAkS,KACA,MAEA,IAAA,IACAnP,EAAA/C,EAAA,GACAkS,KACA,MAEA,IAAA,IACApP,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACA4iE,EAAA9/D,EACA+/D,EAAA9/D,EACAmP,KACA,MAEA,IAAA,IACApP,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA4iE,EAAA9/D,EACA+/D,EAAA9/D,EACAmP,KACA,MAEA,IAAA,IACAuwD,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GACA8iE,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GACAkS,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACAD,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA8iE,EACAC,EACAN,EACAC,GAEA5/D,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACAI,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GACAkS,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA/C,EAAA,GACAA,EAAA,GACA8iE,EACAC,EACA/iE,EAAA,GACAA,EAAA,IAEA8C,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA,MAEA,IAAA,IAGAyiE,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GAEA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAGA7wD,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACAjgE,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACAyiE,EACAC,GAMAI,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GACA8C,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACAD,EAAAziE,EAAA,GACA0iE,EAAA1iE,EAAA,GACA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAEA7wD,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACA/iE,EAAA,GACAA,EAAA,GACAyiE,EACAC,GAEA5/D,EAAA2/D,EACA1/D,EAAA2/D,EAKAI,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GACA,MAEA,IAAA,IAEAyiE,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GACA8iE,EAAAhgE,EAAA9C,EAAA,GACA+iE,EAAAhgE,EAAA/C,EAAA,GACAkS,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACAD,EACAC,EACAN,EACAC,GAEA5/D,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IACAI,EAAA9iE,EAAA,GACA+iE,EAAA/iE,EAAA,GACAkS,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACAD,EACAC,EACA/iE,EAAA,GACAA,EAAA,IAEA8C,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA,MAEA,IAAA,IAEAyiE,EAAA3/D,EAAA9C,EAAA,GACA0iE,EAAA3/D,EAAA/C,EAAA,GACA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAGA7wD,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACAD,EACAC,EACAN,EACAC,GAEA5/D,EAAA2/D,EACA1/D,EAAA2/D,EAEA,MAEA,IAAA,IACAD,EAAAziE,EAAA,GACA0iE,EAAA1iE,EAAA,GAEA,OAAA2iE,EAAA,GAAA32D,MAAA,WAGA82D,EAAAhgE,EACAigE,EAAAhgE,IAIA+/D,EAAA,EAAAhgE,EAAAggE,EACAC,EAAA,EAAAhgE,EAAAggE,GAEA7wD,EAAAhb,EAAA2F,KAAAwU,iBAAAvO,EAAAC,EACA+/D,EACAC,EACAD,EACAC,EACAN,EACAC,GAEA5/D,EAAA2/D,EACA1/D,EAAA2/D,EACA,MAEA,IAAA,IAEAxwD,EAAAhb,EAAA2F,KAAAkW,eAAAjQ,EAAAC,EACA/C,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GAAA8C,EACA9C,EAAA,GAAA+C,GAEAD,GAAA9C,EAAA,GACA+C,GAAA/C,EAAA,GACA,MAEA,IAAA,IAEAkS,EAAAhb,EAAA2F,KAAAkW,eAAAjQ,EAAAC,EACA/C,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,IAEA8C,EAAA9C,EAAA,GACA+C,EAAA/C,EAAA,GACA,MAEA,IAAA,IACA,IAAA,IACA8C,EAAA8/D,EACA7/D,EAAA8/D,EAGAF,EAAA3iE,EACAkS,EAAA5K,QAAA,SAAA9E,GACAkhE,EAAArmE,KAAAmF,EAAAM,GACA6gE,EAAAtmE,KAAAmF,EAAAO,KAEA2gE,EAAArmE,KAAAyF,GACA6gE,EAAAtmE,KAAA0F,GAGA,IAAAa,EAAAlN,EAAAgtE,IAAA,EACA3/D,EAAArN,EAAAitE,IAAA,EACA9/D,EAAAlN,EAAA+sE,IAAA,EACA1/D,EAAArN,EAAAgtE,IAAA,EACAC,EAAA//D,EAAAD,EACAo3D,EAAAh3D,EAAAD,EAEA,OACAE,KAAAL,EACAM,IAAAH,EACA/K,MAAA4qE,EACAhrE,OAAAoiE,MAYA9jE,EAAAg6C,KAAA1pC,WAAA,SAAA9I,EAAAS,GACA,GAAA,iBAAAT,EAAA2J,WAAA,CACA,IAAAw7D,EAAAnlE,EAAA2J,WACAnR,EAAAu1B,eAAAo3C,EAAA,SAAA57D,GACA,IAAAC,EAAAD,EAAA,GACAC,EAAA24B,WAAAniC,GACAS,GAAAA,EAAA+I,UAIAhR,EAAAuR,OAAAyrD,YAAA,OAAAx1D,EAAAS,EAAA,SAWAjI,EAAAg6C,KAAA6uB,gBAAA7oE,EAAAsD,kBAAA+E,QAAA,MAWArI,EAAAg6C,KAAAvjB,YAAA,SAAAxX,EAAAhX,EAAA1B,GACA,IAAAuiE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAAg6C,KAAA6uB,iBACAC,EAAA2B,SAAA,EACAxiE,EAAA,IAAAjI,EAAAg6C,KAAA8uB,EAAA3iD,EAAA3J,EAAAssD,EAAAviE,OA54BA,CAg5BA,oBAAA8D,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAR,EAAAQ,EAAA2F,KAAAC,MAAApG,IACAC,EAAAO,EAAA2F,KAAAC,MAAAnG,IAEAO,EAAAkR,QAYAlR,EAAAkR,MAAAlR,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,OAAAvR,EAAAgH,YAOAoB,KAAA,QAOA6xC,YAAA,EAOAkO,gBAAA,EAOA+O,mBASA0V,eAAA,EASAhuD,WAAA,SAAAjX,EAAApB,EAAAsmE,GACAtmE,EAAAA,MACAhE,KAAA0E,YAIA4lE,GAAAtqE,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA0E,SAAAU,MACA,IAAA,IAAAlB,EAAAlE,KAAA0E,SAAAjB,OAAAS,KACAlE,KAAA0E,SAAAR,GAAAmpC,MAAArtC,KAGA,GAAAsqE,EAoBAtqE,KAAAuqE,4BApBA,CACA,IAAA55B,EAAA3sC,GAAAA,EAAA0K,iBAKAuR,IAAAjc,EAAA00C,UACA14C,KAAA04C,QAAA10C,EAAA00C,cAEAz4B,IAAAjc,EAAA20C,UACA34C,KAAA24C,QAAA30C,EAAA20C,SAIAhI,GAAA3wC,KAAAwqE,cACAxqE,KAAAyqE,qBAAA95B,UACA3sC,EAAA0K,YACA1O,KAAA8b,UAAA,aAAA9X,GAMAhE,KAAAstC,aAOAi9B,sBAAA,WAEA,IADA,IACArmE,EAAAlE,KAAA0E,SAAAjB,OAAAS,KACAlE,KAAA0E,SAAAR,GAAAopC,WAFA,GAAA,IAUAm9B,qBAAA,SAAA95B,GAEA,IADA,IAAAA,EAAAA,GAAA3wC,KAAAwwC,iBACAtsC,EAAAlE,KAAA0E,SAAAjB,OAAAS,KACAlE,KAAA0qE,oBAAA1qE,KAAA0E,SAAAR,GAAAysC,IASA+5B,oBAAA,SAAAzlE,EAAA0rC,GACA,IAAAg6B,EAAA1lE,EAAAuF,KACAogE,EAAA3lE,EAAAwF,IAGAxF,EAAAyB,KACA8D,KAAAmgE,EAAAh6B,EAAAtnC,EACAoB,IAAAmgE,EAAAj6B,EAAArnC,IAEArE,EAAAooC,MAAArtC,KACAiF,EAAAqoC,WAPA,GAAA,IAcAp+B,SAAA,WACA,MAAA,oBAAAlP,KAAAoG,aAAA,MASAgqD,cAAA,SAAAnrD,GAYA,OAXAjF,KAAA6qE,uBACAptE,EAAA2F,KAAA8O,qBAAAlS,MACAiF,IACAjF,KAAA0E,SAAAd,KAAAqB,GACAA,EAAAooC,MAAArtC,KACAiF,EAAAyC,KAAA,SAAA1H,KAAAlB,SAEAkB,KAAAwqE,cACAxqE,KAAAyqE,uBACAzqE,KAAAstC,YACAttC,KAAAw0D,OAAA,EACAx0D,MASAmwD,iBAAA,SAAAlrD,GASA,OARAjF,KAAA6qE,uBACAptE,EAAA2F,KAAA8O,qBAAAlS,MAEAA,KAAAsF,OAAAL,GACAjF,KAAAwqE,cACAxqE,KAAAyqE,uBACAzqE,KAAAstC,YACAttC,KAAAw0D,OAAA,EACAx0D,MAMA6E,eAAA,SAAAI,GACAjF,KAAAw0D,OAAA,EACAvvD,EAAAooC,MAAArtC,KACAiF,EAAAyC,KAAA,SAAA1H,KAAAlB,SAMA0G,iBAAA,SAAAP,GACAjF,KAAAw0D,OAAA,SACAvvD,EAAAooC,OAMA3lC,KAAA,SAAAC,EAAAtD,GACA,IAAAH,EAAAlE,KAAA0E,SAAAjB,OACA,GAAAzD,KAAAqqE,cACA,KAAAnmE,KACAlE,KAAA0E,SAAAR,GAAAkzD,WAAAzvD,EAAAtD,GAGA,GAAA,WAAAsD,EACA,KAAAzD,KACAlE,KAAA0E,SAAAR,GAAAwD,KAAAC,EAAAtD,GAGA5G,EAAAuR,OAAAC,UAAAvH,KAAA5D,KAAA9D,KAAA2H,EAAAtD,IAQAshC,SAAA,SAAAC,GACA,IAAAklC,EAAA9qE,KAAAkoC,qBACA6iC,EAAA/qE,KAAA0E,SAAA0P,IAAA,SAAA3M,GACA,IAAAujE,EAAAvjE,EAAAygC,qBACAzgC,EAAAygC,qBAAA4iC,EACA,IAAAG,EAAAxjE,EAAAk+B,SAAAC,GAEA,OADAn+B,EAAAygC,qBAAA8iC,EACAC,IAEAxjE,EAAAhK,EAAAuR,OAAAC,UAAA02B,SAAA7hC,KAAA9D,KAAA4lC,GAEA,OADAn+B,EAAArC,QAAA2lE,EACAtjE,GAQAypC,iBAAA,SAAAtL,GACA,IAAAmlC,EAAAn8D,EAAA5O,KAAA4O,WACA,GAAAA,EACAm8D,EAAAn8D,MAEA,CACA,IAAAk8D,EAAA9qE,KAAAkoC,qBACA6iC,EAAA/qE,KAAA0E,SAAA0P,IAAA,SAAA3M,GACA,IAAAujE,EAAAvjE,EAAAygC,qBACAzgC,EAAAygC,qBAAA4iC,EACA,IAAAG,EAAAxjE,EAAAypC,iBAAAtL,GAEA,OADAn+B,EAAAygC,qBAAA8iC,EACAC,IAGA,IAAAxjE,EAAAhK,EAAAuR,OAAAC,UAAAiiC,iBAAAptC,KAAA9D,KAAA4lC,GAEA,OADAn+B,EAAArC,QAAA2lE,EACAtjE,GAOAsoC,OAAA,SAAA/wC,GACAgB,KAAAovC,gBAAA,EACApvC,KAAA8b,UAAA,SAAA9c,GACAgB,KAAAovC,gBAAA,GAUAD,YAAA,WACA,IAAA+7B,EAAAztE,EAAAuR,OAAAC,UAAAkgC,YAAArrC,KAAA9D,MACA,GAAAkrE,EACA,IAAA,IAAAhnE,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACA,GAAAlE,KAAA0E,SAAAR,GAAAk0D,iBAEA,OADAp4D,KAAAm4D,YAAA,GACA,EAIA,OAAA+S,GAOA9S,eAAA,WACA,GAAAp4D,KAAAqoC,OACA,OAAA5qC,EAAAuR,OAAAC,UAAAmpD,eAAAt0D,KAAA9D,MAEA,IAAA,IAAAkE,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACA,GAAAlE,KAAA0E,SAAAR,GAAAk0D,iBACA,OAAA,EAGA,OAAA,GAOAjB,WAAA,WACA,OAAAn3D,KAAAm4D,YAAAn4D,KAAAqtC,OAAArtC,KAAAqtC,MAAA8pB,cAOAU,WAAA,SAAA74D,GACA,IAAA,IAAAkF,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACAlE,KAAA0E,SAAAR,GAAA6rC,OAAA/wC,GAEAgB,KAAA24D,cAAA35D,IAMA+4D,aAAA,SAAAa,GACA,GAAA54D,KAAA8b,UAAA,eAAA88C,GACA,OAAA,EAEA,IAAA54D,KAAAq0D,eACA,OAAA,EAEA,IAAA,IAAAnwD,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACA,GAAAlE,KAAA0E,SAAAR,GAAA6zD,cAAA,GAAA,CACA,GAAA/3D,KAAA4vC,aAAA,CAEA,IAAAvmC,EAAArJ,KAAA61D,WAAA71D,KAAA0vC,MAAApmC,EAAAtJ,KAAA81D,YAAA91D,KAAA2vC,MACA3vC,KAAA4+C,cAAA3Q,WAAA5kC,EAAA,GAAAC,EAAA,EAAAD,EAAAC,GAEA,OAAA,EAGA,OAAA,GASAuhE,qBAAA,WAEA,OADA7qE,KAAA0E,SAAAmJ,QAAA7N,KAAAmrE,oBAAAnrE,MACAA,MAWAuoD,iBAAA,SAAAtjD,GACA,IAAA+M,EAAA/M,EAAAwwB,sBACAzxB,EAAAvG,EAAA2F,KAAA2N,YAAAiB,GACA2+B,EAAA,IAAAlzC,EAAA2L,MAAApF,EAAAqN,WAAArN,EAAAsN,YASA,OARArM,EAAA0M,OAAA,EACA1M,EAAA2M,OAAA,EACA3M,EAAAyB,IAAA,SAAA1C,EAAAiN,QACAhM,EAAAyB,IAAA,SAAA1C,EAAAkN,QACAjM,EAAAkM,MAAAnN,EAAAmN,MACAlM,EAAAmM,MAAApN,EAAAoN,MACAnM,EAAAiD,MAAAlE,EAAAkE,MACAjD,EAAA2wB,oBAAA+a,EAAA,SAAA,UACA1rC,GASAkmE,oBAAA,SAAAlmE,GAIA,OAHAjF,KAAAuoD,iBAAAtjD,GACAA,EAAAqoC,mBACAroC,EAAAooC,MACArtC,MAQAorE,QAAA,WAMA,OAHAprE,KAAA0E,SAAAmJ,QAAA,SAAA5I,GACAA,EAAAyB,IAAA,SAAA,KAEA1G,KAAA6qE,wBASAQ,kBAAA,WACA,GAAArrE,KAAAlB,OAAA,CAGA,IAAAsG,EAAApF,KAAA0E,SAAA5F,EAAAkB,KAAAlB,OACAkB,KAAA0E,YACA,IAAAV,EAAAhE,KAAA2lC,kBACA3hC,EAAAoB,QACA,IAAAkuC,EAAA,IAAA71C,EAAAgzD,oBAaA,OAZAnd,EAAA5sC,IAAA1C,GACAsvC,EAAAztC,KAAA,kBACA/G,EAAAwG,OAAAtF,MACAoF,EAAAyI,QAAA,SAAA5I,GACAA,EAAAooC,MAAAiG,EACAruC,EAAAuvD,OAAA,EACA11D,EAAA6F,IAAAM,KAEAquC,EAAAx0C,OAAAA,EACAw0C,EAAA5uC,SAAAU,EACAtG,EAAAsuC,cAAAkG,EACAA,EAAAhG,YACAgG,IAQAg4B,gBAAA,WACA,OAAAtrE,KAAA6qE,wBAQAU,iBAAA,WAKA,OAHAvrE,KAAAyF,cAAA,SAAAR,GACAA,EAAAqoC,WAFA,GAAA,KAIAttC,MAMAwqE,YAAA,SAAAgB,GASA,IARA,IAEAzlE,EAAArC,EAGAiV,EALAsxD,KACAC,KAEAjH,GAAA,KAAA,KAAA,KAAA,MACA/+D,EAAA,EAAAunE,EAAAzrE,KAAA0E,SAAAjB,OACAioE,EAAAzI,EAAAx/D,OAGAS,EAAAunE,IAAAvnE,EAGA,KAFA6B,EAAA/F,KAAA0E,SAAAR,IACAopC,WAJA,GAKA30B,EAAA,EAAAA,EAAA+yD,EAAA/yD,IACAjV,EAAAu/D,EAAAtqD,GACAsxD,EAAArmE,KAAAmC,EAAA43D,QAAAj6D,GAAA2F,GACA6gE,EAAAtmE,KAAAmC,EAAA43D,QAAAj6D,GAAA4F,GAIAtJ,KAAA2rE,WAAA1B,EAAAC,EAAAsB,IAMAG,WAAA,SAAA1B,EAAAC,EAAAsB,GACA,IAAAI,EAAA,IAAAnuE,EAAA2L,MAAAnM,EAAAgtE,GAAAhtE,EAAAitE,IACA2B,EAAA,IAAApuE,EAAA2L,MAAAlM,EAAA+sE,GAAA/sE,EAAAgtE,IACAz/D,EAAAmhE,EAAAtiE,GAAA,EAAAkB,EAAAohE,EAAAviE,GAAA,EACA9J,EAAAssE,EAAAxiE,EAAAuiE,EAAAviE,GAAA,EACAlK,EAAA0sE,EAAAviE,EAAAsiE,EAAAtiE,GAAA,EACAtJ,KAAAT,MAAAA,EACAS,KAAAb,OAAAA,EACAqsE,GAGAxrE,KAAA41B,qBAAAvsB,EAAAmB,EAAAlB,EAAAmB,GAAA,OAAA,QAUA23D,OAAA,SAAA50D,GAGA,IAFA,IAAAo5D,GAAA,MAAA,eAAA,QAEA1iE,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACA0iE,EAAAhjE,KAAA,OAAA5D,KAAA0E,SAAAR,GAAA2hC,MAAAr4B,IAGA,OADAo5D,EAAAhjE,KAAA,UACAgjE,GAOA5F,aAAA,WACA,IAAAtjD,OAAA,IAAA1d,KAAA0d,SAAA,IAAA1d,KAAA0d,QACA,YAAA1d,KAAA0d,QAAA,IAAA,GACAoL,EAAA9oB,KAAA4qB,QAAA,GAAA,uBACA,OACAlN,EACA1d,KAAAkhE,eACAp4C,GACAxU,KAAA,KAQAm+B,cAAA,SAAAjlC,GAGA,IAFA,IAAAo5D,KAEA1iE,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACA0iE,EAAAhjE,KAAA,KAAA5D,KAAA0E,SAAAR,GAAAuuC,cAAAjlC,IAGA,OAAAxN,KAAAqiE,6BAAAuE,GAAAp5D,QAAAA,OAYA/P,EAAAkR,MAAAZ,WAAA,SAAA9I,EAAAS,GACA,IAAAN,EAAAH,EAAAG,QACApB,EAAAvG,EAAA2F,KAAA6B,OAAA3H,MAAA2H,GAAA,UACAjB,EAAAoB,QACA,iBAAAA,EASA3H,EAAA2F,KAAAmK,eAAAnI,EAAA,SAAAqI,GACAhQ,EAAA2F,KAAAmK,gBAAAtI,EAAAuwB,UAAA,SAAAs2C,GACA,IAAA9nE,EAAAvG,EAAA2F,KAAA6B,OAAA3H,MAAA2H,GAAA,GACAjB,EAAAwxB,SAAAs2C,EAAA,UACA9nE,EAAAoB,QACAM,GAAAA,EAAA,IAAAjI,EAAAkR,MAAAlB,EAAAzJ,GAAA,QAZAvG,EAAAu1B,eAAA5tB,EAAA,SAAAoJ,GACA,IAAA6+B,EAAA5vC,EAAA2F,KAAAmL,iBAAAC,EAAAvJ,EAAAG,GACAioC,EAAA3mC,IAAA1C,GACA0B,GAAAA,EAAA2nC,OAlkBA,CAglBA,oBAAAvlC,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAEAA,EAAAgzD,kBAWAhzD,EAAAgzD,gBAAAhzD,EAAA2F,KAAA+Y,YAAA1e,EAAAkR,OAOA9I,KAAA,kBAQAwW,WAAA,SAAAjX,EAAApB,GACAA,EAAAA,MACAhE,KAAA0E,SAAAU,MACA,IAAA,IAAAlB,EAAAlE,KAAA0E,SAAAjB,OAAAS,KACAlE,KAAA0E,SAAAR,GAAAmpC,MAAArtC,KAGAgE,EAAA00C,UACA14C,KAAA04C,QAAA10C,EAAA00C,SAEA10C,EAAA20C,UACA34C,KAAA24C,QAAA30C,EAAA20C,SAEA34C,KAAAwqE,cACAxqE,KAAAyqE,uBACAhtE,EAAAuR,OAAAC,UAAAoN,WAAAvY,KAAA9D,KAAAgE,GACAhE,KAAAstC,aAUAy+B,QAAA,WACA,IAAA3mE,EAAApF,KAAA0E,SAAAoB,SACA9F,KAAA0E,YACA,IAAAV,EAAAvG,EAAAuR,OAAAC,UAAA02B,SAAA7hC,KAAA9D,MACAgsE,EAAA,IAAAvuE,EAAAkR,UAQA,UAPA3K,EAAA6B,KACAmmE,EAAAtlE,IAAA1C,GACAoB,EAAAyI,QAAA,SAAA5I,GACAA,EAAAnG,OAAAwG,OAAAL,GACAA,EAAAooC,MAAA2+B,IAEAA,EAAAtnE,SAAAU,GACApF,KAAAlB,OACA,OAAAktE,EAEA,IAAAltE,EAAAkB,KAAAlB,OAIA,OAHAA,EAAA6F,IAAAqnE,GACAltE,EAAAsuC,cAAA4+B,EACAA,EAAA1+B,YACA0+B,GAQAhkB,WAAA,WAEA,OADAhoD,KAAAorE,WACA,GAOAl8D,SAAA,WACA,MAAA,8BAAAlP,KAAAoG,aAAA,MAWA+oC,YAAA,WACA,OAAA,GAOAgoB,WAAA,WACA,OAAA,GASAnY,gBAAA,SAAAhgD,EAAAm6D,EAAA8S,GACAjtE,EAAA6Q,OACA7Q,EAAA+6C,YAAA/5C,KAAAotD,SAAAptD,KAAA6zD,wBAAA,EACA7zD,KAAA8b,UAAA,kBAAA9c,EAAAm6D,QAEA,KADA8S,EAAAA,OACAjY,cACAiY,EAAAjY,aAAA,QAEA,IAAAiY,EAAAnc,mBACAmc,EAAAnc,kBAAA,GAEAmc,EAAA5S,oBAAA,EACA,IAAA,IAAAn1D,EAAA,EAAAC,EAAAnE,KAAA0E,SAAAjB,OAAAS,EAAAC,EAAAD,IACAlE,KAAA0E,SAAAR,GAAA86C,gBAAAhgD,EAAAitE,GAEAjtE,EAAAgR,aAWAvS,EAAAgzD,gBAAA1iD,WAAA,SAAA9I,EAAAS,GACAjI,EAAA2F,KAAAmK,eAAAtI,EAAAG,QAAA,SAAAqI,UACAxI,EAAAG,QACAM,GAAAA,EAAA,IAAAjI,EAAAgzD,gBAAAhjD,EAAAxI,GAAA,QAzJA,CA6JA,oBAAA6C,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAud,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OAEAvd,EAAAe,SACAf,EAAAe,WAGAf,EAAAe,OAAA62B,MACA72B,EAAAgmB,KAAA,qCAWAhmB,EAAA62B,MAAA72B,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOAnJ,KAAA,QAQAyG,YAAA,GAQAorC,YAAA,EASAw0B,kBAAA,EAQAC,YAAA,EAQAC,YAAA,EAOAC,gBAAA,EAOAC,gBAAA,EAQAC,oBAAA,GAQA7X,gBAAAj3D,EAAAuR,OAAAC,UAAAylD,gBAAA5uD,OAAA,QAAA,SAQA0mE,SAAA,GAQApS,MAAA,EAQAC,MAAA,EASAh+C,WAAA,SAAAK,EAAA1Y,GACAA,IAAAA,MACAhE,KAAAysE,WACAzsE,KAAAwsE,SAAA,UAAA/uE,EAAAuR,OAAAghB,QACAhwB,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA0sE,aAAAhwD,EAAA1Y,IAOA8pC,WAAA,WACA,OAAA9tC,KAAA2sE,cAYAC,WAAA,SAAAlwD,EAAA1Y,GAgBA,OAfAhE,KAAA6sE,cAAA7sE,KAAAwsE,UACAxsE,KAAA6sE,cAAA7sE,KAAAwsE,SAAA,aACAxsE,KAAA2sE,SAAAjwD,EACA1c,KAAAu0B,iBAAA7X,EACA1c,KAAA8sE,YAAA9oE,GACA,IAAAhE,KAAAysE,QAAAhpE,QACAzD,KAAA+sE,eAMA/sE,KAAAgtE,cACAhtE,KAAAitE,qBAEAjtE,MAMA6sE,cAAA,SAAAllE,GACA,IAAAulE,EAAAzvE,EAAA0vE,cACAD,GAAAA,EAAAE,mBACAF,EAAAE,kBAAAzlE,IAOAwsC,QAAA,WACAn0C,KAAA6sE,cAAA7sE,KAAAwsE,UACAxsE,KAAA6sE,cAAA7sE,KAAAwsE,SAAA,aACAxsE,KAAA4+C,mBAAA3+B,GACA,mBAAA,WAAA,cAAA,gBAAApS,QAAA,SAAA6O,GACAjf,EAAA2F,KAAAsf,iBAAA1iB,KAAA0c,IACA1c,KAAA0c,QAAAuD,GACA+oB,KAAAhpC,QAQAqtE,eAAA,SAAAhpE,GAIA,OAHArE,KAAAsM,YAAAjI,EACArE,KAAA2sE,SAAArgE,YAAAjI,EAEArE,MAOAstE,gBAAA,WACA,IAAA5wD,EAAA1c,KAAA8tC,aACA,OACAvuC,MAAAmd,EAAAkrB,cAAAlrB,EAAAnd,MACAJ,OAAAud,EAAAmrB,eAAAnrB,EAAAvd,SAQAouE,QAAA,SAAAvuE,GACA,GAAAgB,KAAAoqB,QAAA,IAAApqB,KAAA03C,YAAA,CAGA,IAAA+L,EAAAzjD,KAAAT,MAAA,EAAAm6B,EAAA15B,KAAAb,OAAA,EACAH,EAAA0R,YACA1R,EAAA8Q,QAAA2zC,GAAA/pB,GACA16B,EAAAkxC,OAAAuT,GAAA/pB,GACA16B,EAAAkxC,OAAAuT,EAAA/pB,GACA16B,EAAAkxC,QAAAuT,EAAA/pB,GACA16B,EAAAkxC,QAAAuT,GAAA/pB,GACA16B,EAAAmxC,cAOA0pB,oBAAA,SAAA76D,GACA,IAAAqK,GAAArJ,KAAAT,MAAA,EACA+J,GAAAtJ,KAAAb,OAAA,EACAskD,EAAAzjD,KAAAT,MACAm6B,EAAA15B,KAAAb,OAEAH,EAAA6Q,OACA7P,KAAAy4D,iBAAAz5D,EAAAgB,MAEAhB,EAAA0R,YACAjT,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAC,EAAAD,EAAAo6C,EAAAn6C,EAAAtJ,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAo6C,EAAAn6C,EAAAD,EAAAo6C,EAAAn6C,EAAAowB,EAAA15B,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAo6C,EAAAn6C,EAAAowB,EAAArwB,EAAAC,EAAAowB,EAAA15B,KAAA+0C,iBACAt3C,EAAA2F,KAAA+L,eAAAnQ,EAAAqK,EAAAC,EAAAowB,EAAArwB,EAAAC,EAAAtJ,KAAA+0C,iBACA/1C,EAAAmxC,YACAnxC,EAAAgR,WAQA21B,SAAA,SAAAC,GACA,IAAA6mC,KAEAzsE,KAAAysE,QAAA5+D,QAAA,SAAA2/D,GACAA,GACAf,EAAA7oE,KAAA4pE,EAAA7nC,cAGA,IAAA1gC,EAAAgV,EACAja,KAAA8b,UACA,YACA,cAAA,QAAA,SAAAhW,OAAA8/B,KAEAh5B,IAAA5M,KAAAytE,SACAhB,QAAAA,IAKA,OAHAzsE,KAAAgtE,eACA/nE,EAAA+nE,aAAAhtE,KAAAgtE,aAAArnC,YAEA1gC,GAOAyoE,QAAA,WACA,OAAA1tE,KAAAo6D,OAAAp6D,KAAAq6D,OAAAr6D,KAAAT,MAAAS,KAAA2sE,SAAAptE,OAAAS,KAAAb,OAAAa,KAAA2sE,SAAAxtE,QASAijE,OAAA,WACA,IAAAuL,EAAA/G,KAAAgH,KACAvkE,GAAArJ,KAAAT,MAAA,EAAA+J,GAAAtJ,KAAAb,OAAA,EAAAq2B,EAAA,GACA,GAAAx1B,KAAA0tE,UAAA,CACA,IAAA37B,EAAAt0C,EAAAuR,OAAAghB,QACA42C,EAAAhjE,KACA,2BAAAmuC,EAAA,OACA,cAAA1oC,EAAA,QAAAC,EAAA,YAAAtJ,KAAAT,MAAA,aAAAS,KAAAb,OAAA,SACA,iBAEAq2B,EAAA,8BAAAuc,EAAA,MAYA,GAVA67B,EAAAhqE,KAAA,YAAA,eAAA,eAAA5D,KAAA6tE,WAAA,GACA,QAAAxkE,EAAArJ,KAAAo6D,MAAA,QAAA9wD,EAAAtJ,KAAAq6D,MAIA,YAAAr6D,KAAA2sE,SAAAptE,OAAAS,KAAA2sE,SAAA/kC,aACA,aAAA5nC,KAAA2sE,SAAAxtE,QAAAa,KAAA2sE,SAAAxtE,OACA,IAAAq2B,EACA,eAEAx1B,KAAAoqB,QAAApqB,KAAA+0C,gBAAA,CACA,IAAA+4B,EAAA9tE,KAAAsD,KACAtD,KAAAsD,KAAA,KACAqqE,GACA,WACA,MAAAtkE,EAAA,QAAAC,EACA,YAAAtJ,KAAAT,MAAA,aAAAS,KAAAb,OACA,YAAAa,KAAAghE,eACA,SAEAhhE,KAAAsD,KAAAwqE,EAQA,OALAlH,EADA,SAAA5mE,KAAAy0D,WACAmS,EAAA9gE,OAAA6nE,EAAAC,GAGAhH,EAAA9gE,OAAA8nE,EAAAD,IAWAF,OAAA,SAAAM,GACA,IAAArxD,EAAAqxD,EAAA/tE,KAAA2sE,SAAA3sE,KAAAu0B,iBACA,OAAA7X,EACAA,EAAAtM,UACAsM,EAAAtM,YAGApQ,KAAAksE,iBACAxvD,EAAAqP,aAAA,OAGArP,EAAA9P,IAIA5M,KAAA4M,KAAA,IAYAohE,OAAA,SAAAphE,EAAAlH,EAAA1B,GAMA,OALAvG,EAAA2F,KAAAgJ,UAAAQ,EAAA,SAAAL,GACAvM,KAAA4sE,WAAArgE,EAAAvI,GACAhE,KAAA+lE,kBACArgE,GAAAA,EAAA1F,OACAA,KAAAgE,GAAAA,EAAAsI,aACAtM,MAOAkP,SAAA,WACA,MAAA,2BAAAlP,KAAAytE,SAAA,QAGAR,mBAAA,WACA,IAAA7oE,EAAApE,KAAAgtE,aACAiB,EAAAjuE,KAAAusE,oBACAlX,EAAAr1D,KAAAs1D,wBACArkD,EAAAokD,EAAApkD,OACAC,EAAAmkD,EAAAnkD,OACAg9D,EAAAluE,KAAAmuE,aAAAnuE,KAAAu0B,iBAIA,GAHAv0B,KAAAqtC,OACArtC,KAAA0G,IAAA,SAAA,IAEAtC,GAAA6M,EAAAg9D,GAAA/8D,EAAA+8D,EAMA,OALAjuE,KAAA2sE,SAAAuB,EACAluE,KAAAqsE,gBAAA,EACArsE,KAAAssE,gBAAA,EACAtsE,KAAAmsE,YAAAl7D,OACAjR,KAAAosE,YAAAl7D,GAGAzT,EAAA0vE,gBACA1vE,EAAA0vE,cAAA1vE,EAAA6E,qBAEA,IAAA+N,EAAA5S,EAAA2F,KAAA6M,sBACAu8D,EAAAxsE,KAAAmuE,YAAAnuE,KAAAwsE,SAAA,YAAAxsE,KAAAwsE,SACA4B,EAAAF,EAAA3uE,MAAA8uE,EAAAH,EAAA/uE,OACAkR,EAAA9Q,MAAA6uE,EACA/9D,EAAAlR,OAAAkvE,EACAruE,KAAA2sE,SAAAt8D,EACArQ,KAAAmsE,YAAA/nE,EAAA6M,OAAAA,EACAjR,KAAAosE,YAAAhoE,EAAA8M,OAAAA,EACAzT,EAAA0vE,cAAAJ,cACA3oE,GAAA8pE,EAAAE,EAAAC,EAAAruE,KAAA2sE,SAAAH,GACAxsE,KAAAqsE,gBAAAh8D,EAAA9Q,MAAAS,KAAAu0B,iBAAAh1B,MACAS,KAAAssE,gBAAAj8D,EAAAlR,OAAAa,KAAAu0B,iBAAAp1B,QAWA4tE,aAAA,SAAAN,GASA,GANAA,GADAA,EAAAA,GAAAzsE,KAAAysE,aACAroE,OAAA,SAAAA,GAAA,OAAAA,IAAAA,EAAAkqE,mBACAtuE,KAAA0G,IAAA,SAAA,GAGA1G,KAAA6sE,cAAA7sE,KAAAwsE,SAAA,aAEA,IAAAC,EAAAhpE,OAKA,OAJAzD,KAAA2sE,SAAA3sE,KAAAu0B,iBACAv0B,KAAAmuE,YAAA,KACAnuE,KAAAqsE,gBAAA,EACArsE,KAAAssE,gBAAA,EACAtsE,KAGA,IAAAuuE,EAAAvuE,KAAAu0B,iBACA65C,EAAAG,EAAA3mC,cAAA2mC,EAAAhvE,MACA8uE,EAAAE,EAAA1mC,eAAA0mC,EAAApvE,OAEA,GAAAa,KAAA2sE,WAAA3sE,KAAAu0B,iBAAA,CAEA,IAAAlkB,EAAA5S,EAAA2F,KAAA6M,sBACAI,EAAA9Q,MAAA6uE,EACA/9D,EAAAlR,OAAAkvE,EACAruE,KAAA2sE,SAAAt8D,EACArQ,KAAAmuE,YAAA99D,OAKArQ,KAAA2sE,SAAA3sE,KAAAmuE,YACAnuE,KAAAmuE,YAAAlvE,WAAA,MAAAgvC,UAAA,EAAA,EAAAmgC,EAAAC,GAEAruE,KAAAmsE,YAAA,EACAnsE,KAAAosE,YAAA,EAYA,OAVA3uE,EAAA0vE,gBACA1vE,EAAA0vE,cAAA1vE,EAAA6E,qBAEA7E,EAAA0vE,cAAAJ,aACAN,EAAAzsE,KAAAu0B,iBAAA65C,EAAAC,EAAAruE,KAAA2sE,SAAA3sE,KAAAwsE,UACAxsE,KAAAu0B,iBAAAh1B,QAAAS,KAAA2sE,SAAAptE,OACAS,KAAAu0B,iBAAAp1B,SAAAa,KAAA2sE,SAAAxtE,SACAa,KAAAqsE,gBAAArsE,KAAA2sE,SAAAptE,MAAAS,KAAAu0B,iBAAAh1B,MACAS,KAAAssE,gBAAAtsE,KAAA2sE,SAAAxtE,OAAAa,KAAAu0B,iBAAAp1B,QAEAa,MAOA22C,QAAA,SAAA33C,IACA,IAAAgB,KAAAotD,UAAAptD,KAAAgtE,cAAAhtE,KAAAwuE,gBACAxuE,KAAAitE,qBAEAjtE,KAAAutE,QAAAvuE,GACAgB,KAAA05D,oBAAA16D,IAcAmwC,YAAA,WACA,OAAAnvC,KAAAk4D,oBAGA0B,YAAA,SAAA56D,GACA,IAAAyvE,EAAAzuE,KAAA2sE,SACAlpB,EAAAzjD,KAAAT,MAAAm6B,EAAA15B,KAAAb,OACAuvE,EAAA3mE,KAAA9K,IAAAwxE,EAAA7mC,cAAA6mC,EAAAlvE,MAAAkkD,EAAAzjD,KAAAqsE,iBACAsC,EAAA5mE,KAAA9K,IAAAwxE,EAAA5mC,eAAA4mC,EAAAtvE,OAAAu6B,EAAA15B,KAAAssE,iBACAjjE,GAAAo6C,EAAA,EAAAn6C,GAAAowB,EAAA,EACAk1C,EAAA7mE,KAAA7K,IAAA,EAAA8C,KAAAo6D,MAAAp6D,KAAAqsE,iBACAwC,EAAA9mE,KAAA7K,IAAA,EAAA8C,KAAAq6D,MAAAr6D,KAAAssE,iBAEAmC,GAAAzvE,EAAAM,UAAAmvE,EAAAG,EAAAC,EAAAH,EAAAC,EAAAtlE,EAAAC,EAAAm6C,EAAA/pB,IAOA80C,aAAA,WACA,IAAApvE,EAAAY,KAAAs1D,wBACA,OAAAl2D,EAAA6R,SAAAjR,KAAAmsE,aAAA/sE,EAAA8R,SAAAlR,KAAAosE,aAMA0C,kBAAA,WACA9uE,KAAA0G,IAAA1G,KAAAstE,oBAUAZ,aAAA,SAAAhwD,EAAA1Y,GACAhE,KAAA4sE,WAAAnvE,EAAA2F,KAAA2d,QAAArE,GAAA1Y,GACAvG,EAAA2F,KAAA8d,SAAAlhB,KAAA8tC,aAAArwC,EAAA62B,MAAAy6C,aAOAjC,YAAA,SAAA9oE,GACAA,IAAAA,MACAhE,KAAAonC,WAAApjC,GACAhE,KAAA+lE,gBAAA/hE,GACAhE,KAAA2sE,UAAA3sE,KAAAsM,cACAtM,KAAA2sE,SAAArgE,YAAAtM,KAAAsM,cASA0iE,aAAA,SAAAvC,EAAA/mE,GACA+mE,GAAAA,EAAAhpE,OACAhG,EAAA2F,KAAAmK,eAAAk/D,EAAA,SAAAh/D,GACA/H,GAAAA,EAAA+H,IACA,wBAGA/H,GAAAA,KAUAqgE,gBAAA,SAAA/hE,GACAA,IAAAA,MACA,IAAAkb,EAAAlf,KAAA8tC,aACA9tC,KAAAT,MAAAyE,EAAAzE,OAAA2f,EAAA0oB,cAAA1oB,EAAA3f,OAAA,EACAS,KAAAb,OAAA6E,EAAA7E,QAAA+f,EAAA2oB,eAAA3oB,EAAA/f,QAAA,GASA6T,kCAAA,WACA,IAGA4O,EAHAqtD,EAAAxxE,EAAA2F,KAAA4P,kCAAAhT,KAAAguB,qBAAA,IACAkhD,EAAAlvE,KAAA2sE,SAAAptE,MAAA4vE,EAAAnvE,KAAA2sE,SAAAxtE,OACA8R,EAAA,EAAAC,EAAA,EAAAopD,EAAA,EAAAC,EAAA,EAAAH,EAAA,EAAAC,EAAA,EACA+U,EAAApvE,KAAAT,MAAA8vE,EAAArvE,KAAAb,OAAAonE,GAAAhnE,MAAA6vE,EAAAjwE,OAAAkwE,GA2CA,OA1CAJ,GAAA,SAAAA,EAAA77D,QAAA,SAAA67D,EAAA57D,QAuCApC,EAAAm+D,EAAAF,EACAh+D,EAAAm+D,EAAAF,IAvCA,SAAAF,EAAA97D,cACAlC,EAAAC,EAAAzT,EAAA2F,KAAA6Q,eAAAjU,KAAA2sE,SAAApG,GACA3kD,GAAAwtD,EAAAF,EAAAj+D,GAAA,EACA,QAAAg+D,EAAA77D,SACAknD,GAAA14C,GAEA,QAAAqtD,EAAA77D,SACAknD,EAAA14C,GAEAA,GAAAytD,EAAAF,EAAAj+D,GAAA,EACA,QAAA+9D,EAAA57D,SACAknD,GAAA34C,GAEA,QAAAqtD,EAAA57D,SACAknD,EAAA34C,IAGA,UAAAqtD,EAAA97D,cACAlC,EAAAC,EAAAzT,EAAA2F,KAAA8Q,iBAAAlU,KAAA2sE,SAAApG,GACA3kD,EAAAstD,EAAAE,EAAAn+D,EACA,QAAAg+D,EAAA77D,SACAgnD,EAAAx4C,EAAA,GAEA,QAAAqtD,EAAA77D,SACAgnD,EAAAx4C,GAEAA,EAAAutD,EAAAE,EAAAn+D,EACA,QAAA+9D,EAAA57D,SACAgnD,EAAAz4C,EAAA,GAEA,QAAAqtD,EAAA57D,SACAgnD,EAAAz4C,GAEAstD,EAAAE,EAAAn+D,EACAk+D,EAAAE,EAAAn+D,KAQA3R,MAAA2vE,EACA/vE,OAAAgwE,EACAl+D,OAAAA,EACAC,OAAAA,EACAopD,WAAAA,EACAC,UAAAA,EACAH,MAAAA,EACAC,MAAAA,MAWA58D,EAAA62B,MAAAy6C,WAAA,aAMAtxE,EAAA62B,MAAArlB,UAAA4+D,UAAApwE,EAAA62B,MAAArlB,UAAAw+D,OAQAhwE,EAAA62B,MAAAvmB,WAAA,SAAAuhE,EAAA5pE,GACA,IAAAT,EAAAxH,EAAA2F,KAAA6B,OAAA3H,MAAAgyE,GACA7xE,EAAA2F,KAAAgJ,UAAAnH,EAAA2H,IAAA,SAAAL,EAAAyB,GACAA,EACAtI,GAAAA,EAAA,KAAAsI,GAGAvQ,EAAA62B,MAAArlB,UAAA+/D,aAAAlrE,KAAAmB,EAAAA,EAAAwnE,QAAA,SAAAA,GACAxnE,EAAAwnE,QAAAA,MACAhvE,EAAA62B,MAAArlB,UAAA+/D,aAAAlrE,KAAAmB,GAAAA,EAAA+nE,cAAA,SAAAuC,GACAtqE,EAAA+nE,aAAAuC,EAAA,GACA9xE,EAAA2F,KAAAmK,gBAAAtI,EAAAuwB,UAAA,SAAA8mC,GACAr3D,EAAAuwB,SAAA8mC,EAAA,GACA,IAAAhxB,EAAA,IAAA7tC,EAAA62B,MAAA/nB,EAAAtH,GACAS,EAAA4lC,UAIA,KAAArmC,EAAAqH,cAUA7O,EAAA62B,MAAAk7C,QAAA,SAAAnjE,EAAA3G,EAAA+pE,GACAhyE,EAAA2F,KAAAgJ,UAAAC,EAAA,SAAAE,GACA7G,GAAAA,EAAA,IAAAjI,EAAA62B,MAAA/nB,EAAAkjE,KACA,KAAAA,GAAAA,EAAAnjE,cASA7O,EAAA62B,MAAAgyC,gBACA7oE,EAAAsD,kBAAA+E,OAAA,8DAAAqG,MAAA,MAUA1O,EAAA62B,MAAAJ,YAAA,SAAAxX,EAAAhX,EAAA1B,GACA,IAAAuiE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAA62B,MAAAgyC,iBACA7oE,EAAA62B,MAAAk7C,QAAAjJ,EAAA,cAAA7gE,EACAuU,EAAAjW,EAAAvG,EAAA2F,KAAA6B,OAAA3H,MAAA0G,MAAAuiE,MAruBA,CAyuBA,oBAAAz+D,QAAAA,QAAA9H,MAGAvC,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAuR,OAAAC,WAMAygE,4BAAA,WACA,IAAAxnE,EAAAlI,KAAAkI,MAAA,IACA,OAAAA,EAAA,EACA,GAAAH,KAAA4xB,OAAAzxB,EAAA,GAAA,IAEA,GAAAH,KAAA4xB,MAAAzxB,EAAA,KAQAynE,WAAA,WAEA,OADA3vE,KAAA+P,OAAA/P,KAAA0vE,+BACA1vE,MAWA4vE,aAAA,SAAAlL,GAGA,IAAAC,EAAA,aACA3hD,GAHA0hD,EAAAA,OAGA1hD,YAAA2hD,EACA5/C,EAAA2/C,EAAA3/C,UAAA4/C,EACA1oD,EAAAjc,KAgBA,OAdAvC,EAAA2F,KAAAohB,SACAU,WAAAllB,KAAA4H,IAAA,SACAud,SAAAnlB,KAAA0vE,8BACA7qD,SAAA7kB,KAAAwkE,YACAz/C,SAAA,SAAA1gB,GACA4X,EAAAlM,OAAA1L,GACA0gB,KAEA/B,WAAA,WACA/G,EAAAqxB,YACAtqB,OAIAhjB,QAIAvC,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAkrC,aAAA15B,WAQA4gE,iBAAA,SAAA5qE,GAGA,OAFAA,EAAA0qE,aACA3vE,KAAA+E,mBACA/E,MASA8vE,mBAAA,SAAA7qE,GAIA,OAHAA,EAAA2qE,cACA7qD,SAAA/kB,KAAAipC,wBAEAjpC,QAKA,WAEA,aAQA,SAAA+vE,EAAApxE,EAAAqxE,GACA,IAAAC,EAAA,aAAAD,EAAA,yBACAE,EAAAvxE,EAAAwxE,aAAAxxE,EAAAyxE,iBAGA,OAFAzxE,EAAA0xE,aAAAH,EAAAD,GACAtxE,EAAA2xE,cAAAJ,KACAvxE,EAAA4xE,mBAAAL,EAAAvxE,EAAA6xE,gBAwCA,SAAA7tE,EAAAqB,GACAA,GAAAA,EAAApB,WACA5C,KAAA4C,SAAAoB,EAAApB,UAEA5C,KAAAywE,eAAAzwE,KAAA4C,SAAA5C,KAAA4C,UACA5C,KAAA0wE,iBAlCAjzE,EAAA8E,iBAAA,SAAAK,GACA,GAAAnF,EAAAoD,aACA,OAAA,EAEA+B,EAAAA,GAAAnF,EAAAkF,mBAAAsM,UAAArM,SACA,IAAA9D,EAAAnB,SAAAqP,cAAA,UACArO,EAAAG,EAAAG,WAAA,UAAAH,EAAAG,WAAA,sBACA0xE,GAAA,EAEA,GAAAhyE,EAAA,CACAlB,EAAAiF,eAAA/D,EAAAiyE,aAAAjyE,EAAAkyE,kBACAF,EAAAlzE,EAAAiF,gBAAAE,EAEA,IADA,IAAAkuE,GAAA,QAAA,UAAA,QACA5sE,EAAA,EAAAA,EAAA,EAAAA,IACA,GAAA6rE,EAAApxE,EAAAmyE,EAAA5sE,IAAA,CACAzG,EAAAszE,eAAAD,EAAA5sE,GACA,OAKA,OADAlE,KAAA2wE,YAAAA,EACAA,GAGAlzE,EAAAkF,mBAAAA,EAaAA,EAAAsM,WAEArM,SAAA,KASAxE,aAOAqyE,eAAA,SAAAlxE,EAAAJ,GACAa,KAAAm0C,UACAn0C,KAAAgxE,kBAAAzxE,EAAAJ,GAEAa,KAAAixE,UAAA,IAAAC,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACAlxE,KAAAmxE,8BAAA5xE,EAAAJ,IAOAgyE,8BAAA,SAAA5xE,EAAAJ,GACA,IAAAiyE,EAAAC,OAAA,IAAAzzE,OAAA0zE,YACA,IACA,IAAA9wE,UAAA,EAAA,GACA4wE,GAAA,EAEA,MAAAvwD,GACAuwD,GAAA,EAGA,IAAAG,EAAA,oBAAAC,YAEAC,EAAA,oBAAAtxE,kBAEA,GAAAkxE,GAAAD,GAAAG,GAAAE,EAAA,CAIA,IAAA1yE,EAAAtB,EAAA2F,KAAA6M,sBAEAhQ,EAAA,IAAAuxE,YAAAjyE,EAAAJ,EAAA,GACA,GAAA1B,EAAA4E,oBAGA,OAFArC,KAAAC,YAAAA,OACAD,KAAA0xE,WAAAlyE,GAGA,IAMAmyE,EAAAC,EAAAC,EANAC,GACA7xE,YAAAA,EACAP,iBAAAH,EACAK,kBAAAT,EACAJ,aAAAA,GAGAA,EAAAQ,MAAAA,EACAR,EAAAI,OAAAA,EAEAwyE,EAAA/zE,OAAA0zE,YAAAS,MACArzE,EAAAoF,KAAAguE,EAAA9xE,KAAArB,GAAAmzE,GACAF,EAAAh0E,OAAA0zE,YAAAS,MAAAJ,EAEAA,EAAA/zE,OAAA0zE,YAAAS,MACAvyE,EAAAsE,KAAAguE,EAAA9xE,KAAArB,GAAAmzE,GACAD,EAAAj0E,OAAA0zE,YAAAS,MAAAJ,EAEAC,EAAAC,GACA7xE,KAAAC,YAAAA,EACAD,KAAA0xE,WAAAlyE,GAGAQ,KAAA0xE,WAAAhzE,IAQAsyE,kBAAA,SAAAzxE,EAAAJ,GACA,IAAAL,EAAArB,EAAA2F,KAAA6M,sBACAnR,EAAAS,MAAAA,EACAT,EAAAK,OAAAA,EACA,IAAA6yE,GACA73C,OAAA,EACA83C,oBAAA,EACAC,OAAA,EACAC,SAAA,EACAC,WAAA,GAEAzzE,EAAAG,EAAAG,WAAA,QAAA+yE,GACArzE,IACAA,EAAAG,EAAAG,WAAA,qBAAA+yE,IAEArzE,IAGAA,EAAA0zE,WAAA,EAAA,EAAA,EAAA,GAEAryE,KAAAlB,OAAAA,EACAkB,KAAArB,GAAAA,IAeAouE,aAAA,SAAAN,EAAAxlE,EAAA1H,EAAAJ,EAAAJ,EAAAytE,GACA,IACA8F,EADA3zE,EAAAqB,KAAArB,GAEA6tE,IACA8F,EAAAtyE,KAAAuyE,iBAAA/F,EAAAvlE,IAEA,IAAArI,GACA2yD,cAAAtqD,EAAA1H,OAAA0H,EAAAsqD,cACAC,eAAAvqD,EAAA9H,QAAA8H,EAAAuqD,eACA4c,YAAA7uE,EACA8uE,aAAAlvE,EACAO,iBAAAH,EACAK,kBAAAT,EACAwG,QAAAhH,EACA6zE,cAAAxyE,KAAAyyE,cAAA9zE,EAAAY,EAAAJ,GAAAmzE,GAAArrE,GACAyrE,cAAA1yE,KAAAyyE,cAAA9zE,EAAAY,EAAAJ,GACAwzE,gBAAAL,GACAtyE,KAAAyyE,cAAA9zE,EAAAY,EAAAJ,GAAAmzE,GAAArrE,GACA2rE,OAAAnG,EAAAhpE,OACAovE,OAAA,EACA5B,UAAAjxE,KAAAixE,UACA6B,aAAA9yE,KAAA8yE,aACAC,KAAA,EACA5F,cAAAntE,KACAjB,aAAAA,GAEAi0E,EAAAr0E,EAAAs0E,oBAUA,OATAt0E,EAAAu0E,gBAAAv0E,EAAAw0E,YAAAH,GACAvG,EAAA5+D,QAAA,SAAAzJ,GAAAA,GAAAA,EAAAgvE,QAAAx0E,KA6HA,SAAAA,GACA,IAAAG,EAAAH,EAAAG,aACAQ,EAAAR,EAAAQ,MAAAJ,EAAAJ,EAAAI,OACAM,EAAAb,EAAAc,iBACAC,EAAAf,EAAAgB,kBAEAL,IAAAE,GAAAN,IAAAQ,IACAZ,EAAAQ,MAAAE,EACAV,EAAAI,OAAAQ,GApIA0zE,CAAAz0E,GACAoB,KAAA0xE,WAAA/yE,EAAAC,GACAD,EAAA20E,YAAA30E,EAAA40E,WAAA,MACA50E,EAAA60E,cAAA50E,EAAA4zE,eACA7zE,EAAA60E,cAAA50E,EAAA8zE,eACA/zE,EAAA80E,kBAAAT,GACAj0E,EAAAE,WAAA,MAAAu3D,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA53D,GAMAu1C,QAAA,WACAn0C,KAAAlB,SACAkB,KAAAlB,OAAA,KACAkB,KAAArB,GAAA,MAEAqB,KAAA0zE,oBAMAA,iBAAA,WACA1zE,KAAA8yE,gBACA9yE,KAAA2zE,iBAcAlB,cAAA,SAAA9zE,EAAAY,EAAAJ,EAAAy0E,GACA,IAAAC,EAAAl1E,EAAA8zE,gBAYA,OAXA9zE,EAAA20E,YAAA30E,EAAA40E,WAAAM,GACAl1E,EAAAm1E,cAAAn1E,EAAA40E,WAAA50E,EAAAo1E,mBAAAp1E,EAAAq1E,SACAr1E,EAAAm1E,cAAAn1E,EAAA40E,WAAA50E,EAAAs1E,mBAAAt1E,EAAAq1E,SACAr1E,EAAAm1E,cAAAn1E,EAAA40E,WAAA50E,EAAAu1E,eAAAv1E,EAAAw1E,eACAx1E,EAAAm1E,cAAAn1E,EAAA40E,WAAA50E,EAAAy1E,eAAAz1E,EAAAw1E,eACAP,EACAj1E,EAAA01E,WAAA11E,EAAA40E,WAAA,EAAA50E,EAAA0B,KAAA1B,EAAA0B,KAAA1B,EAAA2B,cAAAszE,GAGAj1E,EAAA01E,WAAA11E,EAAA40E,WAAA,EAAA50E,EAAA0B,KAAAd,EAAAJ,EAAA,EAAAR,EAAA0B,KAAA1B,EAAA2B,cAAA,MAEAuzE,GAYAtB,iBAAA,SAAA+B,EAAAV,GACA,GAAA5zE,KAAA2zE,aAAAW,GACA,OAAAt0E,KAAA2zE,aAAAW,GAGA,IAAAT,EAAA7zE,KAAAyyE,cACAzyE,KAAArB,GAAAi1E,EAAAr0E,MAAAq0E,EAAAz0E,OAAAy0E,GAEA,OADA5zE,KAAA2zE,aAAAW,GAAAT,EACAA,GAUAzG,kBAAA,SAAAZ,GACAxsE,KAAA2zE,aAAAnH,KACAxsE,KAAArB,GAAA60E,cAAAxzE,KAAA2zE,aAAAnH,WACAxsE,KAAA2zE,aAAAnH,KAIAkF,WAAAhzE,EASAgyE,eAAA,WACA,GAAA1wE,KAAAu0E,QACA,OAAAv0E,KAAAu0E,QAEA,IAAA51E,EAAAqB,KAAArB,GAAA41E,GAAAC,SAAA,GAAAC,OAAA,IACA,IAAA91E,EACA,OAAA41E,EAEA,IAAAG,EAAA/1E,EAAAg2E,aAAA,6BACA,GAAAD,EAAA,CACA,IAAAF,EAAA71E,EAAAiyE,aAAA8D,EAAAE,yBACAH,EAAA91E,EAAAiyE,aAAA8D,EAAAG,uBACAL,IACAD,EAAAC,SAAAA,EAAA9gE,eAEA+gE,IACAF,EAAAE,OAAAA,EAAA/gE,eAIA,OADA1T,KAAAu0E,QAAAA,EACAA,IA9UA,GA6YA,WAEA,aAEA,IAAA7wD,EAAA,aAOA,SAAA7gB,KALApF,EAAAoF,sBAAAA,EAOAA,EAAAoM,WACAm+D,kBAAA1pD,EACAywB,QAAAzwB,EACAgwD,iBAAAhwD,EASAtlB,aAcA2uE,aAAA,SAAAN,EAAAqI,EAAA1G,EAAAC,EAAAtvE,GACA,IAAAC,EAAAD,EAAAE,WAAA,MACAD,EAAAM,UAAAw1E,EAAA,EAAA,EAAA1G,EAAAC,GACA,IAAAz7D,EAAA5T,EAAA6T,aAAA,EAAA,EAAAu7D,EAAAC,GACA0G,EAAA/1E,EAAA6T,aAAA,EAAA,EAAAu7D,EAAAC,GACAzvE,GACAwvE,YAAAA,EACAC,aAAAA,EACAz7D,UAAAA,EACAoiE,WAAAF,EACAC,kBAAAA,EACA1kE,SAAAtR,EACAC,IAAAA,EACAmuE,cAAAntE,MAQA,OANAysE,EAAA5+D,QAAA,SAAAzJ,GAAAA,EAAAgvE,QAAAx0E,KACAA,EAAAgU,UAAArT,QAAA6uE,GAAAxvE,EAAAgU,UAAAzT,SAAAkvE,IACAtvE,EAAAQ,MAAAX,EAAAgU,UAAArT,MACAR,EAAAI,OAAAP,EAAAgU,UAAAzT,QAEAH,EAAAyB,aAAA7B,EAAAgU,UAAA,EAAA,GACAhU,IA5DA,GAyEAnB,EAAA62B,MAAA72B,EAAA62B,UACA72B,EAAA62B,MAAAm4C,QAAAhvE,EAAA62B,MAAAm4C,YAOAhvE,EAAA62B,MAAAm4C,QAAAwI,WAAAx3E,EAAA2F,KAAA+Y,aAOAtW,KAAA,aAOAqvE,aAAA,qJAOAjF,eAAA,iJAWA5zD,WAAA,SAAArY,GACAA,GACAhE,KAAAonC,WAAApjC,IAQAojC,WAAA,SAAApjC,GACA,IAAA,IAAAN,KAAAM,EACAhE,KAAA0D,GAAAM,EAAAN,IAWAyxE,cAAA,SAAAx2E,EAAAsxE,EAAAiF,GACAjF,EAAAA,GAAAjwE,KAAAiwE,eACAiF,EAAAA,GAAAl1E,KAAAk1E,aACA,UAAAz3E,EAAAszE,iBACAd,EAAAA,EAAAr1D,QACA,yBACA,aAAAnd,EAAAszE,eAAA,WAGA,IAAAqE,EAAAz2E,EAAAwxE,aAAAxxE,EAAA02E,eAGA,GAFA12E,EAAA0xE,aAAA+E,EAAAF,GACAv2E,EAAA2xE,cAAA8E,IACAz2E,EAAA4xE,mBAAA6E,EAAAz2E,EAAA6xE,gBACA,MAAA,IAAA3nC,MAEA,mCAAA7oC,KAAA6F,KAAA,KACAlH,EAAA22E,iBAAAF,IAIA,IAAAlF,EAAAvxE,EAAAwxE,aAAAxxE,EAAAyxE,iBAGA,GAFAzxE,EAAA0xE,aAAAH,EAAAD,GACAtxE,EAAA2xE,cAAAJ,IACAvxE,EAAA4xE,mBAAAL,EAAAvxE,EAAA6xE,gBACA,MAAA,IAAA3nC,MAEA,qCAAA7oC,KAAA6F,KAAA,KACAlH,EAAA22E,iBAAApF,IAIA,IAAAqF,EAAA52E,EAAAw2E,gBAIA,GAHAx2E,EAAA62E,aAAAD,EAAAH,GACAz2E,EAAA62E,aAAAD,EAAArF,GACAvxE,EAAA82E,YAAAF,IACA52E,EAAA+2E,oBAAAH,EAAA52E,EAAAg3E,aACA,MAAA,IAAA9sC,MAEA,wCACAlqC,EAAAi3E,kBAAAL,IAIA,IAAAM,EAAA71E,KAAA81E,sBAAAn3E,EAAA42E,GACAQ,EAAA/1E,KAAAg2E,oBAAAr3E,EAAA42E,OAGA,OAFAQ,EAAAE,OAAAt3E,EAAAu3E,mBAAAX,EAAA,UACAQ,EAAAI,OAAAx3E,EAAAu3E,mBAAAX,EAAA,WAEAA,QAAAA,EACAM,mBAAAA,EACAE,iBAAAA,IAWAD,sBAAA,SAAAn3E,EAAA42E,GACA,OACAtE,UAAAtyE,EAAAy3E,kBAAAb,EAAA,eAaAS,oBAAA,WAEA,UASAK,kBAAA,SAAA13E,EAAAk3E,EAAAS,GACA,IAAAC,EAAAV,EAAA5E,UACAuF,EAAA73E,EAAA83E,eACA93E,EAAA+3E,WAAA/3E,EAAAg4E,aAAAH,GACA73E,EAAAi4E,wBAAAL,GACA53E,EAAAk4E,oBAAAN,EAAA,EAAA53E,EAAAm4E,OAAA,EAAA,EAAA,GACAn4E,EAAAo4E,WAAAp4E,EAAAg4E,aAAAL,EAAA33E,EAAAq4E,cAGAC,kBAAA,SAAAjzE,GACA,IAAAzE,EAAAJ,EAAAR,EAAAqF,EAAA2B,QACA3B,EAAA4uE,OAAA,GACArzE,EAAAyE,EAAAtE,iBACAP,EAAA6E,EAAApE,kBACAoE,EAAAoqE,cAAA7uE,GAAAyE,EAAAqqE,eAAAlvE,IACAR,EAAA60E,cAAAxvE,EAAA0uE,eACA1uE,EAAA0uE,cAAA1uE,EAAAmpE,cAAAsF,cAAA9zE,EAAAY,EAAAJ,IAEAR,EAAAu4E,qBAAAv4E,EAAAw0E,YAAAx0E,EAAAw4E,kBAAAx4E,EAAA40E,WACAvvE,EAAA0uE,cAAA,KAIA/zE,EAAAu0E,gBAAAv0E,EAAAw0E,YAAA,MACAx0E,EAAAmmB,WAIAsyD,cAAA,SAAApzE,GACAA,EAAA4uE,SACA5uE,EAAA+uE,OACA,IAAArgE,EAAA1O,EAAA0uE,cACA1uE,EAAA0uE,cAAA1uE,EAAAwuE,cACAxuE,EAAAwuE,cAAA9/D,GAUA47D,eAAA,WACA,IAAA+I,EAAAr3E,KAAAs3E,cACA/O,EAAA9qE,EAAA62B,MAAAm4C,QAAAzsE,KAAA6F,MAAAoJ,UACA,GAAAooE,EAAA,CACA,GAAA7iE,MAAAiW,QAAA89C,EAAA8O,IAAA,CACA,IAAA,IAAAnzE,EAAAqkE,EAAA8O,GAAA5zE,OAAAS,KACA,GAAAlE,KAAAq3E,GAAAnzE,KAAAqkE,EAAA8O,GAAAnzE,GACA,OAAA,EAGA,OAAA,EAGA,OAAAqkE,EAAA8O,KAAAr3E,KAAAq3E,GAIA,OAAA,GAiBAjE,QAAA,SAAApvE,GACAA,EAAA6uE,OACA7yE,KAAAi3E,kBAAAjzE,GACAhE,KAAAu3E,aAAAvzE,GACAhE,KAAAo3E,cAAApzE,IAGAhE,KAAAw3E,UAAAxzE,IAUAyzE,eAAA,SAAAzzE,GAIA,OAHAA,EAAA8uE,aAAA14D,eAAApa,KAAA6F,QACA7B,EAAA8uE,aAAA9yE,KAAA6F,MAAA7F,KAAAm1E,cAAAnxE,EAAA2B,UAEA3B,EAAA8uE,aAAA9yE,KAAA6F,OAeA0xE,aAAA,SAAAvzE,GACA,IAAArF,EAAAqF,EAAA2B,QACA+xE,EAAA13E,KAAAy3E,eAAAzzE,GACA,IAAAA,EAAA+uE,MAAA/uE,EAAA2uE,gBACAh0E,EAAA20E,YAAA30E,EAAA40E,WAAAvvE,EAAA2uE,iBAGAh0E,EAAA20E,YAAA30E,EAAA40E,WAAAvvE,EAAAwuE,eAEA7zE,EAAAg5E,WAAAD,EAAAnC,SACAv1E,KAAAq2E,kBAAA13E,EAAA+4E,EAAA7B,mBAAA7xE,EAAAitE,WAEAtyE,EAAAi5E,UAAAF,EAAA3B,iBAAAE,OAAA,EAAAjyE,EAAAoqE,aACAzvE,EAAAi5E,UAAAF,EAAA3B,iBAAAI,OAAA,EAAAnyE,EAAAqqE,cAEAruE,KAAA63E,gBAAAl5E,EAAA+4E,EAAA3B,kBACAp3E,EAAAm5E,SAAA,EAAA,EAAA9zE,EAAAtE,iBAAAsE,EAAApE,mBACAjB,EAAAo5E,WAAAp5E,EAAAq5E,eAAA,EAAA,IAGAC,sBAAA,SAAAt5E,EAAAk1E,EAAAqE,GACAv5E,EAAAw5E,cAAAD,GACAv5E,EAAA20E,YAAA30E,EAAA40E,WAAAM,GAEAl1E,EAAAw5E,cAAAx5E,EAAAy5E,WAGAC,wBAAA,SAAA15E,EAAAu5E,GACAv5E,EAAAw5E,cAAAD,GACAv5E,EAAA20E,YAAA30E,EAAA40E,WAAA,MACA50E,EAAAw5E,cAAAx5E,EAAAy5E,WAGAE,iBAAA,WACA,OAAAt4E,KAAAA,KAAAs3E,gBAGAiB,iBAAA,SAAAl0E,GACArE,KAAAA,KAAAs3E,eAAAjzE,GAWAwzE,gBAAA,aAQAW,gBAAA,SAAAx0E,GACA,IAAAA,EAAAy0E,UAAA,CACA,IAAAA,EAAA96E,SAAAqP,cAAA,UACAyrE,EAAAl5E,MAAAyE,EAAAoqE,YACAqK,EAAAt5E,OAAA6E,EAAAqqE,aACArqE,EAAAy0E,UAAAA,IAQA9yC,SAAA,WACA,IAAA1gC,GAAAY,KAAA7F,KAAA6F,MAAA6yE,EAAA14E,KAAAs3E,cAIA,OAHAoB,IACAzzE,EAAAyzE,GAAA14E,KAAA04E,IAEAzzE,GAOAuvC,OAAA,WAEA,OAAAx0C,KAAA2lC,cAIAloC,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAAA,SAAA9I,EAAAS,GACA,IAAAtB,EAAA,IAAA3G,EAAA62B,MAAAm4C,QAAAxnE,EAAAY,MAAAZ,GAEA,OADAS,GAAAA,EAAAtB,GACAA,GAIA,SAAA1H,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAuBAswD,EAAAkM,YAAAx8D,EAAAswD,EAAAwI,YAOApvE,KAAA,cAEAoqE,eAAA,0QAoBAj+D,QACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAGAslE,cAAA,SAMAsB,YAAA,EAMAv8D,WAAA,SAAArY,GACAhE,KAAA8b,UAAA,aAAA9X,GAEAhE,KAAAgS,OAAAhS,KAAAgS,OAAAlG,MAAA,IASA0rE,UAAA,SAAAxzE,GACA,IAIA4G,EAAA6uB,EAAA5oB,EAAAlG,EAAAzG,EAJA0O,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACA04D,EAAA14D,EAAAtP,OACAypB,EAAAltB,KAAAgS,OACA4mE,EAAA54E,KAAA44E,WAEA,IAAA10E,EAAA,EAAAA,EAAAunE,EAAAvnE,GAAA,EACA0G,EAAAmI,EAAA7O,GACAu1B,EAAA1mB,EAAA7O,EAAA,GACA2M,EAAAkC,EAAA7O,EAAA,GACA00E,GACA7lE,EAAA7O,GAAA0G,EAAAsiB,EAAA,GAAAuM,EAAAvM,EAAA,GAAArc,EAAAqc,EAAA,GAAA,IAAAA,EAAA,GACAna,EAAA7O,EAAA,GAAA0G,EAAAsiB,EAAA,GAAAuM,EAAAvM,EAAA,GAAArc,EAAAqc,EAAA,GAAA,IAAAA,EAAA,GACAna,EAAA7O,EAAA,GAAA0G,EAAAsiB,EAAA,IAAAuM,EAAAvM,EAAA,IAAArc,EAAAqc,EAAA,IAAA,IAAAA,EAAA,MAGAviB,EAAAoI,EAAA7O,EAAA,GACA6O,EAAA7O,GAAA0G,EAAAsiB,EAAA,GAAAuM,EAAAvM,EAAA,GAAArc,EAAAqc,EAAA,GAAAviB,EAAAuiB,EAAA,GAAA,IAAAA,EAAA,GACAna,EAAA7O,EAAA,GAAA0G,EAAAsiB,EAAA,GAAAuM,EAAAvM,EAAA,GAAArc,EAAAqc,EAAA,GAAAviB,EAAAuiB,EAAA,GAAA,IAAAA,EAAA,GACAna,EAAA7O,EAAA,GAAA0G,EAAAsiB,EAAA,IAAAuM,EAAAvM,EAAA,IAAArc,EAAAqc,EAAA,IAAAviB,EAAAuiB,EAAA,IAAA,IAAAA,EAAA,IACAna,EAAA7O,EAAA,GAAA0G,EAAAsiB,EAAA,IAAAuM,EAAAvM,EAAA,IAAArc,EAAAqc,EAAA,IAAAviB,EAAAuiB,EAAA,IAAA,IAAAA,EAAA,MAWA8oD,oBAAA,SAAAr3E,EAAA42E,GACA,OACAsD,aAAAl6E,EAAAu3E,mBAAAX,EAAA,gBACAuD,WAAAn6E,EAAAu3E,mBAAAX,EAAA,gBAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACA,IAAA7oD,EAAAltB,KAAAgS,OACAA,GACAkb,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KAEA6rD,GAAA7rD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,KACAvuB,EAAAq6E,iBAAAjD,EAAA8C,cAAA,EAAA7mE,GACArT,EAAAs6E,WAAAlD,EAAA+C,WAAAC,MAWAt7E,EAAA62B,MAAAm4C,QAAAkM,YAAA5qE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA3JA,CA4JA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAAyM,WAAA/8D,EAAAswD,EAAAwI,YAOApvE,KAAA,aAKAoqE,eAAA,6NAiBAkJ,WAAA,EAOA7B,cAAA,aAQAE,UAAA,SAAAxzE,GACA,GAAA,IAAAhE,KAAAm5E,WAAA,CAGA,IACAj1E,EADA0O,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KAAA5O,EAAA4O,EAAAtP,OACA01E,EAAApxE,KAAA4xB,MAAA,IAAA35B,KAAAm5E,YACA,IAAAj1E,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACA6O,EAAA7O,GAAA6O,EAAA7O,GAAAi1E,EACApmE,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,GAAAi1E,EACApmE,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,GAAAi1E,IAUAnD,oBAAA,SAAAr3E,EAAA42E,GACA,OACA6D,YAAAz6E,EAAAu3E,mBAAAX,EAAA,iBAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAi5E,UAAA7B,EAAAqD,YAAAp5E,KAAAm5E,eAWA17E,EAAA62B,MAAAm4C,QAAAyM,WAAAnrE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA9GA,CAgHA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAwyD,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YA+CAswD,EAAA4M,UAAAl9D,EAAAswD,EAAAwI,YAOApvE,KAAA,YAKAyzE,QAAA,EAKAtnE,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAKAi+D,gBACAsJ,cAAA,qcAgBAC,cAAA,2hBAkBAC,cAAA,0cAgBAC,cAAA,4hBAkBAC,cAAA,0cAgBAC,cAAA,4hBAkBAC,cAAA,0cAgBAC,cAAA,6hBAmCArC,eAAA,SAAAzzE,GACA,IAAAkC,EAAA6B,KAAApL,KAAAqD,KAAAgS,OAAAvO,QACA+oE,EAAAxsE,KAAA6F,KAAA,IAAAK,EAAA,KAAAlG,KAAAs5E,OAAA,EAAA,GACAjJ,EAAArwE,KAAAiwE,eAAAzD,GAIA,OAHAxoE,EAAA8uE,aAAA14D,eAAAoyD,KACAxoE,EAAA8uE,aAAAtG,GAAAxsE,KAAAm1E,cAAAnxE,EAAA2B,QAAA0qE,IAEArsE,EAAA8uE,aAAAtG,IASAgL,UAAA,SAAAxzE,GACA,IAWA4G,EAAA6uB,EAAA5oB,EAAAlG,EAAAovE,EACAC,EAAAC,EAAAC,EAAAC,EACA9wE,EAAAC,EAAAyM,EAAAC,EAbApD,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACAqnE,EAAAp6E,KAAAgS,OACAqoE,EAAAtyE,KAAA4xB,MAAA5xB,KAAApL,KAAAy9E,EAAA32E,SACA62E,EAAAvyE,KAAAU,MAAA4xE,EAAA,GACAE,EAAA3nE,EAAArT,MACAi7E,EAAA5nE,EAAAzT,OACAs7E,EAAAz2E,EAAAhF,IAAA07E,gBAAAH,EAAAC,GACAG,EAAAF,EAAA1nE,KAEA6nE,EAAA56E,KAAAs5E,OAAA,EAAA,EAKA,IAAAhwE,EAAA,EAAAA,EAAAkxE,EAAAlxE,IACA,IAAAD,EAAA,EAAAA,EAAAkxE,EAAAlxE,IAAA,CAMA,IALA0wE,EAAA,GAAAzwE,EAAAixE,EAAAlxE,GAGAuB,EAAA,EAAA6uB,EAAA,EAAA5oB,EAAA,EAAAlG,EAAA,EAEAqL,EAAA,EAAAA,EAAAqkE,EAAArkE,IACA,IAAAD,EAAA,EAAAA,EAAAskE,EAAAtkE,IAEAikE,EAAA3wE,EAAA0M,EAAAukE,GADAL,EAAA3wE,EAAA0M,EAAAskE,GAIA,GAAAL,GAAAO,GAAAR,EAAA,GAAAA,GAAAO,IAIAL,EAAA,GAAAD,EAAAM,EAAAP,GACAG,EAAAC,EAAApkE,EAAAqkE,EAAAtkE,GAEAnL,GAAAmI,EAAAmnE,GAAAC,EACA1gD,GAAA1mB,EAAAmnE,EAAA,GAAAC,EACAtpE,GAAAkC,EAAAmnE,EAAA,GAAAC,EAEAS,IACAjwE,GAAAoI,EAAAmnE,EAAA,GAAAC,IAIAQ,EAAAZ,GAAAnvE,EACA+vE,EAAAZ,EAAA,GAAAtgD,EACAkhD,EAAAZ,EAAA,GAAAlpE,EAKA8pE,EAAAZ,EAAA,GAJAa,EAIA7nE,EAAAgnE,EAAA,GAHApvE,EAOA3G,EAAA4O,UAAA6nE,GASAzE,oBAAA,SAAAr3E,EAAA42E,GACA,OACAsF,QAAAl8E,EAAAu3E,mBAAAX,EAAA,WACAuF,QAAAn8E,EAAAu3E,mBAAAX,EAAA,WACAwF,UAAAp8E,EAAAu3E,mBAAAX,EAAA,aACAyF,MAAAr8E,EAAAu3E,mBAAAX,EAAA,WAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAs8E,WAAAlF,EAAA8E,QAAA76E,KAAAgS,SAOA2zB,SAAA,WACA,OAAA1rB,EAAAja,KAAA8b,UAAA,aACAw9D,OAAAt5E,KAAAs5E,OACAtnE,OAAAhS,KAAAgS,YAYAvU,EAAA62B,MAAAm4C,QAAA4M,UAAAtrE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA7VA,CA+VA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAaAswD,EAAAyO,UAAA/+D,EAAAswD,EAAAwI,YAOApvE,KAAA,YAEAoqE,gBACA51C,QAAA,+PAQA8gD,UAAA,+SASAC,WAAA,uRAiBAC,KAAA,UAEA/D,cAAA,OAQAE,UAAA,SAAAxzE,GACA,IACAE,EACAG,EAFAuO,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACA5O,EAAA4O,EAAAtP,OACA43E,EAAAr7E,KAAAq7E,KACA,IAAAn3E,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACA,YAAAm3E,EACAh3E,GAAA0O,EAAA7O,GAAA6O,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,IAAA,EAEA,cAAAm3E,EACAh3E,GAAA0D,KAAA9K,IAAA8V,EAAA7O,GAAA6O,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,IACA6D,KAAA7K,IAAA6V,EAAA7O,GAAA6O,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,KAAA,EAEA,eAAAm3E,IACAh3E,EAAA,IAAA0O,EAAA7O,GAAA,IAAA6O,EAAA7O,EAAA,GAAA,IAAA6O,EAAA7O,EAAA,IAEA6O,EAAA7O,GAAAG,EACA0O,EAAA7O,EAAA,GAAAG,EACA0O,EAAA7O,EAAA,GAAAG,GAUAozE,eAAA,SAAAzzE,GACA,IAAAwoE,EAAAxsE,KAAA6F,KAAA,IAAA7F,KAAAq7E,KACA,IAAAr3E,EAAA8uE,aAAA14D,eAAAoyD,GAAA,CACA,IAAA6D,EAAArwE,KAAAiwE,eAAAjwE,KAAAq7E,MACAr3E,EAAA8uE,aAAAtG,GAAAxsE,KAAAm1E,cAAAnxE,EAAA2B,QAAA0qE,GAEA,OAAArsE,EAAA8uE,aAAAtG,IASAwJ,oBAAA,SAAAr3E,EAAA42E,GACA,OACA+F,MAAA38E,EAAAu3E,mBAAAX,EAAA,WAUAsC,gBAAA,SAAAl5E,EAAAo3E,GAGAp3E,EAAA48E,UAAAxF,EAAAuF,MADA,IASAhN,eAAA,WACA,OAAA,KAWA7wE,EAAA62B,MAAAm4C,QAAAyO,UAAAntE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAvJA,CAyJA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAaAswD,EAAA+O,OAAAr/D,EAAAswD,EAAAwI,YAOApvE,KAAA,SAEAoqE,eAAA,qSAkBAwL,QAAA,EAEAnE,cAAA,SAQAE,UAAA,SAAAxzE,GACA,IACAE,EADA0O,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACA5O,EAAA4O,EAAAtP,OACA,IAAAS,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACA6O,EAAA7O,GAAA,IAAA6O,EAAA7O,GACA6O,EAAA7O,EAAA,GAAA,IAAA6O,EAAA7O,EAAA,GACA6O,EAAA7O,EAAA,GAAA,IAAA6O,EAAA7O,EAAA,IAUAoqE,eAAA,WACA,OAAAtuE,KAAAy7E,QASAzF,oBAAA,SAAAr3E,EAAA42E,GACA,OACAmG,QAAA/8E,EAAAu3E,mBAAAX,EAAA,aAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAA48E,UAAAxF,EAAA2F,QAAA17E,KAAAy7E,WAWAh+E,EAAA62B,MAAAm4C,QAAA+O,OAAAztE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA3GA,CA8GA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAwyD,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAiBAswD,EAAAkP,MAAAx/D,EAAAswD,EAAAwI,YAOApvE,KAAA,QAKAoqE,eAAA,ucAoBAqH,cAAA,QAOAsE,MAAA,EAQApE,UAAA,SAAAxzE,GACA,GAAA,IAAAhE,KAAA47E,MAAA,CAGA,IACA13E,EACA23E,EAFAjpE,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KAAA5O,EAAA4O,EAAAtP,OACAm4E,EAAA57E,KAAA47E,MAEA,IAAA13E,EAAA,EAAAC,EAAA4O,EAAAtP,OAAAS,EAAAC,EAAAD,GAAA,EAEA23E,GAAA,GAAA9zE,KAAAW,UAAAkzE,EAEA7oE,EAAA7O,IAAA23E,EACA9oE,EAAA7O,EAAA,IAAA23E,EACA9oE,EAAA7O,EAAA,IAAA23E,IAUA7F,oBAAA,SAAAr3E,EAAA42E,GACA,OACAuG,OAAAn9E,EAAAu3E,mBAAAX,EAAA,UACAwG,MAAAp9E,EAAAu3E,mBAAAX,EAAA,WAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAi5E,UAAA7B,EAAA+F,OAAA97E,KAAA47E,MAAA,KACAj9E,EAAAi5E,UAAA7B,EAAAgG,MAAAh0E,KAAAW,WAOAi9B,SAAA,WACA,OAAA1rB,EAAAja,KAAA8b,UAAA,aACA8/D,MAAA57E,KAAA47E,WAYAn+E,EAAA62B,MAAAm4C,QAAAkP,MAAA5tE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAnIA,CAqIA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAAuP,SAAA7/D,EAAAswD,EAAAwI,YAOApvE,KAAA,WAEAo2E,UAAA,EAEA3E,cAAA,YAKArH,eAAA,6fAwBAuH,UAAA,SAAAxzE,GACA,IAIAkB,EAAAhB,EAAAyU,EAAA/N,EAAA6uB,EAAA5oB,EAAAlG,EACAuxE,EAAAC,EAAAC,EAAAC,EALAzpE,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACA04D,EAAA74D,EAAAzT,OACAusE,EAAA94D,EAAArT,MAIA,IAAA2E,EAAA,EAAAA,EAAAunE,EAAAvnE,GAAAlE,KAAAi8E,UACA,IAAAtjE,EAAA,EAAAA,EAAA+yD,EAAA/yD,GAAA3Y,KAAAi8E,UAWA,IAPArxE,EAAAmI,EAFA7N,EAAA,EAAAhB,EAAAwnE,EAAA,EAAA/yD,GAGA8gB,EAAA1mB,EAAA7N,EAAA,GACA2L,EAAAkC,EAAA7N,EAAA,GACAyF,EAAAoI,EAAA7N,EAAA,GAEAk3E,EAAAr0E,KAAA9K,IAAAiH,EAAAlE,KAAAi8E,UAAAxQ,GACA4Q,EAAAt0E,KAAA9K,IAAA0b,EAAA3Y,KAAAi8E,UAAAvQ,GACAwQ,EAAAh4E,EAAAg4E,EAAAE,EAAAF,IACA,IAAAC,EAAAxjE,EAAAwjE,EAAAE,EAAAF,IAEAppE,EADA7N,EAAA,EAAAg3E,EAAAxQ,EAAA,EAAAyQ,GACAvxE,EACAmI,EAAA7N,EAAA,GAAAu0B,EACA1mB,EAAA7N,EAAA,GAAA2L,EACAkC,EAAA7N,EAAA,GAAAyF,GAUA2jE,eAAA,WACA,OAAA,IAAAtuE,KAAAi8E,WASAjG,oBAAA,SAAAr3E,EAAA42E,GACA,OACA+G,WAAA39E,EAAAu3E,mBAAAX,EAAA,cACAU,OAAAt3E,EAAAu3E,mBAAAX,EAAA,UACAY,OAAAx3E,EAAAu3E,mBAAAX,EAAA,YAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAi5E,UAAA7B,EAAAuG,WAAAt8E,KAAAi8E,cAWAx+E,EAAA62B,MAAAm4C,QAAAuP,SAAAjuE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAtIA,CAwIA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAwc,EAAAxc,EAAA2F,KAAA6B,OAAAgV,OACAwyD,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAiBAswD,EAAA8P,YAAApgE,EAAAswD,EAAAwI,YAOApvE,KAAA,cAOAygB,MAAA,UAKA2pD,eAAA,uTAgBAr4B,SAAA,IAMA4kC,UAAA,EAcAhF,UAAA,SAAAxzE,GACA,IACAE,EAEA0G,EAAA6uB,EAAA5oB,EAHA+B,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KACA6kC,EAAA,IAAA53C,KAAA43C,SAEA3wC,EAAA,IAAAxJ,EAAAuoB,MAAAhmB,KAAAsmB,OAAAL,YACAw2D,GACAx1E,EAAA,GAAA2wC,EACA3wC,EAAA,GAAA2wC,EACA3wC,EAAA,GAAA2wC,GAEA8kC,GACAz1E,EAAA,GAAA2wC,EACA3wC,EAAA,GAAA2wC,EACA3wC,EAAA,GAAA2wC,GAIA,IAAA1zC,EAAA,EAAAA,EAAA6O,EAAAtP,OAAAS,GAAA,EACA0G,EAAAmI,EAAA7O,GACAu1B,EAAA1mB,EAAA7O,EAAA,GACA2M,EAAAkC,EAAA7O,EAAA,GAEA0G,EAAA6xE,EAAA,IACAhjD,EAAAgjD,EAAA,IACA5rE,EAAA4rE,EAAA,IACA7xE,EAAA8xE,EAAA,IACAjjD,EAAAijD,EAAA,IACA7rE,EAAA6rE,EAAA,KACA3pE,EAAA7O,EAAA,GAAA,IAWA8xE,oBAAA,SAAAr3E,EAAA42E,GACA,OACAoH,KAAAh+E,EAAAu3E,mBAAAX,EAAA,QACAqH,MAAAj+E,EAAAu3E,mBAAAX,EAAA,WAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACA,IAAA9uE,EAAA,IAAAxJ,EAAAuoB,MAAAhmB,KAAAsmB,OAAAL,YACA2xB,EAAA7sC,WAAA/K,KAAA43C,UACA6kC,GACA,EAAAx1E,EAAA,GAAA,IAAA2wC,EACA,EAAA3wC,EAAA,GAAA,IAAA2wC,EACA,EAAA3wC,EAAA,GAAA,IAAA2wC,EACA,GAEA8kC,GACAz1E,EAAA,GAAA,IAAA2wC,EACA3wC,EAAA,GAAA,IAAA2wC,EACA3wC,EAAA,GAAA,IAAA2wC,EACA,GAEAj5C,EAAAs6E,WAAAlD,EAAA4G,KAAAF,GACA99E,EAAAs6E,WAAAlD,EAAA6G,MAAAF,IAOA/2C,SAAA,WACA,OAAA1rB,EAAAja,KAAA8b,UAAA,aACAwK,MAAAtmB,KAAAsmB,MACAsxB,SAAA53C,KAAA43C,cAYAn6C,EAAA62B,MAAAm4C,QAAA8P,YAAAxuE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA1KA,CA4KA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAEA8Q,GACA4vD,SACA,MAAA,QAAA,OAAA,EAAA,MACA,MAAA,OAAA,OAAA,GAAA,MACA,QAAA,OAAA,OAAA,GAAA,OACA,EAAA,EAAA,EAAA,EAAA,GAEAC,SACA,OAAA,QAAA,OAAA,EAAA,OACA,OAAA,OAAA,OAAA,EAAA,OACA,OAAA,OAAA,OAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,GAEAC,YACA,SAAA,QAAA,OAAA,EAAA,QACA,OAAA,SAAA,OAAA,EAAA,QACA,QAAA,OAAA,QAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,GAEAC,aACA,SAAA,QAAA,OAAA,EAAA,QACA,OAAA,SAAA,OAAA,GAAA,QACA,OAAA,OAAA,QAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,GAEAC,UACA,OAAA,MAAA,KAAA,EAAA,GACA,KAAA,OAAA,KAAA,EAAA,GACA,MAAA,KAAA,MAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAEAC,OACA,KAAA,KAAA,KAAA,EAAA,EACA,KAAA,KAAA,KAAA,EAAA,EACA,KAAA,KAAA,KAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAEAC,YACA,IAAA,IAAA,IAAA,GAAA,EACA,IAAA,IAAA,IAAA,GAAA,EACA,IAAA,IAAA,IAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAIA,IAAA,IAAAx1E,KAAAslB,EACAw/C,EAAA9kE,GAAAwU,EAAAswD,EAAAkM,aAOA9yE,KAAA8B,EASAqK,OAAAib,EAAAtlB,GAKA2vE,eAAA,EAIAsB,YAAA,IAGAn7E,EAAA62B,MAAAm4C,QAAA9kE,GAAAoG,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAlFA,CAoFA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GACA,aAEA,IAAAe,EAAAf,EAAAe,OACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAuBAswD,EAAA2Q,WAAAjhE,EAAAswD,EAAAwI,YACApvE,KAAA,aAMAygB,MAAA,UAMA+0D,KAAA,WAKAlhD,MAAA,EAKA81C,gBACAp+D,SAAA,oCACAwrE,OAAA,4EACA14E,IAAA,oCACA24E,KAAA,2DACArnD,SAAA,oCACAsnD,QAAA,0DACAC,OAAA,0DACAC,UAAA,4EACA/rC,QAAA,mbAeAgsC,KAAA,4EAWAC,YAAA,SAAAtC,GACA,MAAA,iNAQAr7E,KAAAiwE,eAAAoL,GACA,QAUA5D,eAAA,SAAAzzE,GACA,IAAAqsE,EAAA7D,EAAAxsE,KAAA6F,KAAA,IAAA7F,KAAAq7E,KAKA,OAJAr3E,EAAA8uE,aAAA14D,eAAAoyD,KACA6D,EAAArwE,KAAA29E,YAAA39E,KAAAq7E,MACAr3E,EAAA8uE,aAAAtG,GAAAxsE,KAAAm1E,cAAAnxE,EAAA2B,QAAA0qE,IAEArsE,EAAA8uE,aAAAtG,IASAgL,UAAA,SAAAxzE,GACA,IAEA6qC,EAAA+uC,EAAAjmE,EACA/M,EAAA6uB,EAAA5oB,EACA5J,EAJA2L,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KAAA04D,EAAA14D,EAAAtP,OAGAo6E,EAAA,EAAA79E,KAAAm6B,MAEAlzB,EAAA,IAAAxJ,EAAAuoB,MAAAhmB,KAAAsmB,OAAAL,YACA4oB,EAAA5nC,EAAA,GAAAjH,KAAAm6B,MACAyjD,EAAA32E,EAAA,GAAAjH,KAAAm6B,MACAxiB,EAAA1Q,EAAA,GAAAjH,KAAAm6B,MAEA,IAAA,IAAAj2B,EAAA,EAAAA,EAAAunE,EAAAvnE,GAAA,EAMA,OAJA0G,EAAAmI,EAAA7O,GACAu1B,EAAA1mB,EAAA7O,EAAA,GACA2M,EAAAkC,EAAA7O,EAAA,GAEAlE,KAAAq7E,MACA,IAAA,WACAtoE,EAAA7O,GAAA0G,EAAAikC,EAAA,IACA97B,EAAA7O,EAAA,GAAAu1B,EAAAmkD,EAAA,IACA7qE,EAAA7O,EAAA,GAAA2M,EAAA8G,EAAA,IACA,MACA,IAAA,SACA5E,EAAA7O,GAAA,KAAA,IAAA0G,IAAA,IAAAikC,GAAA,IACA97B,EAAA7O,EAAA,GAAA,KAAA,IAAAu1B,IAAA,IAAAmkD,GAAA,IACA7qE,EAAA7O,EAAA,GAAA,KAAA,IAAA2M,IAAA,IAAA8G,GAAA,IACA,MACA,IAAA,MACA5E,EAAA7O,GAAA0G,EAAAikC,EACA97B,EAAA7O,EAAA,GAAAu1B,EAAAmkD,EACA7qE,EAAA7O,EAAA,GAAA2M,EAAA8G,EACA,MACA,IAAA,OACA,IAAA,aACA5E,EAAA7O,GAAA6D,KAAAsN,IAAAzK,EAAAikC,GACA97B,EAAA7O,EAAA,GAAA6D,KAAAsN,IAAAokB,EAAAmkD,GACA7qE,EAAA7O,EAAA,GAAA6D,KAAAsN,IAAAxE,EAAA8G,GACA,MACA,IAAA,WACA5E,EAAA7O,GAAA0G,EAAAikC,EACA97B,EAAA7O,EAAA,GAAAu1B,EAAAmkD,EACA7qE,EAAA7O,EAAA,GAAA2M,EAAA8G,EACA,MACA,IAAA,SACA5E,EAAA7O,GAAA6D,KAAA9K,IAAA2N,EAAAikC,GACA97B,EAAA7O,EAAA,GAAA6D,KAAA9K,IAAAw8B,EAAAmkD,GACA7qE,EAAA7O,EAAA,GAAA6D,KAAA9K,IAAA4T,EAAA8G,GACA,MACA,IAAA,UACA5E,EAAA7O,GAAA6D,KAAA7K,IAAA0N,EAAAikC,GACA97B,EAAA7O,EAAA,GAAA6D,KAAA7K,IAAAu8B,EAAAmkD,GACA7qE,EAAA7O,EAAA,GAAA6D,KAAA7K,IAAA2T,EAAA8G,GACA,MACA,IAAA,UACA5E,EAAA7O,GAAA2qC,EAAA,IAAA,EAAAjkC,EAAAikC,EAAA,IAAA,IAAA,GAAA,IAAAjkC,IAAA,IAAAikC,GAAA,IACA97B,EAAA7O,EAAA,GAAA05E,EAAA,IAAA,EAAAnkD,EAAAmkD,EAAA,IAAA,IAAA,GAAA,IAAAnkD,IAAA,IAAAmkD,GAAA,IACA7qE,EAAA7O,EAAA,GAAAyT,EAAA,IAAA,EAAA9G,EAAA8G,EAAA,IAAA,IAAA,GAAA,IAAA9G,IAAA,IAAA8G,GAAA,IACA,MACA,IAAA,YACA5E,EAAA7O,GAAA2qC,EAAAjkC,EAAA,EAAAikC,EAAAjkC,EAAA,IACAmI,EAAA7O,EAAA,GAAA05E,EAAAnkD,EAAA,EAAAmkD,EAAAnkD,EAAA,IACA1mB,EAAA7O,EAAA,GAAAyT,EAAA9G,EAAA,EAAA8G,EAAA9G,EAAA,IACA,MACA,IAAA,OACAkC,EAAA7O,GAAA2qC,EAAAjkC,EAAAizE,EACA9qE,EAAA7O,EAAA,GAAA05E,EAAAnkD,EAAAokD,EACA9qE,EAAA7O,EAAA,GAAAyT,EAAA9G,EAAAgtE,IAWA7H,oBAAA,SAAAr3E,EAAA42E,GACA,OACAuI,OAAAn/E,EAAAu3E,mBAAAX,EAAA,YAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACA,IAAA9uE,EAAA,IAAAxJ,EAAAuoB,MAAAhmB,KAAAsmB,OAAAL,YACAhf,EAAA,GAAAjH,KAAAm6B,MAAAlzB,EAAA,GAAA,IACAA,EAAA,GAAAjH,KAAAm6B,MAAAlzB,EAAA,GAAA,IACAA,EAAA,GAAAjH,KAAAm6B,MAAAlzB,EAAA,GAAA,IACAA,EAAA,GAAAjH,KAAAm6B,MACAx7B,EAAAs6E,WAAAlD,EAAA+H,OAAA72E,IAOA0+B,SAAA,WACA,OACA9/B,KAAA7F,KAAA6F,KACAygB,MAAAtmB,KAAAsmB,MACA+0D,KAAAr7E,KAAAq7E,KACAlhD,MAAAn6B,KAAAm6B,UAYA18B,EAAA62B,MAAAm4C,QAAA2Q,WAAArvE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAlPA,CAoPA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GACA,aAEA,IAAAe,EAAAf,EAAAe,OACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAuBAswD,EAAAsR,WAAA5hE,EAAAswD,EAAAwI,YACApvE,KAAA,aAMAylC,MAAA,KAMA+vC,KAAA,WAMAlhD,MAAA,EAEA+6C,aAAA,2QAaAjF,gBACAp+D,SAAA,2TAYAmsE,KAAA,qTAoBAvG,eAAA,SAAAzzE,GACA,IAAAwoE,EAAAxsE,KAAA6F,KAAA,IAAA7F,KAAAq7E,KACAhL,EAAArwE,KAAAiwE,eAAAjwE,KAAAq7E,MAIA,OAHAr3E,EAAA8uE,aAAA14D,eAAAoyD,KACAxoE,EAAA8uE,aAAAtG,GAAAxsE,KAAAm1E,cAAAnxE,EAAA2B,QAAA0qE,IAEArsE,EAAA8uE,aAAAtG,IAGA+K,aAAA,SAAAvzE,GAEA,IAAArF,EAAAqF,EAAA2B,QACAkuE,EAAA7zE,KAAAyyE,cAAAzuE,EAAAmpE,cAAAntE,KAAAsrC,OACAtrC,KAAAi4E,sBAAAt5E,EAAAk1E,EAAAl1E,EAAAs/E,UACAj+E,KAAA8b,UAAA,eAAA9X,GACAhE,KAAAq4E,wBAAA15E,EAAAA,EAAAs/E,WAGAxL,cAAA,SAAAvF,EAAA5hC,GACA,OAAA4hC,EAAAqF,iBAAAjnC,EAAAkhC,SAAAlhC,EAAAqhC,WASAuR,gBAAA,WACA,IAAA5yC,EAAAtrC,KAAAsrC,MACA/rC,EAAA+rC,EAAAqhC,SAAAptE,MACAJ,EAAAmsC,EAAAqhC,SAAAxtE,OACA,OACA,EAAAmsC,EAAAr6B,OAAA,EAAA,EACA,EAAA,EAAAq6B,EAAAp6B,OAAA,GACAo6B,EAAA9gC,KAAAjL,GAAA+rC,EAAA7gC,IAAAtL,EAAA,IAUAq4E,UAAA,SAAAxzE,GACA,IAKA6qC,EAAA+uC,EAAAjmE,EAAAD,EACA9M,EAAA6uB,EAAA5oB,EAAAlG,EACAwzE,EAAAx4E,EAAAy4E,EAPAxrE,EAAA5O,EAAA4O,UACAxU,EAAA4F,EAAAmpE,cAAA/uE,UACA2U,EAAAH,EAAAG,KAAA04D,EAAA14D,EAAAtP,OACAlE,EAAAqT,EAAArT,MACAJ,EAAAyT,EAAAzT,OAGAmsC,EAAAtrC,KAAAsrC,MAEAltC,EAAAigF,aACAjgF,EAAAigF,WAAA5gF,EAAA2F,KAAA6M,uBAEAkuE,EAAA//E,EAAAigF,WACA14E,EAAAw4E,EAAAl/E,WAAA,MACAk/E,EAAA5+E,QAAAA,GAAA4+E,EAAAh/E,SAAAA,GACAg/E,EAAA5+E,MAAAA,EACA4+E,EAAAh/E,OAAAA,GAGAwG,EAAAsoC,UAAA,EAAA,EAAA1uC,EAAAJ,GAEAwG,EAAA6wD,aAAAlrB,EAAAr6B,OAAA,EAAA,EAAAq6B,EAAAp6B,OAAAo6B,EAAA9gC,KAAA8gC,EAAA7gC,KACA9E,EAAArG,UAAAgsC,EAAAqhC,SAAA,EAAA,EAAAptE,EAAAJ,GACAi/E,EAAAz4E,EAAAkN,aAAA,EAAA,EAAAtT,EAAAJ,GAAA4T,KACA,IAAA,IAAA7O,EAAA,EAAAA,EAAAunE,EAAAvnE,GAAA,EAYA,OAVA0G,EAAAmI,EAAA7O,GACAu1B,EAAA1mB,EAAA7O,EAAA,GACA2M,EAAAkC,EAAA7O,EAAA,GACAyG,EAAAoI,EAAA7O,EAAA,GAEA2qC,EAAAuvC,EAAAl6E,GACA05E,EAAAQ,EAAAl6E,EAAA,GACAyT,EAAAymE,EAAAl6E,EAAA,GACAwT,EAAA0mE,EAAAl6E,EAAA,GAEAlE,KAAAq7E,MACA,IAAA,WACAtoE,EAAA7O,GAAA0G,EAAAikC,EAAA,IACA97B,EAAA7O,EAAA,GAAAu1B,EAAAmkD,EAAA,IACA7qE,EAAA7O,EAAA,GAAA2M,EAAA8G,EAAA,IACA5E,EAAA7O,EAAA,GAAAyG,EAAA+M,EAAA,IACA,MACA,IAAA,OACA3E,EAAA7O,EAAA,GAAAwT,IAYAs+D,oBAAA,SAAAr3E,EAAA42E,GACA,OACA+I,iBAAA3/E,EAAAu3E,mBAAAX,EAAA,oBACAgJ,OAAA5/E,EAAAu3E,mBAAAX,EAAA,YAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACA,IAAA/jE,EAAAhS,KAAAk+E,kBACAv/E,EAAA48E,UAAAxF,EAAAwI,OAAA,GACA5/E,EAAA6/E,iBAAAzI,EAAAuI,kBAAA,EAAAtsE,IAOA2zB,SAAA,WACA,OACA9/B,KAAA7F,KAAA6F,KACAylC,MAAAtrC,KAAAsrC,OAAAtrC,KAAAsrC,MAAA3F,WACA01C,KAAAr7E,KAAAq7E,KACAlhD,MAAAn6B,KAAAm6B,UAYA18B,EAAA62B,MAAAm4C,QAAAsR,WAAAhwE,WAAA,SAAA9I,EAAAS,GACAjI,EAAA62B,MAAAvmB,WAAA9I,EAAAqmC,MAAA,SAAAA,GACA,IAAAtnC,EAAAvG,EAAA2F,KAAA6B,OAAA3H,MAAA2H,GACAjB,EAAAsnC,MAAAA,EACA5lC,EAAA,IAAAjI,EAAA62B,MAAAm4C,QAAAsR,WAAA/5E,OAjPA,CAqPA,oBAAA8D,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WAAAZ,EAAAkL,KAAAlL,IAAA4L,EAAAV,KAAAU,MACA9L,EAAAoL,KAAApL,KAAA0Y,EAAAtN,KAAAsN,IAAAskB,EAAA5xB,KAAA4xB,MAAAvxB,EAAAL,KAAAK,IACAmO,EAAAxO,KAAAwO,KACAk2D,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAaAswD,EAAAgS,OAAAtiE,EAAAswD,EAAAwI,YAOApvE,KAAA,SASA64E,WAAA,UAOAztE,OAAA,EAOAC,OAAA,EAOAytE,aAAA,EASA3I,oBAAA,SAAAr3E,EAAA42E,GACA,OACAqJ,OAAAjgF,EAAAu3E,mBAAAX,EAAA,UACAsJ,MAAAlgF,EAAAu3E,mBAAAX,EAAA,WAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAmgF,WAAA/I,EAAA6I,OAAA5+E,KAAA++E,YAAA,EAAA/+E,KAAAT,MAAA,IAAA,EAAA,EAAAS,KAAAb,SACAR,EAAAs8E,WAAAlF,EAAA8I,MAAA7+E,KAAAg/E,OASAvH,eAAA,SAAAzzE,GACA,IAAAi7E,EAAAj/E,KAAAk/E,kBAAA1S,EAAAxsE,KAAA6F,KAAA,IAAAo5E,EACA,IAAAj7E,EAAA8uE,aAAA14D,eAAAoyD,GAAA,CACA,IAAA0D,EAAAlwE,KAAAm/E,eAAAF,GACAj7E,EAAA8uE,aAAAtG,GAAAxsE,KAAAm1E,cAAAnxE,EAAA2B,QAAAuqE,GAEA,OAAAlsE,EAAA8uE,aAAAtG,IAGA0S,gBAAA,WACA,IAAA9/E,EAAAY,KAAAo/E,UACA,OAAAr3E,KAAAwO,KAAAvW,KAAA2+E,aAAAv/E,IAGAigF,QAAA,WAGA,IAFA,IAAAC,EAAAt/E,KAAAu/E,cAAAv/E,KAAA2+E,cAAAv/E,EAAAY,KAAAo/E,UACAH,EAAAj/E,KAAAk/E,kBAAAF,EAAA,IAAAxqE,MAAAyqE,GACA/6E,EAAA,EAAAA,GAAA+6E,EAAA/6E,IACA86E,EAAA96E,EAAA,GAAAo7E,EAAAp7E,EAAA9E,GAEA,OAAA4/E,GAOAG,eAAA,SAAAF,GAIA,IAHA,IAAAO,EAAA,IAAAhrE,MAAAyqE,GACA/O,EAAAlwE,KAAAy/E,kBAEAv7E,EAAA,EAAAA,GAAA+6E,EAAA/6E,IACAs7E,EAAAt7E,EAAA,GAAAA,EAAA,cAeA,OAZAgsE,GAAA,uBAAA+O,EAAA,OACA/O,GAAA,kBACAA,GAAA,mDACAA,GAAA,uBAEAsP,EAAA3xE,QAAA,SAAA+T,EAAA1d,GACAgsE,GAAA,8CAAAtuD,EAAA,aAAA1d,EAAA,OACAgsE,GAAA,8CAAAtuD,EAAA,aAAA1d,EAAA,OACAgsE,GAAA,wBAAAhsE,EAAA,SAEAgsE,GAAA,kCACAA,GAAA,KAIAuP,kBAAA,uGAiBArM,QAAA,SAAApvE,GACAA,EAAA6uE,OACA7uE,EAAA4uE,SACA5yE,KAAAT,MAAAyE,EAAAoqE,YACApuE,KAAA++E,YAAA,EACA/+E,KAAA0/E,GAAA33E,KAAA4xB,MAAA35B,KAAAT,MAAAS,KAAAiR,QACAjR,KAAA2/E,GAAA37E,EAAAqqE,aACAruE,KAAAo/E,UAAAp/E,KAAA0/E,GAAA1/E,KAAAT,MACAS,KAAAg/E,KAAAh/E,KAAAq/E,UACAr7E,EAAAtE,iBAAAM,KAAA0/E,GACA1/E,KAAAi3E,kBAAAjzE,GACAhE,KAAAu3E,aAAAvzE,GACAhE,KAAAo3E,cAAApzE,GACAA,EAAAoqE,YAAApqE,EAAAtE,iBAEAM,KAAAb,OAAA6E,EAAAqqE,aACAruE,KAAA++E,YAAA,EACA/+E,KAAA2/E,GAAA53E,KAAA4xB,MAAA35B,KAAAb,OAAAa,KAAAkR,QACAlR,KAAAo/E,UAAAp/E,KAAA2/E,GAAA3/E,KAAAb,OACAa,KAAAg/E,KAAAh/E,KAAAq/E,UACAr7E,EAAApE,kBAAAI,KAAA2/E,GACA3/E,KAAAi3E,kBAAAjzE,GACAhE,KAAAu3E,aAAAvzE,GACAhE,KAAAo3E,cAAApzE,GACAA,EAAAqqE,aAAArqE,EAAApE,mBAGAI,KAAAw3E,UAAAxzE,IAIAsqE,eAAA,WACA,OAAA,IAAAtuE,KAAAiR,QAAA,IAAAjR,KAAAkR,QAGAquE,cAAA,SAAAK,GACA,OAAA,SAAAv2E,GACA,GAAAA,GAAAu2E,GAAAv2E,IAAAu2E,EACA,OAAA,EAEA,GAAAv2E,EAAA,cAAAA,GAAA,aACA,OAAA,EAGA,IAAAw2E,GADAx2E,GAAAtB,KAAAC,IACA43E,EACA,OAAAx3E,EAAAiB,GAAAA,EAAAjB,EAAAy3E,GAAAA,IAWArI,UAAA,SAAAxzE,GACA,IAAA4O,EAAA5O,EAAA4O,UACA3B,EAAAjR,KAAAiR,OACAC,EAAAlR,KAAAkR,OAEAlR,KAAA8/E,UAAA,EAAA7uE,EACAjR,KAAA+/E,UAAA,EAAA7uE,EAEA,IAEA8uE,EAFAC,EAAArtE,EAAArT,MAAA2gF,EAAAttE,EAAAzT,OACAugF,EAAA/lD,EAAAsmD,EAAAhvE,GAAA0uE,EAAAhmD,EAAAumD,EAAAhvE,GAGA,cAAAlR,KAAA0+E,WACAsB,EAAAhgF,KAAAmgF,WAAAn8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GAEA,YAAA3/E,KAAA0+E,WACAsB,EAAAhgF,KAAAogF,kBAAAp8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GAEA,aAAA3/E,KAAA0+E,WACAsB,EAAAhgF,KAAAqgF,kBAAAr8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GAEA,YAAA3/E,KAAA0+E,aACAsB,EAAAhgF,KAAAsgF,cAAAt8E,EAAAi8E,EAAAC,EAAAR,EAAAC,IAEA37E,EAAA4O,UAAAotE,GAYAG,WAAA,SAAAn8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GACA,IAGAY,EAAAvhF,EAHA4T,EAAA5O,EAAA4O,UACA4tE,GAAA,EAAAC,GAAA,EAAAC,EAAA,GAAAT,EACAU,EADA,GACAT,EAAA9hF,EAAAX,EAAA0vE,cAAA/uE,UACAwwE,EAAA,EAAAC,EAAA,EAAA+R,EAAAX,EAAAY,EAAA,EAgBA,IAfAziF,EAAA+hF,aACA/hF,EAAA+hF,WAAAxiF,SAAAqP,cAAA,aAEAuzE,EAAAniF,EAAA+hF,YACA5gF,MAAA,IAAA0gF,GAAAM,EAAAphF,OAAA+gF,KACAK,EAAAhhF,MAAA,IAAA0gF,EACAM,EAAAphF,OAAA+gF,IAEAlhF,EAAAuhF,EAAAthF,WAAA,OACAgvC,UAAA,EAAA,EAAA,IAAAgyC,EAAAC,GACAlhF,EAAAyB,aAAAmS,EAAA,EAAA,GAEA8sE,EAAAj3E,EAAAi3E,GACAC,EAAAl3E,EAAAk3E,IAEAa,IAAAC,GACAR,EAAAS,EACAR,EAAAS,EACAjB,EAAAj3E,EArBA,GAqBAi4E,GACAA,EAAAj4E,EAtBA,GAsBAi4E,IAGAA,EAAAhB,EACAc,GAAA,GAEAb,EAAAl3E,EA5BA,GA4BAk4E,GACAA,EAAAl4E,EA7BA,GA6BAk4E,IAGAA,EAAAhB,EACAc,GAAA,GAEAzhF,EAAAM,UAAAihF,EAAA3R,EAAAC,EAAAoR,EAAAC,EAAAU,EAAAC,EAAAH,EAAAC,GACA/R,EAAAgS,EACA/R,EAAAgS,EACAA,GAAAF,EAEA,OAAA3hF,EAAA6T,aAAA+7D,EAAAC,EAAA6Q,EAAAC,IAYAW,cAAA,SAAAt8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GAqDA,IAAAmB,EAAA98E,EAAA4O,UAAAG,KACAguE,EAAA/8E,EAAAhF,IAAA07E,gBAAAgF,EAAAC,GACAqB,EAAAD,EAAAhuE,KACAkuE,EAAAjhF,KAAAu/E,cAAAv/E,KAAA2+E,cACAuC,EAAAlhF,KAAA8/E,UAAAqB,EAAAnhF,KAAA+/E,UACAqB,EAAA,EAAAphF,KAAA8/E,UAAAuB,EAAA,EAAArhF,KAAA+/E,UACAuB,EAAA/qE,EAAA2qE,EAAAlhF,KAAA2+E,aAAA,GACA4C,EAAAhrE,EAAA4qE,EAAAnhF,KAAA2+E,aAAA,GACA6C,KAAA7wC,KAAA8wC,KAEA,OA7DA,SAAAC,EAAAC,GACA,IAAAz4E,EAAAhF,EAAA09E,EAAAr5E,EAAAoC,EAAA43B,EAAAjE,EACA9C,EAAArB,EAAA0nD,EAAAC,EACAnxC,EAAAtnC,GAAAs4E,EAAA,IAAAT,EACAO,EAAAp4E,EAAAZ,EAAAkoC,EAAAtnC,GACA,IAAAH,EAAA,EAAAA,EAAAy2E,EAAAz2E,IAAA,CAIA,IAHAynC,EAAArnC,GAAAJ,EAAA,IAAAi4E,EACAM,EAAAn4E,EAAAb,EAAAkoC,EAAArnC,GACAqB,EAAA,EAAA43B,EAAA,EAAAjE,EAAA,EAAA9C,EAAA,EAAArB,EAAA,EACAj2B,EAAAu9E,EAAAp4E,EAAAi4E,EAAAp9E,GAAAu9E,EAAAp4E,EAAAi4E,EAAAp9E,IACA,KAAAA,EAAA,GAAAA,GAAA+7E,GAAA,CAGA4B,EAAAp5E,EAAA,IAAA4M,EAAAnR,EAAAysC,EAAAtnC,IACAm4E,EAAAK,KACAL,EAAAK,OAEA,IAAA,IAAAlpE,EAAA8oE,EAAAn4E,EAAAi4E,EAAA5oE,GAAA8oE,EAAAn4E,EAAAi4E,EAAA5oE,IACAA,EAAA,GAAAA,GAAAunE,IAGA4B,EAAAr5E,EAAA,IAAA4M,EAAAsD,EAAAg4B,EAAArnC,IACAk4E,EAAAK,GAAAC,KACAN,EAAAK,GAAAC,GAAAb,EAAAtkF,EAAAE,EAAAglF,EAAAT,EAAA,GAAAvkF,EAAAilF,EAAAT,EAAA,IAAA,OAEAO,EAAAJ,EAAAK,GAAAC,IACA,IAEAn3E,GAAAi3E,EACAr/C,GAAAq/C,EAAAd,EAFAv4E,EAAA,GAAAoQ,EAAAsnE,EAAA/7E,IAGAo6B,GAAAsjD,EAAAd,EAAAv4E,EAAA,GACAizB,GAAAomD,EAAAd,EAAAv4E,EAAA,GACA4xB,GAAAynD,EAAAd,EAAAv4E,EAAA,KAKAy4E,EADAz4E,EAAA,GAAAW,EAAAw2E,EAAAiC,IACAp/C,EAAA53B,EACAq2E,EAAAz4E,EAAA,GAAA+1B,EAAA3zB,EACAq2E,EAAAz4E,EAAA,GAAAizB,EAAA7wB,EACAq2E,EAAAz4E,EAAA,GAAA4xB,EAAAxvB,EAGA,QAAAg3E,EAAAjC,EACAgC,EAAAC,GAGAZ,EAcAW,CAAA,IAYArB,kBAAA,SAAAr8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GACA,IAAAh1E,EAAAkG,EAAAsH,EAAAyL,EAAAva,EAAAC,EAAApF,EAAAyU,EAAAopE,EAAAC,EAAAC,EACA37D,EAAA47D,EAAAtgE,EAAA,EAAAs/D,EAAAlhF,KAAA8/E,UACAqB,EAAAnhF,KAAA+/E,UACAoC,EAAA,GAAAlC,EAAA,GAAA1zE,EAAAvI,EAAA4O,UACAwvE,EAAA71E,EAAAwG,KAAAsvE,EAAAr+E,EAAAhF,IAAA07E,gBAAAgF,EAAAC,GACA2C,EAAAD,EAAAtvE,KACA,IAAA7O,EAAA,EAAAA,EAAAy7E,EAAAz7E,IACA,IAAAyU,EAAA,EAAAA,EAAA+mE,EAAA/mE,IAOA,IANAtP,EAAAZ,EAAAy4E,EAAAvoE,GACArP,EAAAb,EAAA04E,EAAAj9E,GACA69E,EAAAb,EAAAvoE,EAAAtP,EACA24E,EAAAb,EAAAj9E,EAAAoF,EACA44E,EAAA,GAAA54E,EAAA22E,EAAA52E,GAEA44E,EAAA,EAAAA,EAAA,EAAAA,IACAt3E,EAAAy3E,EAAAF,EAAAD,GACApxE,EAAAuxE,EAAAF,EAAA,EAAAD,GACA9pE,EAAAiqE,EAAAF,EAAAC,EAAAF,GACAr+D,EAAAw+D,EAAAF,EAAAC,EAAA,EAAAF,GACA37D,EAAA3b,GAAA,EAAAo3E,IAAA,EAAAC,GAAAnxE,EAAAkxE,GAAA,EAAAC,GACA7pE,EAAA6pE,GAAA,EAAAD,GAAAn+D,EAAAm+D,EAAAC,EACAM,EAAA1gE,KAAA0E,EAIA,OAAA+7D,GAYAjC,kBAAA,SAAAp8E,EAAAi8E,EAAAC,EAAAR,EAAAC,GAMA,IALA,IAAA4C,EAAAviF,KAAA8/E,UAAA0C,EAAAxiF,KAAA+/E,UACA0C,EAAAlsE,EAAAgsE,EAAA,GACAG,EAAAnsE,EAAAisE,EAAA,GACAj2E,EAAAvI,EAAA4O,UAAAG,EAAAxG,EAAAwG,KACA4vE,EAAA3+E,EAAAhF,IAAA07E,gBAAAgF,EAAAC,GAAAiD,EAAAD,EAAA5vE,KACA4F,EAAA,EAAAA,EAAAgnE,EAAAhnE,IACA,IAAA,IAAAzU,EAAA,EAAAA,EAAAw7E,EAAAx7E,IAAA,CAGA,IAFA,IAAAkL,EAAA,GAAAlL,EAAAyU,EAAA+mE,GAAAkC,EAAA,EAAAxH,EAAA,EAAAyI,EAAA,EACAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GAAAvqE,EAAA,IAAA6pE,EACAW,EAAA16E,EAAAkQ,EAAA6pE,GAAAW,GAAAxqE,EAAA,GAAA6pE,EAAAW,IAGA,IAFA,IAAA3zE,EAAA6F,EAAA6tE,GAAAC,EAAA,KAAAT,EACAU,GAAAl/E,EAAA,IAAAq+E,EAAAc,EAAA7zE,EAAAA,EACAqwE,EAAAp3E,EAAAvE,EAAAq+E,GAAA1C,GAAA37E,EAAA,GAAAq+E,EAAA1C,IAAA,CACA,IAAAtwE,EAAA8F,EAAA+tE,GAAAvD,EAAA,KAAA4C,EACAh/B,EAAA9mD,EAAA0mF,EAAA9zE,EAAAA,GAEAk0C,EAAA,GAAAA,GAAA,IAIAm+B,EAAA,EAAAn+B,EAAAA,EAAAA,EAAA,EAAAA,EAAAA,EAAA,GACA,IAGAw/B,GAAArB,EAAA7uE,GAFAxD,EAAA,GAAAswE,EAAAsD,EAAAlD,IAEA,GACA4C,GAAAjB,EAEA7uE,EAAAxD,EAAA,GAAA,MACAqyE,EAAAA,EAAA7uE,EAAAxD,EAAA,GAAA,KAEAuzE,GAAAlB,EAAA7uE,EAAAxD,GACAwzE,GAAAnB,EAAA7uE,EAAAxD,EAAA,GACAyzE,GAAApB,EAAA7uE,EAAAxD,EAAA,GACA6qE,GAAAwH,GAKAgB,EAAAxzE,GAAA0zE,EAAA1I,EACAwI,EAAAxzE,EAAA,GAAA2zE,EAAA3I,EACAwI,EAAAxzE,EAAA,GAAA4zE,EAAA5I,EACAwI,EAAAxzE,EAAA,GAAA6zE,EAAAJ,EAGA,OAAAF,GAOAh9C,SAAA,WACA,OACA9/B,KAAA7F,KAAA6F,KACAoL,OAAAjR,KAAAiR,OACAC,OAAAlR,KAAAkR,OACAwtE,WAAA1+E,KAAA0+E,WACAC,aAAA3+E,KAAA2+E,iBAYAlhF,EAAA62B,MAAAm4C,QAAAgS,OAAA1wE,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAveA,CAyeA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAA6W,SAAAnnE,EAAAswD,EAAAwI,YAOApvE,KAAA,WAEAoqE,eAAA,8TAWAsT,SAAA,EAEAjM,cAAA,WAeAE,UAAA,SAAAxzE,GACA,GAAA,IAAAhE,KAAAujF,SAAA,CAGA,IAAAr/E,EAAA0O,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KAAA5O,EAAA4O,EAAAtP,OACA8/E,EAAAx7E,KAAAU,MAAA,IAAAzI,KAAAujF,UACAC,EAAA,KAAAD,EAAA,MAAA,KAAA,IAAAA,IAEA,IAAAr/E,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACA6O,EAAA7O,GAAAs/E,GAAAzwE,EAAA7O,GAAA,KAAA,IACA6O,EAAA7O,EAAA,GAAAs/E,GAAAzwE,EAAA7O,EAAA,GAAA,KAAA,IACA6O,EAAA7O,EAAA,GAAAs/E,GAAAzwE,EAAA7O,EAAA,GAAA,KAAA,MAUA8xE,oBAAA,SAAAr3E,EAAA42E,GACA,OACAkO,UAAA9kF,EAAAu3E,mBAAAX,EAAA,eAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAi5E,UAAA7B,EAAA0N,UAAAzjF,KAAAujF,aAWA9lF,EAAA62B,MAAAm4C,QAAA6W,SAAAv1E,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAzGA,CA2GA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAAiX,WAAAvnE,EAAAswD,EAAAwI,YAOApvE,KAAA,aAEAoqE,eAAA,weAcA0T,WAAA,EAEArM,cAAA,aAeAE,UAAA,SAAAxzE,GACA,GAAA,IAAAhE,KAAA2jF,WAAA,CAGA,IAEAz/E,EAAAhH,EAFA0V,EAAA5O,EAAA4O,UACAG,EAAAH,EAAAG,KAAA5O,EAAA4O,EAAAtP,OACAmgF,GAAA5jF,KAAA2jF,WAEA,IAAAz/E,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACAhH,EAAA6K,KAAA7K,IAAA6V,EAAA7O,GAAA6O,EAAA7O,EAAA,GAAA6O,EAAA7O,EAAA,IACA6O,EAAA7O,IAAAhH,IAAA6V,EAAA7O,IAAAhH,EAAA6V,EAAA7O,IAAA0/E,EAAA,EACA7wE,EAAA7O,EAAA,IAAAhH,IAAA6V,EAAA7O,EAAA,IAAAhH,EAAA6V,EAAA7O,EAAA,IAAA0/E,EAAA,EACA7wE,EAAA7O,EAAA,IAAAhH,IAAA6V,EAAA7O,EAAA,IAAAhH,EAAA6V,EAAA7O,EAAA,IAAA0/E,EAAA,IAUA5N,oBAAA,SAAAr3E,EAAA42E,GACA,OACAsO,YAAAllF,EAAAu3E,mBAAAX,EAAA,iBAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAi5E,UAAA7B,EAAA8N,aAAA7jF,KAAA2jF,eAWAlmF,EAAA62B,MAAAm4C,QAAAiX,WAAA31E,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WA5GA,CA8GA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAiBAswD,EAAAqX,KAAA3nE,EAAAswD,EAAAwI,YAEApvE,KAAA,OAsBAoqE,eAAA,mnBA6BAjoC,KAAA,EAEAsvC,cAAA,OAEAlE,QAAA,SAAApvE,GACAA,EAAA6uE,OAEA7yE,KAAA+jF,YAAA//E,EAAAoqE,YAAApqE,EAAAqqE,aACArqE,EAAA4uE,SACA5yE,KAAAi3E,kBAAAjzE,GACAhE,KAAA++E,YAAA,EACA/+E,KAAAu3E,aAAAvzE,GACAhE,KAAAo3E,cAAApzE,GACAhE,KAAAi3E,kBAAAjzE,GACAhE,KAAA++E,YAAA,EACA/+E,KAAAu3E,aAAAvzE,GACAhE,KAAAo3E,cAAApzE,IAGAhE,KAAAw3E,UAAAxzE,IAIAwzE,UAAA,SAAAxzE,GAGAA,EAAA4O,UAAA5S,KAAAgkF,WAAAhgF,IAGAggF,WAAA,SAAAhgF,GACA,IAAAm6E,EAAA8F,EAAA7lF,EAAA4F,EAAAmpE,cAAA/uE,UACAmB,EAAAyE,EAAA4O,UAAArT,MACAJ,EAAA6E,EAAA4O,UAAAzT,OAEAf,EAAA8lF,aACA9lF,EAAA8lF,WAAAzmF,EAAA2F,KAAA6M,sBACA7R,EAAA+lF,WAAA1mF,EAAA2F,KAAA6M,uBAEAkuE,EAAA//E,EAAA8lF,WACAD,EAAA7lF,EAAA+lF,WACAhG,EAAA5+E,QAAAA,GAAA4+E,EAAAh/E,SAAAA,IACA8kF,EAAA1kF,MAAA4+E,EAAA5+E,MAAAA,EACA0kF,EAAA9kF,OAAAg/E,EAAAh/E,OAAAA,GAEA,IAGAuJ,EAAA07E,EAAAzrE,EAAAzU,EAHAmgF,EAAAlG,EAAAl/E,WAAA,MACAqlF,EAAAL,EAAAhlF,WAAA,MAGA+oC,EAAA,IAAAhoC,KAAAgoC,KAAA,GAMA,IAHAq8C,EAAA5jF,aAAAuD,EAAA4O,UAAA,EAAA,GACA0xE,EAAAr2C,UAAA,EAAA,EAAA1uC,EAAAJ,GAEA+E,GARA,GAQAA,GARA,GAQAA,IACAwE,GAAAX,KAAAW,SAAA,IAAA,EAEAiQ,EAAAqvB,GADAo8C,EAAAlgF,EAVA,IAWA3E,EAAAmJ,EACA47E,EAAAvqC,YAAA,EAAAhyC,KAAAsN,IAAA+uE,GACAE,EAAAhlF,UAAA6+E,EAAAxlE,EAAAjQ,GACA27E,EAAA/kF,UAAA2kF,EAAA,EAAA,GACAK,EAAAvqC,YAAA,EACAuqC,EAAAr2C,UAAA,EAAA,EAAAg2C,EAAA1kF,MAAA0kF,EAAA9kF,QAEA,IAAA+E,GAlBA,GAkBAA,GAlBA,GAkBAA,IACAwE,GAAAX,KAAAW,SAAA,IAAA,EAEAiQ,EAAAqvB,GADAo8C,EAAAlgF,EApBA,IAqBA/E,EAAAuJ,EACA47E,EAAAvqC,YAAA,EAAAhyC,KAAAsN,IAAA+uE,GACAE,EAAAhlF,UAAA6+E,EAAAz1E,EAAAiQ,GACA0rE,EAAA/kF,UAAA2kF,EAAA,EAAA,GACAK,EAAAvqC,YAAA,EACAuqC,EAAAr2C,UAAA,EAAA,EAAAg2C,EAAA1kF,MAAA0kF,EAAA9kF,QAEA6E,EAAAhF,IAAAM,UAAA6+E,EAAA,EAAA,GACA,IAAAoG,EAAAvgF,EAAAhF,IAAA6T,aAAA,EAAA,EAAAsrE,EAAA5+E,MAAA4+E,EAAAh/E,QAGA,OAFAklF,EAAAtqC,YAAA,EACAsqC,EAAAp2C,UAAA,EAAA,EAAAkwC,EAAA5+E,MAAA4+E,EAAAh/E,QACAolF,GASAvO,oBAAA,SAAAr3E,EAAA42E,GACA,OACAiP,MAAA7lF,EAAAu3E,mBAAAX,EAAA,YAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACA,IAAAyO,EAAAxkF,KAAAykF,mBACA9lF,EAAAmgF,WAAA/I,EAAAyO,MAAAA,IAOAC,iBAAA,WACA,IAAAz8C,EAAA08C,EAAA,EAAAF,GAAA,EAAA,GAoBA,OAnBAxkF,KAAA++E,WACA/+E,KAAA+jF,YAAA,IAEAW,EAAA,EAAA1kF,KAAA+jF,aAIA/jF,KAAA+jF,YAAA,IAEAW,EAAA1kF,KAAA+jF,aAGA/7C,EAAA08C,EAAA1kF,KAAAgoC,KAAA,IACAhoC,KAAA++E,WACAyF,EAAA,GAAAx8C,EAGAw8C,EAAA,GAAAx8C,EAEAw8C,KAOA/X,EAAAqX,KAAA/1E,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WApNA,CAsNA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAAkY,MAAAxoE,EAAAswD,EAAAwI,YAOApvE,KAAA,QAEAoqE,eAAA,kXAmBA2U,OAAA,EAAA,EAAA,GAOAtN,cAAA,QAMAj7D,WAAA,SAAArY,GACAhE,KAAA4kF,OAAA,EAAA,EAAA,GACAnY,EAAAwI,WAAAhmE,UAAAoN,WAAAvY,KAAA9D,KAAAgE,IASAwzE,UAAA,SAAAxzE,GACA,IAGAE,EAHA0O,EAAA5O,EAAA4O,UAAAG,EAAAH,EAAAG,KACA6xE,EAAA5kF,KAAA4kF,MAAAzgF,EAAA4O,EAAAtP,OACAohF,EAAA,EAAAD,EAAA,GAAAE,EAAA,EAAAF,EAAA,GACAG,EAAA,EAAAH,EAAA,GAaA,IAXA5kF,KAAAglF,QAEAhlF,KAAAglF,MAAA,IAAAjlF,WAAA,KAEAC,KAAAilF,MAAA,IAAAllF,WAAA,KAEAC,KAAAklF,MAAA,IAAAnlF,WAAA,MAKAmE,EAAA,EAAAC,EAAA,IAAAD,EAAAC,EAAAD,IACAlE,KAAAglF,MAAA9gF,GAAA,IAAA6D,KAAAlL,IAAAqH,EAAA,IAAA2gF,GACA7kF,KAAAilF,MAAA/gF,GAAA,IAAA6D,KAAAlL,IAAAqH,EAAA,IAAA4gF,GACA9kF,KAAAklF,MAAAhhF,GAAA,IAAA6D,KAAAlL,IAAAqH,EAAA,IAAA6gF,GAEA,IAAA7gF,EAAA,EAAAC,EAAA4O,EAAAtP,OAAAS,EAAAC,EAAAD,GAAA,EACA6O,EAAA7O,GAAAlE,KAAAglF,MAAAjyE,EAAA7O,IACA6O,EAAA7O,EAAA,GAAAlE,KAAAilF,MAAAlyE,EAAA7O,EAAA,IACA6O,EAAA7O,EAAA,GAAAlE,KAAAklF,MAAAnyE,EAAA7O,EAAA,KAUA8xE,oBAAA,SAAAr3E,EAAA42E,GACA,OACA4P,OAAAxmF,EAAAu3E,mBAAAX,EAAA,YAUAsC,gBAAA,SAAAl5E,EAAAo3E,GACAp3E,EAAAymF,WAAArP,EAAAoP,OAAAnlF,KAAA4kF,UAWAnnF,EAAA62B,MAAAm4C,QAAAkY,MAAA52E,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WArIA,CAuIA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAKAswD,EAAA4Y,SAAAlpE,EAAAswD,EAAAwI,YAEApvE,KAAA,WAKAy/E,cAMAjpE,WAAA,SAAArY,GACAhE,KAAA8b,UAAA,aAAA9X,GAEAhE,KAAAslF,WAAAtlF,KAAAslF,WAAAx5E,MAAA,IASAsnE,QAAA,SAAApvE,GACAA,EAAA4uE,QAAA5yE,KAAAslF,WAAA7hF,OAAA,EACAzD,KAAAslF,WAAAz3E,QAAA,SAAAzJ,GACAA,EAAAgvE,QAAApvE,MASA2hC,SAAA,WACA,OAAAloC,EAAA2F,KAAA6B,OAAAgV,OAAAja,KAAA8b,UAAA,aACAwpE,WAAAtlF,KAAAslF,WAAAlxE,IAAA,SAAAhQ,GAAA,OAAAA,EAAAuhC,gBAIA2oC,eAAA,WACA,OAAAtuE,KAAAslF,WAAAC,KAAA,SAAAnhF,GAAA,OAAAA,EAAAkqE,sBAOA7wE,EAAA62B,MAAAm4C,QAAA4Y,SAAAt3E,WAAA,SAAA9I,EAAAS,GACA,IAAA+mE,EAAAxnE,EAAAqgF,eACAA,EAAA7Y,EAAAr4D,IAAA,SAAAhQ,GACA,OAAA,IAAA3G,EAAA62B,MAAAm4C,QAAAroE,EAAAyB,MAAAzB,KAEA4gC,EAAA,IAAAvnC,EAAA62B,MAAAm4C,QAAA4Y,UAAAC,WAAAA,IAEA,OADA5/E,GAAAA,EAAAs/B,GACAA,GArEA,CAuEA,oBAAAl9B,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAgvE,EAAAhvE,EAAA62B,MAAAm4C,QACAtwD,EAAA1e,EAAA2F,KAAA+Y,YAgBAswD,EAAA+Y,YAAArpE,EAAAswD,EAAAkM,aAOA9yE,KAAA,cAQA4/E,SAAA,EAOAnO,cAAA,WAEA4G,gBAAA,WACA,IAAAwH,EAAA1lF,KAAAylF,SAAA19E,KAAAC,GAAAC,EAAAxK,EAAA2F,KAAA6E,IAAAy9E,GAAAt9E,EAAA3K,EAAA2F,KAAAgF,IAAAs9E,GACAC,EAAA59E,KAAApL,KAAA,EAAA,GAAAyL,EAAAw9E,EAAA,EAAA39E,EACAjI,KAAAgS,QACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAEAhS,KAAAgS,OAAA,GAAA/J,EAAA29E,EAAA,EACA5lF,KAAAgS,OAAA,GARA,EAAA,EAQA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,GATA,EAAA,EASA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,GAVA,EAAA,EAUA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,GAAA/J,EAXA,EAAA,EAWA29E,EACA5lF,KAAAgS,OAAA,GAZA,EAAA,EAYA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,IAbA,EAAA,EAaA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,IAdA,EAAA,EAcA4zE,EAAAD,EACA3lF,KAAAgS,OAAA,IAAA/J,EAfA,EAAA,EAeA29E,GASAtX,eAAA,SAAAtqE,GAEA,OADAhE,KAAAk+E,kBACAzR,EAAAwI,WAAAhmE,UAAAq/D,eAAAxqE,KAAA9D,KAAAgE,IAgBAovE,QAAA,SAAApvE,GACAhE,KAAAk+E,kBACAzR,EAAAwI,WAAAhmE,UAAAmkE,QAAAtvE,KAAA9D,KAAAgE,MAYAvG,EAAA62B,MAAAm4C,QAAA+Y,YAAAz3E,WAAAtQ,EAAA62B,MAAAm4C,QAAAwI,WAAAlnE,WAxGA,CA0GA,oBAAAjG,QAAAA,QAAA9H,MAGA,SAAAtD,GAEA,aAEA,IAAAe,EAAAf,EAAAe,SAAAf,EAAAe,WACAH,EAAAG,EAAA2F,KAAA6B,OAAA3H,MAEAG,EAAA4N,KACA5N,EAAAgmB,KAAA,mCAYAhmB,EAAA4N,KAAA5N,EAAA2F,KAAA+Y,YAAA1e,EAAAuR,QAOA62E,0BACA,WACA,aACA,aACA,YACA,aACA,OACA,cACA,YACA,UAMAC,WAAA,QAOAC,iBAAA,WAOAC,eAAA,UAOAC,SAAA,OAOApgF,KAAA,OAOAqF,SAAA,GAOA0lB,WAAA,SAOAnd,WAAA,kBAOAguD,WAAA,EAOAD,UAAA,EAOAE,aAAA,EAQAwkB,UAAA,OAOAv1D,UAAA,SAOAE,WAAA,KAOAs1D,aACAjgF,KAAA,GACAkgF,UAAA,KAQAC,WACAngF,KAAA,GACAkgF,SAAA,KAQAE,oBAAA,GAQA5xB,gBAAAj3D,EAAAuR,OAAAC,UAAAylD,gBAAA5uD,OAAA,aACA,aACA,WACA,OACA,YACA,WACA,cACA,YACA,YACA,aACA,sBACA,cACA,UAMA6uD,gBAAAl3D,EAAAuR,OAAAC,UAAA0lD,gBAAA7uD,OAAA,aACA,aACA,WACA,OACA,YACA,WACA,cACA,YACA,YACA,aACA,sBACA,cACA,UAQAskB,OAAA,KAQAie,OAAA,KAKAk+C,kBAAA,KAKA/G,SACA/d,UAAA,GACAC,aAAA,KACAF,UAAA,KAQAglB,cAAA,KAQAC,YAAA,EAQAroE,OAAA,KAUAsoE,kBAAA,KAOAnlB,OAAA,EAOAolB,kBACA,SACA,cACA,OACA,aACA,WACA,aACA,YACA,YACA,WACA,cACA,SACA,uBAMAC,gBASAC,gBAAA,IAOAC,eAAA,EAQAzqE,WAAA,SAAAsW,EAAA3uB,GACAhE,KAAAoe,OAAApa,GAAAA,EAAAoa,WACApe,KAAA2yB,KAAAA,EACA3yB,KAAA+mF,iBAAA,EACA/mF,KAAA8b,UAAA,aAAA9X,GACAhE,KAAA+mF,iBAAA,EACA/mF,KAAAgnF,iBACAhnF,KAAAstC,YACAttC,KAAA+tC,YAAA+pB,YAAA,8BAUAmvB,oBAAA,WAMA,OAJAxpF,EAAAipF,oBACAjpF,EAAAipF,kBAAA1mF,KAAAlB,QAAAkB,KAAAlB,OAAA+/C,cACAphD,EAAA2F,KAAA6M,sBAAAhR,WAAA,OAEAxB,EAAAipF,mBAOAQ,WAAA,WACA,IAAAC,EAAAnnF,KAAAonF,oBAAApnF,KAAA2yB,MAKA,OAJA3yB,KAAAqnF,UAAAF,EAAA5oB,MACAv+D,KAAAsnF,WAAAH,EAAAI,cACAvnF,KAAAwnF,oBAAAL,EAAAM,gBACAznF,KAAA0nF,MAAAP,EAAAQ,aACAR,GAQAH,eAAA,WACAhnF,KAAA+mF,kBAGA/mF,KAAAknF,aACAlnF,KAAA4nF,cACA5nF,KAAAT,MAAAS,KAAA6nF,iBAAA7nF,KAAA8nF,aAAA9nF,KAAA8mF,gBACA,IAAA9mF,KAAAkmF,UAAA/iF,QAAA,YAEAnD,KAAA+nF,gBAEA/nF,KAAAb,OAAAa,KAAAgoF,iBACAhoF,KAAAouD,WAAA0J,YAAA,+BAMAiwB,cAAA,WAEA,IADA,IAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACArkF,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IACA,IAAA,YAAAlE,KAAAkmF,WAAAhiF,IAAAC,EAAA,IAAAnE,KAAAwoF,gBAAAtkF,MAGAkkF,EAAA,EACAC,EAAAroF,KAAAsnF,WAAApjF,IACAgkF,EAAAloF,KAAAyoF,aAAAvkF,IACAlE,KAAAT,QAAAgpF,EAAAvoF,KAAAqnF,UAAAnjF,GAAAqO,MAAAvS,KAAA+lF,oBAAA,CACAoC,EAAAI,EAAA9kF,OACAwkF,GAAAjoF,KAAAT,MAAA2oF,GAAAC,EACA,IAAA,IAAAxvE,EAAA,EAAAC,EAAAyvE,EAAA5kF,OAAAkV,GAAAC,EAAAD,IACA2vE,EAAAtoF,KAAA4mF,aAAA1iF,GAAAyU,GACA3Y,KAAAgmF,eAAA9nE,KAAAmqE,EAAA1vE,KACA2vE,EAAA/oF,OAAA0oF,EACAK,EAAAI,aAAAT,EACAK,EAAA99E,MAAA49E,EACAA,GAAAH,GAGAK,EAAA99E,MAAA49E,IAYAI,gBAAA,SAAAG,GACA,OAAAA,IAAA3oF,KAAAsnF,WAAA7jF,OAAA,GASAmlF,qBAAA,WACA,OAAA,GAOA15E,SAAA,WACA,MAAA,kBAAAlP,KAAAoG,aACA,iBAAApG,KAAA2yB,KAAA,qBAAA3yB,KAAAyT,WAAA,QAcA2hD,0BAAA,WACA,IAAAH,EAAAj1D,KAAA8b,UAAA,6BACA5Q,EAAAlL,KAAAkL,SAGA,OAFA+pD,EAAA11D,OAAA2L,EAAA+pD,EAAAvlB,MACAulB,EAAA91D,QAAA+L,EAAA+pD,EAAAtlB,MACAslB,GAOAte,QAAA,SAAA33C,GACAgB,KAAA6oF,eAAA7pF,GACAgB,KAAA8oF,2BAAA9pF,GACAgB,KAAA+oF,sBAAA/pF,EAAA,aACAgB,KAAAgpF,YAAAhqF,GACAgB,KAAA+oF,sBAAA/pF,EAAA,YACAgB,KAAA+oF,sBAAA/pF,EAAA,gBAOAgqF,YAAA,SAAAhqF,GACA,WAAAgB,KAAAy0D,YACAz0D,KAAAipF,kBAAAjqF,GACAgB,KAAAkpF,gBAAAlqF,KAGAgB,KAAAkpF,gBAAAlqF,GACAgB,KAAAipF,kBAAAjqF,KAcA6pF,eAAA,SAAA7pF,EAAAmqF,EAAAC,GACApqF,EAAAqqF,aAAA,aACArqF,EAAAyyB,KAAAzxB,KAAAspF,oBAAAH,EAAAC,IASAvB,cAAA,WAGA,IAFA,IAAA0B,EAAAvpF,KAAAyoF,aAAA,GAEAvkF,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAgkF,EAAAloF,KAAAyoF,aAAAvkF,GACAgkF,EAAAqB,IACAA,EAAArB,GAGA,OAAAqB,GAYAC,gBAAA,SAAA3vE,EAAA7a,EAAAqpF,EAAA79E,EAAAC,EAAAk+E,GACA3oF,KAAAypF,aAAA5vE,EAAA7a,EAAAqpF,EAAA79E,EAAAC,EAAAk+E,IAQAG,2BAAA,SAAA9pF,GACA,GAAAgB,KAAAsmF,qBAAAtmF,KAAA0pF,SAAA,uBAAA,CAUA,IAPA,IAAAC,EACAC,EACAvB,EAAAwB,EAGAC,EAAAC,EALAC,EAAA,EACA1xB,EAAAt5D,EAAAoxC,UAEA65C,EAAAjqF,KAAAkqF,iBACAC,EAAAnqF,KAAAoqF,gBACAC,EAAA,EAAAC,EAAA,EAEApmF,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IAEA,GADAylF,EAAA3pF,KAAAuqF,gBAAArmF,GACAlE,KAAAsmF,qBAAAtmF,KAAA0pF,SAAA,sBAAAxlF,GAAA,CAIAmkF,EAAAroF,KAAAsnF,WAAApjF,GACA0lF,EAAA5pF,KAAAwqF,mBAAAtmF,GACAomF,EAAA,EACAD,EAAA,EACAR,EAAA7pF,KAAAyqF,qBAAAvmF,EAAA,EAAA,uBACA,IAAA,IAAAyU,EAAA,EAAAC,EAAAyvE,EAAA5kF,OAAAkV,EAAAC,EAAAD,IACAmxE,EAAA9pF,KAAA4mF,aAAA1iF,GAAAyU,IACAoxE,EAAA/pF,KAAAyqF,qBAAAvmF,EAAAyU,EAAA,0BACAkxE,GACA7qF,EAAAoxC,UAAAy5C,EACAA,GAAA7qF,EAAAg7C,SACAiwC,EAAAL,EAAAS,EACAF,EAAAH,EACAM,EACAX,EAAA3pF,KAAA6wB,YAEAw5D,EAAAP,EAAAt/E,KACA8/E,EAAAR,EAAAvqF,MACAsqF,EAAAE,GAGAO,GAAAR,EAAApB,YAGAqB,IACA/qF,EAAAoxC,UAAA25C,EACA/qF,EAAAg7C,SACAiwC,EAAAL,EAAAS,EACAF,EAAAH,EACAM,EACAX,EAAA3pF,KAAA6wB,aAGAm5D,GAAAL,OApCAK,GAAAL,EAsCA3qF,EAAAoxC,UAAAkoB,EAGAt4D,KAAA84D,cAAA95D,KAWA0rF,aAAA,SAAA3xB,GACA,IAAAtlD,EAAAslD,EAAAtlD,WAAAC,cACAjW,EAAAiE,gBAAA+R,KACAhW,EAAAiE,gBAAA+R,OAEA,IAAA4sD,EAAA5iE,EAAAiE,gBAAA+R,GACAk3E,EAAA5xB,EAAApoC,UAAAjd,cAAA,KAAAqlD,EAAAnoC,WAAA,IAAAld,cAIA,OAHA2sD,EAAAsqB,KACAtqB,EAAAsqB,OAEAtqB,EAAAsqB,IAWAC,iBAAA,SAAA/wE,EAAA7a,EAAA2pF,EAAA71C,EAAA+3C,GAEA7qF,KAAA04D,eAAA15D,EAAA6rF,GACA7qF,KAAAy4D,iBAAAz5D,EAAA6rF,GAEA7rF,EAAAyyB,KAAAzxB,KAAAspF,oBAAAuB,IAaAC,aAAA,SAAAj4C,EAAAs2C,EAAA4B,EAAAC,GAEA,IAEAzrF,EAAA0rF,EAAAC,EACAxC,EAHAyC,EAAAnrF,KAAA0qF,aAAAvB,GAAAiC,EAAAprF,KAAAspF,oBAAAH,GACAkC,EAAArrF,KAAAspF,oBAAA0B,GAAAM,EAAAP,EAAAl4C,EACA04C,EAAAH,IAAAC,EACAG,EAAArC,EAAAj+E,SAAAlL,KAAA6mF,gBAYA,GAVAkE,QAAA9qE,IAAAkrE,EAAAJ,KACAG,EAAAC,EAAAJ,SAEA9qE,IAAAkrE,EAAAt4C,KACA61C,EAAAnpF,EAAA4rF,EAAAt4C,IAEA04C,QAAAtrE,IAAAkrE,EAAAG,KACAL,EAAAE,EAAAG,GACA5C,EAAAuC,EAAAC,QAEAjrE,IAAA1gB,QAAA0gB,IAAAirE,QAAAjrE,IAAAgrE,EAAA,CACA,IAAAjsF,EAAAgB,KAAAinF,sBAEAjnF,KAAA6oF,eAAA7pF,EAAAmqF,GAAA,GAgBA,YAdAlpE,IAAA1gB,IACAmpF,EAAAnpF,EAAAP,EAAAysF,YAAA54C,GAAAtzC,MACA4rF,EAAAt4C,GAAAtzC,QAEA0gB,IAAAirE,GAAAK,GAAAR,IACAG,EAAAlsF,EAAAysF,YAAAV,GAAAxrF,MACA4rF,EAAAJ,GAAAG,GAEAK,QAAAtrE,IAAAgrE,IAEAA,EAAAjsF,EAAAysF,YAAAH,GAAA/rF,MACA4rF,EAAAG,GAAAL,EACAvC,EAAAuC,EAAAC,IAEA3rF,MAAAA,EAAAisF,EAAA9C,YAAAA,EAAA8C,IASAE,gBAAA,SAAArD,EAAAx1C,GACA,OAAA7yC,KAAAyqF,qBAAApC,EAAAx1C,EAAA,aAQA84C,YAAA,SAAAhD,GACA,IAAAiD,EAAA5rF,KAAA6rF,aAAAlD,GAOA,OANA,IAAA3oF,KAAAymF,cACAmF,EAAArsF,OAAAS,KAAA8rF,0BAEAF,EAAArsF,MAAA,IACAqsF,EAAArsF,MAAA,GAEAqsF,GASAC,aAAA,SAAAlD,GACA,IAAAzkF,EAAA6nF,EAAAC,EACAC,EADA1sF,EAAA,EAAA8oF,EAAAroF,KAAAsnF,WAAAqB,GACAuD,EAAA,IAAA13E,MAAA6zE,EAAA5kF,QAGA,IADAzD,KAAA4mF,aAAA+B,GAAAuD,EACAhoF,EAAA,EAAAA,EAAAmkF,EAAA5kF,OAAAS,IACA6nF,EAAA1D,EAAAnkF,GACA+nF,EAAAjsF,KAAAmsF,gBAAAJ,EAAApD,EAAAzkF,EAAA8nF,GACAE,EAAAhoF,GAAA+nF,EACA1sF,GAAA0sF,EAAAvD,YACAsD,EAAAD,EAUA,OANAG,EAAAhoF,IACAsG,KAAAyhF,EAAAA,EAAAzhF,KAAAyhF,EAAA1sF,MAAA,EACAA,MAAA,EACAmpF,YAAA,EACAvpF,OAAAa,KAAAkL,WAEA3L,MAAAA,EAAA6sF,YAlBA,IA8BAD,gBAAA,SAAAJ,EAAApD,EAAA71C,EAAAk5C,EAAAK,GACA,IAIA5F,EAJAx5E,EAAAjN,KAAAssF,4BAAA3D,EAAA71C,GACAy5C,EAAAP,EAAAhsF,KAAAssF,4BAAA3D,EAAA71C,EAAA,MACA05C,EAAAxsF,KAAA8qF,aAAAiB,EAAA9+E,EAAA++E,EAAAO,GACA7D,EAAA8D,EAAA9D,YACAnpF,EAAAitF,EAAAjtF,MAEA,IAAAS,KAAAymF,cACAA,EAAAzmF,KAAA8rF,yBACAvsF,GAAAknF,EACAiC,GAAAjC,GAGA,IAAA9kE,GACApiB,MAAAA,EACAiL,KAAA,EACArL,OAAA8N,EAAA/B,SACAw9E,YAAAA,EACAnnB,OAAAt0D,EAAAs0D,QAEA,GAAAzuB,EAAA,IAAAu5C,EAAA,CACA,IAAAI,EAAAzsF,KAAA4mF,aAAA+B,GAAA71C,EAAA,GACAnxB,EAAAnX,KAAAiiF,EAAAjiF,KAAAiiF,EAAAltF,MAAAitF,EAAA9D,YAAA8D,EAAAjtF,MAEA,OAAAoiB,GAQA4oE,gBAAA,SAAA5B,GACA,GAAA3oF,KAAA0sF,cAAA/D,GACA,OAAA3oF,KAAA0sF,cAAA/D,GAOA,IAJA,IAAAN,EAAAroF,KAAAsnF,WAAAqB,GAGAgE,EAAA3sF,KAAA0rF,gBAAA/C,EAAA,GACAzkF,EAAA,EAAAC,EAAAkkF,EAAA5kF,OAAAS,EAAAC,EAAAD,IACAyoF,EAAA5kF,KAAA7K,IAAA8C,KAAA0rF,gBAAA/C,EAAAzkF,GAAAyoF,GAGA,OAAA3sF,KAAA0sF,cAAA/D,GAAAgE,EAAA3sF,KAAA6wB,WAAA7wB,KAAAwmF,eAMAwB,eAAA,WAEA,IADA,IAAAn3D,EAAA1xB,EAAA,EACA+E,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IACA2sB,EAAA7wB,KAAAuqF,gBAAArmF,GACA/E,GAAA+E,IAAAC,EAAA,EAAA0sB,EAAA7wB,KAAA6wB,WAAAA,EAEA,OAAA1xB,GAOA+qF,eAAA,WACA,OAAAlqF,KAAAT,MAAA,GAOA6qF,cAAA,WACA,OAAApqF,KAAAb,OAAA,GAUAs6D,+BAAA,SAAAz6D,EAAA4H,GACA,IAAAA,IAAAA,EAAA8/B,OACA,OAAApB,QAAA,EAAAC,QAAA,GAEA,IAAAD,GAAAtlC,KAAAT,MAAA,EAAAqH,EAAA0+B,SAAA,EACAC,GAAAvlC,KAAAb,OAAA,EAAAyH,EAAA2+B,SAAA,EAGA,OADAvmC,EAAAiL,UAAA,EAAA,EAAA,EAAA,EAAAq7B,EAAAC,IACAD,QAAAA,EAAAC,QAAAA,IAQAqnD,kBAAA,SAAA5tF,EAAA6a,GACA7a,EAAA6Q,OAGA,IAFA,IAAAg9E,EAAA,EAAAriF,EAAAxK,KAAAkqF,iBAAAz/E,EAAAzK,KAAAoqF,gBACA5K,EAAAx/E,KAAAy5D,+BAAAz6D,EAAA,aAAA6a,EAAA7Z,KAAAsD,KAAAtD,KAAAoqB,QACAlmB,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAylF,EAAA3pF,KAAAuqF,gBAAArmF,GACAyoF,EAAAhD,EAAA3pF,KAAA6wB,WACAo5D,EAAAjqF,KAAAwqF,mBAAAtmF,GACAlE,KAAAwpF,gBACA3vE,EACA7a,EACAgB,KAAAsnF,WAAApjF,GACAsG,EAAAy/E,EAAAzK,EAAAl6C,QACA76B,EAAAoiF,EAAAF,EAAAnN,EAAAj6C,QACArhC,GAEA2oF,GAAAlD,EAEA3qF,EAAAgR,WAOAk5E,gBAAA,SAAAlqF,IACAgB,KAAAsD,MAAAtD,KAAA0pF,SAAA,UAIA1pF,KAAA4sF,kBAAA5tF,EAAA,aAOAiqF,kBAAA,SAAAjqF,IACAgB,KAAAoqB,QAAA,IAAApqB,KAAA03C,cAAA13C,KAAA8sF,mBAIA9sF,KAAAqoC,SAAAroC,KAAAqoC,OAAAJ,cACAjoC,KAAA84D,cAAA95D,GAGAA,EAAA6Q,OACA7P,KAAA8kD,aAAA9lD,EAAAgB,KAAA+0C,iBACA/1C,EAAA0R,YACA1Q,KAAA4sF,kBAAA5tF,EAAA,cACAA,EAAAmxC,YACAnxC,EAAAgR,YAaAy5E,aAAA,SAAA5vE,EAAA7a,EAAAqpF,EAAA79E,EAAAC,EAAAk+E,GAEA,IAEAoE,EACAC,EAEAlD,EAEAmD,EAPAp8D,EAAA7wB,KAAAuqF,gBAAA5B,GACAuE,GAAA,IAAAltF,KAAAkmF,UAAA/iF,QAAA,WAGAgqF,EAAA,GAEA7C,EAAA,EAEA8C,GAAAF,GAAA,IAAAltF,KAAAymF,aAAAzmF,KAAA8sF,cAAAnE,GAIA,GAFA3pF,EAAA6Q,OACApF,GAAAomB,EAAA7wB,KAAAumF,kBAAAvmF,KAAA6wB,WACAu8D,EAIA,OAFAptF,KAAAqtF,YAAAxzE,EAAA7a,EAAA2pF,EAAA,EAAA3oF,KAAAqnF,UAAAsB,GAAAn+E,EAAAC,EAAAomB,QACA7xB,EAAAgR,UAGA,IAAA,IAAA9L,EAAA,EAAAC,EAAAkkF,EAAA5kF,OAAA,EAAAS,GAAAC,EAAAD,IACA+oF,EAAA/oF,IAAAC,GAAAnE,KAAAymF,YACA0G,GAAA9E,EAAAnkF,GACA4lF,EAAA9pF,KAAA4mF,aAAA+B,GAAAzkF,GACA,IAAAomF,GACA9/E,GAAAs/E,EAAApB,YAAAoB,EAAAvqF,MACA+qF,GAAAR,EAAAvqF,OAGA+qF,GAAAR,EAAApB,YAEAwE,IAAAD,GACAjtF,KAAAgmF,eAAA9nE,KAAAmqE,EAAAnkF,MACA+oF,GAAA,GAGAA,IAEAF,EAAAA,GAAA/sF,KAAAssF,4BAAA3D,EAAAzkF,GACA8oF,EAAAhtF,KAAAssF,4BAAA3D,EAAAzkF,EAAA,GACA+oF,EAAAjtF,KAAAstF,iBAAAP,EAAAC,IAEAC,IACAjtF,KAAAqtF,YAAAxzE,EAAA7a,EAAA2pF,EAAAzkF,EAAAipF,EAAA3iF,EAAAC,EAAAomB,GACAs8D,EAAA,GACAJ,EAAAC,EACAxiF,GAAA8/E,EACAA,EAAA,GAGAtrF,EAAAgR,WAcAq9E,YAAA,SAAAxzE,EAAA7a,EAAA2pF,EAAA71C,EAAAD,EAAAroC,EAAAC,GACA,IAAAsuD,EAAA/4D,KAAAutF,qBAAA5E,EAAA71C,GACA06C,EAAAxtF,KAAAssF,4BAAA3D,EAAA71C,GACA26C,EAAA,aAAA5zE,GAAA2zE,EAAAlqF,KACAoqF,EAAA,eAAA7zE,GAAA2zE,EAAApjE,QAAAojE,EAAA91C,aAEAg2C,GAAAD,KAGA10B,GAAA/5D,EAAA6Q,OAEA7P,KAAA4qF,iBAAA/wE,EAAA7a,EAAA2pF,EAAA71C,EAAA06C,GAEAz0B,GAAAA,EAAAutB,qBACAtmF,KAAA84D,cAAA95D,GAEA+5D,GAAAA,EAAAwI,SACA92D,GAAAsuD,EAAAwI,QAGAksB,GAAAzuF,EAAA2uF,SAAA96C,EAAAroC,EAAAC,GACAijF,GAAA1uF,EAAA4uF,WAAA/6C,EAAAroC,EAAAC,GACAsuD,GAAA/5D,EAAAgR,YAUA69E,eAAA,SAAAlpE,EAAAyB,GACA,OAAApmB,KAAA8tF,WAAAnpE,EAAAyB,EAAApmB,KAAAmmF,cAUA4H,aAAA,SAAAppE,EAAAyB,GACA,OAAApmB,KAAA8tF,WAAAnpE,EAAAyB,EAAApmB,KAAAqmF,YAYAyH,WAAA,SAAAnpE,EAAAyB,EAAA4nE,GACA,IAAAC,EAAAjuF,KAAAkuF,oBAAAvpE,GAAA,GACAzZ,EAAAlL,KAAAyqF,qBAAAwD,EAAAtF,UAAAsF,EAAAn7C,UAAA,YACAtjC,EAAAxP,KAAAyqF,qBAAAwD,EAAAtF,UAAAsF,EAAAn7C,UAAA,UACA7lC,GAAA/B,SAAAA,EAAA8iF,EAAA9nF,KAAAq7D,OAAA/xD,EAAAtE,EAAA8iF,EAAA5H,UAEA,OADApmF,KAAAmuF,mBAAAlhF,EAAA0X,EAAAyB,GACApmB,MAQAstF,iBAAA,SAAAf,EAAA6B,GACA,OAAA7B,EAAAjpF,OAAA8qF,EAAA9qF,MACAipF,EAAAniE,SAAAgkE,EAAAhkE,QACAmiE,EAAA70C,cAAA02C,EAAA12C,aACA60C,EAAArhF,WAAAkjF,EAAAljF,UACAqhF,EAAA94E,aAAA26E,EAAA36E,YACA84E,EAAA37D,aAAAw9D,EAAAx9D,YACA27D,EAAA57D,YAAAy9D,EAAAz9D,WACA47D,EAAAhrB,SAAA6sB,EAAA7sB,QAQA8sB,uBAAA,SAAA9B,EAAA6B,GACA,OAAApuF,KAAAstF,iBAAAf,EAAA6B,IACA7B,EAAA/qB,WAAA4sB,EAAA5sB,UACA+qB,EAAA9qB,YAAA2sB,EAAA3sB,WACA8qB,EAAA7qB,cAAA0sB,EAAA1sB,aAQA8oB,mBAAA,SAAA7B,GACA,IAAAzzC,EAAAl1C,KAAAyoF,aAAAE,GACA,MAAA,WAAA3oF,KAAAkmF,WACAlmF,KAAAT,MAAA21C,GAAA,EAEA,UAAAl1C,KAAAkmF,UACAlmF,KAAAT,MAAA21C,EAEA,mBAAAl1C,KAAAkmF,WAAAlmF,KAAAwoF,gBAAAG,IACA3oF,KAAAT,MAAA21C,GAAA,EAEA,kBAAAl1C,KAAAkmF,WAAAlmF,KAAAwoF,gBAAAG,GACA3oF,KAAAT,MAAA21C,EAEA,GAMA0yC,YAAA,WACA5nF,KAAAsuF,gBACAtuF,KAAA0sF,iBACA1sF,KAAA4mF,iBAMA2H,2BAAA,WACA,IAAAC,EAAAxuF,KAAAyuF,iBAMA,OALAD,IAAAA,EAAAxuF,KAAA2tD,gBAAA,6BACA6gC,IACAxuF,KAAAw0D,OAAA,EACAx0D,KAAAyuF,kBAAA,GAEAD,GAUA/F,aAAA,SAAAE,GACA,GAAA3oF,KAAAsuF,aAAA3F,GACA,OAAA3oF,KAAAsuF,aAAA3F,GAGA,IAAAppF,EAAAqsF,EAAAvD,EAAAroF,KAAAsnF,WAAAqB,GAUA,MARA,KAAAN,EACA9oF,EAAA,GAGAqsF,EAAA5rF,KAAA2rF,YAAAhD,GACAppF,EAAAqsF,EAAArsF,OAEAS,KAAAsuF,aAAA3F,GAAAppF,EACAA,GAGAusF,uBAAA,WACA,OAAA,IAAA9rF,KAAAymF,YACAzmF,KAAAkL,SAAAlL,KAAAymF,YAAA,IAEA,GAUAgE,qBAAA,SAAA9B,EAAA71C,EAAAjsC,GACA,IAAAsiF,EAAAnpF,KAAAutF,qBAAA5E,EAAA71C,GACA,OAAAq2C,QAAA,IAAAA,EAAAtiF,GACAsiF,EAAAtiF,GAEA7G,KAAA6G,IAOAkiF,sBAAA,SAAA/pF,EAAA6G,GACA,GAAA7F,KAAA6F,IAAA7F,KAAA0pF,SAAA7jF,GAAA,CAYA,IATA,IAAA8jF,EAAAzjF,EAAAwoF,EACA9E,EAAAp6E,EAAAm/E,EACAtG,EAAAuG,EAEAnkF,EACA4/E,EAAAC,EAAAR,EAAA+E,EACAlC,EAAAmC,EAAAC,EAHA9E,EAAAjqF,KAAAkqF,iBACAC,EAAAnqF,KAAAoqF,gBAGA3D,EAAAzmF,KAAA8rF,yBAEA5nF,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IAEA,GADAylF,EAAA3pF,KAAAuqF,gBAAArmF,GACAlE,KAAA6F,IAAA7F,KAAA0pF,SAAA7jF,EAAA3B,GAAA,CAIAmkF,EAAAroF,KAAAsnF,WAAApjF,GACAyoF,EAAAhD,EAAA3pF,KAAA6wB,WACA+4D,EAAA5pF,KAAAwqF,mBAAAtmF,GACAmmF,EAAA,EACAC,EAAA,EACAsE,EAAA5uF,KAAAyqF,qBAAAvmF,EAAA,EAAA2B,GACAkpF,EAAA/uF,KAAAyqF,qBAAAvmF,EAAA,EAAA,QACAuG,EAAA0/E,EAAAwC,GAAA,EAAA3sF,KAAAumF,mBACArgF,EAAAlG,KAAA0rF,gBAAAxnF,EAAA,GACAsL,EAAAxP,KAAAyqF,qBAAAvmF,EAAA,EAAA,UACA,IAAA,IAAAyU,EAAA,EAAAC,EAAAyvE,EAAA5kF,OAAAkV,EAAAC,EAAAD,IACAmxE,EAAA9pF,KAAA4mF,aAAA1iF,GAAAyU,GACAk2E,EAAA7uF,KAAAyqF,qBAAAvmF,EAAAyU,EAAA9S,GACAipF,EAAA9uF,KAAAyqF,qBAAAvmF,EAAAyU,EAAA,QACA+1E,EAAA1uF,KAAA0rF,gBAAAxnF,EAAAyU,GACAg2E,EAAA3uF,KAAAyqF,qBAAAvmF,EAAAyU,EAAA,WACAk2E,IAAAD,GAAAE,IAAAC,GAAAL,IAAAxoF,GAAAyoF,IAAAn/E,IACA86E,EAAA,GACAtrF,EAAAoxC,UAAA2+C,EACAH,GAAAG,GAAA/vF,EAAAg7C,SACAiwC,EAAAL,EAAAS,EACA5/E,EAAAzK,KAAAw/E,QAAA35E,GAAAK,EAAAsJ,EACA86E,EACAtqF,KAAAkL,SAAA,IAEAm/E,EAAAP,EAAAt/E,KACA8/E,EAAAR,EAAAvqF,MACAqvF,EAAAC,EACAE,EAAAD,EACA5oF,EAAAwoF,EACAl/E,EAAAm/E,GAGArE,GAAAR,EAAApB,YAGA1pF,EAAAoxC,UAAA0+C,EACAD,GAAAC,GAAA9vF,EAAAg7C,SACAiwC,EAAAL,EAAAS,EACA5/E,EAAAzK,KAAAw/E,QAAA35E,GAAAK,EAAAsJ,EACA86E,EAAA7D,EACAzmF,KAAAkL,SAAA,IAEAi/E,GAAAR,OA9CAQ,GAAAR,EAkDA3pF,KAAA84D,cAAA95D,KAQAsqF,oBAAA,SAAA0F,EAAA5F,GACA,IAAAn8E,EAAA+hF,GAAAhvF,KAAAivF,EAAAjvF,KAAAyT,WACAy7E,EAAAzxF,EAAA4N,KAAA8jF,aAAAhsF,QAAA8rF,EAAAv7E,gBAAA,EACAD,OAAAwM,IAAAgvE,GACAA,EAAA9rF,QAAA,MAAA,GAAA8rF,EAAA9rF,QAAA,MAAA,GACA8rF,EAAA9rF,QAAA,MAAA,GAAA+rF,EACAjiF,EAAAwG,WAAA,IAAAxG,EAAAwG,WAAA,IACA,OAGAhW,EAAAoD,aAAAoM,EAAA2jB,WAAA3jB,EAAA0jB,UACAlzB,EAAAoD,aAAAoM,EAAA0jB,UAAA1jB,EAAA2jB,WACAw4D,EAAAppF,KAAA6mF,gBAAA,KAAA55E,EAAA/B,SAAA,KACAuI,GACAa,KAAA,MAOAy7B,OAAA,SAAA/wC,GAEAgB,KAAA4qB,UAGA5qB,KAAAlB,QAAAkB,KAAAlB,OAAAmrC,gBAAAjqC,KAAAqtC,QAAArtC,KAAAu3D,eAGAv3D,KAAAuuF,8BACAvuF,KAAAgnF,iBAEAhnF,KAAA8b,UAAA,SAAA9c,MAQAooF,oBAAA,SAAAz0D,GAKA,IAJA,IAAA4rC,EAAA5rC,EAAAxmB,MAAAnM,KAAA8lF,YACAqB,EAAA,IAAA3yE,MAAA+pD,EAAA96D,QACA2rF,GAAA,MACAC,KACAnrF,EAAA,EAAAA,EAAAq6D,EAAA96D,OAAAS,IACAijF,EAAAjjF,GAAAzG,EAAA2F,KAAAsI,OAAAuP,cAAAsjD,EAAAr6D,IACAmrF,EAAAA,EAAAvpF,OAAAqhF,EAAAjjF,GAAAkrF,GAGA,OADAC,EAAA97E,OACAk0E,gBAAAN,EAAA5oB,MAAAA,EAAAopB,aAAA0H,EAAA9H,cAAAJ,IAQAxhD,SAAA,SAAAC,GACA,IAAA0pD,GACA,OACA,WACA,aACA,aACA,YACA,aACA,YACA,WACA,cACA,YACA,sBACA,eACAxpF,OAAA8/B,GACAn+B,EAAAzH,KAAA8b,UAAA,WAAAwzE,GAEA,OADA7nF,EAAA2W,OAAA9gB,EAAA0C,KAAAoe,QAAA,GACA3W,GAUAf,IAAA,SAAAiB,EAAAtD,GACArE,KAAA8b,UAAA,MAAAnU,EAAAtD,GACA,IAAAkrF,GAAA,EACA,GAAA,iBAAA5nF,EACA,IAAA,IAAA6nF,KAAA7nF,EACA4nF,EAAAA,IAAA,IAAAvvF,KAAA6lF,yBAAA1iF,QAAAqsF,QAIAD,GAAA,IAAAvvF,KAAA6lF,yBAAA1iF,QAAAwE,GAMA,OAJA4nF,IACAvvF,KAAAgnF,iBACAhnF,KAAAstC,aAEAttC,MAOAoG,WAAA,WACA,OAAA,KAWA3I,EAAA4N,KAAAi7D,gBAAA7oE,EAAAsD,kBAAA+E,OACA,oGAAAqG,MAAA,MAOA1O,EAAA4N,KAAAC,sBAAA,GAUA7N,EAAA4N,KAAA6oB,YAAA,SAAAxX,EAAAhX,EAAA1B,GACA,IAAA0Y,EACA,OAAAhX,EAAA,MAGA,IAAA6gE,EAAA9oE,EAAAszB,gBAAArU,EAAAjf,EAAA4N,KAAAi7D,iBACAmpB,EAAAlpB,EAAAmpB,YAAA,OAKA,IAJA1rF,EAAAvG,EAAA2F,KAAA6B,OAAAgV,OAAAjW,EAAA1G,EAAA0G,MAAAuiE,IAEA97D,IAAAzG,EAAAyG,KAAA,EACAzG,EAAAwG,KAAAxG,EAAAwG,MAAA,EACA+7D,EAAAlF,eAAA,CACA,IAAAA,EAAAkF,EAAAlF,gBACA,IAAAA,EAAAl+D,QAAA,eACAa,EAAAy9D,WAAA,IAEA,IAAAJ,EAAAl+D,QAAA,cACAa,EAAAw9D,UAAA,IAEA,IAAAH,EAAAl+D,QAAA,kBACAa,EAAA09D,aAAA,UAEA19D,EAAAq9D,eAEA,OAAAkF,IACAviE,EAAAwG,MAAA+7D,EAAAh3D,IAEA,OAAAg3D,IACAviE,EAAAyG,KAAA87D,EAAA/2D,IAEA,aAAAxL,IACAA,EAAAkH,SAAAzN,EAAA4N,KAAAC,uBAGA,IAAAonB,EAAA,GAKA,gBAAAhW,EAQAgW,EAAAhW,EAAAgW,YAPA,eAAAhW,GAAA,OAAAA,EAAA+R,YACA,SAAA/R,EAAA+R,YAAA,OAAA/R,EAAA+R,WAAA1b,OACA2f,EAAAhW,EAAA+R,WAAA1b,MAQA2f,EAAAA,EAAA9X,QAAA,iBAAA,IAAAA,QAAA,OAAA,KACA,IAAA+0E,EAAA3rF,EAAA0zC,YACA1zC,EAAA0zC,YAAA,EAEA,IAAA/kB,EAAA,IAAAl1B,EAAA4N,KAAAqnB,EAAA1uB,GACA4rF,EAAAj9D,EAAAysC,kBAAAzsC,EAAAxzB,OACA0wF,GAAAl9D,EAAAxzB,OAAAwzB,EAAA+kB,aAAA/kB,EAAA9B,WAAA8B,EAAAxzB,OACA2wF,EAAAD,EAAAD,EACAG,EAAAp9D,EAAAysC,kBAAA0wB,EACAE,EAAA,EAMA,WAAAP,IACAO,EAAAr9D,EAAAyqC,iBAAA,GAEA,UAAAqyB,IACAO,EAAAr9D,EAAAyqC,kBAEAzqC,EAAAjsB,KACA8D,KAAAmoB,EAAAnoB,KAAAwlF,EACAvlF,IAAAkoB,EAAAloB,KAAAslF,EAAAp9D,EAAAznB,UAAA,IAAAynB,EAAA4zD,oBAAA5zD,EAAA9B,WACA6mB,iBAAA,IAAAi4C,EAAAA,EAAA,IAEAjqF,EAAAitB,IAWAl1B,EAAA4N,KAAA0C,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,OAAAx1D,EAAAS,EAAA,SAGAjI,EAAA4N,KAAA8jF,cAAA,aAAA,QAAA,UAAA,UAAA,aAEA1xF,EAAA2F,KAAAg5D,iBAAA3+D,EAAA2F,KAAAg5D,gBAAA3+D,EAAA4N,OAt7CA,CAw7CA,oBAAAvD,QAAAA,QAAA9H,MAIAvC,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAA4N,KAAA4D,WAMA69E,cAAA,SAAAnE,GACA,IAAA3oF,KAAAoe,OACA,OAAA,EAEA,QAAA,IAAAuqE,IAAA3oF,KAAAoe,OAAAuqE,GACA,OAAA,EAEA,IAAAlhF,OAAA,IAAAkhF,EAAA3oF,KAAAoe,QAAAiqE,KAAAroF,KAAAoe,OAAAuqE,IACA,IAAA,IAAAzyC,KAAAzuC,EACA,IAAA,IAAA0uC,KAAA1uC,EAAAyuC,GAEA,IAAA,IAAA+5C,KAAAxoF,EAAAyuC,GAAAC,GACA,OAAA,EAIA,OAAA,GAUAuzC,SAAA,SAAA7iF,EAAA8hF,GACA,IAAA3oF,KAAAoe,SAAAvX,GAAA,KAAAA,EACA,OAAA,EAEA,QAAA,IAAA8hF,IAAA3oF,KAAAoe,OAAAuqE,GACA,OAAA,EAEA,IAAAlhF,OAAA,IAAAkhF,EAAA3oF,KAAAoe,QAAA0iC,EAAA9gD,KAAAoe,OAAAuqE,IAEA,IAAA,IAAAzyC,KAAAzuC,EAEA,IAAA,IAAA0uC,KAAA1uC,EAAAyuC,GACA,QAAA,IAAAzuC,EAAAyuC,GAAAC,GAAAtvC,GACA,OAAA,EAIA,OAAA,GAaAqpF,WAAA,SAAArpF,GACA,IAAA7G,KAAAoe,SAAAvX,GAAA,KAAAA,EACA,OAAA,EAEA,IAAAspF,EAAAC,EAAA3oF,EAAAzH,KAAAoe,OAAAiyE,EAAA,EACAC,GAAA,EAAAC,EAAA,EAEA,IAAA,IAAAr6C,KAAAzuC,EAAA,CAGA,IAAA,IAAA0uC,KAFAg6C,EAAA,EAEA1oF,EAAAyuC,GAAA,CACA,IAAA84C,EAAAvnF,EAAAyuC,GAAAC,GACAq6C,EAAAxB,EAAA50E,eAAAvT,GAEAwpF,IAEAG,GACAJ,EAGApB,EAAAnoF,KAAAupF,IACAE,GAAA,GAHAF,EAAApB,EAAAnoF,GAMAmoF,EAAAnoF,KAAA7G,KAAA6G,WACAmoF,EAAAnoF,IAIAypF,GAAA,EAGA,IAAAthF,OAAAq2B,KAAA2pD,GAAAvrF,OACA0sF,WAGA1oF,EAAAyuC,GAAAC,GAIA,IAAAg6C,UACA1oF,EAAAyuC,GAKA,IAAA,IAAAhyC,EAAA,EAAAA,EAAAlE,KAAAsnF,WAAA7jF,OAAAS,IACAqsF,GAAAvwF,KAAAsnF,WAAApjF,GAAAT,OAEA6sF,GAAAD,IAAAE,IACAvwF,KAAA6G,GAAAupF,EACApwF,KAAAywF,YAAA5pF,KAWA4pF,YAAA,SAAA5pF,GACA,GAAA7G,KAAAoe,QAAAvX,GAAA,KAAAA,EAAA,CAGA,IAAAwhF,EAAAqI,EAAAC,EAAAlpF,EAAAzH,KAAAoe,OACA,IAAAsyE,KAAAjpF,EAAA,CAEA,IAAAkpF,KADAtI,EAAA5gF,EAAAipF,UAEArI,EAAAsI,GAAA9pF,GACA,IAAAmI,OAAAq2B,KAAAgjD,EAAAsI,IAAAltF,eACA4kF,EAAAsI,GAGA,IAAA3hF,OAAAq2B,KAAAgjD,GAAA5kF,eACAgE,EAAAipF,MAQAE,cAAA,SAAA1rF,EAAAkZ,GACA,IAAA6vE,EAAAjuF,KAAAkuF,oBAAAhpF,GAEAlF,KAAA6wF,cAAA5C,EAAAtF,YACA3oF,KAAA8wF,cAAA7C,EAAAtF,WAGA3oF,KAAAutF,qBAAAU,EAAAtF,UAAAsF,EAAAn7C,YACA9yC,KAAA+wF,qBAAA9C,EAAAtF,UAAAsF,EAAAn7C,cAGAr1C,EAAA2F,KAAA6B,OAAAgV,OAAAja,KAAAutF,qBAAAU,EAAAtF,UAAAsF,EAAAn7C,WAAA10B,IAQA8vE,oBAAA,SAAA8C,EAAAC,QACA,IAAAD,IACAA,EAAAhxF,KAAAgxF,gBAIA,IAFA,IAAAzyB,EAAA0yB,EAAAjxF,KAAAwnF,oBAAAxnF,KAAAsnF,WACAnjF,EAAAo6D,EAAA96D,OACAS,EAAA,EAAAA,EAAAC,EAAAD,IAAA,CACA,GAAA8sF,GAAAzyB,EAAAr6D,GAAAT,OACA,OACAklF,UAAAzkF,EACA4uC,UAAAk+C,GAGAA,GAAAzyB,EAAAr6D,GAAAT,OAAAzD,KAAA4oF,qBAAA1kF,GAEA,OACAykF,UAAAzkF,EAAA,EACA4uC,UAAAyrB,EAAAr6D,EAAA,GAAAT,OAAAutF,EAAAzyB,EAAAr6D,EAAA,GAAAT,OAAAutF,IAYAE,mBAAA,SAAAC,EAAAC,EAAAzpD,QACA,IAAAwpD,IACAA,EAAAnxF,KAAAgxF,gBAAA,QAEA,IAAAI,IACAA,EAAApxF,KAAAqxF,cAAAF,GAGA,IADA,IAAA/yE,KACAla,EAAAitF,EAAAjtF,EAAAktF,EAAAltF,IACAka,EAAAxa,KAAA5D,KAAAsxF,mBAAAptF,EAAAyjC,IAEA,OAAAvpB,GAUAkzE,mBAAA,SAAApkF,EAAAy6B,GACA,IAAAsmD,EAAAjuF,KAAAkuF,oBAAAhhF,GACAD,EAAA06B,EAAA3nC,KAAAssF,4BAAA2B,EAAAtF,UAAAsF,EAAAn7C,WACA9yC,KAAAutF,qBAAAU,EAAAtF,UAAAsF,EAAAn7C,WACA,OAAA7lC,OAWAkhF,mBAAA,SAAA/vE,EAAA+yE,EAAAC,QACA,IAAAD,IACAA,EAAAnxF,KAAAgxF,gBAAA,QAEA,IAAAI,IACAA,EAAApxF,KAAAqxF,cAAAF,GAEA,IAAA,IAAAjtF,EAAAitF,EAAAjtF,EAAAktF,EAAAltF,IACAlE,KAAA4wF,cAAA1sF,EAAAka,GAIA,OADApe,KAAAyuF,kBAAA,EACAzuF,MASAutF,qBAAA,SAAA5E,EAAA71C,GACA,IAAAy+C,EAAAvxF,KAAAoe,QAAApe,KAAAoe,OAAAuqE,GACA,OAAA4I,EAGAA,EAAAz+C,GAFA,MAYAw5C,4BAAA,SAAA3D,EAAA71C,GAGA,IAFA,IACApvC,EADAuJ,EAAAjN,KAAAutF,qBAAA5E,EAAA71C,OACAk8C,KACA9qF,EAAA,EAAAA,EAAAlE,KAAA2mF,iBAAAljF,OAAAS,IACAR,EAAA1D,KAAA2mF,iBAAAziF,GACA8qF,EAAAtrF,QAAA,IAAAuJ,EAAAvJ,GAAA1D,KAAA0D,GAAAuJ,EAAAvJ,GAEA,OAAAsrF,GASA+B,qBAAA,SAAApI,EAAA71C,EAAA7lC,GACAjN,KAAAoe,OAAAuqE,GAAA71C,GAAA7lC,GASAukF,wBAAA,SAAA7I,EAAA71C,UACA9yC,KAAAoe,OAAAuqE,GAAA71C,IAQA+9C,cAAA,SAAAlI,GACA,QAAA3oF,KAAAoe,OAAAuqE,IAQAmI,cAAA,SAAAnI,GACA3oF,KAAAoe,OAAAuqE,OAOA8I,iBAAA,SAAA9I,UACA3oF,KAAAoe,OAAAuqE,MAMA,WAEA,SAAA+I,EAAAzsF,GACAA,EAAAo8D,iBACAp8D,EAAAo8D,eAAAl+D,QAAA,cAAA,IAAA8B,EAAAw8D,WAAA,GACAx8D,EAAAo8D,eAAAl+D,QAAA,iBAAA,IAAA8B,EAAAy8D,aAAA,GACAz8D,EAAAo8D,eAAAl+D,QAAA,aAAA,IAAA8B,EAAAu8D,UAAA,UACAv8D,EAAAo8D,gBAkDA5jE,EAAAk0F,MAAAl0F,EAAA2F,KAAA+Y,YAAA1e,EAAA4N,KAAA5N,EAAA6G,YAOAuB,KAAA,SAOAmrF,eAAA,EAOAK,aAAA,EAOAh2C,eAAA,uBAOAmK,WAAA,EAOAosC,UAAA,EAOAC,mBAAA,yBAOA/J,YAAA,EAOAgK,YAAA,OAOAC,YAAA,IAOAC,eAAA,IAOAC,SAAA,EAKAC,SAAA,QAKAC,sBAAA,EAKAC,oBAAA,KAKAC,uBAAA,EAKAC,kBAMAC,mBAAA,EAQAl2E,WAAA,SAAAsW,EAAA3uB,GACAhE,KAAA8b,UAAA,aAAA6W,EAAA3uB,GACAhE,KAAAwyF,gBAOAC,kBAAA,SAAAvtF,GACAA,EAAA6C,KAAA7K,IAAAgI,EAAA,GACAlF,KAAA0yF,eAAA,iBAAAxtF,IAOAytF,gBAAA,SAAAztF,GACAA,EAAA6C,KAAA9K,IAAAiI,EAAAlF,KAAA2yB,KAAAlvB,QACAzD,KAAA0yF,eAAA,eAAAxtF,IAQAwtF,eAAA,SAAA7rF,EAAA3B,GACAlF,KAAA6G,KAAA3B,IACAlF,KAAA4yF,wBACA5yF,KAAA6G,GAAA3B,GAEAlF,KAAA6yF,mBAOAD,sBAAA,WACA5yF,KAAA+D,KAAA,qBACA/D,KAAAlB,QAAAkB,KAAAlB,OAAAiF,KAAA,0BAAAoO,OAAAnS,QAUAgnF,eAAA,WACAhnF,KAAAwlD,WAAAxlD,KAAA8yF,oBACA9yF,KAAAwoD,kBACAxoD,KAAA8b,UAAA,mBAOAi0B,OAAA,SAAA/wC,GACAgB,KAAAwoD,kBACAxoD,KAAA8b,UAAA,SAAA9c,GAGAgB,KAAA+yF,qBACA/yF,KAAAgzF,2BAOAr8C,QAAA,SAAA33C,GACAgB,KAAA8b,UAAA,UAAA9c,IAMAwpD,gBAAA,SAAAyqC,GACA,GAAAjzF,KAAAwlD,WAAAxlD,KAAAlB,QAAAkB,KAAAlB,OAAAssC,WAAA,CAGA,IAAApsC,EAAAgB,KAAAlB,OAAAssC,WAAAliC,EAAAlJ,KAAAlB,OAAA6qC,kBACA3qC,EAAA6Q,OACA7Q,EAAAiL,UAAAf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAlJ,KAAAiK,UAAAjL,GACAgB,KAAA0qB,iBAAA1rB,EAAAiL,UAAArF,MAAA5F,EAAAgB,KAAA0qB,iBACA1qB,KAAAkzF,eAAAl0F,GACAi0F,GAAAj0F,EAAAgR,YAOAgjF,wBAAA,WACA,GAAAhzF,KAAAwlD,WAAAxlD,KAAAlB,QAAAkB,KAAAlB,OAAAssC,WAAA,CAGA,IAAA+nD,EAAAnzF,KAAAozF,uBACAp0F,EAAAgB,KAAAlB,OAAAssC,WACAprC,KAAAwoD,iBAAA,GACAxoD,KAAAgxF,iBAAAhxF,KAAAqxF,aACArxF,KAAAqzF,aAAAF,EAAAn0F,GAGAgB,KAAAszF,gBAAAH,EAAAn0F,GAEAA,EAAAgR,YAGAkjF,eAAA,SAAAl0F,GAEA,IAAAO,EAAAS,KAAAT,MAAA,EAAAJ,EAAAa,KAAAb,OAAA,EACAH,EAAAivC,WAAA1uC,EAAA,GAAAJ,EAAA,EAAAI,EAAAJ,IASAi0F,qBAAA,SAAAlmF,QAKA,IAAAA,IACAA,EAAAlN,KAAAgxF,gBAGA,IAAAxmF,EAAAxK,KAAAkqF,iBACAz/E,EAAAzK,KAAAoqF,gBACA5K,EAAAx/E,KAAAuzF,4BAAArmF,GAEA,OACA1C,KAAAA,EACAC,IAAAA,EACAw/E,WAAAzK,EAAAh1E,KACA2/E,UAAA3K,EAAA/0E,MAOA8oF,4BAAA,SAAArmF,GACA,GAAAlN,KAAA+yF,mBAAA,QAAA/yF,KAAA+yF,kBACA,OAAA/yF,KAAA+yF,kBAEA,IAAAnJ,EACAjB,EACA71C,EAGAqgD,EAFAhJ,EAAA,EACAF,EAAA,EAEAuJ,EAAAxzF,KAAAkuF,oBAAAhhF,GACA4lC,EAAA0gD,EAAA1gD,UACA61C,EAAA6K,EAAA7K,UACA,IAAA,IAAAzkF,EAAA,EAAAA,EAAAykF,EAAAzkF,IACAimF,GAAAnqF,KAAAuqF,gBAAArmF,GAEA0lF,EAAA5pF,KAAAwqF,mBAAA7B,GACA,IAAApvE,EAAAvZ,KAAA4mF,aAAA+B,GAAA71C,GAUA,OATAv5B,IAAA0wE,EAAA1wE,EAAA/O,MACA,IAAAxK,KAAAymF,aAAA3zC,IAAA9yC,KAAAsnF,WAAAqB,GAAAllF,SACAwmF,GAAAjqF,KAAA8rF,0BAEAqH,GACA1oF,IAAA0/E,EACA3/E,KAAAo/E,GAAAK,EAAA,EAAAA,EAAA,IAEAjqF,KAAA+yF,kBAAAI,EACAnzF,KAAA+yF,mBAQAM,aAAA,SAAAF,EAAAn0F,GACA,IAAAy0F,EAAAzzF,KAAAkuF,sBACAvF,EAAA8K,EAAA9K,UACA71C,EAAA2gD,EAAA3gD,UAAA,EAAA2gD,EAAA3gD,UAAA,EAAA,EACA4gD,EAAA1zF,KAAAyqF,qBAAA9B,EAAA71C,EAAA,YACAlO,EAAA5kC,KAAAiR,OAAAjR,KAAAlB,OAAAkuC,UACA86C,EAAA9nF,KAAA8nF,YAAAljD,EACAulD,EAAAgJ,EAAAhJ,UACA36E,EAAAxP,KAAAyqF,qBAAA9B,EAAA71C,EAAA,UAEAq3C,IAAA,EAAAnqF,KAAAumF,mBAAAvmF,KAAAuqF,gBAAA5B,GAAA3oF,KAAA6wB,WACA6iE,GAAA,EAAA1zF,KAAAumF,mBAEAvmF,KAAAuyF,mBACAvyF,KAAAszF,gBAAAH,EAAAn0F,GAGAA,EAAAoxC,UAAApwC,KAAAyqF,qBAAA9B,EAAA71C,EAAA,QACA9zC,EAAA+6C,YAAA/5C,KAAA2zF,cAAA,EAAA3zF,KAAAmyF,sBACAnzF,EAAAg7C,SACAm5C,EAAA3oF,KAAA2oF,EAAAlJ,WAAAnC,EAAA,EACAqC,EAAAgJ,EAAA1oF,IAAA+E,EACAs4E,EACA4L,IAQAJ,gBAAA,SAAAH,EAAAn0F,GAYA,IAVA,IAAAgyF,EAAAhxF,KAAAuyF,kBAAAvyF,KAAAurD,eAAAylC,eAAAhxF,KAAAgxF,eACAK,EAAArxF,KAAAuyF,kBAAAvyF,KAAAurD,eAAA8lC,aAAArxF,KAAAqxF,aACAnE,GAAA,IAAAltF,KAAAkmF,UAAA/iF,QAAA,WACAwhB,EAAA3kB,KAAAkuF,oBAAA8C,GACA5qE,EAAApmB,KAAAkuF,oBAAAmD,GACAuC,EAAAjvE,EAAAgkE,UACAkL,EAAAztE,EAAAuiE,UACAmL,EAAAnvE,EAAAmuB,UAAA,EAAA,EAAAnuB,EAAAmuB,UACAihD,EAAA3tE,EAAA0sB,UAAA,EAAA,EAAA1sB,EAAA0sB,UAEA5uC,EAAA0vF,EAAA1vF,GAAA2vF,EAAA3vF,IAAA,CACA,IAAA8vF,EAAAh0F,KAAAwqF,mBAAAtmF,IAAA,EACA2sB,EAAA7wB,KAAAuqF,gBAAArmF,GACA+vF,EAAA,EAAA5J,EAAA,EAAA6J,EAAA,EAKA,GAHAhwF,IAAA0vF,IACAvJ,EAAArqF,KAAA4mF,aAAAgN,GAAAE,GAAAtpF,MAEAtG,GAAA0vF,GAAA1vF,EAAA2vF,EACAK,EAAAhH,IAAAltF,KAAAwoF,gBAAAtkF,GAAAlE,KAAAT,MAAAS,KAAAyoF,aAAAvkF,IAAA,OAEA,GAAAA,IAAA2vF,EACA,GAAA,IAAAE,EACAG,EAAAl0F,KAAA4mF,aAAAiN,GAAAE,GAAAvpF,SAEA,CACA,IAAAi8E,EAAAzmF,KAAA8rF,yBACAoI,EAAAl0F,KAAA4mF,aAAAiN,GAAAE,EAAA,GAAAvpF,KACAxK,KAAA4mF,aAAAiN,GAAAE,EAAA,GAAAx0F,MAAAknF,EAGAwN,EAAApjE,GACA7wB,KAAA6wB,WAAA,GAAA3sB,IAAA2vF,GAAA7zF,KAAA6wB,WAAA,KACAA,GAAA7wB,KAAA6wB,YAEA7wB,KAAAuyF,mBACAvzF,EAAAoxC,UAAApwC,KAAAm0F,kBAAA,QACAn1F,EAAAg7C,SACAm5C,EAAA3oF,KAAAwpF,EAAA3J,EACA8I,EAAA1oF,IAAA0oF,EAAAhJ,UAAAt5D,EACAqjE,EAAA7J,EACA,KAGArrF,EAAAoxC,UAAApwC,KAAAq7C,eACAr8C,EAAAg7C,SACAm5C,EAAA3oF,KAAAwpF,EAAA3J,EACA8I,EAAA1oF,IAAA0oF,EAAAhJ,UACA+J,EAAA7J,EACAx5D,IAIAsiE,EAAAhJ,WAAA8J,IAUAG,uBAAA,WACA,IAAAC,EAAAr0F,KAAAs0F,uBACA,OAAAt0F,KAAAyqF,qBAAA4J,EAAAvhF,EAAAuhF,EAAAl8E,EAAA,aASAo8E,oBAAA,WACA,IAAAF,EAAAr0F,KAAAs0F,uBACA,OAAAt0F,KAAAyqF,qBAAA4J,EAAAvhF,EAAAuhF,EAAAl8E,EAAA,SAOAm8E,qBAAA,WACA,IAAAd,EAAAxzF,KAAAkuF,oBAAAluF,KAAAgxF,gBAAA,GACAl+C,EAAA0gD,EAAA1gD,UAAA,EAAA0gD,EAAA1gD,UAAA,EAAA,EACA,OAAAhgC,EAAA0gF,EAAA7K,UAAAxwE,EAAA26B,MAWAr1C,EAAAk0F,MAAA5jF,WAAA,SAAA9I,EAAAS,GAEA,GADAgsF,EAAAzsF,GACAA,EAAAmZ,OACA,IAAA,IAAAla,KAAAe,EAAAmZ,OACA,IAAA,IAAAzF,KAAA1T,EAAAmZ,OAAAla,GACAwtF,EAAAzsF,EAAAmZ,OAAAla,GAAAyU,IAIAlb,EAAAuR,OAAAyrD,YAAA,QAAAx1D,EAAAS,EAAA,SAzfA,GAggBApI,EAAAG,EAAA2F,KAAA6B,OAAA3H,MAEAG,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAk0F,MAAA1iF,WAKAujF,aAAA,WACAxyF,KAAAw0F,mBACAx0F,KAAAy0F,qBACAz0F,KAAA00F,8BACA10F,KAAA20F,4BACA30F,KAAA40F,iBAAA50F,KAAA40F,iBAAA5rD,KAAAhpC,OAGAgoD,WAAA,WACAhoD,KAAAwlD,WAAAxlD,KAAAwwD,cACAxwD,KAAAynD,UAAA,GAMA+sC,iBAAA,WACA,IAAAv4E,EAAAjc,KACAA,KAAA2D,GAAA,QAAA,WACA,IAAA7E,EAAAmd,EAAAnd,OACAA,IACAA,EAAAqvC,oBACArvC,EAAAqvC,mBAAA,EACAlyB,EAAA44E,oBAAA/1F,IAEAA,EAAAuvC,gBAAAvvC,EAAAuvC,oBACAvvC,EAAAuvC,gBAAAzqC,KAAAqY,OAKAw4E,mBAAA,WACA,IAAAx4E,EAAAjc,KACAA,KAAA2D,GAAA,UAAA,WACA,IAAA7E,EAAAmd,EAAAnd,OACAA,IACAA,EAAAuvC,gBAAAvvC,EAAAuvC,oBACA5wC,EAAA2F,KAAAkF,gBAAAxJ,EAAAuvC,gBAAApyB,GACA,IAAAnd,EAAAuvC,gBAAA5qC,SACA3E,EAAAqvC,mBAAA,EACAlyB,EAAA64E,sBAAAh2F,QAUA+1F,oBAAA,SAAA/1F,GACAA,EAAAsvC,qBAAA,WACAtvC,EAAAuvC,iBACAvvC,EAAAuvC,gBAAAxgC,QAAA,SAAApG,GACAA,EAAAksF,eAAA,KAIA70F,EAAA6E,GAAA,WAAA7E,EAAAsvC,uBAOA0mD,sBAAA,SAAAh2F,GACAA,EAAAyF,IAAA,WAAAzF,EAAAsvC,uBAMA2mD,MAAA,WACA/0F,KAAAg1F,kBAAAh1F,KAAAi1F,eAAAj1F,KAAA,EAAAA,KAAAgyF,eAAA,oBAMAiD,eAAA,SAAAxtF,EAAAytF,EAAArwE,EAAAswE,GAEA,IAAAC,EA0BA,OAxBAA,GACAC,WAAA,EACArwE,MAAA,WACAhlB,KAAAq1F,WAAA,IAIA5tF,EAAA+c,QAAA,wBAAA0wE,GACArwE,SAAAA,EACA7B,WAAA,WACAoyE,EAAAC,WACA5tF,EAAA0tF,MAGApwE,SAAA,WAEAtd,EAAA3I,QAAA2I,EAAAupF,iBAAAvpF,EAAA4pF,cACA5pF,EAAAurF,2BAGAhuE,MAAA,WACA,OAAAowE,EAAAC,aAGAD,GAMAE,gBAAA,WAEA,IAAAr5E,EAAAjc,KAEAA,KAAAu1F,iBACAjxE,aAAAtkB,KAAAu1F,iBAEAv1F,KAAAu1F,gBAAApxE,WAAA,WACAlI,EAAAu5E,0BAAAv5E,EAAAg5E,eAAAh5E,EAAA,EAAAjc,KAAAgyF,eAAA,EAAA,UACA,MAMAc,kBAAA,SAAA2C,GACA,IAAAx5E,EAAAjc,KACA01F,EAAAD,EAAA,EAAAz1F,KAAA+xF,YAEA/xF,KAAA21F,uBACA31F,KAAAmyF,sBAAA,EACAnyF,KAAA41F,gBAAAzxE,WAAA,WACAlI,EAAA84E,SACAW,IAMAC,qBAAA,WACA,IAAAnH,EAAAxuF,KAAAg1F,mBAAAh1F,KAAAw1F,0BACA12F,EAAAkB,KAAAlB,OACAkB,KAAAg1F,mBAAAh1F,KAAAg1F,kBAAAhwE,QACAhlB,KAAAw1F,2BAAAx1F,KAAAw1F,0BAAAxwE,QAEAV,aAAAtkB,KAAAu1F,iBACAjxE,aAAAtkB,KAAA41F,iBAEA51F,KAAAmyF,sBAAA,EAGA3D,GAAA1vF,GACAA,EAAAkvC,aAAAlvC,EAAAssC,YAAAtsC,EAAAosC,mBAUA2qD,UAAA,WAKA,OAJA71F,KAAAgxF,eAAA,EACAhxF,KAAAqxF,aAAArxF,KAAA0nF,MAAAjkF,OACAzD,KAAA4yF,wBACA5yF,KAAA6yF,kBACA7yF,MAOA81F,gBAAA,WACA,OAAA91F,KAAA0nF,MAAA57E,MAAA9L,KAAAgxF,eAAAhxF,KAAAqxF,cAAA/8E,KAAA,KAQAyhF,qBAAA,SAAAC,GACA,IAAAp0E,EAAA,EAAA1c,EAAA8wF,EAAA,EAGA,GAAAh2F,KAAAkyF,SAAAh0E,KAAAle,KAAA0nF,MAAAxiF,IACA,KAAAlF,KAAAkyF,SAAAh0E,KAAAle,KAAA0nF,MAAAxiF,KACA0c,IACA1c,IAGA,KAAA,KAAAgZ,KAAAle,KAAA0nF,MAAAxiF,KAAAA,GAAA,GACA0c,IACA1c,IAGA,OAAA8wF,EAAAp0E,GAQAq0E,sBAAA,SAAAD,GACA,IAAAp0E,EAAA,EAAA1c,EAAA8wF,EAGA,GAAAh2F,KAAAkyF,SAAAh0E,KAAAle,KAAA0nF,MAAAxiF,IACA,KAAAlF,KAAAkyF,SAAAh0E,KAAAle,KAAA0nF,MAAAxiF,KACA0c,IACA1c,IAGA,KAAA,KAAAgZ,KAAAle,KAAA0nF,MAAAxiF,KAAAA,EAAAlF,KAAA0nF,MAAAjkF,QACAme,IACA1c,IAGA,OAAA8wF,EAAAp0E,GAQAs0E,qBAAA,SAAAF,GAGA,IAFA,IAAAp0E,EAAA,EAAA1c,EAAA8wF,EAAA,GAEA,KAAA93E,KAAAle,KAAA0nF,MAAAxiF,KAAAA,GAAA,GACA0c,IACA1c,IAGA,OAAA8wF,EAAAp0E,GAQAu0E,sBAAA,SAAAH,GAGA,IAFA,IAAAp0E,EAAA,EAAA1c,EAAA8wF,GAEA,KAAA93E,KAAAle,KAAA0nF,MAAAxiF,KAAAA,EAAAlF,KAAA0nF,MAAAjkF,QACAme,IACA1c,IAGA,OAAA8wF,EAAAp0E,GASAw0E,mBAAA,SAAApF,EAAAqF,GAOA,IANA,IAAA1jE,EAAA3yB,KAAA0nF,MACAxiF,EAAAlF,KAAAkyF,SAAAh0E,KAAAyU,EAAAq+D,IAAAA,EAAA,EAAAA,EACAn+C,EAAAlgB,EAAAztB,GAEA/D,EAAA1D,EAAA0D,WAEAA,EAAA+c,KAAA20B,IAAA3tC,EAAA,GAAAA,EAAAytB,EAAAlvB,QAEAovC,EAAAlgB,EADAztB,GAAAmxF,GAMA,OAHAl1F,EAAA+c,KAAA20B,KACA3tC,GAAA,IAAAmxF,EAAA,EAAA,GAEAnxF,GAOAoxF,WAAA,SAAAtF,GACAA,EAAAA,GAAAhxF,KAAAgxF,eACA,IAAAuF,EAAAv2F,KAAAo2F,mBAAApF,GAAA,GACAwF,EAAAx2F,KAAAo2F,mBAAApF,EAAA,GAEAhxF,KAAAgxF,eAAAuF,EACAv2F,KAAAqxF,aAAAmF,EACAx2F,KAAA4yF,wBACA5yF,KAAA6yF,kBACA7yF,KAAAgzF,2BASAyD,WAAA,SAAAzF,GACAA,EAAAA,GAAAhxF,KAAAgxF,eACA,IAAAuF,EAAAv2F,KAAAk2F,qBAAAlF,GACAwF,EAAAx2F,KAAAm2F,sBAAAnF,GAMA,OAJAhxF,KAAAgxF,eAAAuF,EACAv2F,KAAAqxF,aAAAmF,EACAx2F,KAAA4yF,wBACA5yF,KAAA6yF,kBACA7yF,MAQA02F,aAAA,SAAA71E,GACA,IAAA7gB,KAAAwlD,WAAAxlD,KAAA4xF,SAsBA,OAlBA5xF,KAAAlB,SACAkB,KAAAlB,OAAA8rC,aACA5qC,KAAA22F,oBAAA32F,KAAAlB,SAGAkB,KAAAwlD,WAAA,EAEAxlD,KAAA42F,mBAAA/1E,GACA7gB,KAAAurD,eAAAC,QACAxrD,KAAAurD,eAAAlnD,MAAArE,KAAA2yB,KACA3yB,KAAA6yF,kBACA7yF,KAAA62F,oBACA72F,KAAA82F,mBACA92F,KAAA+2F,gBAAA/2F,KAAA2yB,KAEA3yB,KAAA+0F,QACA/0F,KAAA+D,KAAA,mBACA/D,KAAA4yF,wBACA5yF,KAAAlB,QAGAkB,KAAAlB,OAAAiF,KAAA,wBAAAoO,OAAAnS,OACAA,KAAAg3F,uBACAh3F,KAAAlB,OAAAiG,mBACA/E,MALAA,MAQA22F,oBAAA,SAAA73F,GACAA,EAAAuvC,iBACAvvC,EAAAuvC,gBAAAxgC,QAAA,SAAApG,GACAA,EAAAggD,UAAA,EACAhgD,EAAA+9C,WACA/9C,EAAA+oD,iBASAwmC,qBAAA,WACAh3F,KAAAlB,OAAA6E,GAAA,aAAA3D,KAAA40F,mBAMAA,iBAAA,SAAA5wF,GACA,GAAAhE,KAAA2zF,eAAA3zF,KAAAwlD,UAAA,CAIA,IAAA+wC,EAAAv2F,KAAAi3F,6BAAAjzF,EAAA6c,GACAq2E,EAAAl3F,KAAAgxF,eACAmG,EAAAn3F,KAAAqxF,cAEAkF,IAAAv2F,KAAAo3F,6BAAAF,IAAAC,GAEAD,IAAAX,GAAAY,IAAAZ,KAIAA,EAAAv2F,KAAAo3F,6BACAp3F,KAAAgxF,eAAAhxF,KAAAo3F,4BACAp3F,KAAAqxF,aAAAkF,IAGAv2F,KAAAgxF,eAAAuF,EACAv2F,KAAAqxF,aAAArxF,KAAAo3F,6BAEAp3F,KAAAgxF,iBAAAkG,GAAAl3F,KAAAqxF,eAAA8F,IACAn3F,KAAAq3F,wBACAr3F,KAAA4yF,wBACA5yF,KAAA6yF,kBACA7yF,KAAAgzF,8BAOA8D,iBAAA,WACA92F,KAAA07C,YAAA,OAEA17C,KAAAlB,SACAkB,KAAAlB,OAAA88C,cAAA57C,KAAAlB,OAAA68C,WAAA,QAGA37C,KAAAszD,YAAAtzD,KAAA6xF,mBACA7xF,KAAAg0D,YAAAh0D,KAAAs/C,YAAA,EACAt/C,KAAAk0D,cAAAl0D,KAAAm0D,eAAA,GAMAmjC,8BAAA,SAAA3yE,EAAAyB,EAAAuM,GACA,IAAA4kE,EAAA5kE,EAAA7mB,MAAA,EAAA6Y,GACA6yE,EAAA/5F,EAAA2F,KAAAsI,OAAAuP,cAAAs8E,GAAA9zF,OACA,GAAAkhB,IAAAyB,EACA,OAAA4qE,eAAAwG,EAAAnG,aAAAmG,GAEA,IAAAC,EAAA9kE,EAAA7mB,MAAA6Y,EAAAyB,GACAsxE,EAAAj6F,EAAA2F,KAAAsI,OAAAuP,cAAAw8E,GAAAh0F,OACA,OAAAutF,eAAAwG,EAAAnG,aAAAmG,EAAAE,IAMAC,8BAAA,SAAAhzE,EAAAyB,EAAAshE,GACA,IAAA6P,EAAA7P,EAAA57E,MAAA,EAAA6Y,GACA6yE,EAAAD,EAAAjjF,KAAA,IAAA7Q,OACA,GAAAkhB,IAAAyB,EACA,OAAA4qE,eAAAwG,EAAAnG,aAAAmG,GAEA,IAAAC,EAAA/P,EAAA57E,MAAA6Y,EAAAyB,GACAsxE,EAAAD,EAAAnjF,KAAA,IAAA7Q,OACA,OAAAutF,eAAAwG,EAAAnG,aAAAmG,EAAAE,IAMA7E,gBAAA,WAEA,GADA7yF,KAAA+yF,qBACA/yF,KAAAurD,eAAA,CAGA,IAAAvrD,KAAAuyF,kBAAA,CACA,IAAAqF,EAAA53F,KAAA23F,8BAAA33F,KAAAgxF,eAAAhxF,KAAAqxF,aAAArxF,KAAA0nF,OACA1nF,KAAAurD,eAAAylC,eAAA4G,EAAA5G,eACAhxF,KAAAurD,eAAA8lC,aAAAuG,EAAAvG,aAEArxF,KAAA63F,2BAMAC,mBAAA,WACA,GAAA93F,KAAAurD,eAAA,CAGAvrD,KAAA+yF,qBACA/yF,KAAA2yB,KAAA3yB,KAAAurD,eAAAlnD,MACArE,KAAAuuF,+BACAvuF,KAAAgnF,iBACAhnF,KAAAstC,aAEA,IAAAsqD,EAAA53F,KAAAs3F,8BACAt3F,KAAAurD,eAAAylC,eAAAhxF,KAAAurD,eAAA8lC,aAAArxF,KAAAurD,eAAAlnD,OACArE,KAAAqxF,aAAArxF,KAAAgxF,eAAA4G,EAAAvG,aACArxF,KAAAuyF,oBACAvyF,KAAAgxF,eAAA4G,EAAA5G,gBAEAhxF,KAAA63F,2BAMAA,uBAAA,WACA,GAAA73F,KAAAgxF,iBAAAhxF,KAAAqxF,aAAA,CACA,IAAApkF,EAAAjN,KAAA+3F,wBACA/3F,KAAAurD,eAAAt+C,MAAAzC,KAAAyC,EAAAzC,KACAxK,KAAAurD,eAAAt+C,MAAAxC,IAAAwC,EAAAxC,MAQAstF,sBAAA,WACA,IAAA/3F,KAAAlB,OACA,OAAAuK,EAAA,EAAAC,EAAA,GAEA,IAAA0uF,EAAAh4F,KAAAuyF,kBAAAvyF,KAAAi4F,iBAAAj4F,KAAAgxF,eACAmC,EAAAnzF,KAAAozF,qBAAA4E,GACAvE,EAAAzzF,KAAAkuF,oBAAA8J,GACArP,EAAA8K,EAAA9K,UACA71C,EAAA2gD,EAAA3gD,UACA4gD,EAAA1zF,KAAAyqF,qBAAA9B,EAAA71C,EAAA,YAAA9yC,KAAA6wB,WACAo5D,EAAAkJ,EAAAlJ,WACA/8D,EAAAltB,KAAAy1B,sBACA7rB,GACAP,EAAA8pF,EAAA3oF,KAAAy/E,EACA3gF,EAAA6pF,EAAA1oF,IAAA0oF,EAAAhJ,UAAAuJ,GAEArtC,EAAArmD,KAAAlB,OAAAgsC,mBACAotD,EAAAl4F,KAAAlB,OAAAqsC,cACAgtD,EAAAD,EAAA34F,MAAA8mD,EACA+xC,EAAAF,EAAA/4F,OAAAknD,EACAkjC,EAAA4O,EAAAzE,EACA/G,EAAAyL,EAAA1E,EACAziF,EAAAinF,EAAAG,YAAAF,EACAjnF,EAAAgnF,EAAAI,aAAAF,EAuBA,OArBAxuF,EAAAnM,EAAA2F,KAAAuG,eAAAC,EAAAsjB,IACAtjB,EAAAnM,EAAA2F,KAAAuG,eAAAC,EAAA5J,KAAAlB,OAAA6qC,oBACAtgC,GAAA4H,EACArH,EAAAN,GAAA4H,EACAtH,EAAAP,EAAA,IACAO,EAAAP,EAAA,GAEAO,EAAAP,EAAAkgF,IACA3/E,EAAAP,EAAAkgF,GAEA3/E,EAAAN,EAAA,IACAM,EAAAN,EAAA,GAEAM,EAAAN,EAAAqjF,IACA/iF,EAAAN,EAAAqjF,GAIA/iF,EAAAP,GAAArJ,KAAAlB,OAAAusC,QAAA7gC,KACAZ,EAAAN,GAAAtJ,KAAAlB,OAAAusC,QAAA5gC,KAEAD,KAAAZ,EAAAP,EAAA,KAAAoB,IAAAb,EAAAN,EAAA,KAAA4B,SAAAwoF,EAAA,KAAAA,WAAAA,IAMAmD,kBAAA,WACA72F,KAAAu4F,aACAvkC,YAAAh0D,KAAAg0D,YACAV,YAAAtzD,KAAAszD,YACAY,cAAAl0D,KAAAk0D,cACAC,cAAAn0D,KAAAm0D,cACAzY,YAAA17C,KAAA07C,YACA4D,WAAAt/C,KAAAs/C,WACA1D,cAAA57C,KAAAlB,QAAAkB,KAAAlB,OAAA88C,cACAD,WAAA37C,KAAAlB,QAAAkB,KAAAlB,OAAA68C,aAOA68C,qBAAA,WACAx4F,KAAAu4F,cAIAv4F,KAAA07C,YAAA17C,KAAAu4F,YAAA78C,YACA17C,KAAAg0D,YAAAh0D,KAAAu4F,YAAAvkC,YACAh0D,KAAAszD,YAAAtzD,KAAAu4F,YAAAjlC,YACAtzD,KAAAs/C,WAAAt/C,KAAAu4F,YAAAj5C,WACAt/C,KAAAk0D,cAAAl0D,KAAAu4F,YAAArkC,cACAl0D,KAAAm0D,cAAAn0D,KAAAu4F,YAAApkC,cAEAn0D,KAAAlB,SACAkB,KAAAlB,OAAA88C,cAAA57C,KAAAu4F,YAAA38C,cACA57C,KAAAlB,OAAA68C,WAAA37C,KAAAu4F,YAAA58C,cASA6U,YAAA,WACA,IAAAioC,EAAAz4F,KAAA+2F,kBAAA/2F,KAAA2yB,KA0BA,OAzBA3yB,KAAAynD,UAAA,EACAznD,KAAAwlD,WAAA,EAEAxlD,KAAAqxF,aAAArxF,KAAAgxF,eAEAhxF,KAAAurD,iBACAvrD,KAAAurD,eAAAvjB,MAAAhoC,KAAAurD,eAAAvjB,OACAhoC,KAAAlB,QAAAkB,KAAAurD,eAAAl+C,WAAAC,YAAAtN,KAAAurD,gBACAvrD,KAAAurD,eAAA,MAGAvrD,KAAA21F,uBACA31F,KAAAw4F,uBACAx4F,KAAAmyF,sBAAA,EACAnyF,KAAAuuF,+BACAvuF,KAAAgnF,iBACAhnF,KAAAstC,aAEAttC,KAAA+D,KAAA,kBACA00F,GAAAz4F,KAAA+D,KAAA,YACA/D,KAAAlB,SACAkB,KAAAlB,OAAAyF,IAAA,aAAAvE,KAAA40F,kBACA50F,KAAAlB,OAAAiF,KAAA,uBAAAoO,OAAAnS,OACAy4F,GAAAz4F,KAAAlB,OAAAiF,KAAA,mBAAAoO,OAAAnS,QAEAA,MAMA04F,wBAAA,WACA,IAAA,IAAAh1F,KAAA1D,KAAAoe,OACApe,KAAAsnF,WAAA5jF,WACA1D,KAAAoe,OAAA1a,IAUAi1F,kBAAA,SAAAh0E,EAAAyB,GACA,IAMAliB,EAAA00F,EANAC,EAAA74F,KAAAkuF,oBAAAvpE,GAAA,GACAm0E,EAAA94F,KAAAkuF,oBAAA9nE,GAAA,GACA2yE,EAAAF,EAAAlQ,UACAqQ,EAAAH,EAAA/lD,UACAmmD,EAAAH,EAAAnQ,UACAuQ,EAAAJ,EAAAhmD,UAEA,GAAAimD,IAAAE,EAAA,CAEA,GAAAj5F,KAAAoe,OAAA26E,GACA,IAAA70F,EAAA80F,EAAA90F,EAAAlE,KAAAwnF,oBAAAuR,GAAAt1F,OAAAS,WACAlE,KAAAoe,OAAA26E,GAAA70F,GAIA,GAAAlE,KAAAoe,OAAA66E,GACA,IAAA/0F,EAAAg1F,EAAAh1F,EAAAlE,KAAAwnF,oBAAAyR,GAAAx1F,OAAAS,KACA00F,EAAA54F,KAAAoe,OAAA66E,GAAA/0F,MAEAlE,KAAAoe,OAAA26E,KAAA/4F,KAAAoe,OAAA26E,OACA/4F,KAAAoe,OAAA26E,GAAAC,EAAA90F,EAAAg1F,GAAAN,GAKA,IAAA10F,EAAA60F,EAAA,EAAA70F,GAAA+0F,EAAA/0F,WACAlE,KAAAoe,OAAAla,GAGAlE,KAAAm5F,gBAAAF,EAAAF,EAAAE,QAIA,GAAAj5F,KAAAoe,OAAA26E,GAAA,CACAH,EAAA54F,KAAAoe,OAAA26E,GACA,IAAAK,EAAAvmD,EAAAyqC,EAAA4b,EAAAF,EACA,IAAA90F,EAAA80F,EAAA90F,EAAAg1F,EAAAh1F,WACA00F,EAAA10F,GAEA,IAAA2uC,KAAA7yC,KAAAoe,OAAA26E,IACAK,EAAAl3E,SAAA2wB,EAAA,MACAqmD,IACAN,EAAAQ,EAAA9b,GAAAsb,EAAA/lD,UACA+lD,EAAA/lD,MAYAsmD,gBAAA,SAAAxQ,EAAA/mE,GAGA,IAAAy3E,EAAA/7F,EAAA0C,KAAAoe,QACA,IAAA,IAAAiqE,KAAAroF,KAAAoe,OAAA,CACA,IAAAk7E,EAAAp3E,SAAAmmE,EAAA,IACAiR,EAAA3Q,IACA3oF,KAAAoe,OAAAk7E,EAAA13E,GAAAy3E,EAAAC,GACAD,EAAAC,EAAA13E,WACA5hB,KAAAoe,OAAAk7E,MAMAjC,sBAAA,WACAr3F,KAAAg1F,oBAAAh1F,KAAAg1F,kBAAAK,WACAr1F,KAAAw1F,4BAAAx1F,KAAAw1F,0BAAAH,WAEAr1F,KAAA8yF,qBAWAyG,yBAAA,SAAA5Q,EAAA71C,EAAA0mD,EAAAC,GACA,IAAAC,EACAC,KACAC,GAAA,EAUA,IAAA,IAAA10F,KARAs0F,IAAAA,EAAA,GACAx5F,KAAAm5F,gBAAAxQ,EAAA6Q,GACAx5F,KAAAoe,OAAAuqE,KACA+Q,EAAA15F,KAAAoe,OAAAuqE,GAAA,IAAA71C,EAAAA,EAAAA,EAAA,IAKA9yC,KAAAoe,OAAAuqE,GAAA,CACA,IAAAkR,EAAA33E,SAAAhd,EAAA,IACA20F,GAAA/mD,IACA8mD,GAAA,EACAD,EAAAE,EAAA/mD,GAAA9yC,KAAAoe,OAAAuqE,GAAAzjF,UAEAlF,KAAAoe,OAAAuqE,GAAAzjF,IAWA,IARA00F,EACA55F,KAAAoe,OAAAuqE,EAAA6Q,GAAAG,SAGA35F,KAAAoe,OAAAuqE,EAAA6Q,GAIAA,EAAA,GACAA,IACAC,GAAAA,EAAAD,GACAx5F,KAAAoe,OAAAuqE,EAAA6Q,IAAA14C,EAAAxjD,EAAAm8F,EAAAD,KAEAE,EACA15F,KAAAoe,OAAAuqE,EAAA6Q,IAAA14C,EAAAxjD,EAAAo8F,WAGA15F,KAAAoe,OAAAuqE,EAAA6Q,GAGAx5F,KAAAyuF,kBAAA,GAUAqL,sBAAA,SAAAnR,EAAA71C,EAAAinD,EAAAN,GACAz5F,KAAAoe,SACApe,KAAAoe,WAEA,IAAA47E,EAAAh6F,KAAAoe,OAAAuqE,GACAsR,EAAAD,EAAA18F,EAAA08F,MAKA,IAAA,IAAA90F,KAHA60F,IAAAA,EAAA,GAGAE,EAAA,CACA,IAAAC,EAAAh4E,SAAAhd,EAAA,IACAg1F,GAAApnD,IACAknD,EAAAE,EAAAH,GAAAE,EAAAC,GAEAD,EAAAC,EAAAH,WACAC,EAAAE,IAKA,GADAl6F,KAAAyuF,kBAAA,EACAgL,EACA,KAAAM,KACA/qF,OAAAq2B,KAAAo0D,EAAAM,IAAAt2F,SAGAzD,KAAAoe,OAAAuqE,KACA3oF,KAAAoe,OAAAuqE,OAEA3oF,KAAAoe,OAAAuqE,GAAA71C,EAAAinD,GAAAz8F,EAAAm8F,EAAAM,UAIA,GAAAC,EAIA,IADA,IAAAG,EAAAH,EAAAlnD,EAAAA,EAAA,EAAA,GACAqnD,GAAAJ,KACA/5F,KAAAoe,OAAAuqE,GAAA71C,EAAAinD,GAAAz8F,EAAA68F,IAUAC,oBAAA,SAAAC,EAAA11E,EAAA80E,GAGA,IAFA,IAAAa,EAAAt6F,KAAAkuF,oBAAAvpE,GAAA,GACA41E,GAAA,GAAAC,EAAA,EACAt2F,EAAA,EAAAA,EAAAm2F,EAAA52F,OAAAS,IACA,OAAAm2F,EAAAn2F,GAEAq2F,IADAC,GACA,EAGAD,EAAAC,KAGAD,EAAA,GAAA,IACAv6F,KAAA85F,sBAAAQ,EAAA3R,UAAA2R,EAAAxnD,UAAAynD,EAAA,GAAAd,GACAA,EAAAA,GAAAA,EAAA3tF,MAAAyuF,EAAA,GAAA,IAEAC,GAAAx6F,KAAAu5F,yBACAe,EAAA3R,UAAA2R,EAAAxnD,UAAAynD,EAAA,GAAAC,GACA,IAAA,IAAAt2F,EAAA,EAAAA,EAAAs2F,EAAAt2F,IACAq2F,EAAAr2F,GAAA,EACAlE,KAAA85F,sBAAAQ,EAAA3R,UAAAzkF,EAAA,EAAAq2F,EAAAr2F,GAAAu1F,GAEAA,IACAz5F,KAAAoe,OAAAk8E,EAAA3R,UAAAzkF,GAAA,GAAAu1F,EAAA,IAEAA,EAAAA,GAAAA,EAAA3tF,MAAAyuF,EAAAr2F,GAAA,GAGAq2F,EAAAr2F,GAAA,GACAlE,KAAA85F,sBAAAQ,EAAA3R,UAAAzkF,EAAA,EAAAq2F,EAAAr2F,GAAAu1F,IAQAgB,8BAAA,SAAA91E,EAAAyB,EAAAwxE,GACAA,GAAAjzE,GACAyB,IAAAzB,EACA3kB,KAAAoyF,oBAAA,OAEA,UAAApyF,KAAAoyF,sBACApyF,KAAAoyF,oBAAA,OACApyF,KAAAqxF,aAAA1sE,GAEA3kB,KAAAgxF,eAAA4G,GAEAA,EAAAjzE,GAAAizE,EAAAxxE,EACA,UAAApmB,KAAAoyF,oBACApyF,KAAAqxF,aAAAuG,EAGA53F,KAAAgxF,eAAA4G,GAKAxxE,IAAAzB,EACA3kB,KAAAoyF,oBAAA,QAEA,SAAApyF,KAAAoyF,sBACApyF,KAAAoyF,oBAAA,QACApyF,KAAAgxF,eAAA5qE,GAEApmB,KAAAqxF,aAAAuG,IAIA8C,yBAAA,WACA,IAAAj3F,EAAAzD,KAAA2yB,KAAAlvB,OACAzD,KAAAgxF,eAAAvtF,EACAzD,KAAAgxF,eAAAvtF,EAEAzD,KAAAgxF,eAAA,IACAhxF,KAAAgxF,eAAA,GAEAhxF,KAAAqxF,aAAA5tF,EACAzD,KAAAqxF,aAAA5tF,EAEAzD,KAAAqxF,aAAA,IACArxF,KAAAqxF,aAAA,MAOA5zF,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAk0F,MAAA1iF,WAIA0lF,0BAAA,WAGA30F,KAAA26F,iBAAA,IAAA/1E,KAGA5kB,KAAA46F,qBAAA,IAAAh2E,KAEA5kB,KAAA66F,iBAEA76F,KAAA2D,GAAA,YAAA3D,KAAAs2C,cAOAA,YAAA,SAAAtyC,GACA,GAAAhE,KAAAlB,OAAA,CAGAkB,KAAA86F,gBAAA,IAAAl2E,KACA,IAAAm2E,EAAA/2F,EAAAuyC,QACAv2C,KAAAg7F,cAAAD,KACA/6F,KAAA+D,KAAA,cAAAC,GACAhE,KAAAi7F,WAAAj3F,EAAA6c,IAEA7gB,KAAA46F,oBAAA56F,KAAA26F,gBACA36F,KAAA26F,gBAAA36F,KAAA86F,eACA96F,KAAA66F,cAAAE,EACA/6F,KAAAk7F,gBAAAl7F,KAAAwlD,UACAxlD,KAAAm7F,eAAAn7F,KAAAynD,WAGAuzC,cAAA,SAAAD,GACA,OAAA/6F,KAAA86F,eAAA96F,KAAA26F,gBAAA,KACA36F,KAAA26F,gBAAA36F,KAAA46F,oBAAA,KACA56F,KAAA66F,cAAAxxF,IAAA0xF,EAAA1xF,GACArJ,KAAA66F,cAAAvxF,IAAAyxF,EAAAzxF,GAMA2xF,WAAA,SAAAp6E,GACAA,EAAAgrC,gBAAAhrC,EAAAgrC,iBACAhrC,EAAAkrC,iBAAAlrC,EAAAkrC,mBAMA2oC,4BAAA,WACA10F,KAAAo7F,uBACAp7F,KAAAq7F,qBACAr7F,KAAAs7F,cAMAC,mBAAA,SAAAv3F,GACAhE,KAAAwlD,WAGAxlD,KAAAs2F,WAAAt2F,KAAAi3F,6BAAAjzF,EAAA6c,KAMA26E,mBAAA,SAAAx3F,GACAhE,KAAAwlD,WAGAxlD,KAAAy2F,WAAAz2F,KAAAi3F,6BAAAjzF,EAAA6c,KAMAy6E,WAAA,WACAt7F,KAAA2D,GAAA,gBAAA3D,KAAAu7F,oBACAv7F,KAAA2D,GAAA,cAAA3D,KAAAw7F,qBASAC,kBAAA,SAAAz3F,IACAhE,KAAAlB,SAAAkB,KAAA4xF,UAAA5tF,EAAA6c,EAAAmoC,QAAA,IAAAhlD,EAAA6c,EAAAmoC,SAIAhpD,KAAA2zF,eAAA,EAEA3zF,KAAAynD,UACAznD,KAAA07F,iBAAA13F,EAAA6c,GAGA7gB,KAAAwlD,YACAxlD,KAAAo3F,4BAAAp3F,KAAAgxF,eACAhxF,KAAAgxF,iBAAAhxF,KAAAqxF,cACArxF,KAAA21F,uBAEA31F,KAAAgzF,6BASA2I,wBAAA,SAAA33F,IACAhE,KAAAlB,SAAAkB,KAAA4xF,UAAA5tF,EAAA6c,EAAAmoC,QAAA,IAAAhlD,EAAA6c,EAAAmoC,SAKAhpD,KAAAynD,SAAAznD,OAAAA,KAAAlB,OAAAsuC,gBAMAguD,qBAAA,WACAp7F,KAAA2D,GAAA,YAAA3D,KAAAy7F,mBACAz7F,KAAA2D,GAAA,mBAAA3D,KAAA27F,0BAMAN,mBAAA,WACAr7F,KAAA2D,GAAA,UAAA3D,KAAA47F,iBAOAA,eAAA,SAAA53F,GAEA,GADAhE,KAAA2zF,eAAA,KACA3zF,KAAA4xF,UAAA5xF,KAAAqtC,OACArpC,EAAAiG,WAAAjG,EAAAiG,UAAAijD,iBACAlpD,EAAA6c,EAAAmoC,QAAA,IAAAhlD,EAAA6c,EAAAmoC,QAFA,CAMA,GAAAhpD,KAAAlB,OAAA,CACA,IAAA+8F,EAAA77F,KAAAlB,OAAAsuC,cACA,GAAAyuD,GAAAA,IAAA77F,KAIA,OAIAA,KAAAm7F,iBAAAn7F,KAAAstD,UACAttD,KAAAynD,UAAA,EACAznD,KAAAm7F,gBAAA,EACAn7F,KAAA02F,aAAA1yF,EAAA6c,GACA7gB,KAAAgxF,iBAAAhxF,KAAAqxF,aACArxF,KAAA8yF,mBAAA,GAGA9yF,KAAAgzF,2BAIAhzF,KAAAynD,UAAA,IAQAi0C,iBAAA,SAAA76E,GACA,IAAA+2E,EAAA53F,KAAAi3F,6BAAAp2E,GACA8D,EAAA3kB,KAAAgxF,eAAA5qE,EAAApmB,KAAAqxF,aACAxwE,EAAAs/B,SACAngD,KAAAy6F,8BAAA91E,EAAAyB,EAAAwxE,IAGA53F,KAAAgxF,eAAA4G,EACA53F,KAAAqxF,aAAAuG,GAEA53F,KAAAwlD,YACAxlD,KAAA4yF,wBACA5yF,KAAA6yF,oBASAoE,6BAAA,SAAAp2E,GAUA,IATA,IAMA+oE,EANAkS,EAAA97F,KAAAi8D,gBAAAp7C,GACAk7E,EAAA,EACAx8F,EAAA,EACAJ,EAAA,EACA2zC,EAAA,EACA61C,EAAA,EAIAzkF,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,GACAhF,GAAA28F,EAAAxyF,EADApF,IAEA/E,GAAAa,KAAAuqF,gBAAArmF,GAAAlE,KAAAkR,OACAy3E,EAAAzkF,EACAA,EAAA,IACA4uC,GAAA9yC,KAAAsnF,WAAApjF,EAAA,GAAAT,OAAAzD,KAAA4oF,qBAAA1kF,EAAA,IAOA0lF,EAAA5pF,KAAAwqF,mBAAA7B,GACAppF,EAAAqqF,EAAA5pF,KAAAiR,OAEA,IAAA,IAAA0H,EAAA,EAAAC,EADA5Y,KAAAsnF,WAAAqB,GACAllF,OAAAkV,EAAAC,IACAmjF,EAAAx8F,GAEAA,GAAAS,KAAA4mF,aAAA+B,GAAAhwE,GAAA+vE,YAAA1oF,KAAAiR,SACA6qF,EAAAzyF,GAJAsP,IAKAm6B,IAMA,OAAA9yC,KAAAg8F,gCAAAF,EAAAC,EAAAx8F,EAAAuzC,EAAAl6B,IAMAojF,gCAAA,SAAAF,EAAAC,EAAAx8F,EAAA2F,EAAA0T,GAEA,IAAAqjF,EAAAH,EAAAzyF,EAAA0yF,EACAG,EAAA38F,EAAAu8F,EAAAzyF,EACAuY,EAAAs6E,EAAAD,GACAC,EAAA,EAAA,EAAA,EACA3F,EAAArxF,EAAA0c,EAUA,OARA5hB,KAAA2R,QACA4kF,EAAA39E,EAAA29E,GAGAA,EAAAv2F,KAAA0nF,MAAAjkF,SACA8yF,EAAAv2F,KAAA0nF,MAAAjkF,QAGA8yF,KAKA94F,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAAk0F,MAAA1iF,WAKA2nF,mBAAA,WACA52F,KAAAurD,eAAA9tD,EAAAE,SAAAqP,cAAA,YACAhN,KAAAurD,eAAAlsC,aAAA,iBAAA,OACArf,KAAAurD,eAAAlsC,aAAA,cAAA,OACArf,KAAAurD,eAAAlsC,aAAA,eAAA,OACArf,KAAAurD,eAAAlsC,aAAA,aAAA,SACArf,KAAAurD,eAAAlsC,aAAA,6BAAA,IACArf,KAAAurD,eAAAlsC,aAAA,OAAA,OACA,IAAApS,EAAAjN,KAAA+3F,wBAGA/3F,KAAAurD,eAAAt+C,MAAAqR,QAAA,4BAAArR,EAAAxC,IACA,WAAAwC,EAAAzC,KAAA,sFACAyC,EAAA/B,SAAA,IACAzN,EAAAE,SAAA6hB,KAAArS,YAAAnN,KAAAurD,gBAEA9tD,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,UAAAvrD,KAAAm8F,UAAAnzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,QAAAvrD,KAAAo8F,QAAApzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,QAAAvrD,KAAAq8F,QAAArzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,OAAAvrD,KAAAs8F,KAAAtzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,MAAAvrD,KAAAs8F,KAAAtzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,QAAAvrD,KAAAu8F,MAAAvzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,mBAAAvrD,KAAAw8F,mBAAAxzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,oBAAAvrD,KAAAy8F,oBAAAzzD,KAAAhpC,OACAvC,EAAA2F,KAAAqZ,YAAAzc,KAAAurD,eAAA,iBAAAvrD,KAAA08F,iBAAA1zD,KAAAhpC,QAEAA,KAAA28F,0BAAA38F,KAAAlB,SACArB,EAAA2F,KAAAqZ,YAAAzc,KAAAlB,OAAAqsC,cAAA,QAAAnrC,KAAA48F,QAAA5zD,KAAAhpC,OACAA,KAAA28F,0BAAA,IAeAE,SACAC,EAAA,cACAC,GAAA,cACAC,GAAA,eACAC,GAAA,iBACAC,GAAA,kBACAC,GAAA,iBACAC,GAAA,iBACAC,GAAA,eACAC,GAAA,kBACAC,GAAA,kBAMAC,eACAC,GAAA,OACAC,GAAA,OAMAC,iBACAC,GAAA,aAGAhB,QAAA,WAEA58F,KAAAurD,gBAAAvrD,KAAAurD,eAAAC,SAOA2wC,UAAA,SAAAt7E,GACA,GAAA7gB,KAAAwlD,YAAAxlD,KAAAuyF,kBAAA,CAGA,GAAA1xE,EAAAg9E,WAAA79F,KAAA68F,QACA78F,KAAAA,KAAA68F,QAAAh8E,EAAAg9E,UAAAh9E,OAEA,CAAA,KAAAA,EAAAg9E,WAAA79F,KAAA29F,kBAAA98E,EAAAi9E,SAAAj9E,EAAAk9E,UAIA,OAHA/9F,KAAAA,KAAA29F,gBAAA98E,EAAAg9E,UAAAh9E,GAKAA,EAAAm9E,2BACAn9E,EAAAgrC,iBACAhrC,EAAAg9E,SAAA,IAAAh9E,EAAAg9E,SAAA,IAEA79F,KAAAwoD,kBACAxoD,KAAAgzF,2BAGAhzF,KAAAlB,QAAAkB,KAAAlB,OAAAiG,qBAUAq3F,QAAA,SAAAv7E,IACA7gB,KAAAwlD,WAAAxlD,KAAAi+F,WAAAj+F,KAAAuyF,kBACAvyF,KAAAi+F,WAAA,EAGAp9E,EAAAg9E,WAAA79F,KAAAw9F,gBAAA38E,EAAAi9E,SAAAj9E,EAAAk9E,WACA/9F,KAAAA,KAAAw9F,cAAA38E,EAAAg9E,UAAAh9E,GAKAA,EAAAm9E,2BACAn9E,EAAAgrC,iBACA7rD,KAAAlB,QAAAkB,KAAAlB,OAAAiG,qBAOAs3F,QAAA,SAAAx7E,GACA,IAAAq9E,EAAAl+F,KAAAk+F,UAGA,GAFAl+F,KAAAk+F,WAAA,EACAr9E,GAAAA,EAAAkrC,kBACA/rD,KAAAwlD,UAAA,CAIA,IAGA24C,EAAA9D,EAHA+D,EAAAp+F,KAAAonF,oBAAApnF,KAAAurD,eAAAlnD,OAAAsjF,aACA0W,EAAAr+F,KAAA0nF,MAAAjkF,OACA66F,EAAAF,EAAA36F,OAEA86F,EAAAD,EAAAD,EACA,GAAA,KAAAr+F,KAAAurD,eAAAlnD,MAQA,OAPArE,KAAAoe,UACApe,KAAA83F,qBACA93F,KAAA+D,KAAA,gBACA/D,KAAAlB,SACAkB,KAAAlB,OAAAiF,KAAA,gBAAAoO,OAAAnS,OACAA,KAAAlB,OAAAiG,qBAKA,IAAAy5F,EAAAx+F,KAAAs3F,8BACAt3F,KAAAurD,eAAAylC,eACAhxF,KAAAurD,eAAA8lC,aACArxF,KAAAurD,eAAAlnD,OAEAo6F,EAAAz+F,KAAAgxF,eAAAwN,EAAAxN,eAEAhxF,KAAAgxF,iBAAAhxF,KAAAqxF,cACA8M,EAAAn+F,KAAA0nF,MAAA57E,MAAA9L,KAAAgxF,eAAAhxF,KAAAqxF,cACAkN,GAAAv+F,KAAAqxF,aAAArxF,KAAAgxF,gBAEAsN,EAAAD,IAEAF,EADAM,EACAz+F,KAAA0nF,MAAA57E,MAAA9L,KAAAqxF,aAAAkN,EAAAv+F,KAAAqxF,cAGArxF,KAAA0nF,MAAA57E,MAAA9L,KAAAgxF,eAAAhxF,KAAAgxF,eAAAuN,IAGAlE,EAAA+D,EAAAtyF,MAAA0yF,EAAAnN,aAAAkN,EAAAC,EAAAnN,cACA8M,GAAAA,EAAA16F,SACAzD,KAAAgxF,iBAAAhxF,KAAAqxF,aACArxF,KAAA24F,kBAAA34F,KAAAgxF,eAAAhxF,KAAAqxF,cAEAoN,EAEAz+F,KAAA24F,kBAAA34F,KAAAqxF,aAAA8M,EAAA16F,OAAAzD,KAAAqxF,cAGArxF,KAAA24F,kBAAA34F,KAAAqxF,aAAArxF,KAAAqxF,aAAA8M,EAAA16F,SAGA42F,EAAA52F,SACAy6F,GAAA7D,EAAA/lF,KAAA,MAAA7W,EAAAihG,aAAAjhG,EAAAmE,sBACA5B,KAAAo6F,oBAAAC,EAAAr6F,KAAAgxF,eAAAvzF,EAAAkhG,iBAGA3+F,KAAAo6F,oBAAAC,EAAAr6F,KAAAgxF,iBAGAhxF,KAAA83F,qBACA93F,KAAA+D,KAAA,WACA/D,KAAAlB,SACAkB,KAAAlB,OAAAiF,KAAA,gBAAAoO,OAAAnS,OACAA,KAAAlB,OAAAiG,sBAMAy3F,mBAAA,WACAx8F,KAAAuyF,mBAAA,GAMAmK,iBAAA,WACA18F,KAAAuyF,mBAAA,GAMAkK,oBAAA,SAAA57E,GACA7gB,KAAAi4F,iBAAAp3E,EAAA1O,OAAA6+E,eACAhxF,KAAA4+F,eAAA/9E,EAAA1O,OAAAk/E,aACArxF,KAAA63F,0BAOAyE,KAAA,WACAt8F,KAAAgxF,iBAAAhxF,KAAAqxF,eAKA5zF,EAAAihG,WAAA1+F,KAAA81F,kBACAr4F,EAAAmE,sBAIAnE,EAAAkhG,gBAAA,KAHAlhG,EAAAkhG,gBAAA3+F,KAAAkxF,mBAAAlxF,KAAAgxF,eAAAhxF,KAAAqxF,cAAA,GAKArxF,KAAAi+F,WAAA,IAOA1B,MAAA,WACAv8F,KAAAk+F,WAAA,GAQAW,kBAAA,SAAAh+E,GACA,OAAAA,GAAAA,EAAAi+E,eAAArhG,EAAAG,OAAAkhG,eAUAC,sBAAA,SAAApW,EAAA71C,GACA,IAAAv5B,EAAAylF,EAAAh/F,KAAAwqF,mBAAA7B,GAMA,OAJA71C,EAAA,IACAv5B,EAAAvZ,KAAA4mF,aAAA+B,GAAA71C,EAAA,GACAksD,GAAAzlF,EAAA/O,KAAA+O,EAAAha,OAEAy/F,GASAC,oBAAA,SAAAp+E,EAAAq+E,GACA,IAAAC,EAAAn/F,KAAAo/F,uBAAAv+E,EAAAq+E,GACAzL,EAAAzzF,KAAAkuF,oBAAAiR,GACAxW,EAAA8K,EAAA9K,UAEA,GAAAA,IAAA3oF,KAAAsnF,WAAA7jF,OAAA,GAAAod,EAAAk9E,SAAA,KAAAl9E,EAAAg9E,QAEA,OAAA79F,KAAA0nF,MAAAjkF,OAAA07F,EAEA,IAAArsD,EAAA2gD,EAAA3gD,UACAksD,EAAAh/F,KAAA++F,sBAAApW,EAAA71C,GACAusD,EAAAr/F,KAAAs/F,gBAAA3W,EAAA,EAAAqW,GACAO,EAAAv/F,KAAAsnF,WAAAqB,GAAA78E,MAAAgnC,GACA,OAAAysD,EAAA97F,OAAA47F,EAAA,EAAAr/F,KAAA4oF,qBAAAD,IAUAyW,uBAAA,SAAAv+E,EAAAq+E,GACA,OAAAr+E,EAAAs/B,UAAAngD,KAAAgxF,iBAAAhxF,KAAAqxF,cAAA6N,EACAl/F,KAAAqxF,aAGArxF,KAAAgxF,gBASAwO,kBAAA,SAAA3+E,EAAAq+E,GACA,IAAAC,EAAAn/F,KAAAo/F,uBAAAv+E,EAAAq+E,GACAzL,EAAAzzF,KAAAkuF,oBAAAiR,GACAxW,EAAA8K,EAAA9K,UACA,GAAA,IAAAA,GAAA9nE,EAAAk9E,SAAA,KAAAl9E,EAAAg9E,QAEA,OAAAsB,EAEA,IAAArsD,EAAA2gD,EAAA3gD,UACAksD,EAAAh/F,KAAA++F,sBAAApW,EAAA71C,GACAusD,EAAAr/F,KAAAs/F,gBAAA3W,EAAA,EAAAqW,GACAS,EAAAz/F,KAAAsnF,WAAAqB,GAAA78E,MAAA,EAAAgnC,GACA81C,EAAA5oF,KAAA4oF,qBAAAD,EAAA,GAEA,OAAA3oF,KAAAsnF,WAAAqB,EAAA,GAAAllF,OACA47F,EAAAI,EAAAh8F,QAAA,EAAAmlF,IAOA0W,gBAAA,SAAA3W,EAAAppF,GAOA,IALA,IAGAmgG,EAAAC,EAHAtX,EAAAroF,KAAAsnF,WAAAqB,GACAiB,EAAA5pF,KAAAwqF,mBAAA7B,GACAiX,EAAAhW,EACAiW,EAAA,EAEAlnF,EAAA,EAAAC,EAAAyvE,EAAA5kF,OAAAkV,EAAAC,EAAAD,IAGA,GAFA+mF,EAAA1/F,KAAA4mF,aAAA+B,GAAAhwE,GAAApZ,OACAqgG,GAAAF,GACAngG,EAAA,CACAogG,GAAA,EACA,IAAAG,EAAAF,EAAAF,EACAK,EAAAH,EACAI,EAAAj4F,KAAAsN,IAAAyqF,EAAAvgG,GACA0gG,EAAAl4F,KAAAsN,IAAA0qF,EAAAxgG,GAEAsgG,EAAAI,EAAAD,EAAArnF,EAAAA,EAAA,EACA,MASA,OAJAgnF,IACAE,EAAAxX,EAAA5kF,OAAA,GAGAo8F,GAQAK,eAAA,SAAAr/E,GACA7gB,KAAAgxF,gBAAAhxF,KAAA0nF,MAAAjkF,QAAAzD,KAAAqxF,cAAArxF,KAAA0nF,MAAAjkF,QAGAzD,KAAAmgG,oBAAA,OAAAt/E,IAOAu/E,aAAA,SAAAv/E,GACA,IAAA7gB,KAAAgxF,gBAAA,IAAAhxF,KAAAqxF,cAGArxF,KAAAmgG,oBAAA,KAAAt/E,IAQAs/E,oBAAA,SAAA9J,EAAAx1E,GAGA,IAAA2+B,EAAA,MAAA62C,EAAA,eACAz0E,EAAA5hB,KAAAw/C,GAAA3+B,EAAA,UAAA7gB,KAAAoyF,qBACAvxE,EAAAs/B,SACAngD,KAAAqgG,oBAAAz+E,GAGA5hB,KAAAsgG,uBAAA1+E,GAEA,IAAAA,IACA5hB,KAAA06F,2BACA16F,KAAA21F,uBACA31F,KAAAmyF,sBAAA,EACAnyF,KAAA8yF,oBACA9yF,KAAA4yF,wBACA5yF,KAAA6yF,oBAQAwN,oBAAA,SAAAz+E,GACA,IAAAg2E,EAAA,SAAA53F,KAAAoyF,oBACApyF,KAAAgxF,eAAApvE,EACA5hB,KAAAqxF,aAAAzvE,EAEA,OADA5hB,KAAAy6F,8BAAAz6F,KAAAgxF,eAAAhxF,KAAAqxF,aAAAuG,GACA,IAAAh2E,GAOA0+E,uBAAA,SAAA1+E,GASA,OARAA,EAAA,GACA5hB,KAAAgxF,gBAAApvE,EACA5hB,KAAAqxF,aAAArxF,KAAAgxF,iBAGAhxF,KAAAqxF,cAAAzvE,EACA5hB,KAAAgxF,eAAAhxF,KAAAqxF,cAEA,IAAAzvE,GAOA2+E,eAAA,SAAA1/E,GACA,IAAA7gB,KAAAgxF,gBAAA,IAAAhxF,KAAAqxF,cAGArxF,KAAAwgG,uBAAA,OAAA3/E,IAOA4/E,MAAA,SAAA5/E,EAAAnd,EAAA2yF,GACA,IAAAl0C,EACA,GAAAthC,EAAA4+B,OACA0C,EAAAniD,KAAA,mBAAAq2F,GAAAr2F,KAAA0D,QAEA,CAAA,IAAAmd,EAAAk9E,SAAA,KAAAl9E,EAAAg9E,SAAA,KAAAh9E,EAAAg9E,QAKA,OADA79F,KAAA0D,IAAA,SAAA2yF,GAAA,EAAA,GACA,EAJAl0C,EAAAniD,KAAA,mBAAAq2F,GAAAr2F,KAAA0D,IAMA,QAAAuc,WAAAkiC,GAAAniD,KAAA0D,KAAAy+C,EAEA,OADAniD,KAAA0D,GAAAy+C,GACA,GAOAu+C,UAAA,SAAA7/E,EAAAnd,GACA,OAAA1D,KAAAygG,MAAA5/E,EAAAnd,EAAA,SAMAi9F,WAAA,SAAA9/E,EAAAnd,GACA,OAAA1D,KAAAygG,MAAA5/E,EAAAnd,EAAA,UAOAk9F,2BAAA,SAAA//E,GACA,IAAAggF,GAAA,EAUA,OATA7gG,KAAAoyF,oBAAA,OAIApyF,KAAAqxF,eAAArxF,KAAAgxF,gBAAA,IAAAhxF,KAAAgxF,iBACA6P,EAAA7gG,KAAA0gG,UAAA7/E,EAAA,mBAGA7gB,KAAAqxF,aAAArxF,KAAAgxF,eACA6P,GAOAC,wBAAA,SAAAjgF,GACA,MAAA,UAAA7gB,KAAAoyF,qBAAApyF,KAAAgxF,iBAAAhxF,KAAAqxF,aACArxF,KAAA0gG,UAAA7/E,EAAA,gBAEA,IAAA7gB,KAAAgxF,gBACAhxF,KAAAoyF,oBAAA,OACApyF,KAAA0gG,UAAA7/E,EAAA,wBAFA,GAUAkgF,gBAAA,SAAAlgF,GACA7gB,KAAAgxF,gBAAAhxF,KAAA0nF,MAAAjkF,QAAAzD,KAAAqxF,cAAArxF,KAAA0nF,MAAAjkF,QAGAzD,KAAAwgG,uBAAA,QAAA3/E,IAQA2/E,uBAAA,SAAAnK,EAAAx1E,GACA,IAAAmgF,EAAA,aAAA3K,EAAA,OACAr2F,KAAAmyF,sBAAA,EAEAtxE,EAAAs/B,SACA6gD,GAAA,QAGAA,GAAA,WAEAhhG,KAAAghG,GAAAngF,KACA7gB,KAAA21F,uBACA31F,KAAA8yF,oBACA9yF,KAAA4yF,wBACA5yF,KAAA6yF,oBAQAoO,yBAAA,SAAApgF,GACA,MAAA,SAAA7gB,KAAAoyF,qBAAApyF,KAAAgxF,iBAAAhxF,KAAAqxF,aACArxF,KAAA2gG,WAAA9/E,EAAA,kBAEA7gB,KAAAqxF,eAAArxF,KAAA0nF,MAAAjkF,QACAzD,KAAAoyF,oBAAA,QACApyF,KAAA2gG,WAAA9/E,EAAA,sBAFA,GAUAqgF,4BAAA,SAAArgF,GACA,IAAAsgF,GAAA,EAUA,OATAnhG,KAAAoyF,oBAAA,QAEApyF,KAAAgxF,iBAAAhxF,KAAAqxF,cACA8P,EAAAnhG,KAAA2gG,WAAA9/E,EAAA,kBACA7gB,KAAAqxF,aAAArxF,KAAAgxF,gBAGAhxF,KAAAgxF,eAAAhxF,KAAAqxF,aAEA8P,GAUAC,YAAA,SAAAz8E,EAAAyB,QACA,IAAAA,IACAA,EAAAzB,EAAA,GAEA3kB,KAAA24F,kBAAAh0E,EAAAyB,GACApmB,KAAA0nF,MAAAriF,OAAAsf,EAAAyB,EAAAzB,GACA3kB,KAAA2yB,KAAA3yB,KAAA0nF,MAAApzE,KAAA,IACAtU,KAAA0G,IAAA,SAAA,GACA1G,KAAAuuF,+BACAvuF,KAAAgnF,iBACAhnF,KAAAstC,aAEAttC,KAAA04F,2BAeA2I,YAAA,SAAA1uE,EAAA1lB,EAAA0X,EAAAyB,QACA,IAAAA,IACAA,EAAAzB,GAEAyB,EAAAzB,GACA3kB,KAAA24F,kBAAAh0E,EAAAyB,GAEA,IAAAhL,EAAA3d,EAAA2F,KAAAsI,OAAAuP,cAAA0X,GACA3yB,KAAAo6F,oBAAAh/E,EAAAuJ,EAAA1X,GACAjN,KAAA0nF,SAAA5hF,OAAA9F,KAAA0nF,MAAA57E,MAAA,EAAA6Y,GAAAvJ,EAAApb,KAAA0nF,MAAA57E,MAAAsa,IACApmB,KAAA2yB,KAAA3yB,KAAA0nF,MAAApzE,KAAA,IACAtU,KAAA0G,IAAA,SAAA,GACA1G,KAAAuuF,+BACAvuF,KAAAgnF,iBACAhnF,KAAAstC,aAEAttC,KAAA04F,6BAQAn7F,EAAAE,EAAA2F,KAAA7F,QACAC,EAAA,OAEAC,EAAA2F,KAAA6B,OAAAgV,OAAAxc,EAAA4N,KAAA4D,WAOAmzD,OAAA,WACA,IAAAod,EAAAx/E,KAAAshG,wBACAC,EAAAvhG,KAAAwhG,iBAAAhiB,EAAAiiB,QAAAjiB,EAAAkiB,UACA,OAAA1hG,KAAA2hG,kBAAAJ,IAQA17D,MAAA,SAAAr4B,GACA,OAAAxN,KAAAmiE,qBACAniE,KAAAoiE,UACA50D,QAAAA,EAAAi1D,SAAA,EAAAG,YAAA,KAOA0+B,sBAAA,WACA,OACAI,UAAA1hG,KAAAT,MAAA,EACAkiG,SAAAzhG,KAAAb,OAAA,EACAyiG,QAAA5hG,KAAAuqF,gBAAA,KAOAoX,kBAAA,SAAAJ,GACA,IACAlgC,EAAArhE,KAAAshE,qBAAAthE,MACA,OACAuhG,EAAAt/B,YAAA3tD,KAAA,IACA,kCACAtU,KAAAyT,WAAA,gBAAAzT,KAAAyT,WAAAmH,QAAA,KAAA,KAAA,KAAA,GACA5a,KAAAkL,SAAA,cAAAlL,KAAAkL,SAAA,KAAA,GACAlL,KAAA2wB,UAAA,eAAA3wB,KAAA2wB,UAAA,KAAA,GACA3wB,KAAA4wB,WAAA,gBAAA5wB,KAAA4wB,WAAA,KAAA,GACAywC,EAAA,oBAAAA,EAAA,KAAA,GACA,UAAArhE,KAAAghE,cAVA,GAUA,IAAAhhE,KAAA+iE,gBAAA,KACAw+B,EAAAM,UAAAvtF,KAAA,IACA,cAUAktF,iBAAA,SAAAM,EAAAC,GACA,IAEA/N,EAFA6N,KACA5/B,KACA9iE,EAAA2iG,EAEA9hG,KAAAgiE,UAAAC,GAGA,IAAA,IAAA/9D,EAAA,EAAAC,EAAAnE,KAAAsnF,WAAA7jF,OAAAS,EAAAC,EAAAD,IACA8vF,EAAAh0F,KAAAwqF,mBAAAtmF,IACAlE,KAAAsmF,qBAAAtmF,KAAA0pF,SAAA,sBAAAxlF,KACAlE,KAAAgiG,kBAAA//B,EAAA/9D,EAAA69F,EAAA/N,EAAA70F,GAEAa,KAAAiiG,oBAAAJ,EAAA39F,EAAA69F,EAAA/N,EAAA70F,GACAA,GAAAa,KAAAuqF,gBAAArmF,GAGA,OACA29F,UAAAA,EACA5/B,YAAAA,IAOAigC,oBAAA,SAAArvD,EAAAsvD,EAAA33F,EAAAC,GACA,IAAA23F,EAAAvvD,IAAAA,EAAA1gB,QAAA0gB,EAAAtgC,MAAA/U,GACA6kG,EAAAriG,KAAAmhE,iBAAAghC,EAAAC,GACAE,EAAAD,EAAA,UAAAA,EAAA,IAAA,GACA7yF,EAAA2yF,EAAA5gC,OAAAghC,EAAA,GACAluF,EAAA5W,EAAAuR,OAAAqF,oBAIA,OAHA7E,IACA+yF,EAAA,QAAAhlG,EAAAiS,EAAA6E,GAAA,OAGA,aAAA9W,EAAAiN,EAAA6J,GAAA,QACA9W,EAAAkN,EAAA4J,GAAA,KAAAkuF,EACAD,EAAA,IACA7kG,EAAA2F,KAAAsI,OAAAsP,UAAA63B,GACA,YACAv+B,KAAA,KAGA2tF,oBAAA,SAAAJ,EAAAlZ,EAAAoZ,EAAAD,GAEA,IAEA/U,EACAC,EAEAlD,EAAA78E,EAGAggF,EARAp8D,EAAA7wB,KAAAuqF,gBAAA5B,GACAuE,GAAA,IAAAltF,KAAAkmF,UAAA/iF,QAAA,WAGAgqF,EAAA,GAEA7C,EAAA,EACAjC,EAAAroF,KAAAsnF,WAAAqB,GAGAmZ,GAAAjxE,GAAA,EAAA7wB,KAAAumF,mBAAAvmF,KAAA6wB,WACA,IAAA,IAAA3sB,EAAA,EAAAC,EAAAkkF,EAAA5kF,OAAA,EAAAS,GAAAC,EAAAD,IACA+oF,EAAA/oF,IAAAC,GAAAnE,KAAAymF,YACA0G,GAAA9E,EAAAnkF,GACA4lF,EAAA9pF,KAAA4mF,aAAA+B,GAAAzkF,GACA,IAAAomF,GACAyX,GAAAjY,EAAApB,YAAAoB,EAAAvqF,MACA+qF,GAAAR,EAAAvqF,OAGA+qF,GAAAR,EAAApB,YAEAwE,IAAAD,GACAjtF,KAAAgmF,eAAA9nE,KAAAmqE,EAAAnkF,MACA+oF,GAAA,GAGAA,IAEAF,EAAAA,GAAA/sF,KAAAssF,4BAAA3D,EAAAzkF,GACA8oF,EAAAhtF,KAAAssF,4BAAA3D,EAAAzkF,EAAA,GACA+oF,EAAAjtF,KAAAquF,uBAAAtB,EAAAC,IAEAC,IACAhgF,EAAAjN,KAAAutF,qBAAA5E,EAAAzkF,OACA29F,EAAAj+F,KAAA5D,KAAAkiG,oBAAA/U,EAAAlgF,EAAA80F,EAAAD,IACA3U,EAAA,GACAJ,EAAAC,EACA+U,GAAAzX,EACAA,EAAA,IAKAkY,gBAAA,SAAAvgC,EAAA37C,EAAA9b,EAAAC,EAAAlL,EAAAJ,GACA,IAAAkV,EAAA5W,EAAAuR,OAAAqF,oBACA4tD,EAAAr+D,KACA,aACA5D,KAAAkiE,mBAAA57C,GACA,OACA/oB,EAAAiN,EAAA6J,GACA,QACA9W,EAAAkN,EAAA4J,GACA,YACA9W,EAAAgC,EAAA8U,GACA,aACA9W,EAAA4B,EAAAkV,GACA,gBAGA2tF,kBAAA,SAAA//B,EAAA/9D,EAAA+lF,EAAA6X,GAOA,IANA,IAIAhY,EAAAC,EAJA1B,EAAAroF,KAAAsnF,WAAApjF,GACAylF,EAAA3pF,KAAAuqF,gBAAArmF,GAAAlE,KAAA6wB,WACAy5D,EAAA,EACAD,EAAA,EAEAR,EAAA7pF,KAAAyqF,qBAAAvmF,EAAA,EAAA,uBACAyU,EAAA,EAAAC,EAAAyvE,EAAA5kF,OAAAkV,EAAAC,EAAAD,IACAmxE,EAAA9pF,KAAA4mF,aAAA1iF,GAAAyU,IACAoxE,EAAA/pF,KAAAyqF,qBAAAvmF,EAAAyU,EAAA,0BACAkxE,GACAA,GAAA7pF,KAAAwiG,gBAAAvgC,EAAA4nB,EAAAI,EAAAI,EACAyX,EAAAxX,EAAAX,GACAU,EAAAP,EAAAt/E,KACA8/E,EAAAR,EAAAvqF,MACAsqF,EAAAE,GAGAO,GAAAR,EAAApB,YAGAqB,GAAA/pF,KAAAwiG,gBAAAvgC,EAAA8nB,EAAAE,EAAAI,EACAyX,EAAAxX,EAAAX,IAWAznB,mBAAA,SAAA79D,GACA,IAAAo+F,EAAAp+F,GAAA,iBAAAA,EAAA,IAAA5G,EAAAuoB,MAAA3hB,GAAA,GACA,OAAAo+F,GAAAA,EAAAx8E,aAAA,IAAAw8E,EAAA7wE,WAGA,YAAA6wE,EAAA7wE,WAAA,WAAA6wE,EAAA9wE,SAAA,GAAAkI,QAAA,IAFA,SAAAx1B,EAAA,KAQAq+F,qBAAA,SAAA/Z,GAEA,IADA,IAAAqB,EAAA,EAAA2Y,EAAA,EACAhqF,EAAA,EAAAA,EAAAgwE,EAAAhwE,IACAqxE,GAAAhqF,KAAAuqF,gBAAA5xE,GAGA,OADAgqF,EAAA3iG,KAAAuqF,gBAAA5xE,IAEAipF,QAAA5X,EACApoE,QAAA5hB,KAAAwmF,cAAAxmF,KAAAumF,mBAAAoc,GAAA3iG,KAAA6wB,WAAA7wB,KAAAwmF,iBASAxlB,aAAA,SAAAC,GACA,IAAA2hC,EAAAnlG,EAAAuR,OAAAC,UAAA+xD,aAAAl9D,KAAA9D,KAAAihE,GACA,OAAA2hC,EAAA,wBAOA,WAEA,aAYAnlG,EAAA+lD,QAAA/lD,EAAA2F,KAAA+Y,YAAA1e,EAAAk0F,MAAAl0F,EAAA6G,YAOAuB,KAAA,UAOAg9F,SAAA,GASAC,gBAAA,EAMAC,cAAA,KAKAjgD,iBAAA,EAMAwR,cAAA,EAOAuxB,yBAAApoF,EAAA4N,KAAA4D,UAAA42E,yBAAA//E,OAAA,SAMAk9F,aAAA,UAQAC,iBAAA,EAQAjc,eAAA,WACAhnF,KAAA+mF,kBAGA/mF,KAAAwlD,WAAAxlD,KAAA8yF,oBACA9yF,KAAAwoD,kBACAxoD,KAAA4nF,cAEA5nF,KAAA8iG,gBAAA,EAEA9iG,KAAAkjG,UAAAljG,KAAAmjG,kBAAAnjG,KAAAknF,cAEAlnF,KAAA8iG,gBAAA9iG,KAAAT,OACAS,KAAA0H,KAAA,QAAA1H,KAAA8iG,kBAEA,IAAA9iG,KAAAkmF,UAAA/iF,QAAA,YAEAnD,KAAA+nF,gBAGA/nF,KAAAb,OAAAa,KAAAgoF,iBACAhoF,KAAAouD,WAAA0J,YAAA,+BAUAqrC,kBAAA,SAAAC,GAMA,IALA,IAAAC,EAAA,EACAC,EAAA,EACAjF,EAAA,EACAjqF,KAEAlQ,EAAA,EAAAA,EAAAk/F,EAAA7b,cAAA9jF,OAAAS,IACA,OAAAk/F,EAAAzb,aAAA0W,IAAAn6F,EAAA,GACAo/F,EAAA,EACAjF,IACAgF,MAEArjG,KAAAijG,iBAAAjjG,KAAAgmF,eAAA9nE,KAAAklF,EAAAzb,aAAA0W,KAAAn6F,EAAA,IAEAo/F,IACAjF,KAGAjqF,EAAAlQ,IAAAmkF,KAAAgb,EAAAzhF,OAAA0hF,GAEAjF,GAAA+E,EAAA7b,cAAArjF,GAAAT,OACA6/F,GAAAF,EAAA7b,cAAArjF,GAAAT,OAGA,OAAA2Q,GAQAs1E,SAAA,SAAA7iF,EAAA8hF,GACA,GAAA3oF,KAAAkjG,YAAAljG,KAAAujG,WAAA,CACA,IAAAnvF,EAAApU,KAAAkjG,UAAAva,GACAv0E,IACAu0E,EAAAv0E,EAAAi0E,MAGA,OAAA5qF,EAAA4N,KAAA4D,UAAAy6E,SAAA5lF,KAAA9D,KAAA6G,EAAA8hF,IAQAmE,cAAA,SAAAnE,GACA,IAAA3oF,KAAAoe,OACA,OAAA,EAEA,IAAAolF,EAAA/7F,EAAAma,EAAA,EAAA6hF,EAAA9a,EAAA,EAAA+a,GAAA,EACAtvF,EAAApU,KAAAkjG,UAAAva,GAAAgb,EAAA3jG,KAAAkjG,UAAAva,EAAA,GAWA,IAAA,IAAAzyC,KAVA9hC,IACAu0E,EAAAv0E,EAAAi0E,KACAzmE,EAAAxN,EAAAwN,QAEA+hF,IACAF,EAAAE,EAAAtb,KACAqb,EAAAD,IAAA9a,EACA6a,EAAAG,EAAA/hF,QAEAna,OAAA,IAAAkhF,EAAA3oF,KAAAoe,QAAAiqE,KAAAroF,KAAAoe,OAAAuqE,IAEA,IAAA,IAAAxyC,KAAA1uC,EAAAyuC,GACA,GAAAC,GAAAv0B,KAAA8hF,GAAAvtD,EAAAqtD,GAEA,IAAA,IAAAvT,KAAAxoF,EAAAyuC,GAAAC,GACA,OAAA,EAKA,OAAA,GAQAo3C,qBAAA,SAAA5E,EAAA71C,GACA,GAAA9yC,KAAAkjG,YAAAljG,KAAAujG,WAAA,CACA,IAAAnvF,EAAApU,KAAAkjG,UAAAva,GACA,IAAAv0E,EACA,OAAA,KAEAu0E,EAAAv0E,EAAAi0E,KACAv1C,EAAA1+B,EAAAwN,OAAAkxB,EAEA,OAAA9yC,KAAA8b,UAAA,uBAAA6sE,EAAA71C,IASAi+C,qBAAA,SAAApI,EAAA71C,EAAA7lC,GACA,IAAAmH,EAAApU,KAAAkjG,UAAAva,GACAA,EAAAv0E,EAAAi0E,KACAv1C,EAAA1+B,EAAAwN,OAAAkxB,EAEA9yC,KAAAoe,OAAAuqE,GAAA71C,GAAA7lC,GAQAukF,wBAAA,SAAA7I,EAAA71C,GACA,IAAA1+B,EAAApU,KAAAkjG,UAAAva,GACAA,EAAAv0E,EAAAi0E,KACAv1C,EAAA1+B,EAAAwN,OAAAkxB,SACA9yC,KAAAoe,OAAAuqE,GAAA71C,IAWA+9C,cAAA,SAAAlI,GACA,IAAAv0E,EAAApU,KAAAkjG,UAAAva,GACA,QAAA3oF,KAAAoe,OAAAhK,EAAAi0E,OASAyI,cAAA,SAAAnI,GACA,IAAAv0E,EAAApU,KAAAkjG,UAAAva,GACA3oF,KAAAoe,OAAAhK,EAAAi0E,UAYAub,UAAA,SAAArlC,EAAAslC,GACA,IAAA3/F,EAAA4/F,KAEA,IADA9jG,KAAAujG,YAAA,EACAr/F,EAAA,EAAAA,EAAAq6D,EAAA96D,OAAAS,IACA4/F,EAAAA,EAAAh+F,OAAA9F,KAAA+jG,UAAAxlC,EAAAr6D,GAAAA,EAAA2/F,IAGA,OADA7jG,KAAAujG,YAAA,EACAO,GAaAE,aAAA,SAAAC,EAAAtb,EAAAub,GACA,IAAAlY,EAAAzsF,EAAA,EACA2kG,EAAAA,GAAA,EACA,IAAA,IAAAhgG,EAAA,EAAAC,EAAA8/F,EAAAxgG,OAAAS,EAAAC,EAAAD,IAAA,CACA,IAAAyd,EAAA3hB,KAAAmsF,gBAAA8X,EAAA//F,GAAAykF,EAAAzkF,EAAAggG,EAAAlY,GAHA,GAIAzsF,GAAAoiB,EAAA+mE,YACAsD,EAAAiY,EAAA//F,GAEA,OAAA3E,GAYAwkG,UAAA,SAAAI,EAAAxb,EAAAkb,EAAAO,GACA,IAAAlvD,EAAA,EACA+tD,EAAAjjG,KAAAijG,gBACA1b,KACAc,KAEAgc,EAAApB,EAAAxlG,EAAA2F,KAAAsI,OAAAuP,cAAAkpF,GAAAA,EAAAh4F,MAAAnM,KAAAgjG,cACAiB,EAAA,GACAriF,EAAA,EACA0iF,EAAArB,EAAA,GAAA,IACAsB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA1B,EAAA,EAAAjjG,KAAA8rF,yBACAsY,EAAAA,GAAA,EAEA,IAAAC,EAAA5gG,QACA4gG,EAAAzgG,SAEAigG,GAAAO,EACA,IAAA,IAAAlgG,EAAA,EAAAA,EAAAmgG,EAAA5gG,OAAAS,IAEA+/F,EAAAhB,EAAAoB,EAAAngG,GAAAzG,EAAA2F,KAAAsI,OAAAuP,cAAAopF,EAAAngG,IACAqgG,EAAAvkG,KAAAgkG,aAAAC,EAAAtb,EAAA/mE,GACAA,GAAAqiF,EAAAxgG,QAEAyxC,GAAAsvD,EAAAD,EAAAI,IAEAd,IAAAa,GACAnd,EAAA3jF,KAAAykF,GACAA,KACAnzC,EAAAqvD,EACAG,GAAA,GAGAxvD,GAAAyvD,EAGAD,GAAAzB,GACA5a,EAAAzkF,KAAA0gG,GAEAjc,EAAAA,EAAAviF,OAAAm+F,GAEAO,EAAAxkG,KAAAgkG,cAAAM,GAAA3b,EAAA/mE,GACAA,IACA8iF,GAAA,EAEAH,EAAAE,IACAA,EAAAF,GAUA,OANArgG,GAAAqjF,EAAA3jF,KAAAykF,GAEAoc,EAAAL,EAAApkG,KAAA8iG,kBACA9iG,KAAA8iG,gBAAA2B,EAAAE,EAAAP,GAGA7c,GASAiB,gBAAA,SAAAG,GACA,OAAA3oF,KAAAkjG,UAAAva,EAAA,IAIA3oF,KAAAkjG,UAAAva,EAAA,GAAAN,OAAAroF,KAAAkjG,UAAAva,GAAAN,MAYAO,qBAAA,SAAAD,GACA,OAAA3oF,KAAAijG,gBACAjjG,KAAAwoF,gBAAAG,GAAA,EAAA,EAEA,GAUAvB,oBAAA,SAAAz0D,GAIA,IAHA,IAAA08D,EAAA5xF,EAAA4N,KAAA4D,UAAAm4E,oBAAAtjF,KAAA9D,KAAA2yB,GACA40D,EAAAvnF,KAAA4jG,UAAAvU,EAAA9wB,MAAAv+D,KAAAT,OACAg/D,EAAA,IAAA/pD,MAAA+yE,EAAA9jF,QACAS,EAAA,EAAAA,EAAAqjF,EAAA9jF,OAAAS,IACAq6D,EAAAr6D,GAAAqjF,EAAArjF,GAAAoQ,KAAA,IAIA,OAFA+6E,EAAA9wB,MAAAA,EACA8wB,EAAA9H,cAAAA,EACA8H,GAGA3rC,YAAA,WACA,OAAA37C,KAAA7K,IAAA8C,KAAA6iG,SAAA7iG,KAAA8iG,kBAGApK,wBAAA,WACA,IAAAkM,KACA,IAAA,IAAAlhG,KAAA1D,KAAAkjG,UACAljG,KAAAsnF,WAAA5jF,KACAkhG,EAAA5kG,KAAAkjG,UAAAx/F,GAAA2kF,MAAA,GAGA,IAAA,IAAA3kF,KAAA1D,KAAAoe,OACAwmF,EAAAlhG,WACA1D,KAAAoe,OAAA1a,IAWAiiC,SAAA,SAAAC,GACA,OAAA5lC,KAAA8b,UAAA,YAAA,WAAA,mBAAAhW,OAAA8/B,OAWAnoC,EAAA+lD,QAAAz1C,WAAA,SAAA9I,EAAAS,GACA,OAAAjI,EAAAuR,OAAAyrD,YAAA,UAAAx1D,EAAAS,EAAA,SAtcA,GAycAjI,IAEAlB,EAAA,yBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAArmG,OAAAf,EAAAe,SAEAjC,EAAA,yBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAApsD,OAAAh7C,EAAAg7C,SAEAl8C,EAAA,wBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAA7+E,MAAAvoB,EAAAuoB,QAEAzpB,EAAA,0BACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAr9B,QAAA/pE,EAAA+pE,UAEAjrE,EAAA,wBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAl2F,MAAAlR,EAAAkR,QAEApS,EAAA,wBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAvwE,MAAA72B,EAAA62B,QAEA/3B,EAAA,uBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAA/+B,KAAAroE,EAAAqoE,OAEAvpE,EAAA,yBACA,aACA,uBACA,SAAAsoG,EAAApnG,GAKA,OAJAA,EAAAuR,OAAA1J,OAAA,WACA,OAAAtF,KAAAlB,OAAAwG,OAAAtF,OAGA6kG,EAAA71F,OAAAvR,EAAAuR,SAEAzS,EAAA,uBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAptD,KAAAh6C,EAAAg6C,OAEAl7C,EAAA,wBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAz7F,MAAA3L,EAAA2L,QAEA7M,EAAA,0BACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAr8B,QAAA/qE,EAAA+qE,UAEAjsE,EAAA,2BACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAh9B,SAAApqE,EAAAoqE,WAEAtrE,EAAA,uBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAlrD,KAAAl8C,EAAAk8C,OAEAp9C,EAAA,uBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAx5F,KAAA5N,EAAA4N,OAEA9O,EAAA,2BACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAz9B,SAAA3pE,EAAA2pE,WAEA7qE,EAAA,uBACA,aACA,uBACA,SAAAsoG,EAAApnG,GACA,OAAAonG,EAAAzhG,KAAA3F,EAAA2F,OAEA7G,EAAA,uBACA,aACA,WACA,WACA,UACA,YACA,UACA,UACA,SACA,WACA,SACA,UACA,YACA,aACA,SACA,SACA,aACA,UACA,SAAAsoG,GACA,OAAAA,IAGAtoG,EAAA,kBAAA,uBAAA,SAAA86E,GAAA,OAAAA","file":"../skylark-fabric.js","sourcesContent":["define('skylark-fabric/canvas2d',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.attach(\"intg.fabric\", {});\r\n});\ndefine('skylark-fabric/primitives/fabric',[],function(){\r\n\r\n  /* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */\r\n  /*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\r\n\r\n  var fabric =  { version: '3.6.2' };\r\n\r\n\r\n  /* _AMD_END_ */\r\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n    fabric.document = document;\r\n    fabric.window = window;\r\n  }\r\n  else {\r\n    // assume we're running under node.js when document/window are not present\r\n    var jsdom = require('jsdom');\r\n    var virtualWindow = new jsdom.JSDOM(\r\n      decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\r\n      {\r\n        features: {\r\n          FetchExternalResources: ['img']\r\n        },\r\n        resources: 'usable'\r\n      }).window;\r\n    fabric.document = virtualWindow.document;\r\n    fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\r\n    fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\r\n    fabric.window = virtualWindow;\r\n    DOMParser = fabric.window.DOMParser;\r\n  }\r\n\r\n  /**\r\n   * True when in environment that supports touch events\r\n   * @type boolean\r\n   */\r\n  fabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\r\n    (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\r\n\r\n  /**\r\n   * True when in environment that's probably Node.js\r\n   * @type boolean\r\n   */\r\n  fabric.isLikelyNode = typeof Buffer !== 'undefined' &&\r\n                        typeof window === 'undefined';\r\n\r\n  /* _FROM_SVG_START_ */\r\n  /**\r\n   * Attributes parsed from all SVG elements\r\n   * @type array\r\n   */\r\n  fabric.SHARED_ATTRIBUTES = [\r\n    'display',\r\n    'transform',\r\n    'fill', 'fill-opacity', 'fill-rule',\r\n    'opacity',\r\n    'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset',\r\n    'stroke-linejoin', 'stroke-miterlimit',\r\n    'stroke-opacity', 'stroke-width',\r\n    'id', 'paint-order', 'vector-effect',\r\n    'instantiated_by_use', 'clip-path'\r\n  ];\r\n  /* _FROM_SVG_END_ */\r\n\r\n  /**\r\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\r\n   */\r\n  fabric.DPI = 96;\r\n  fabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)';\r\n  fabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\r\n  fabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\r\n  fabric.fontPaths = { };\r\n  fabric.iMatrix = [1, 0, 0, 1, 0, 0];\r\n  fabric.svgNS = 'http://www.w3.org/2000/svg';\r\n\r\n  /**\r\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.perfLimitSizeTotal = 2097152;\r\n\r\n  /**\r\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.maxCacheSideLimit = 4096;\r\n\r\n  /**\r\n   * Lowest pixel limit for cache canvases, set at 256PX\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.minCacheSideLimit = 256;\r\n\r\n  /**\r\n   * Cache Object for widths of chars in text rendering.\r\n   */\r\n  fabric.charWidthsCache = { };\r\n\r\n  /**\r\n   * if webgl is enabled and available, textureSize will determine the size\r\n   * of the canvas backend\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.textureSize = 2048;\r\n\r\n  /**\r\n   * When 'true', style information is not retained when copy/pasting text, making\r\n   * pasted text use destination style.\r\n   * Defaults to 'false'.\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  fabric.disableStyleCopyPaste = false;\r\n\r\n  /**\r\n   * Enable webgl for filtering picture is available\r\n   * A filtering backend will be initialized, this will both take memory and\r\n   * time since a default 2048x2048 canvas will be created for the gl context\r\n   * @since 2.0.0\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  fabric.enableGLFiltering = true;\r\n\r\n  /**\r\n   * Device Pixel Ratio\r\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\r\n   */\r\n  fabric.devicePixelRatio = fabric.window.devicePixelRatio ||\r\n                            fabric.window.webkitDevicePixelRatio ||\r\n                            fabric.window.mozDevicePixelRatio ||\r\n                            1;\r\n  /**\r\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\r\n   * which is unitless and not rendered equally across browsers.\r\n   *\r\n   * Values that work quite well (as of October 2017) are:\r\n   * - Chrome: 1.5\r\n   * - Edge: 1.75\r\n   * - Firefox: 0.9\r\n   * - Safari: 0.95\r\n   *\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default 1\r\n   */\r\n  fabric.browserShadowBlurConstant = 1;\r\n\r\n  /**\r\n   * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.arcToSegmentsCache = { };\r\n\r\n  /**\r\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\r\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\r\n   * you do not get any speed benefit and you get a big object in memory.\r\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\r\n   * can eventually clear it.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.boundsOfCurveCache = { };\r\n\r\n  /**\r\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\r\n   * @default true\r\n   */\r\n  fabric.cachesBoundsOfCurve = true;\r\n\r\n  /**\r\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\r\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\r\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\r\n   * @type Boolean\r\n   * @default false\r\n   */\r\n  fabric.forceGLPutImageData = false;\r\n\r\n  fabric.initFilterBackend = function() {\r\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\r\n      console.log('max texture size: ' + fabric.maxTextureSize);\r\n      return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\r\n    }\r\n    else if (fabric.Canvas2dFilterBackend) {\r\n      return (new fabric.Canvas2dFilterBackend());\r\n    }\r\n  };\r\n\r\n\r\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n    // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\r\n    window.fabric = fabric;\r\n  }\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    function _removeEventListener(eventName, handler) {\r\n      if (!this.__eventListeners[eventName]) {\r\n        return;\r\n      }\r\n      var eventListener = this.__eventListeners[eventName];\r\n      if (handler) {\r\n        eventListener[eventListener.indexOf(handler)] = false;\r\n      }\r\n      else {\r\n        fabric.util.array.fill(eventListener, false);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Observes specified event\r\n     * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias on\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function that receives a notification when an event of the specified type occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function observe(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        this.__eventListeners = { };\r\n      }\r\n      // one object with key/value pairs was passed\r\n      if (arguments.length === 1) {\r\n        for (var prop in eventName) {\r\n          this.on(prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        if (!this.__eventListeners[eventName]) {\r\n          this.__eventListeners[eventName] = [];\r\n        }\r\n        this.__eventListeners[eventName].push(handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Stops event observing for a particular event handler. Calling this method\r\n     * without arguments removes all handlers for all events\r\n     * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias off\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function to be deleted from EventListeners\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function stopObserving(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        return this;\r\n      }\r\n\r\n      // remove all key/value pairs (event name -> event handler)\r\n      if (arguments.length === 0) {\r\n        for (eventName in this.__eventListeners) {\r\n          _removeEventListener.call(this, eventName);\r\n        }\r\n      }\r\n      // one object with key/value pairs was passed\r\n      else if (arguments.length === 1 && typeof arguments[0] === 'object') {\r\n        for (var prop in eventName) {\r\n          _removeEventListener.call(this, prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        _removeEventListener.call(this, eventName, handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Fires event with an optional options object\r\n     * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias trigger\r\n     * @param {String} eventName Event name to fire\r\n     * @param {Object} [options] Options object\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function fire(eventName, options) {\r\n      if (!this.__eventListeners) {\r\n        return this;\r\n      }\r\n\r\n      var listenersForEvent = this.__eventListeners[eventName];\r\n      if (!listenersForEvent) {\r\n        return this;\r\n      }\r\n\r\n      for (var i = 0, len = listenersForEvent.length; i < len; i++) {\r\n        listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\r\n      }\r\n      this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\r\n        return value !== false;\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.Observable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\r\n     * @see {@link http://fabricjs.com/events|Events demo}\r\n     */\r\n    fabric.Observable = {\r\n      observe: observe,\r\n      stopObserving: stopObserving,\r\n      fire: fire,\r\n\r\n      on: observe,\r\n      off: stopObserving,\r\n      trigger: fire\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Collection\r\n   */\r\n  fabric.Collection = {\r\n\r\n    _objects: [],\r\n\r\n    /**\r\n     * Adds objects to collection, Canvas or Group, then renders canvas\r\n     * (if `renderOnAddRemove` is not `false`).\r\n     * in case of Group no changes to bounding box are made.\r\n     * Objects should be instances of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the add method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    add: function () {\r\n      this._objects.push.apply(this._objects, arguments);\r\n      if (this._onObjectAdded) {\r\n        for (var i = 0, length = arguments.length; i < length; i++) {\r\n          this._onObjectAdded(arguments[i]);\r\n        }\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * An object should be an instance of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the insertAt method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {Object} object Object to insert\r\n     * @param {Number} index Index to insert object at\r\n     * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    insertAt: function (object, index, nonSplicing) {\r\n      var objects = this._objects;\r\n      if (nonSplicing) {\r\n        objects[index] = object;\r\n      }\r\n      else {\r\n        objects.splice(index, 0, object);\r\n      }\r\n      this._onObjectAdded && this._onObjectAdded(object);\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    remove: function() {\r\n      var objects = this._objects,\r\n          index, somethingRemoved = false;\r\n\r\n      for (var i = 0, length = arguments.length; i < length; i++) {\r\n        index = objects.indexOf(arguments[i]);\r\n\r\n        // only call onObjectRemoved if an object was actually removed\r\n        if (index !== -1) {\r\n          somethingRemoved = true;\r\n          objects.splice(index, 1);\r\n          this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\r\n        }\r\n      }\r\n\r\n      this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Executes given function for each object in this group\r\n     * @param {Function} callback\r\n     *                   Callback invoked with current object as first argument,\r\n     *                   index - as second and an array of all objects - as third.\r\n     *                   Callback is invoked in a context of Global Object (e.g. `window`)\r\n     *                   when no `context` argument is given\r\n     *\r\n     * @param {Object} context Context (aka thisObject)\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    forEachObject: function(callback, context) {\r\n      var objects = this.getObjects();\r\n      for (var i = 0, len = objects.length; i < len; i++) {\r\n        callback.call(context, objects[i], i, objects);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of children objects of this instance\r\n     * Type parameter introduced in 1.3.10\r\n     * since 2.3.5 this method return always a COPY of the array;\r\n     * @param {String} [type] When specified, only objects of this type are returned\r\n     * @return {Array}\r\n     */\r\n    getObjects: function(type) {\r\n      if (typeof type === 'undefined') {\r\n        return this._objects.concat();\r\n      }\r\n      return this._objects.filter(function(o) {\r\n        return o.type === type;\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Returns object at specified index\r\n     * @param {Number} index\r\n     * @return {Self} thisArg\r\n     */\r\n    item: function (index) {\r\n      return this._objects[index];\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains no objects\r\n     * @return {Boolean} true if collection is empty\r\n     */\r\n    isEmpty: function () {\r\n      return this._objects.length === 0;\r\n    },\r\n\r\n    /**\r\n     * Returns a size of a collection (i.e: length of an array containing its objects)\r\n     * @return {Number} Collection size\r\n     */\r\n    size: function() {\r\n      return this._objects.length;\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains an object\r\n     * @param {Object} object Object to check against\r\n     * @return {Boolean} `true` if collection contains an object\r\n     */\r\n    contains: function(object) {\r\n      return this._objects.indexOf(object) > -1;\r\n    },\r\n\r\n    /**\r\n     * Returns number representation of a collection complexity\r\n     * @return {Number} complexity\r\n     */\r\n    complexity: function () {\r\n      return this._objects.reduce(function (memo, current) {\r\n        memo += current.complexity ? current.complexity() : 0;\r\n        return memo;\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @namespace fabric.CommonMethods\r\n   */\r\n  fabric.CommonMethods = {\r\n\r\n    /**\r\n     * Sets object's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this.set(prop, options[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Gradient to\r\n     */\r\n    _initGradient: function(filler, property) {\r\n      if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\r\n        this.set(property, new fabric.Gradient(filler));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Pattern to\r\n     * @param {Function} [callback] callback to invoke after pattern load\r\n     */\r\n    _initPattern: function(filler, property, callback) {\r\n      if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\r\n        this.set(property, new fabric.Pattern(filler, callback));\r\n      }\r\n      else {\r\n        callback && callback();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initClipping: function(options) {\r\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\r\n        return;\r\n      }\r\n\r\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\r\n      if (typeof functionBody !== 'undefined') {\r\n        this.clipTo = new Function('ctx', functionBody);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _setObject: function(obj) {\r\n      for (var prop in obj) {\r\n        this._set(prop, obj[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    set: function(key, value) {\r\n      if (typeof key === 'object') {\r\n        this._setObject(key);\r\n      }\r\n      else {\r\n        if (typeof value === 'function' && key !== 'clipTo') {\r\n          this._set(key, value(this.get(key)));\r\n        }\r\n        else {\r\n          this._set(key, value);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    _set: function(key, value) {\r\n      this[key] = value;\r\n    },\r\n\r\n    /**\r\n     * Toggles specified property from `true` to `false` or from `false` to `true`\r\n     * @param {String} property Property to toggle\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    toggle: function(property) {\r\n      var value = this.get(property);\r\n      if (typeof value === 'boolean') {\r\n        this.set(property, !value);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Basic getter\r\n     * @param {String} property Property name\r\n     * @return {*} value of a property\r\n     */\r\n    get: function(property) {\r\n      return this[property];\r\n    }\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    var sqrt = Math.sqrt,\r\n        atan2 = Math.atan2,\r\n        pow = Math.pow,\r\n        PiBy180 = Math.PI / 180,\r\n        PiBy2 = Math.PI / 2;\r\n\r\n    /**\r\n     * @namespace fabric.util\r\n     */\r\n    fabric.util = {\r\n\r\n      /**\r\n       * Calculate the cos of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      cos: function(angle) {\r\n        if (angle === 0) { return 1; }\r\n        if (angle < 0) {\r\n          // cos(a) = cos(-a)\r\n          angle = -angle;\r\n        }\r\n        var angleSlice = angle / PiBy2;\r\n        switch (angleSlice) {\r\n          case 1: case 3: return 0;\r\n          case 2: return -1;\r\n        }\r\n        return Math.cos(angle);\r\n      },\r\n\r\n      /**\r\n       * Calculate the sin of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      sin: function(angle) {\r\n        if (angle === 0) { return 0; }\r\n        var angleSlice = angle / PiBy2, sign = 1;\r\n        if (angle < 0) {\r\n          // sin(-a) = -sin(a)\r\n          sign = -1;\r\n        }\r\n        switch (angleSlice) {\r\n          case 1: return sign;\r\n          case 2: return 0;\r\n          case 3: return -sign;\r\n        }\r\n        return Math.sin(angle);\r\n      },\r\n\r\n      /**\r\n       * Removes value from an array.\r\n       * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} array\r\n       * @param {*} value\r\n       * @return {Array} original array\r\n       */\r\n      removeFromArray: function(array, value) {\r\n        var idx = array.indexOf(value);\r\n        if (idx !== -1) {\r\n          array.splice(idx, 1);\r\n        }\r\n        return array;\r\n      },\r\n\r\n      /**\r\n       * Returns random number between 2 specified ones.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} min lower limit\r\n       * @param {Number} max upper limit\r\n       * @return {Number} random value (between min and max)\r\n       */\r\n      getRandomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      },\r\n\r\n      /**\r\n       * Transforms degrees to radians.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} degrees value in degrees\r\n       * @return {Number} value in radians\r\n       */\r\n      degreesToRadians: function(degrees) {\r\n        return degrees * PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Transforms radians to degrees.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} radians value in radians\r\n       * @return {Number} value in degrees\r\n       */\r\n      radiansToDegrees: function(radians) {\r\n        return radians / PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Rotates `point` around `origin` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {fabric.Point} point The point to rotate\r\n       * @param {fabric.Point} origin The origin of the rotation\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {fabric.Point} The new rotated point\r\n       */\r\n      rotatePoint: function(point, origin, radians) {\r\n        point.subtractEquals(origin);\r\n        var v = fabric.util.rotateVector(point, radians);\r\n        return new fabric.Point(v.x, v.y).addEquals(origin);\r\n      },\r\n\r\n      /**\r\n       * Rotates `vector` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} vector The vector to rotate (x and y)\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {Object} The new rotated point\r\n       */\r\n      rotateVector: function(vector, radians) {\r\n        var sin = fabric.util.sin(radians),\r\n            cos = fabric.util.cos(radians),\r\n            rx = vector.x * cos - vector.y * sin,\r\n            ry = vector.x * sin + vector.y * cos;\r\n        return {\r\n          x: rx,\r\n          y: ry\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Apply transform t to point p\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Point} p The point to transform\r\n       * @param  {Array} t The transform\r\n       * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\r\n       * @return {fabric.Point} The transformed point\r\n       */\r\n      transformPoint: function(p, t, ignoreOffset) {\r\n        if (ignoreOffset) {\r\n          return new fabric.Point(\r\n            t[0] * p.x + t[2] * p.y,\r\n            t[1] * p.x + t[3] * p.y\r\n          );\r\n        }\r\n        return new fabric.Point(\r\n          t[0] * p.x + t[2] * p.y + t[4],\r\n          t[1] * p.x + t[3] * p.y + t[5]\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of points's bounding rectangle (left, top, width, height)\r\n       * @param {Array} points 4 points array\r\n       * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      makeBoundingBoxFromPoints: function(points, transform) {\r\n        if (transform) {\r\n          for (var i = 0; i < points.length; i++) {\r\n            points[i] = fabric.util.transformPoint(points[i], transform);\r\n          }\r\n        }\r\n        var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\r\n            minX = fabric.util.array.min(xPoints),\r\n            maxX = fabric.util.array.max(xPoints),\r\n            width = maxX - minX,\r\n            yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\r\n            minY = fabric.util.array.min(yPoints),\r\n            maxY = fabric.util.array.max(yPoints),\r\n            height = maxY - minY;\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Invert transformation t\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} t The transform\r\n       * @return {Array} The inverted transform\r\n       */\r\n      invertTransform: function(t) {\r\n        var a = 1 / (t[0] * t[3] - t[1] * t[2]),\r\n            r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\r\n            o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\r\n        r[4] = -o.x;\r\n        r[5] = -o.y;\r\n        return r;\r\n      },\r\n\r\n      /**\r\n       * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number|String} number number to operate on\r\n       * @param {Number} fractionDigits number of fraction digits to \"leave\"\r\n       * @return {Number}\r\n       */\r\n      toFixed: function(number, fractionDigits) {\r\n        return parseFloat(Number(number).toFixed(fractionDigits));\r\n      },\r\n\r\n      /**\r\n       * Converts from attribute value to pixel value if applicable.\r\n       * Returns converted pixels or original value not converted.\r\n       * @param {Number|String} value number to operate on\r\n       * @param {Number} fontSize\r\n       * @return {Number|String}\r\n       */\r\n      parseUnit: function(value, fontSize) {\r\n        var unit = /\\D{0,2}$/.exec(value),\r\n            number = parseFloat(value);\r\n        if (!fontSize) {\r\n          fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n        }\r\n        switch (unit[0]) {\r\n          case 'mm':\r\n            return number * fabric.DPI / 25.4;\r\n\r\n          case 'cm':\r\n            return number * fabric.DPI / 2.54;\r\n\r\n          case 'in':\r\n            return number * fabric.DPI;\r\n\r\n          case 'pt':\r\n            return number * fabric.DPI / 72; // or * 4 / 3\r\n\r\n          case 'pc':\r\n            return number * fabric.DPI / 72 * 12; // or * 16\r\n\r\n          case 'em':\r\n            return number * fontSize;\r\n\r\n          default:\r\n            return number;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Function which always returns `false`.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {Boolean}\r\n       */\r\n      falseFunction: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns klass \"Class\" object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of object (eg. 'circle')\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @return {Object} klass \"Class\"\r\n       */\r\n      getKlass: function(type, namespace) {\r\n        // capitalize first letter only\r\n        type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\r\n        return fabric.util.resolveNamespace(namespace)[type];\r\n      },\r\n\r\n      /**\r\n       * Returns array of attributes for given svg that fabric parses\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of svg element (eg. 'circle')\r\n       * @return {Array} string names of supported attributes\r\n       */\r\n      getSvgAttributes: function(type) {\r\n        var attributes = [\r\n          'instantiated_by_use',\r\n          'style',\r\n          'id',\r\n          'class'\r\n        ];\r\n        switch (type) {\r\n          case 'linearGradient':\r\n            attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\r\n            break;\r\n          case 'radialGradient':\r\n            attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\r\n            break;\r\n          case 'stop':\r\n            attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\r\n            break;\r\n        }\r\n        return attributes;\r\n      },\r\n\r\n      /**\r\n       * Returns object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\r\n       * @return {Object} Object for given namespace (default fabric)\r\n       */\r\n      resolveNamespace: function(namespace) {\r\n        if (!namespace) {\r\n          return fabric;\r\n        }\r\n\r\n        var parts = namespace.split('.'),\r\n            len = parts.length, i,\r\n            obj = global || fabric.window;\r\n\r\n        for (i = 0; i < len; ++i) {\r\n          obj = obj[parts[i]];\r\n        }\r\n\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Loads image element from given url and passes it to a callback\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL representing an image\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @param {*} [context] Context to invoke callback in\r\n       * @param {Object} [crossOrigin] crossOrigin value to set image element to\r\n       */\r\n      loadImage: function(url, callback, context, crossOrigin) {\r\n        if (!url) {\r\n          callback && callback.call(context, url);\r\n          return;\r\n        }\r\n\r\n        var img = fabric.util.createImage();\r\n\r\n        /** @ignore */\r\n        var onLoadCallback = function () {\r\n          callback && callback.call(context, img);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        img.onload = onLoadCallback;\r\n        /** @ignore */\r\n        img.onerror = function() {\r\n          fabric.log('Error loading ' + img.src);\r\n          callback && callback.call(context, null, true);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        // data-urls appear to be buggy with crossOrigin\r\n        // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\r\n        // see https://code.google.com/p/chromium/issues/detail?id=315152\r\n        //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\r\n        if (url.indexOf('data') !== 0 && crossOrigin) {\r\n          img.crossOrigin = crossOrigin;\r\n        }\r\n\r\n        // IE10 / IE11-Fix: SVG contents from data: URI\r\n        // will only be available if the IMG is present\r\n        // in the DOM (and visible)\r\n        if (url.substring(0,14) === 'data:image/svg') {\r\n          img.onload = null;\r\n          fabric.util.loadImageInDom(img, onLoadCallback);\r\n        }\r\n\r\n        img.src = url;\r\n      },\r\n\r\n      /**\r\n       * Attaches SVG image with data: URL to the dom\r\n       * @memberOf fabric.util\r\n       * @param {Object} img Image object with data:image/svg src\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @return {Object} DOM element (div containing the SVG image)\r\n       */\r\n      loadImageInDom: function(img, onLoadCallback) {\r\n        var div = fabric.document.createElement('div');\r\n        div.style.width = div.style.height = '1px';\r\n        div.style.left = div.style.top = '-100%';\r\n        div.style.position = 'absolute';\r\n        div.appendChild(img);\r\n        fabric.document.querySelector('body').appendChild(div);\r\n        /**\r\n         * Wrap in function to:\r\n         *   1. Call existing callback\r\n         *   2. Cleanup DOM\r\n         */\r\n        img.onload = function () {\r\n          onLoadCallback();\r\n          div.parentNode.removeChild(div);\r\n          div = null;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Creates corresponding fabric instances from their object representations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} objects Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @param {Function} reviver Method for further parsing of object elements,\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenObjects: function(objects, callback, namespace, reviver) {\r\n        objects = objects || [];\r\n\r\n        var enlivenedObjects = [],\r\n            numLoadedObjects = 0,\r\n            numTotalObjects = objects.length;\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedObjects === numTotalObjects) {\r\n            callback && callback(enlivenedObjects.filter(function(obj) {\r\n              // filter out undefined objects (objects that gave error)\r\n              return obj;\r\n            }));\r\n          }\r\n        }\r\n\r\n        if (!numTotalObjects) {\r\n          callback && callback(enlivenedObjects);\r\n          return;\r\n        }\r\n\r\n        objects.forEach(function (o, index) {\r\n          // if sparse array\r\n          if (!o || !o.type) {\r\n            onLoaded();\r\n            return;\r\n          }\r\n          var klass = fabric.util.getKlass(o.type, namespace);\r\n          klass.fromObject(o, function (obj, error) {\r\n            error || (enlivenedObjects[index] = obj);\r\n            reviver && reviver(o, obj, error);\r\n            onLoaded();\r\n          });\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Create and wait for loading of patterns\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} patterns Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenPatterns: function(patterns, callback) {\r\n        patterns = patterns || [];\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedPatterns === numPatterns) {\r\n            callback && callback(enlivenedPatterns);\r\n          }\r\n        }\r\n\r\n        var enlivenedPatterns = [],\r\n            numLoadedPatterns = 0,\r\n            numPatterns = patterns.length;\r\n\r\n        if (!numPatterns) {\r\n          callback && callback(enlivenedPatterns);\r\n          return;\r\n        }\r\n\r\n        patterns.forEach(function (p, index) {\r\n          if (p && p.source) {\r\n            new fabric.Pattern(p, function(pattern) {\r\n              enlivenedPatterns[index] = pattern;\r\n              onLoaded();\r\n            });\r\n          }\r\n          else {\r\n            enlivenedPatterns[index] = p;\r\n            onLoaded();\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Groups SVG elements (usually those retrieved from SVG document)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} elements SVG elements to group\r\n       * @param {Object} [options] Options object\r\n       * @param {String} path Value to set sourcePath to\r\n       * @return {fabric.Object|fabric.Group}\r\n       */\r\n      groupSVGElements: function(elements, options, path) {\r\n        var object;\r\n        if (elements && elements.length === 1) {\r\n          return elements[0];\r\n        }\r\n        if (options) {\r\n          if (options.width && options.height) {\r\n            options.centerPoint = {\r\n              x: options.width / 2,\r\n              y: options.height / 2\r\n            };\r\n          }\r\n          else {\r\n            delete options.width;\r\n            delete options.height;\r\n          }\r\n        }\r\n        object = new fabric.Group(elements, options);\r\n        if (typeof path !== 'undefined') {\r\n          object.sourcePath = path;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Populates an object with properties of another object\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} source Source object\r\n       * @param {Object} destination Destination object\r\n       * @return {Array} properties Properties names to include\r\n       */\r\n      populateWithProperties: function(source, destination, properties) {\r\n        if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\r\n          for (var i = 0, len = properties.length; i < len; i++) {\r\n            if (properties[i] in source) {\r\n              destination[properties[i]] = source[properties[i]];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a dashed line between two points\r\n       *\r\n       * This method is used to draw dashed line around selection area.\r\n       * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\r\n       *\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x  start x coordinate\r\n       * @param {Number} y start y coordinate\r\n       * @param {Number} x2 end x coordinate\r\n       * @param {Number} y2 end y coordinate\r\n       * @param {Array} da dash array pattern\r\n       */\r\n      drawDashedLine: function(ctx, x, y, x2, y2, da) {\r\n        var dx = x2 - x,\r\n            dy = y2 - y,\r\n            len = sqrt(dx * dx + dy * dy),\r\n            rot = atan2(dy, dx),\r\n            dc = da.length,\r\n            di = 0,\r\n            draw = true;\r\n\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.moveTo(0, 0);\r\n        ctx.rotate(rot);\r\n\r\n        x = 0;\r\n        while (len > x) {\r\n          x += da[di++ % dc];\r\n          if (x > len) {\r\n            x = len;\r\n          }\r\n          ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\r\n          draw = !draw;\r\n        }\r\n\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Creates canvas element\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {CanvasElement} initialized canvas element\r\n       */\r\n      createCanvasElement: function() {\r\n        return fabric.document.createElement('canvas');\r\n      },\r\n\r\n      /**\r\n       * Creates a canvas element that is a copy of another and is also painted\r\n       * @param {CanvasElement} canvas to copy size and content of\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {CanvasElement} initialized canvas element\r\n       */\r\n      copyCanvasElement: function(canvas) {\r\n        var newCanvas = fabric.util.createCanvasElement();\r\n        newCanvas.width = canvas.width;\r\n        newCanvas.height = canvas.height;\r\n        newCanvas.getContext('2d').drawImage(canvas, 0, 0);\r\n        return newCanvas;\r\n      },\r\n\r\n      /**\r\n       * since 2.6.0 moved from canvas instance to utility.\r\n       * @param {CanvasElement} canvasEl to copy size and content of\r\n       * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\r\n       * @param {Number} quality <= 1 and > 0\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {String} data url\r\n       */\r\n      toDataURL: function(canvasEl, format, quality) {\r\n        return canvasEl.toDataURL('image/' + format, quality);\r\n      },\r\n\r\n      /**\r\n       * Creates image element (works on client and node)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {HTMLImageElement} HTML image element\r\n       */\r\n      createImage: function() {\r\n        return fabric.document.createElement('img');\r\n      },\r\n\r\n      /**\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @deprecated since 2.0.0\r\n       * @param {fabric.Object} receiver Object implementing `clipTo` method\r\n       * @param {CanvasRenderingContext2D} ctx Context to clip\r\n       */\r\n      clipContext: function(receiver, ctx) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        receiver.clipTo(ctx);\r\n        ctx.clip();\r\n      },\r\n\r\n      /**\r\n       * Multiply matrix A by matrix B to nest transformations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a First transformMatrix\r\n       * @param  {Array} b Second transformMatrix\r\n       * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\r\n       * @return {Array} The product of the two transform matrices\r\n       */\r\n      multiplyTransformMatrices: function(a, b, is2x2) {\r\n        // Matrix multiply a * b\r\n        return [\r\n          a[0] * b[0] + a[2] * b[1],\r\n          a[1] * b[0] + a[3] * b[1],\r\n          a[0] * b[2] + a[2] * b[3],\r\n          a[1] * b[2] + a[3] * b[3],\r\n          is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\r\n          is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Decomposes standard 2x3 matrix into transform components\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a transformMatrix\r\n       * @return {Object} Components of transform\r\n       */\r\n      qrDecompose: function(a) {\r\n        var angle = atan2(a[1], a[0]),\r\n            denom = pow(a[0], 2) + pow(a[1], 2),\r\n            scaleX = sqrt(denom),\r\n            scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\r\n            skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\r\n        return {\r\n          angle: angle  / PiBy180,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          skewX: skewX / PiBy180,\r\n          skewY: 0,\r\n          translateX: a[4],\r\n          translateY: a[5]\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.angle] angle in degrees\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      calcRotateMatrix: function(options) {\r\n        if (!options.angle) {\r\n          return fabric.iMatrix.concat();\r\n        }\r\n        var theta = fabric.util.degreesToRadians(options.angle),\r\n            cos = fabric.util.cos(theta),\r\n            sin = fabric.util.sin(theta);\r\n        return [cos, sin, -sin, cos, 0, 0];\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet.\r\n       * is called DimensionsTransformMatrix because those properties are the one that influence\r\n       * the size of the resulting box of the object.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.scaleX]\r\n       * @param  {Number} [options.scaleY]\r\n       * @param  {Boolean} [options.flipX]\r\n       * @param  {Boolean} [options.flipY]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.skewX]\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      calcDimensionsMatrix: function(options) {\r\n        var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,\r\n            scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,\r\n            scaleMatrix = [\r\n              options.flipX ? -scaleX : scaleX,\r\n              0,\r\n              0,\r\n              options.flipY ? -scaleY : scaleY,\r\n              0,\r\n              0],\r\n            multiply = fabric.util.multiplyTransformMatrices,\r\n            degreesToRadians = fabric.util.degreesToRadians;\r\n        if (options.skewX) {\r\n          scaleMatrix = multiply(\r\n            scaleMatrix,\r\n            [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],\r\n            true);\r\n        }\r\n        if (options.skewY) {\r\n          scaleMatrix = multiply(\r\n            scaleMatrix,\r\n            [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],\r\n            true);\r\n        }\r\n        return scaleMatrix;\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.angle]\r\n       * @param  {Number} [options.scaleX]\r\n       * @param  {Number} [options.scaleY]\r\n       * @param  {Boolean} [options.flipX]\r\n       * @param  {Boolean} [options.flipY]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.translateX]\r\n       * @param  {Number} [options.translateY]\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      composeMatrix: function(options) {\r\n        var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],\r\n            multiply = fabric.util.multiplyTransformMatrices;\r\n        if (options.angle) {\r\n          matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\r\n        }\r\n        if (options.scaleX || options.scaleY || options.skewX || options.skewY || options.flipX || options.flipY) {\r\n          matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\r\n        }\r\n        return matrix;\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix that has the same effect of scaleX, scaleY and skewX.\r\n       * Is deprecated for composeMatrix. Please do not use it.\r\n       * @static\r\n       * @deprecated since 3.4.0\r\n       * @memberOf fabric.util\r\n       * @param  {Number} scaleX\r\n       * @param  {Number} scaleY\r\n       * @param  {Number} skewX\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      customTransformMatrix: function(scaleX, scaleY, skewX) {\r\n        return fabric.util.composeMatrix({ scaleX: scaleX, scaleY: scaleY, skewX: skewX });\r\n      },\r\n\r\n      /**\r\n       * reset an object transform state to neutral. Top and left are not accounted for\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to transform\r\n       */\r\n      resetObjectTransform: function (target) {\r\n        target.scaleX = 1;\r\n        target.scaleY = 1;\r\n        target.skewX = 0;\r\n        target.skewY = 0;\r\n        target.flipX = false;\r\n        target.flipY = false;\r\n        target.rotate(0);\r\n      },\r\n\r\n      /**\r\n       * Extract Object transform values\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to read from\r\n       * @return {Object} Components of transform\r\n       */\r\n      saveObjectTransform: function (target) {\r\n        return {\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          angle: target.angle,\r\n          left: target.left,\r\n          flipX: target.flipX,\r\n          flipY: target.flipY,\r\n          top: target.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of function body\r\n       * @param {Function} fn Function to get body of\r\n       * @return {String} Function body\r\n       */\r\n      getFunctionBody: function(fn) {\r\n        return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\r\n      },\r\n\r\n      /**\r\n       * Returns true if context has transparent pixel\r\n       * at specified location (taking tolerance into account)\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x x coordinate\r\n       * @param {Number} y y coordinate\r\n       * @param {Number} tolerance Tolerance\r\n       */\r\n      isTransparent: function(ctx, x, y, tolerance) {\r\n\r\n        // If tolerance is > 0 adjust start coords to take into account.\r\n        // If moves off Canvas fix to 0\r\n        if (tolerance > 0) {\r\n          if (x > tolerance) {\r\n            x -= tolerance;\r\n          }\r\n          else {\r\n            x = 0;\r\n          }\r\n          if (y > tolerance) {\r\n            y -= tolerance;\r\n          }\r\n          else {\r\n            y = 0;\r\n          }\r\n        }\r\n\r\n        var _isTransparent = true, i, temp,\r\n            imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\r\n            l = imageData.data.length;\r\n\r\n        // Split image data - for tolerance > 1, pixelDataSize = 4;\r\n        for (i = 3; i < l; i += 4) {\r\n          temp = imageData.data[i];\r\n          _isTransparent = temp <= 0;\r\n          if (_isTransparent === false) {\r\n            break; // Stop if colour found\r\n          }\r\n        }\r\n\r\n        imageData = null;\r\n\r\n        return _isTransparent;\r\n      },\r\n\r\n      /**\r\n       * Parse preserveAspectRatio attribute from element\r\n       * @param {string} attribute to be parsed\r\n       * @return {Object} an object containing align and meetOrSlice attribute\r\n       */\r\n      parsePreserveAspectRatioAttribute: function(attribute) {\r\n        var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\r\n            aspectRatioAttrs = attribute.split(' '), align;\r\n\r\n        if (aspectRatioAttrs && aspectRatioAttrs.length) {\r\n          meetOrSlice = aspectRatioAttrs.pop();\r\n          if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\r\n            align = meetOrSlice;\r\n            meetOrSlice = 'meet';\r\n          }\r\n          else if (aspectRatioAttrs.length) {\r\n            align = aspectRatioAttrs.pop();\r\n          }\r\n        }\r\n        //divide align in alignX and alignY\r\n        alignX = align !== 'none' ? align.slice(1, 4) : 'none';\r\n        alignY = align !== 'none' ? align.slice(5, 8) : 'none';\r\n        return {\r\n          meetOrSlice: meetOrSlice,\r\n          alignX: alignX,\r\n          alignY: alignY\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Clear char widths cache for the given font family or all the cache if no\r\n       * fontFamily is specified.\r\n       * Use it if you know you are loading fonts in a lazy way and you are not waiting\r\n       * for custom fonts to load properly when adding text objects to the canvas.\r\n       * If a text object is added when its own font is not loaded yet, you will get wrong\r\n       * measurement and so wrong bounding boxes.\r\n       * After the font cache is cleared, either change the textObject text content or call\r\n       * initDimensions() to trigger a recalculation\r\n       * @memberOf fabric.util\r\n       * @param {String} [fontFamily] font family to clear\r\n       */\r\n      clearFabricFontCache: function(fontFamily) {\r\n        fontFamily = (fontFamily || '').toLowerCase();\r\n        if (!fontFamily) {\r\n          fabric.charWidthsCache = { };\r\n        }\r\n        else if (fabric.charWidthsCache[fontFamily]) {\r\n          delete fabric.charWidthsCache[fontFamily];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Given current aspect ratio, determines the max width and height that can\r\n       * respect the total allowed area for the cache.\r\n       * @memberOf fabric.util\r\n       * @param {Number} ar aspect ratio\r\n       * @param {Number} maximumArea Maximum area you want to achieve\r\n       * @return {Object.x} Limited dimensions by X\r\n       * @return {Object.y} Limited dimensions by Y\r\n       */\r\n      limitDimsByArea: function(ar, maximumArea) {\r\n        var roughWidth = Math.sqrt(maximumArea * ar),\r\n            perfLimitSizeY = Math.floor(maximumArea / roughWidth);\r\n        return { x: Math.floor(roughWidth), y: perfLimitSizeY };\r\n      },\r\n\r\n      capValue: function(min, value, max) {\r\n        return Math.max(min, Math.min(value, max));\r\n      },\r\n\r\n      findScaleToFit: function(source, destination) {\r\n        return Math.min(destination.width / source.width, destination.height / source.height);\r\n      },\r\n\r\n      findScaleToCover: function(source, destination) {\r\n        return Math.max(destination.width / source.width, destination.height / source.height);\r\n      },\r\n\r\n      /**\r\n       * given an array of 6 number returns something like `\"matrix(...numbers)\"`\r\n       * @memberOf fabric.util\r\n       * @param {Array} trasnform an array with 6 numbers\r\n       * @return {String} transform matrix for svg\r\n       * @return {Object.y} Limited dimensions by Y\r\n       */\r\n      matrixToSVG: function(transform) {\r\n        return 'matrix(' + transform.map(function(value) {\r\n          return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\r\n        }).join(' ') + ')';\r\n      }\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var _join = Array.prototype.join;\r\n\r\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\r\n     * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\r\n     * http://mozilla.org/MPL/2.0/\r\n     */\r\n    function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\r\n      var argsString = _join.call(arguments);\r\n      if (fabric.arcToSegmentsCache[argsString]) {\r\n        return fabric.arcToSegmentsCache[argsString];\r\n      }\r\n\r\n      var PI = Math.PI, th = rotateX * PI / 180,\r\n          sinTh = fabric.util.sin(th),\r\n          cosTh = fabric.util.cos(th),\r\n          fromX = 0, fromY = 0;\r\n\r\n      rx = Math.abs(rx);\r\n      ry = Math.abs(ry);\r\n\r\n      var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\r\n          py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\r\n          rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\r\n          pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\r\n          root = 0;\r\n\r\n      if (pl < 0) {\r\n        var s = Math.sqrt(1 - pl / (rx2 * ry2));\r\n        rx *= s;\r\n        ry *= s;\r\n      }\r\n      else {\r\n        root = (large === sweep ? -1.0 : 1.0) *\r\n                Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\r\n      }\r\n\r\n      var cx = root * rx * py / ry,\r\n          cy = -root * ry * px / rx,\r\n          cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\r\n          cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\r\n          mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\r\n          dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\r\n\r\n      if (sweep === 0 && dtheta > 0) {\r\n        dtheta -= 2 * PI;\r\n      }\r\n      else if (sweep === 1 && dtheta < 0) {\r\n        dtheta += 2 * PI;\r\n      }\r\n\r\n      // Convert into cubic bezier segments <= 90deg\r\n      var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\r\n          result = [], mDelta = dtheta / segments,\r\n          mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\r\n          th3 = mTheta + mDelta;\r\n\r\n      for (var i = 0; i < segments; i++) {\r\n        result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\r\n        fromX = result[i][4];\r\n        fromY = result[i][5];\r\n        mTheta = th3;\r\n        th3 += mDelta;\r\n      }\r\n      fabric.arcToSegmentsCache[argsString] = result;\r\n      return result;\r\n    }\r\n\r\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\r\n      var costh2 = fabric.util.cos(th2),\r\n          sinth2 = fabric.util.sin(th2),\r\n          costh3 = fabric.util.cos(th3),\r\n          sinth3 = fabric.util.sin(th3),\r\n          toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\r\n          toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\r\n          cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\r\n          cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\r\n          cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\r\n          cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\r\n\r\n      return [\r\n        cp1X, cp1Y,\r\n        cp2X, cp2Y,\r\n        toX, toY\r\n      ];\r\n    }\r\n\r\n    /*\r\n     * Private\r\n     */\r\n    function calcVectorAngle(ux, uy, vx, vy) {\r\n      var ta = Math.atan2(uy, ux),\r\n          tb = Math.atan2(vy, vx);\r\n      if (tb >= ta) {\r\n        return tb - ta;\r\n      }\r\n      else {\r\n        return 2 * Math.PI - (ta - tb);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Draws arc\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {Number} fx\r\n     * @param {Number} fy\r\n     * @param {Array} coords\r\n     */\r\n    fabric.util.drawArc = function(ctx, fx, fy, coords) {\r\n      var rx = coords[0],\r\n          ry = coords[1],\r\n          rot = coords[2],\r\n          large = coords[3],\r\n          sweep = coords[4],\r\n          tx = coords[5],\r\n          ty = coords[6],\r\n          segs = [[], [], [], []],\r\n          segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segsNorm.length; i < len; i++) {\r\n        segs[i][0] = segsNorm[i][0] + fx;\r\n        segs[i][1] = segsNorm[i][1] + fy;\r\n        segs[i][2] = segsNorm[i][2] + fx;\r\n        segs[i][3] = segsNorm[i][3] + fy;\r\n        segs[i][4] = segsNorm[i][4] + fx;\r\n        segs[i][5] = segsNorm[i][5] + fy;\r\n        ctx.bezierCurveTo.apply(ctx, segs[i]);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a elliptic-arc\r\n     * @param {Number} fx start point of arc\r\n     * @param {Number} fy\r\n     * @param {Number} rx horizontal radius\r\n     * @param {Number} ry vertical radius\r\n     * @param {Number} rot angle of horizontal axe\r\n     * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\r\n     * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\r\n     * @param {Number} tx end point of arc\r\n     * @param {Number} ty\r\n     */\r\n    fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\r\n\r\n      var fromX = 0, fromY = 0, bound, bounds = [],\r\n          segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segs.length; i < len; i++) {\r\n        bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\r\n        bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\r\n        bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\r\n        fromX = segs[i][4];\r\n        fromY = segs[i][5];\r\n      }\r\n      return bounds;\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a beziercurve\r\n     * @param {Number} x0 starting point\r\n     * @param {Number} y0\r\n     * @param {Number} x1 first control point\r\n     * @param {Number} y1\r\n     * @param {Number} x2 secondo control point\r\n     * @param {Number} y2\r\n     * @param {Number} x3 end of beizer\r\n     * @param {Number} y3\r\n     */\r\n    // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\r\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n      var argsString;\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        argsString = _join.call(arguments);\r\n        if (fabric.boundsOfCurveCache[argsString]) {\r\n          return fabric.boundsOfCurveCache[argsString];\r\n        }\r\n      }\r\n\r\n      var sqrt = Math.sqrt,\r\n          min = Math.min, max = Math.max,\r\n          abs = Math.abs, tvalues = [],\r\n          bounds = [[], []],\r\n          a, b, c, t, t1, t2, b2ac, sqrtb2ac;\r\n\r\n      b = 6 * x0 - 12 * x1 + 6 * x2;\r\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\r\n      c = 3 * x1 - 3 * x0;\r\n\r\n      for (var i = 0; i < 2; ++i) {\r\n        if (i > 0) {\r\n          b = 6 * y0 - 12 * y1 + 6 * y2;\r\n          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\r\n          c = 3 * y1 - 3 * y0;\r\n        }\r\n\r\n        if (abs(a) < 1e-12) {\r\n          if (abs(b) < 1e-12) {\r\n            continue;\r\n          }\r\n          t = -c / b;\r\n          if (0 < t && t < 1) {\r\n            tvalues.push(t);\r\n          }\r\n          continue;\r\n        }\r\n        b2ac = b * b - 4 * c * a;\r\n        if (b2ac < 0) {\r\n          continue;\r\n        }\r\n        sqrtb2ac = sqrt(b2ac);\r\n        t1 = (-b + sqrtb2ac) / (2 * a);\r\n        if (0 < t1 && t1 < 1) {\r\n          tvalues.push(t1);\r\n        }\r\n        t2 = (-b - sqrtb2ac) / (2 * a);\r\n        if (0 < t2 && t2 < 1) {\r\n          tvalues.push(t2);\r\n        }\r\n      }\r\n\r\n      var x, y, j = tvalues.length, jlen = j, mt;\r\n      while (j--) {\r\n        t = tvalues[j];\r\n        mt = 1 - t;\r\n        x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\r\n        bounds[0][j] = x;\r\n\r\n        y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\r\n        bounds[1][j] = y;\r\n      }\r\n\r\n      bounds[0][jlen] = x0;\r\n      bounds[1][jlen] = y0;\r\n      bounds[0][jlen + 1] = x3;\r\n      bounds[1][jlen + 1] = y3;\r\n      var result = [\r\n        {\r\n          x: min.apply(null, bounds[0]),\r\n          y: min.apply(null, bounds[1])\r\n        },\r\n        {\r\n          x: max.apply(null, bounds[0]),\r\n          y: max.apply(null, bounds[1])\r\n        }\r\n      ];\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        fabric.boundsOfCurveCache[argsString] = result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Invokes method on all items in a given array\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} method Name of a method to invoke\r\n     * @return {Array}\r\n     */\r\n    function invoke(array, method) {\r\n      var args = slice.call(arguments, 2), result = [];\r\n      for (var i = 0, len = array.length; i < len; i++) {\r\n        result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Finds maximum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function max(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 >= value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Finds minimum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function min(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 < value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function fill(array, value) {\r\n      var k = array.length;\r\n      while (k--) {\r\n        array[k] = value;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function find(array, byProperty, condition) {\r\n      if (!array || array.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var i = array.length - 1,\r\n          result = byProperty ? array[i][byProperty] : array[i];\r\n      if (byProperty) {\r\n        while (i--) {\r\n          if (condition(array[i][byProperty], result)) {\r\n            result = array[i][byProperty];\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        while (i--) {\r\n          if (condition(array[i], result)) {\r\n            result = array[i];\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.util.array\r\n     */\r\n    fabric.util.array = {\r\n      fill: fill,\r\n      invoke: invoke,\r\n      min: min,\r\n      max: max\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n    /**\r\n     * Copies all enumerable properties of one js object to another\r\n     * this does not and cannot compete with generic utils.\r\n     * Does not clone or extend fabric.Object subclasses.\r\n     * This is mostly for internal use and has extra handling for fabricJS objects\r\n     * it skips the canvas property in deep cloning.\r\n     * @memberOf fabric.util.object\r\n     * @param {Object} destination Where to copy to\r\n     * @param {Object} source Where to copy from\r\n     * @return {Object}\r\n     */\r\n\r\n    function extend(destination, source, deep) {\r\n      // JScript DontEnum bug is not taken care of\r\n      // the deep clone is for internal use, is not meant to avoid\r\n      // javascript traps or cloning html element or self referenced objects.\r\n      if (deep) {\r\n        if (!fabric.isLikelyNode && source instanceof Element) {\r\n          // avoid cloning deep images, canvases,\r\n          destination = source;\r\n        }\r\n        else if (source instanceof Array) {\r\n          destination = [];\r\n          for (var i = 0, len = source.length; i < len; i++) {\r\n            destination[i] = extend({ }, source[i], deep);\r\n          }\r\n        }\r\n        else if (source && typeof source === 'object') {\r\n          for (var property in source) {\r\n            if (property === 'canvas') {\r\n              destination[property] = extend({ }, source[property]);\r\n            }\r\n            else if (source.hasOwnProperty(property)) {\r\n              destination[property] = extend({ }, source[property], deep);\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          // this sounds odd for an extend but is ok for recursive use\r\n          destination = source;\r\n        }\r\n      }\r\n      else {\r\n        for (var property in source) {\r\n          destination[property] = source[property];\r\n        }\r\n      }\r\n      return destination;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty object and copies all enumerable properties of another object to it\r\n     * @memberOf fabric.util.object\r\n     * TODO: this function return an empty object if you try to clone null\r\n     * @param {Object} object Object to clone\r\n     * @return {Object}\r\n     */\r\n    function clone(object, deep) {\r\n      return extend({ }, object, deep);\r\n    }\r\n\r\n    /** @namespace fabric.util.object */\r\n    fabric.util.object = {\r\n      extend: extend,\r\n      clone: clone\r\n    };\r\n    fabric.util.object.extend(fabric.util, fabric.Observable);\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * Camelizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to camelize\r\n     * @return {String} Camelized version of a string\r\n     */\r\n    function camelize(string) {\r\n      return string.replace(/-+(.)?/g, function(match, character) {\r\n        return character ? character.toUpperCase() : '';\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Capitalizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to capitalize\r\n     * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\r\n     * and other letters stay untouched, if false first letter is capitalized\r\n     * and other letters are converted to lowercase.\r\n     * @return {String} Capitalized version of a string\r\n     */\r\n    function capitalize(string, firstLetterOnly) {\r\n      return string.charAt(0).toUpperCase() +\r\n        (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Escapes XML in a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to escape\r\n     * @return {String} Escaped version of a string\r\n     */\r\n    function escapeXml(string) {\r\n      return string.replace(/&/g, '&amp;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&apos;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n    }\r\n\r\n    /**\r\n     * Divide a string in the user perceived single units\r\n     * @memberOf fabric.util.string\r\n     * @param {String} textstring String to escape\r\n     * @return {Array} array containing the graphemes\r\n     */\r\n    function graphemeSplit(textstring) {\r\n      var i = 0, chr, graphemes = [];\r\n      for (i = 0, chr; i < textstring.length; i++) {\r\n        if ((chr = getWholeChar(textstring, i)) === false) {\r\n          continue;\r\n        }\r\n        graphemes.push(chr);\r\n      }\r\n      return graphemes;\r\n    }\r\n\r\n    // taken from mdn in the charAt doc page.\r\n    function getWholeChar(str, i) {\r\n      var code = str.charCodeAt(i);\r\n\r\n      if (isNaN(code)) {\r\n        return ''; // Position not found\r\n      }\r\n      if (code < 0xD800 || code > 0xDFFF) {\r\n        return str.charAt(i);\r\n      }\r\n\r\n      // High surrogate (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        if (str.length <= (i + 1)) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        var next = str.charCodeAt(i + 1);\r\n        if (0xDC00 > next || next > 0xDFFF) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        return str.charAt(i) + str.charAt(i + 1);\r\n      }\r\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\r\n      if (i === 0) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      var prev = str.charCodeAt(i - 1);\r\n\r\n      // (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 > prev || prev > 0xDBFF) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      // We can pass over low surrogates now as the second component\r\n      // in a pair which we have already processed\r\n      return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * String utilities\r\n     * @namespace fabric.util.string\r\n     */\r\n    fabric.util.string = {\r\n      camelize: camelize,\r\n      capitalize: capitalize,\r\n      escapeXml: escapeXml,\r\n      graphemeSplit: graphemeSplit\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice, emptyFunction = function() { },\r\n\r\n        IS_DONTENUM_BUGGY = (function() {\r\n          for (var p in { toString: 1 }) {\r\n            if (p === 'toString') {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        })(),\r\n\r\n        /** @ignore */\r\n        addMethods = function(klass, source, parent) {\r\n          for (var property in source) {\r\n\r\n            if (property in klass.prototype &&\r\n                typeof klass.prototype[property] === 'function' &&\r\n                (source[property] + '').indexOf('callSuper') > -1) {\r\n\r\n              klass.prototype[property] = (function(property) {\r\n                return function() {\r\n\r\n                  var superclass = this.constructor.superclass;\r\n                  this.constructor.superclass = parent;\r\n                  var returnValue = source[property].apply(this, arguments);\r\n                  this.constructor.superclass = superclass;\r\n\r\n                  if (property !== 'initialize') {\r\n                    return returnValue;\r\n                  }\r\n                };\r\n              })(property);\r\n            }\r\n            else {\r\n              klass.prototype[property] = source[property];\r\n            }\r\n\r\n            if (IS_DONTENUM_BUGGY) {\r\n              if (source.toString !== Object.prototype.toString) {\r\n                klass.prototype.toString = source.toString;\r\n              }\r\n              if (source.valueOf !== Object.prototype.valueOf) {\r\n                klass.prototype.valueOf = source.valueOf;\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n    function Subclass() { }\r\n\r\n    function callSuper(methodName) {\r\n      var parentMethod = null,\r\n          _this = this;\r\n\r\n      // climb prototype chain to find method not equal to callee's method\r\n      while (_this.constructor.superclass) {\r\n        var superClassMethod = _this.constructor.superclass.prototype[methodName];\r\n        if (_this[methodName] !== superClassMethod) {\r\n          parentMethod = superClassMethod;\r\n          break;\r\n        }\r\n        // eslint-disable-next-line\r\n        _this = _this.constructor.superclass.prototype;\r\n      }\r\n\r\n      if (!parentMethod) {\r\n        return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\r\n      }\r\n\r\n      return (arguments.length > 1)\r\n        ? parentMethod.apply(this, slice.call(arguments, 1))\r\n        : parentMethod.call(this);\r\n    }\r\n\r\n    /**\r\n     * Helper for creation of \"classes\".\r\n     * @memberOf fabric.util\r\n     * @param {Function} [parent] optional \"Class\" to inherit from\r\n     * @param {Object} [properties] Properties shared by all instances of this class\r\n     *                  (be careful modifying objects defined here as this would affect all instances)\r\n     */\r\n    function createClass() {\r\n      var parent = null,\r\n          properties = slice.call(arguments, 0);\r\n\r\n      if (typeof properties[0] === 'function') {\r\n        parent = properties.shift();\r\n      }\r\n      function klass() {\r\n        this.initialize.apply(this, arguments);\r\n      }\r\n\r\n      klass.superclass = parent;\r\n      klass.subclasses = [];\r\n\r\n      if (parent) {\r\n        Subclass.prototype = parent.prototype;\r\n        klass.prototype = new Subclass();\r\n        parent.subclasses.push(klass);\r\n      }\r\n      for (var i = 0, length = properties.length; i < length; i++) {\r\n        addMethods(klass, properties[i], parent);\r\n      }\r\n      if (!klass.prototype.initialize) {\r\n        klass.prototype.initialize = emptyFunction;\r\n      }\r\n      klass.prototype.constructor = klass;\r\n      klass.prototype.callSuper = callSuper;\r\n      return klass;\r\n    }\r\n\r\n    fabric.util.createClass = createClass;\r\n  })();\r\n\r\n\r\n  (function () {\r\n    // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\r\n    var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent;\r\n    /**\r\n     * Adds an event listener to an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.addListener = function(element, eventName, handler, options) {\r\n      element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener from an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.removeListener = function(element, eventName, handler, options) {\r\n      element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n    };\r\n\r\n    function getTouchInfo(event) {\r\n      var touchProp = event.changedTouches;\r\n      if (touchProp && touchProp[0]) {\r\n        return touchProp[0];\r\n      }\r\n      return event;\r\n    }\r\n\r\n    fabric.util.getPointer = function(event) {\r\n      var element = event.target,\r\n          scroll = fabric.util.getScrollLeftTop(element),\r\n          _evt = getTouchInfo(event);\r\n      return {\r\n        x: _evt.clientX + scroll.left,\r\n        y: _evt.clientY + scroll.top\r\n      };\r\n    };\r\n  })();\r\n\r\n\r\n  (function () {\r\n\r\n    /**\r\n     * Cross-browser wrapper for setting element's style\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {Object} styles\r\n     * @return {HTMLElement} Element that was passed as a first argument\r\n     */\r\n    function setStyle(element, styles) {\r\n      var elementStyle = element.style;\r\n      if (!elementStyle) {\r\n        return element;\r\n      }\r\n      if (typeof styles === 'string') {\r\n        element.style.cssText += ';' + styles;\r\n        return styles.indexOf('opacity') > -1\r\n          ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\r\n          : element;\r\n      }\r\n      for (var property in styles) {\r\n        if (property === 'opacity') {\r\n          setOpacity(element, styles[property]);\r\n        }\r\n        else {\r\n          var normalizedProperty = (property === 'float' || property === 'cssFloat')\r\n            ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\r\n            : property;\r\n          elementStyle[normalizedProperty] = styles[property];\r\n        }\r\n      }\r\n      return element;\r\n    }\r\n\r\n    var parseEl = fabric.document.createElement('div'),\r\n        supportsOpacity = typeof parseEl.style.opacity === 'string',\r\n        supportsFilters = typeof parseEl.style.filter === 'string',\r\n        reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\r\n\r\n        /** @ignore */\r\n        setOpacity = function (element) { return element; };\r\n\r\n    if (supportsOpacity) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        element.style.opacity = value;\r\n        return element;\r\n      };\r\n    }\r\n    else if (supportsFilters) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        var es = element.style;\r\n        if (element.currentStyle && !element.currentStyle.hasLayout) {\r\n          es.zoom = 1;\r\n        }\r\n        if (reOpacity.test(es.filter)) {\r\n          value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\r\n          es.filter = es.filter.replace(reOpacity, value);\r\n        }\r\n        else {\r\n          es.filter += ' alpha(opacity=' + (value * 100) + ')';\r\n        }\r\n        return element;\r\n      };\r\n    }\r\n\r\n    fabric.util.setStyle = setStyle;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var _slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Takes id and returns an element with that id (if one exists in a document)\r\n     * @memberOf fabric.util\r\n     * @param {String|HTMLElement} id\r\n     * @return {HTMLElement|null}\r\n     */\r\n    function getById(id) {\r\n      return typeof id === 'string' ? fabric.document.getElementById(id) : id;\r\n    }\r\n\r\n    var sliceCanConvertNodelists,\r\n        /**\r\n         * Converts an array-like object (e.g. arguments or NodeList) to an array\r\n         * @memberOf fabric.util\r\n         * @param {Object} arrayLike\r\n         * @return {Array}\r\n         */\r\n        toArray = function(arrayLike) {\r\n          return _slice.call(arrayLike, 0);\r\n        };\r\n\r\n    try {\r\n      sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\r\n    }\r\n    catch (err) { }\r\n\r\n    if (!sliceCanConvertNodelists) {\r\n      toArray = function(arrayLike) {\r\n        var arr = new Array(arrayLike.length), i = arrayLike.length;\r\n        while (i--) {\r\n          arr[i] = arrayLike[i];\r\n        }\r\n        return arr;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates specified element with specified attributes\r\n     * @memberOf fabric.util\r\n     * @param {String} tagName Type of an element to create\r\n     * @param {Object} [attributes] Attributes to set on an element\r\n     * @return {HTMLElement} Newly created element\r\n     */\r\n    function makeElement(tagName, attributes) {\r\n      var el = fabric.document.createElement(tagName);\r\n      for (var prop in attributes) {\r\n        if (prop === 'class') {\r\n          el.className = attributes[prop];\r\n        }\r\n        else if (prop === 'for') {\r\n          el.htmlFor = attributes[prop];\r\n        }\r\n        else {\r\n          el.setAttribute(prop, attributes[prop]);\r\n        }\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Adds class to an element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to add class to\r\n     * @param {String} className Class to add to an element\r\n     */\r\n    function addClass(element, className) {\r\n      if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\r\n        element.className += (element.className ? ' ' : '') + className;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Wraps element with another element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to wrap\r\n     * @param {HTMLElement|String} wrapper Element to wrap with\r\n     * @param {Object} [attributes] Attributes to set on a wrapper\r\n     * @return {HTMLElement} wrapper\r\n     */\r\n    function wrapElement(element, wrapper, attributes) {\r\n      if (typeof wrapper === 'string') {\r\n        wrapper = makeElement(wrapper, attributes);\r\n      }\r\n      if (element.parentNode) {\r\n        element.parentNode.replaceChild(wrapper, element);\r\n      }\r\n      wrapper.appendChild(element);\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Returns element scroll offsets\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to operate on\r\n     * @return {Object} Object with left/top values\r\n     */\r\n    function getScrollLeftTop(element) {\r\n\r\n      var left = 0,\r\n          top = 0,\r\n          docElement = fabric.document.documentElement,\r\n          body = fabric.document.body || {\r\n            scrollLeft: 0, scrollTop: 0\r\n          };\r\n\r\n      // While loop checks (and then sets element to) .parentNode OR .host\r\n      //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\r\n      //  but the .parentNode of a root ShadowDOM node will always be null, instead\r\n      //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\r\n      while (element && (element.parentNode || element.host)) {\r\n\r\n        // Set element to element parent, or 'host' in case of ShadowDOM\r\n        element = element.parentNode || element.host;\r\n\r\n        if (element === fabric.document) {\r\n          left = body.scrollLeft || docElement.scrollLeft || 0;\r\n          top = body.scrollTop ||  docElement.scrollTop || 0;\r\n        }\r\n        else {\r\n          left += element.scrollLeft || 0;\r\n          top += element.scrollTop || 0;\r\n        }\r\n\r\n        if (element.nodeType === 1 && element.style.position === 'fixed') {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return { left: left, top: top };\r\n    }\r\n\r\n    /**\r\n     * Returns offset for a given element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get offset for\r\n     * @return {Object} Object with \"left\" and \"top\" properties\r\n     */\r\n    function getElementOffset(element) {\r\n      var docElem,\r\n          doc = element && element.ownerDocument,\r\n          box = { left: 0, top: 0 },\r\n          offset = { left: 0, top: 0 },\r\n          scrollLeftTop,\r\n          offsetAttributes = {\r\n            borderLeftWidth: 'left',\r\n            borderTopWidth:  'top',\r\n            paddingLeft:     'left',\r\n            paddingTop:      'top'\r\n          };\r\n\r\n      if (!doc) {\r\n        return offset;\r\n      }\r\n\r\n      for (var attr in offsetAttributes) {\r\n        offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\r\n      }\r\n\r\n      docElem = doc.documentElement;\r\n      if ( typeof element.getBoundingClientRect !== 'undefined' ) {\r\n        box = element.getBoundingClientRect();\r\n      }\r\n\r\n      scrollLeftTop = getScrollLeftTop(element);\r\n\r\n      return {\r\n        left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\r\n        top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Returns style attribute value of a given element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get style attribute for\r\n     * @param {String} attr Style attribute to get for element\r\n     * @return {String} Style attribute value of the given element.\r\n     */\r\n    var getElementStyle;\r\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\r\n      getElementStyle = function(element, attr) {\r\n        var style = fabric.document.defaultView.getComputedStyle(element, null);\r\n        return style ? style[attr] : undefined;\r\n      };\r\n    }\r\n    else {\r\n      getElementStyle = function(element, attr) {\r\n        var value = element.style[attr];\r\n        if (!value && element.currentStyle) {\r\n          value = element.currentStyle[attr];\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n\r\n    (function () {\r\n      var style = fabric.document.documentElement.style,\r\n          selectProp = 'userSelect' in style\r\n            ? 'userSelect'\r\n            : 'MozUserSelect' in style\r\n              ? 'MozUserSelect'\r\n              : 'WebkitUserSelect' in style\r\n                ? 'WebkitUserSelect'\r\n                : 'KhtmlUserSelect' in style\r\n                  ? 'KhtmlUserSelect'\r\n                  : '';\r\n\r\n      /**\r\n       * Makes element unselectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make unselectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementUnselectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = fabric.util.falseFunction;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = 'none';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = 'on';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      /**\r\n       * Makes element selectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make selectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementSelectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = null;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = '';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = '';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      fabric.util.makeElementUnselectable = makeElementUnselectable;\r\n      fabric.util.makeElementSelectable = makeElementSelectable;\r\n    })();\r\n\r\n    (function() {\r\n\r\n      /**\r\n       * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL of a script to load\r\n       * @param {Function} callback Callback to execute when script is finished loading\r\n       */\r\n      function getScript(url, callback) {\r\n        var headEl = fabric.document.getElementsByTagName('head')[0],\r\n            scriptEl = fabric.document.createElement('script'),\r\n            loading = true;\r\n\r\n        /** @ignore */\r\n        scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\r\n          if (loading) {\r\n            if (typeof this.readyState === 'string' &&\r\n                this.readyState !== 'loaded' &&\r\n                this.readyState !== 'complete') {\r\n              return;\r\n            }\r\n            loading = false;\r\n            callback(e || fabric.window.event);\r\n            scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\r\n          }\r\n        };\r\n        scriptEl.src = url;\r\n        headEl.appendChild(scriptEl);\r\n        // causes issue in Opera\r\n        // headEl.removeChild(scriptEl);\r\n      }\r\n\r\n      fabric.util.getScript = getScript;\r\n    })();\r\n\r\n    function getNodeCanvas(element) {\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      return impl._canvas || impl._image;\r\n    };\r\n\r\n    function cleanUpJsdomNode(element) {\r\n      if (!fabric.isLikelyNode) {\r\n        return;\r\n      }\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      if (impl) {\r\n        impl._image = null;\r\n        impl._canvas = null;\r\n        // unsure if necessary\r\n        impl._currentSrc = null;\r\n        impl._attributes = null;\r\n        impl._classList = null;\r\n      }\r\n    }\r\n\r\n    fabric.util.getById = getById;\r\n    fabric.util.toArray = toArray;\r\n    fabric.util.makeElement = makeElement;\r\n    fabric.util.addClass = addClass;\r\n    fabric.util.wrapElement = wrapElement;\r\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\r\n    fabric.util.getElementOffset = getElementOffset;\r\n    fabric.util.getElementStyle = getElementStyle;\r\n    fabric.util.getNodeCanvas = getNodeCanvas;\r\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function addParamToUrl(url, param) {\r\n      return url + (/\\?/.test(url) ? '&' : '?') + param;\r\n    }\r\n\r\n    function emptyFn() { }\r\n\r\n    /**\r\n     * Cross-browser abstraction for sending XMLHttpRequest\r\n     * @memberOf fabric.util\r\n     * @param {String} url URL to send XMLHttpRequest to\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.method=\"GET\"]\r\n     * @param {String} [options.parameters] parameters to append to url in GET or in body\r\n     * @param {String} [options.body] body to send with POST or PUT request\r\n     * @param {Function} options.onComplete Callback to invoke when request is completed\r\n     * @return {XMLHttpRequest} request\r\n     */\r\n    function request(url, options) {\r\n      options || (options = { });\r\n\r\n      var method = options.method ? options.method.toUpperCase() : 'GET',\r\n          onComplete = options.onComplete || function() { },\r\n          xhr = new fabric.window.XMLHttpRequest(),\r\n          body = options.body || options.parameters;\r\n\r\n      /** @ignore */\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          onComplete(xhr);\r\n          xhr.onreadystatechange = emptyFn;\r\n        }\r\n      };\r\n\r\n      if (method === 'GET') {\r\n        body = null;\r\n        if (typeof options.parameters === 'string') {\r\n          url = addParamToUrl(url, options.parameters);\r\n        }\r\n      }\r\n\r\n      xhr.open(method, url, true);\r\n\r\n      if (method === 'POST' || method === 'PUT') {\r\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n      }\r\n\r\n      xhr.send(body);\r\n      return xhr;\r\n    }\r\n\r\n    fabric.util.request = request;\r\n  })();\r\n\r\n\r\n  /**\r\n   * Wrapper around `console.log` (when available)\r\n   * @param {*} [values] Values to log\r\n   */\r\n  fabric.log = console.log;\r\n\r\n  /**\r\n   * Wrapper around `console.warn` (when available)\r\n   * @param {*} [values] Values to log as a warning\r\n   */\r\n  fabric.warn = console.warn;\r\n\r\n\r\n  (function() {\r\n\r\n    function noop() {\r\n      return false;\r\n    }\r\n\r\n    function defaultEasing(t, b, c, d) {\r\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n    }\r\n\r\n    /**\r\n     * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Number} [options.startValue=0] Starting value\r\n     * @param {Number} [options.endValue=100] Ending value\r\n     * @param {Number} [options.byValue=100] Value to modify the property by\r\n     * @param {Function} [options.easing] Easing function\r\n     * @param {Number} [options.duration=500] Duration of change (in ms)\r\n     * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n     */\r\n    function animate(options) {\r\n\r\n      requestAnimFrame(function(timestamp) {\r\n        options || (options = { });\r\n\r\n        var start = timestamp || +new Date(),\r\n            duration = options.duration || 500,\r\n            finish = start + duration, time,\r\n            onChange = options.onChange || noop,\r\n            abort = options.abort || noop,\r\n            onComplete = options.onComplete || noop,\r\n            easing = options.easing || defaultEasing,\r\n            startValue = 'startValue' in options ? options.startValue : 0,\r\n            endValue = 'endValue' in options ? options.endValue : 100,\r\n            byValue = options.byValue || endValue - startValue;\r\n\r\n        options.onStart && options.onStart();\r\n\r\n        (function tick(ticktime) {\r\n          // TODO: move abort call after calculation\r\n          // and pass (current,valuePerc, timePerc) as arguments\r\n          time = ticktime || +new Date();\r\n          var currentTime = time > finish ? duration : (time - start),\r\n              timePerc = currentTime / duration,\r\n              current = easing(currentTime, startValue, byValue, duration),\r\n              valuePerc = Math.abs((current - startValue) / byValue);\r\n          if (abort()) {\r\n            onComplete(endValue, 1, 1);\r\n            return;\r\n          }\r\n          if (time > finish) {\r\n            onChange(endValue, 1, 1);\r\n            onComplete(endValue, 1, 1);\r\n            return;\r\n          }\r\n          else {\r\n            onChange(current, valuePerc, timePerc);\r\n            requestAnimFrame(tick);\r\n          }\r\n        })(start);\r\n      });\r\n    }\r\n\r\n    var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\r\n                            fabric.window.webkitRequestAnimationFrame ||\r\n                            fabric.window.mozRequestAnimationFrame    ||\r\n                            fabric.window.oRequestAnimationFrame      ||\r\n                            fabric.window.msRequestAnimationFrame     ||\r\n                            function(callback) {\r\n                              return fabric.window.setTimeout(callback, 1000 / 60);\r\n                            };\r\n\r\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\r\n\r\n    /**\r\n     * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n     * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\r\n     * @memberOf fabric.util\r\n     * @param {Function} callback Callback to invoke\r\n     * @param {DOMElement} element optional Element to associate with animation\r\n     */\r\n    function requestAnimFrame() {\r\n      return _requestAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    function cancelAnimFrame() {\r\n      return _cancelAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    fabric.util.animate = animate;\r\n    fabric.util.requestAnimFrame = requestAnimFrame;\r\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\r\n  })();\r\n\r\n\r\n  (function() {\r\n    // Calculate an in-between color. Returns a \"rgba()\" string.\r\n    // Credit: Edwin Martin <edwin@bitstorm.org>\r\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\r\n    function calculateColor(begin, end, pos) {\r\n      var color = 'rgba('\r\n          + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\r\n          + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\r\n          + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\r\n\r\n      color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\r\n      color += ')';\r\n      return color;\r\n    }\r\n\r\n    /**\r\n     * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {String} fromColor The starting color in hex or rgb(a) format.\r\n     * @param {String} toColor The starting color in hex or rgb(a) format.\r\n     * @param {Number} [duration] Duration of change (in ms).\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\r\n     * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n     */\r\n    function animateColor(fromColor, toColor, duration, options) {\r\n      var startColor = new fabric.Color(fromColor).getSource(),\r\n          endColor = new fabric.Color(toColor).getSource();\r\n\r\n      options = options || {};\r\n\r\n      fabric.util.animate(fabric.util.object.extend(options, {\r\n        duration: duration || 500,\r\n        startValue: startColor,\r\n        endValue: endColor,\r\n        byValue: endColor,\r\n        easing: function (currentTime, startValue, byValue, duration) {\r\n          var posValue = options.colorEasing\r\n            ? options.colorEasing(currentTime, duration)\r\n            : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\r\n          return calculateColor(startValue, byValue, posValue);\r\n        }\r\n      }));\r\n    }\r\n\r\n    fabric.util.animateColor = animateColor;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function normalize(a, c, p, s) {\r\n      if (a < Math.abs(c)) {\r\n        a = c;\r\n        s = p / 4;\r\n      }\r\n      else {\r\n        //handle the 0/0 case:\r\n        if (c === 0 && a === 0) {\r\n          s = p / (2 * Math.PI) * Math.asin(1);\r\n        }\r\n        else {\r\n          s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n      }\r\n      return { a: a, c: c, p: p, s: s };\r\n    }\r\n\r\n    function elastic(opts, t, d) {\r\n      return opts.a *\r\n        Math.pow(2, 10 * (t -= 1)) *\r\n        Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\r\n    }\r\n\r\n    /**\r\n     * Cubic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCubic(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Cubic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCubic(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuart(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuart(t, b, c, d) {\r\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuart(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t + b;\r\n      }\r\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuint(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuint(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuint(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInSine(t, b, c, d) {\r\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutSine(t, b, c, d) {\r\n      return c * Math.sin(t / d * (Math.PI / 2)) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutSine(t, b, c, d) {\r\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInExpo(t, b, c, d) {\r\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutExpo(t, b, c, d) {\r\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutExpo(t, b, c, d) {\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      if (t === d) {\r\n        return b + c;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\r\n      }\r\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInCirc(t, b, c, d) {\r\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCirc(t, b, c, d) {\r\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCirc(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\r\n      }\r\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return -elastic(opts, t, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d / 2;\r\n      if (t === 2) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * (0.3 * 1.5);\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      if (t < 1) {\r\n        return -0.5 * elastic(opts, t, d) + b;\r\n      }\r\n      return opts.a * Math.pow(2, -10 * (t -= 1)) *\r\n        Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBounce(t, b, c, d) {\r\n      return c - easeOutBounce (d - t, 0, c, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBounce(t, b, c, d) {\r\n      if ((t /= d) < (1 / 2.75)) {\r\n        return c * (7.5625 * t * t) + b;\r\n      }\r\n      else if (t < (2 / 2.75)) {\r\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\r\n      }\r\n      else if (t < (2.5 / 2.75)) {\r\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\r\n      }\r\n      else {\r\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBounce(t, b, c, d) {\r\n      if (t < d / 2) {\r\n        return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\r\n      }\r\n      return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\r\n    }\r\n\r\n    /**\r\n     * Easing functions\r\n     * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\r\n     * @namespace fabric.util.ease\r\n     */\r\n    fabric.util.ease = {\r\n\r\n      /**\r\n       * Quadratic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInQuad: function(t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeOutQuad: function(t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing in and out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInOutQuad: function(t, b, c, d) {\r\n        t /= (d / 2);\r\n        if (t < 1) {\r\n          return c / 2 * t * t + b;\r\n        }\r\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n      },\r\n\r\n      /**\r\n       * Cubic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInCubic: function(t, b, c, d) {\r\n        return c * (t /= d) * t * t + b;\r\n      },\r\n\r\n      easeOutCubic: easeOutCubic,\r\n      easeInOutCubic: easeInOutCubic,\r\n      easeInQuart: easeInQuart,\r\n      easeOutQuart: easeOutQuart,\r\n      easeInOutQuart: easeInOutQuart,\r\n      easeInQuint: easeInQuint,\r\n      easeOutQuint: easeOutQuint,\r\n      easeInOutQuint: easeInOutQuint,\r\n      easeInSine: easeInSine,\r\n      easeOutSine: easeOutSine,\r\n      easeInOutSine: easeInOutSine,\r\n      easeInExpo: easeInExpo,\r\n      easeOutExpo: easeOutExpo,\r\n      easeInOutExpo: easeInOutExpo,\r\n      easeInCirc: easeInCirc,\r\n      easeOutCirc: easeOutCirc,\r\n      easeInOutCirc: easeInOutCirc,\r\n      easeInElastic: easeInElastic,\r\n      easeOutElastic: easeOutElastic,\r\n      easeInOutElastic: easeInOutElastic,\r\n      easeInBack: easeInBack,\r\n      easeOutBack: easeOutBack,\r\n      easeInOutBack: easeInOutBack,\r\n      easeInBounce: easeInBounce,\r\n      easeOutBounce: easeOutBounce,\r\n      easeInOutBounce: easeInOutBounce\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * @name fabric\r\n     * @namespace\r\n     */\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        parseUnit = fabric.util.parseUnit,\r\n        multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\r\n\r\n        svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\r\n          'image', 'text'],\r\n        svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\r\n        svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\r\n        svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\r\n\r\n        attributesMap = {\r\n          cx:                   'left',\r\n          x:                    'left',\r\n          r:                    'radius',\r\n          cy:                   'top',\r\n          y:                    'top',\r\n          display:              'visible',\r\n          visibility:           'visible',\r\n          transform:            'transformMatrix',\r\n          'fill-opacity':       'fillOpacity',\r\n          'fill-rule':          'fillRule',\r\n          'font-family':        'fontFamily',\r\n          'font-size':          'fontSize',\r\n          'font-style':         'fontStyle',\r\n          'font-weight':        'fontWeight',\r\n          'letter-spacing':     'charSpacing',\r\n          'paint-order':        'paintFirst',\r\n          'stroke-dasharray':   'strokeDashArray',\r\n          'stroke-dashoffset':  'strokeDashOffset',\r\n          'stroke-linecap':     'strokeLineCap',\r\n          'stroke-linejoin':    'strokeLineJoin',\r\n          'stroke-miterlimit':  'strokeMiterLimit',\r\n          'stroke-opacity':     'strokeOpacity',\r\n          'stroke-width':       'strokeWidth',\r\n          'text-decoration':    'textDecoration',\r\n          'text-anchor':        'textAnchor',\r\n          opacity:              'opacity',\r\n          'clip-path':          'clipPath',\r\n          'clip-rule':          'clipRule',\r\n          'vector-effect':      'strokeUniform'\r\n        },\r\n\r\n        colorAttributes = {\r\n          stroke: 'strokeOpacity',\r\n          fill:   'fillOpacity'\r\n        },\r\n\r\n        fSize = 'font-size', cPath = 'clip-path';\r\n\r\n    fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\r\n    fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\r\n    fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\r\n    fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\r\n\r\n    fabric.cssRules = { };\r\n    fabric.gradientDefs = { };\r\n    fabric.clipPaths = { };\r\n\r\n    function normalizeAttr(attr) {\r\n      // transform attribute names\r\n      if (attr in attributesMap) {\r\n        return attributesMap[attr];\r\n      }\r\n      return attr;\r\n    }\r\n\r\n    function normalizeValue(attr, value, parentAttributes, fontSize) {\r\n      var isArray = Object.prototype.toString.call(value) === '[object Array]',\r\n          parsed;\r\n\r\n      if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\r\n        value = '';\r\n      }\r\n      else if (attr === 'vector-effect') {\r\n        value = value === 'non-scaling-stroke';\r\n      }\r\n      else if (attr === 'strokeDashArray') {\r\n        if (value === 'none') {\r\n          value = null;\r\n        }\r\n        else {\r\n          value = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\r\n        }\r\n      }\r\n      else if (attr === 'transformMatrix') {\r\n        if (parentAttributes && parentAttributes.transformMatrix) {\r\n          value = multiplyTransformMatrices(\r\n            parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\r\n        }\r\n        else {\r\n          value = fabric.parseTransformAttribute(value);\r\n        }\r\n      }\r\n      else if (attr === 'visible') {\r\n        value = value !== 'none' && value !== 'hidden';\r\n        // display=none on parent element always takes precedence over child element\r\n        if (parentAttributes && parentAttributes.visible === false) {\r\n          value = false;\r\n        }\r\n      }\r\n      else if (attr === 'opacity') {\r\n        value = parseFloat(value);\r\n        if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\r\n          value *= parentAttributes.opacity;\r\n        }\r\n      }\r\n      else if (attr === 'textAnchor' /* text-anchor */) {\r\n        value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\r\n      }\r\n      else if (attr === 'charSpacing') {\r\n        // parseUnit returns px and we convert it to em\r\n        parsed = parseUnit(value, fontSize) / fontSize * 1000;\r\n      }\r\n      else if (attr === 'paintFirst') {\r\n        var fillIndex = value.indexOf('fill');\r\n        var strokeIndex = value.indexOf('stroke');\r\n        var value = 'fill';\r\n        if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\r\n          value = 'stroke';\r\n        }\r\n        else if (fillIndex === -1 && strokeIndex > -1) {\r\n          value = 'stroke';\r\n        }\r\n      }\r\n      else if (attr === 'href' || attr === 'xlink:href') {\r\n        return value;\r\n      }\r\n      else {\r\n        parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\r\n      }\r\n\r\n      return (!isArray && isNaN(parsed) ? value : parsed);\r\n    }\r\n\r\n    /**\r\n      * @private\r\n      */\r\n    function getSvgRegex(arr) {\r\n      return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} attributes Array of attributes to parse\r\n     */\r\n    function _setStrokeFillOpacity(attributes) {\r\n      for (var attr in colorAttributes) {\r\n\r\n        if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\r\n          continue;\r\n        }\r\n\r\n        if (typeof attributes[attr] === 'undefined') {\r\n          if (!fabric.Object.prototype[attr]) {\r\n            continue;\r\n          }\r\n          attributes[attr] = fabric.Object.prototype[attr];\r\n        }\r\n\r\n        if (attributes[attr].indexOf('url(') === 0) {\r\n          continue;\r\n        }\r\n\r\n        var color = new fabric.Color(attributes[attr]);\r\n        attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\r\n      }\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _getMultipleNodes(doc, nodeNames) {\r\n      var nodeName, nodeArray = [], nodeList, i, len;\r\n      for (i = 0, len = nodeNames.length; i < len; i++) {\r\n        nodeName = nodeNames[i];\r\n        nodeList = doc.getElementsByTagName(nodeName);\r\n        nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\r\n      }\r\n      return nodeArray;\r\n    }\r\n\r\n    /**\r\n     * Parses \"transform\" attribute, returning an array of values\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {String} attributeValue String containing attribute value\r\n     * @return {Array} Array of 6 elements representing transformation matrix\r\n     */\r\n    fabric.parseTransformAttribute = (function() {\r\n      function rotateMatrix(matrix, args) {\r\n        var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\r\n            x = 0, y = 0;\r\n        if (args.length === 3) {\r\n          x = args[1];\r\n          y = args[2];\r\n        }\r\n\r\n        matrix[0] = cos;\r\n        matrix[1] = sin;\r\n        matrix[2] = -sin;\r\n        matrix[3] = cos;\r\n        matrix[4] = x - (cos * x - sin * y);\r\n        matrix[5] = y - (sin * x + cos * y);\r\n      }\r\n\r\n      function scaleMatrix(matrix, args) {\r\n        var multiplierX = args[0],\r\n            multiplierY = (args.length === 2) ? args[1] : args[0];\r\n\r\n        matrix[0] = multiplierX;\r\n        matrix[3] = multiplierY;\r\n      }\r\n\r\n      function skewMatrix(matrix, args, pos) {\r\n        matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\r\n      }\r\n\r\n      function translateMatrix(matrix, args) {\r\n        matrix[4] = args[0];\r\n        if (args.length === 2) {\r\n          matrix[5] = args[1];\r\n        }\r\n      }\r\n\r\n      // identity matrix\r\n      var iMatrix = fabric.iMatrix,\r\n\r\n          // == begin transform regexp\r\n          number = fabric.reNum,\r\n\r\n          commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\r\n\r\n          skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + ')' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' +\r\n                    '\\\\s*\\\\))',\r\n\r\n          transform = '(?:' +\r\n                      matrix + '|' +\r\n                      translate + '|' +\r\n                      scale + '|' +\r\n                      rotate + '|' +\r\n                      skewX + '|' +\r\n                      skewY +\r\n                      ')',\r\n\r\n          transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\r\n\r\n          transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\r\n\r\n          // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\r\n          reTransformList = new RegExp(transformList),\r\n          // == end transform regexp\r\n\r\n          reTransform = new RegExp(transform, 'g');\r\n\r\n      return function(attributeValue) {\r\n\r\n        // start with identity matrix\r\n        var matrix = iMatrix.concat(),\r\n            matrices = [];\r\n\r\n        // return if no argument was given or\r\n        // an argument does not match transform attribute regexp\r\n        if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\r\n          return matrix;\r\n        }\r\n\r\n        attributeValue.replace(reTransform, function(match) {\r\n\r\n          var m = new RegExp(transform).exec(match).filter(function (match) {\r\n                // match !== '' && match != null\r\n                return (!!match);\r\n              }),\r\n              operation = m[1],\r\n              args = m.slice(2).map(parseFloat);\r\n\r\n          switch (operation) {\r\n            case 'translate':\r\n              translateMatrix(matrix, args);\r\n              break;\r\n            case 'rotate':\r\n              args[0] = fabric.util.degreesToRadians(args[0]);\r\n              rotateMatrix(matrix, args);\r\n              break;\r\n            case 'scale':\r\n              scaleMatrix(matrix, args);\r\n              break;\r\n            case 'skewX':\r\n              skewMatrix(matrix, args, 2);\r\n              break;\r\n            case 'skewY':\r\n              skewMatrix(matrix, args, 1);\r\n              break;\r\n            case 'matrix':\r\n              matrix = args;\r\n              break;\r\n          }\r\n\r\n          // snapshot current matrix into matrices array\r\n          matrices.push(matrix.concat());\r\n          // reset\r\n          matrix = iMatrix.concat();\r\n        });\r\n\r\n        var combinedMatrix = matrices[0];\r\n        while (matrices.length > 1) {\r\n          matrices.shift();\r\n          combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\r\n        }\r\n        return combinedMatrix;\r\n      };\r\n    })();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleString(style, oStyle) {\r\n      var attr, value;\r\n      style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\r\n        var pair = chunk.split(':');\r\n\r\n        attr = pair[0].trim().toLowerCase();\r\n        value =  pair[1].trim();\r\n\r\n        oStyle[attr] = value;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleObject(style, oStyle) {\r\n      var attr, value;\r\n      for (var prop in style) {\r\n        if (typeof style[prop] === 'undefined') {\r\n          continue;\r\n        }\r\n\r\n        attr = prop.toLowerCase();\r\n        value = style[prop];\r\n\r\n        oStyle[attr] = value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function getGlobalStylesForElement(element, svgUid) {\r\n      var styles = { };\r\n      for (var rule in fabric.cssRules[svgUid]) {\r\n        if (elementMatchesRule(element, rule.split(' '))) {\r\n          for (var property in fabric.cssRules[svgUid][rule]) {\r\n            styles[property] = fabric.cssRules[svgUid][rule][property];\r\n          }\r\n        }\r\n      }\r\n      return styles;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function elementMatchesRule(element, selectors) {\r\n      var firstMatching, parentMatching = true;\r\n      //start from rightmost selector.\r\n      firstMatching = selectorMatches(element, selectors.pop());\r\n      if (firstMatching && selectors.length) {\r\n        parentMatching = doesSomeParentMatch(element, selectors);\r\n      }\r\n      return firstMatching && parentMatching && (selectors.length === 0);\r\n    }\r\n\r\n    function doesSomeParentMatch(element, selectors) {\r\n      var selector, parentMatching = true;\r\n      while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\r\n        if (parentMatching) {\r\n          selector = selectors.pop();\r\n        }\r\n        element = element.parentNode;\r\n        parentMatching = selectorMatches(element, selector);\r\n      }\r\n      return selectors.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function selectorMatches(element, selector) {\r\n      var nodeName = element.nodeName,\r\n          classNames = element.getAttribute('class'),\r\n          id = element.getAttribute('id'), matcher, i;\r\n      // i check if a selector matches slicing away part from it.\r\n      // if i get empty string i should match\r\n      matcher = new RegExp('^' + nodeName, 'i');\r\n      selector = selector.replace(matcher, '');\r\n      if (id && selector.length) {\r\n        matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\r\n        selector = selector.replace(matcher, '');\r\n      }\r\n      if (classNames && selector.length) {\r\n        classNames = classNames.split(' ');\r\n        for (i = classNames.length; i--;) {\r\n          matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\r\n          selector = selector.replace(matcher, '');\r\n        }\r\n      }\r\n      return selector.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * to support IE8 missing getElementById on SVGdocument and on node xmlDOM\r\n     */\r\n    function elementById(doc, id) {\r\n      var el;\r\n      doc.getElementById && (el = doc.getElementById(id));\r\n      if (el) {\r\n        return el;\r\n      }\r\n      var node, i, len, nodelist = doc.getElementsByTagName('*');\r\n      for (i = 0, len = nodelist.length; i < len; i++) {\r\n        node = nodelist[i];\r\n        if (id === node.getAttribute('id')) {\r\n          return node;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseUseDirectives(doc) {\r\n      var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\r\n      while (nodelist.length && i < nodelist.length) {\r\n        var el = nodelist[i],\r\n            xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\r\n            x = el.getAttribute('x') || 0,\r\n            y = el.getAttribute('y') || 0,\r\n            el2 = elementById(doc, xlink).cloneNode(true),\r\n            currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\r\n            parentNode, oldLength = nodelist.length, attr, j, attrs, len, namespace = fabric.svgNS;\r\n\r\n        applyViewboxTransform(el2);\r\n        if (/^svg$/i.test(el2.nodeName)) {\r\n          var el3 = el2.ownerDocument.createElementNS(namespace, 'g');\r\n          for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\r\n            attr = attrs.item(j);\r\n            el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);\r\n          }\r\n          // el2.firstChild != null\r\n          while (el2.firstChild) {\r\n            el3.appendChild(el2.firstChild);\r\n          }\r\n          el2 = el3;\r\n        }\r\n\r\n        for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\r\n          attr = attrs.item(j);\r\n          if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\r\n            attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\r\n            continue;\r\n          }\r\n\r\n          if (attr.nodeName === 'transform') {\r\n            currentTrans = attr.nodeValue + ' ' + currentTrans;\r\n          }\r\n          else {\r\n            el2.setAttribute(attr.nodeName, attr.nodeValue);\r\n          }\r\n        }\r\n\r\n        el2.setAttribute('transform', currentTrans);\r\n        el2.setAttribute('instantiated_by_use', '1');\r\n        el2.removeAttribute('id');\r\n        parentNode = el.parentNode;\r\n        parentNode.replaceChild(el2, el);\r\n        // some browsers do not shorten nodelist after replaceChild (IE8)\r\n        if (nodelist.length === oldLength) {\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\r\n    // matches, e.g.: +14.56e-12, etc.\r\n    var reViewBoxAttrValue = new RegExp(\r\n      '^' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\r\n      '$'\r\n    );\r\n\r\n    /**\r\n     * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\r\n     */\r\n    function applyViewboxTransform(element) {\r\n\r\n      var viewBoxAttr = element.getAttribute('viewBox'),\r\n          scaleX = 1,\r\n          scaleY = 1,\r\n          minX = 0,\r\n          minY = 0,\r\n          viewBoxWidth, viewBoxHeight, matrix, el,\r\n          widthAttr = element.getAttribute('width'),\r\n          heightAttr = element.getAttribute('height'),\r\n          x = element.getAttribute('x') || 0,\r\n          y = element.getAttribute('y') || 0,\r\n          preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\r\n          missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\r\n                             || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\r\n          missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\r\n          toBeParsed = missingViewBox && missingDimAttr,\r\n          parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\r\n\r\n      parsedDim.width = 0;\r\n      parsedDim.height = 0;\r\n      parsedDim.toBeParsed = toBeParsed;\r\n\r\n      if (toBeParsed) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (missingViewBox) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        return parsedDim;\r\n      }\r\n      minX = -parseFloat(viewBoxAttr[1]);\r\n      minY = -parseFloat(viewBoxAttr[2]);\r\n      viewBoxWidth = parseFloat(viewBoxAttr[3]);\r\n      viewBoxHeight = parseFloat(viewBoxAttr[4]);\r\n      parsedDim.minX = minX;\r\n      parsedDim.minY = minY;\r\n      parsedDim.viewBoxWidth = viewBoxWidth;\r\n      parsedDim.viewBoxHeight = viewBoxHeight;\r\n      if (!missingDimAttr) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        scaleX = parsedDim.width / viewBoxWidth;\r\n        scaleY = parsedDim.height / viewBoxHeight;\r\n      }\r\n      else {\r\n        parsedDim.width = viewBoxWidth;\r\n        parsedDim.height = viewBoxHeight;\r\n      }\r\n\r\n      // default is to preserve aspect ratio\r\n      preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\r\n      if (preserveAspectRatio.alignX !== 'none') {\r\n        //translate all container for the effect of Mid, Min, Max\r\n        if (preserveAspectRatio.meetOrSlice === 'meet') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        if (preserveAspectRatio.meetOrSlice === 'slice') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        widthDiff = parsedDim.width - viewBoxWidth * scaleX;\r\n        heightDiff = parsedDim.height - viewBoxHeight * scaleX;\r\n        if (preserveAspectRatio.alignX === 'Mid') {\r\n          widthDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Mid') {\r\n          heightDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignX === 'Min') {\r\n          widthDiff = 0;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Min') {\r\n          heightDiff = 0;\r\n        }\r\n      }\r\n\r\n      if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (x || y) {\r\n        translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\r\n      }\r\n\r\n      matrix = translateMatrix + ' matrix(' + scaleX +\r\n                    ' 0' +\r\n                    ' 0 ' +\r\n                    scaleY + ' ' +\r\n                    (minX * scaleX + widthDiff) + ' ' +\r\n                    (minY * scaleY + heightDiff) + ') ';\r\n      parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);\r\n      if (element.nodeName === 'svg') {\r\n        el = element.ownerDocument.createElementNS(fabric.svgNS, 'g');\r\n        // element.firstChild != null\r\n        while (element.firstChild) {\r\n          el.appendChild(element.firstChild);\r\n        }\r\n        element.appendChild(el);\r\n      }\r\n      else {\r\n        el = element;\r\n        matrix = el.getAttribute('transform') + matrix;\r\n      }\r\n      el.setAttribute('transform', matrix);\r\n      return parsedDim;\r\n    }\r\n\r\n    function hasAncestorWithNodeName(element, nodeName) {\r\n      while (element && (element = element.parentNode)) {\r\n        if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\r\n          && !element.getAttribute('instantiated_by_use')) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {SVGDocument} doc SVG document to parse\r\n     * @param {Function} callback Callback to call when parsing is finished;\r\n     * It's being passed an array of elements (parsed from a document).\r\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n     * @param {Object} [parsingOptions] options for parsing document\r\n     * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\r\n     */\r\n    fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\r\n      if (!doc) {\r\n        return;\r\n      }\r\n\r\n      parseUseDirectives(doc);\r\n\r\n      var svgUid =  fabric.Object.__uid++, i, len,\r\n          options = applyViewboxTransform(doc),\r\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\r\n      options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\r\n      options.svgUid = svgUid;\r\n\r\n      if (descendants.length === 0 && fabric.isLikelyNode) {\r\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\r\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\r\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\r\n        var arr = [];\r\n        for (i = 0, len = descendants.length; i < len; i++) {\r\n          arr[i] = descendants[i];\r\n        }\r\n        descendants = arr;\r\n      }\r\n\r\n      var elements = descendants.filter(function(el) {\r\n        applyViewboxTransform(el);\r\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\r\n              !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\r\n      });\r\n\r\n      if (!elements || (elements && !elements.length)) {\r\n        callback && callback([], {});\r\n        return;\r\n      }\r\n      var clipPaths = { };\r\n      descendants.filter(function(el) {\r\n        return el.nodeName.replace('svg:', '') === 'clipPath';\r\n      }).forEach(function(el) {\r\n        var id = el.getAttribute('id');\r\n        clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function(el) {\r\n          return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));\r\n        });\r\n      });\r\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\r\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\r\n      fabric.clipPaths[svgUid] = clipPaths;\r\n      // Precedence of rules:   style > class > attribute\r\n      fabric.parseElements(elements, function(instances, elements) {\r\n        if (callback) {\r\n          callback(instances, options, elements, descendants);\r\n          delete fabric.gradientDefs[svgUid];\r\n          delete fabric.cssRules[svgUid];\r\n          delete fabric.clipPaths[svgUid];\r\n        }\r\n      }, clone(options), reviver, parsingOptions);\r\n    };\r\n\r\n    function recursivelyParseGradientsXlink(doc, gradient) {\r\n      var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],\r\n          xlinkAttr = 'xlink:href',\r\n          xLink = gradient.getAttribute(xlinkAttr).substr(1),\r\n          referencedGradient = elementById(doc, xLink);\r\n      if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\r\n        recursivelyParseGradientsXlink(doc, referencedGradient);\r\n      }\r\n      gradientsAttrs.forEach(function(attr) {\r\n        if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {\r\n          gradient.setAttribute(attr, referencedGradient.getAttribute(attr));\r\n        }\r\n      });\r\n      if (!gradient.children.length) {\r\n        var referenceClone = referencedGradient.cloneNode(true);\r\n        while (referenceClone.firstChild) {\r\n          gradient.appendChild(referenceClone.firstChild);\r\n        }\r\n      }\r\n      gradient.removeAttribute(xlinkAttr);\r\n    }\r\n\r\n    var reFontDeclaration = new RegExp(\r\n      '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\r\n      '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\r\n        fabric.reNum +\r\n      '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\r\n\r\n    extend(fabric, {\r\n      /**\r\n       * Parses a short font declaration, building adding its properties to a style object\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {String} value font declaration\r\n       * @param {Object} oStyle definition\r\n       */\r\n      parseFontDeclaration: function(value, oStyle) {\r\n        var match = value.match(reFontDeclaration);\r\n\r\n        if (!match) {\r\n          return;\r\n        }\r\n        var fontStyle = match[1],\r\n            // font variant is not used\r\n            // fontVariant = match[2],\r\n            fontWeight = match[3],\r\n            fontSize = match[4],\r\n            lineHeight = match[5],\r\n            fontFamily = match[6];\r\n\r\n        if (fontStyle) {\r\n          oStyle.fontStyle = fontStyle;\r\n        }\r\n        if (fontWeight) {\r\n          oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\r\n        }\r\n        if (fontSize) {\r\n          oStyle.fontSize = parseUnit(fontSize);\r\n        }\r\n        if (fontFamily) {\r\n          oStyle.fontFamily = fontFamily;\r\n        }\r\n        if (lineHeight) {\r\n          oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Parses an SVG document, returning all of the gradient declarations found in it\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\r\n       */\r\n      getGradientDefs: function(doc) {\r\n        var tagArray = [\r\n              'linearGradient',\r\n              'radialGradient',\r\n              'svg:linearGradient',\r\n              'svg:radialGradient'],\r\n            elList = _getMultipleNodes(doc, tagArray),\r\n            el, j = 0, gradientDefs = { };\r\n        j = elList.length;\r\n        while (j--) {\r\n          el = elList[j];\r\n          if (el.getAttribute('xlink:href')) {\r\n            recursivelyParseGradientsXlink(doc, el);\r\n          }\r\n          gradientDefs[el.getAttribute('id')] = el;\r\n        }\r\n        return gradientDefs;\r\n      },\r\n\r\n      /**\r\n       * Returns an object of attributes' name/value, given element and an array of attribute names;\r\n       * Parses parent \"g\" nodes recursively upwards.\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {DOMElement} element Element to parse\r\n       * @param {Array} attributes Array of attributes to parse\r\n       * @return {Object} object containing parsed attributes' names/values\r\n       */\r\n      parseAttributes: function(element, attributes, svgUid) {\r\n\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        var value,\r\n            parentAttributes = { },\r\n            fontSize, parentFontSize;\r\n\r\n        if (typeof svgUid === 'undefined') {\r\n          svgUid = element.getAttribute('svgUid');\r\n        }\r\n        // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\r\n        if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\r\n          parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\r\n        }\r\n\r\n        var ownAttributes = attributes.reduce(function(memo, attr) {\r\n          value = element.getAttribute(attr);\r\n          if (value) { // eslint-disable-line\r\n            memo[attr] = value;\r\n          }\r\n          return memo;\r\n        }, { });\r\n        // add values parsed from style, which take precedence over attributes\r\n        // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\r\n        var cssAttrs = extend(\r\n          getGlobalStylesForElement(element, svgUid),\r\n          fabric.parseStyleAttribute(element)\r\n        );\r\n        ownAttributes = extend(\r\n          ownAttributes,\r\n          cssAttrs\r\n        );\r\n        if (cssAttrs[cPath]) {\r\n          element.setAttribute(cPath, cssAttrs[cPath]);\r\n        }\r\n        fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n        if (ownAttributes[fSize]) {\r\n          // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\r\n          ownAttributes[fSize] = fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\r\n        }\r\n\r\n        var normalizedAttr, normalizedValue, normalizedStyle = {};\r\n        for (var attr in ownAttributes) {\r\n          normalizedAttr = normalizeAttr(attr);\r\n          normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\r\n          normalizedStyle[normalizedAttr] = normalizedValue;\r\n        }\r\n        if (normalizedStyle && normalizedStyle.font) {\r\n          fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\r\n        }\r\n        var mergedAttrs = extend(parentAttributes, normalizedStyle);\r\n        return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\r\n      },\r\n\r\n      /**\r\n       * Transforms an array of svg elements to corresponding fabric.* instances\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {Array} elements Array of elements to parse\r\n       * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       */\r\n      parseElements: function(elements, callback, options, reviver, parsingOptions) {\r\n        new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\r\n      },\r\n\r\n      /**\r\n       * Parses \"style\" attribute, retuning an object with values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {SVGElement} element Element to parse\r\n       * @return {Object} Objects with values parsed from style attribute of an element\r\n       */\r\n      parseStyleAttribute: function(element) {\r\n        var oStyle = { },\r\n            style = element.getAttribute('style');\r\n\r\n        if (!style) {\r\n          return oStyle;\r\n        }\r\n\r\n        if (typeof style === 'string') {\r\n          parseStyleString(style, oStyle);\r\n        }\r\n        else {\r\n          parseStyleObject(style, oStyle);\r\n        }\r\n\r\n        return oStyle;\r\n      },\r\n\r\n      /**\r\n       * Parses \"points\" attribute, returning an array of values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {String} points points attribute string\r\n       * @return {Array} array of points\r\n       */\r\n      parsePointsAttribute: function(points) {\r\n\r\n        // points attribute is required and must not be empty\r\n        if (!points) {\r\n          return null;\r\n        }\r\n\r\n        // replace commas with whitespace and remove bookending whitespace\r\n        points = points.replace(/,/g, ' ').trim();\r\n\r\n        points = points.split(/\\s+/);\r\n        var parsedPoints = [], i, len;\r\n\r\n        for (i = 0, len = points.length; i < len; i += 2) {\r\n          parsedPoints.push({\r\n            x: parseFloat(points[i]),\r\n            y: parseFloat(points[i + 1])\r\n          });\r\n        }\r\n\r\n        // odd number of points is an error\r\n        // if (parsedPoints.length % 2 !== 0) {\r\n        //   return null;\r\n        // }\r\n\r\n        return parsedPoints;\r\n      },\r\n\r\n      /**\r\n       * Returns CSS rules for a given SVG document\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} CSS rules of this document\r\n       */\r\n      getCSSRules: function(doc) {\r\n        var styles = doc.getElementsByTagName('style'), i, len,\r\n            allRules = { }, rules;\r\n\r\n        // very crude parsing of style contents\r\n        for (i = 0, len = styles.length; i < len; i++) {\r\n          // IE9 doesn't support textContent, but provides text instead.\r\n          var styleContents = styles[i].textContent || styles[i].text;\r\n\r\n          // remove comments\r\n          styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\r\n          if (styleContents.trim() === '') {\r\n            continue;\r\n          }\r\n          rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\r\n          rules = rules.map(function(rule) { return rule.trim(); });\r\n          // eslint-disable-next-line no-loop-func\r\n          rules.forEach(function(rule) {\r\n\r\n            var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\r\n                ruleObj = { }, declaration = match[2].trim(),\r\n                propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\r\n\r\n            for (i = 0, len = propertyValuePairs.length; i < len; i++) {\r\n              var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\r\n                  property = pair[0],\r\n                  value = pair[1];\r\n              ruleObj[property] = value;\r\n            }\r\n            rule = match[1];\r\n            rule.split(',').forEach(function(_rule) {\r\n              _rule = _rule.replace(/^svg/i, '').trim();\r\n              if (_rule === '') {\r\n                return;\r\n              }\r\n              if (allRules[_rule]) {\r\n                fabric.util.object.extend(allRules[_rule], ruleObj);\r\n              }\r\n              else {\r\n                allRules[_rule] = fabric.util.object.clone(ruleObj);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        return allRules;\r\n      },\r\n\r\n      /**\r\n       * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\r\n       * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\r\n       * @memberOf fabric\r\n       * @param {String} url\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromURL: function(url, callback, reviver, options) {\r\n\r\n        url = url.replace(/^\\n\\s*/, '').trim();\r\n        new fabric.util.request(url, {\r\n          method: 'get',\r\n          onComplete: onComplete\r\n        });\r\n\r\n        function onComplete(r) {\r\n\r\n          var xml = r.responseXML;\r\n          if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\r\n            xml = new ActiveXObject('Microsoft.XMLDOM');\r\n            xml.async = 'false';\r\n            //IE chokes on DOCTYPE\r\n            xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n          }\r\n          if (!xml || !xml.documentElement) {\r\n            callback && callback(null);\r\n            return false;\r\n          }\r\n\r\n          fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\r\n            callback && callback(results, _options, elements, allElements);\r\n          }, reviver, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\r\n       * @memberOf fabric\r\n       * @param {String} string\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromString: function(string, callback, reviver, options) {\r\n        string = string.trim();\r\n        var doc;\r\n        if (typeof fabric.window.DOMParser !== 'undefined') {\r\n          var parser = new fabric.window.DOMParser();\r\n          if (parser && parser.parseFromString) {\r\n            doc = parser.parseFromString(string, 'text/xml');\r\n          }\r\n        }\r\n        else if (fabric.window.ActiveXObject) {\r\n          doc = new ActiveXObject('Microsoft.XMLDOM');\r\n          doc.async = 'false';\r\n          // IE chokes on DOCTYPE\r\n          doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n        }\r\n\r\n        fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\r\n          callback(results, _options, elements, allElements);\r\n        }, reviver, options);\r\n      }\r\n    });\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions, doc) {\r\n    this.elements = elements;\r\n    this.callback = callback;\r\n    this.options = options;\r\n    this.reviver = reviver;\r\n    this.svgUid = (options && options.svgUid) || 0;\r\n    this.parsingOptions = parsingOptions;\r\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\r\n    this.doc = doc;\r\n  };\r\n\r\n  (function(proto) {\r\n    proto.parse = function() {\r\n      this.instances = new Array(this.elements.length);\r\n      this.numElements = this.elements.length;\r\n      this.createObjects();\r\n    };\r\n\r\n    proto.createObjects = function() {\r\n      var _this = this;\r\n      this.elements.forEach(function(element, i) {\r\n        element.setAttribute('svgUid', _this.svgUid);\r\n        _this.createObject(element, i);\r\n      });\r\n    };\r\n\r\n    proto.findTag = function(el) {\r\n      return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\r\n    };\r\n\r\n    proto.createObject = function(el, index) {\r\n      var klass = this.findTag(el);\r\n      if (klass && klass.fromElement) {\r\n        try {\r\n          klass.fromElement(el, this.createCallback(index, el), this.options);\r\n        }\r\n        catch (err) {\r\n          fabric.log(err);\r\n        }\r\n      }\r\n      else {\r\n        this.checkIfDone();\r\n      }\r\n    };\r\n\r\n    proto.createCallback = function(index, el) {\r\n      var _this = this;\r\n      return function(obj) {\r\n        var _options;\r\n        _this.resolveGradient(obj, el, 'fill');\r\n        _this.resolveGradient(obj, el, 'stroke');\r\n        if (obj instanceof fabric.Image && obj._originalElement) {\r\n          _options = obj.parsePreserveAspectRatioAttribute(el);\r\n        }\r\n        obj._removeTransformMatrix(_options);\r\n        _this.resolveClipPath(obj, el);\r\n        _this.reviver && _this.reviver(el, obj);\r\n        _this.instances[index] = obj;\r\n        _this.checkIfDone();\r\n      };\r\n    };\r\n\r\n    proto.extractPropertyDefinition = function(obj, property, storage) {\r\n      var value = obj[property], regex = this.regexUrl;\r\n      if (!regex.test(value)) {\r\n        return;\r\n      }\r\n      regex.lastIndex = 0;\r\n      var id = regex.exec(value)[1];\r\n      regex.lastIndex = 0;\r\n      return fabric[storage][this.svgUid][id];\r\n    };\r\n\r\n    proto.resolveGradient = function(obj, el, property) {\r\n      var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');\r\n      if (gradientDef) {\r\n        var opacityAttr = el.getAttribute(property + '-opacity');\r\n        var gradient = fabric.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);\r\n        obj.set(property, gradient);\r\n      }\r\n    };\r\n\r\n    proto.createClipPathCallback = function(obj, container) {\r\n      return function(_newObj) {\r\n        _newObj._removeTransformMatrix();\r\n        _newObj.fillRule = _newObj.clipRule;\r\n        container.push(_newObj);\r\n      };\r\n    };\r\n\r\n    proto.resolveClipPath = function(obj, usingElement) {\r\n      var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),\r\n          element, klass, objTransformInv, container, gTransform, options;\r\n      if (clipPath) {\r\n        container = [];\r\n        objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());\r\n        // move the clipPath tag as sibling to the real element that is using it\r\n        var clipPathTag = clipPath[0].parentNode;\r\n        var clipPathOwner = usingElement;\r\n        while (clipPathOwner.parentNode && clipPathOwner.getAttribute('clip-path') !== obj.clipPath) {\r\n          clipPathOwner = clipPathOwner.parentNode;\r\n        }\r\n        clipPathOwner.parentNode.appendChild(clipPathTag);\r\n        for (var i = 0; i < clipPath.length; i++) {\r\n          element = clipPath[i];\r\n          klass = this.findTag(element);\r\n          klass.fromElement(\r\n            element,\r\n            this.createClipPathCallback(obj, container),\r\n            this.options\r\n          );\r\n        }\r\n        if (container.length === 1) {\r\n          clipPath = container[0];\r\n        }\r\n        else {\r\n          clipPath = new fabric.Group(container);\r\n        }\r\n        gTransform = fabric.util.multiplyTransformMatrices(\r\n          objTransformInv,\r\n          clipPath.calcTransformMatrix()\r\n        );\r\n        if (clipPath.clipPath) {\r\n          this.resolveClipPath(clipPath, clipPathOwner);\r\n        }\r\n        var options = fabric.util.qrDecompose(gTransform);\r\n        clipPath.flipX = false;\r\n        clipPath.flipY = false;\r\n        clipPath.set('scaleX', options.scaleX);\r\n        clipPath.set('scaleY', options.scaleY);\r\n        clipPath.angle = options.angle;\r\n        clipPath.skewX = options.skewX;\r\n        clipPath.skewY = 0;\r\n        clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, 'center', 'center');\r\n        obj.clipPath = clipPath;\r\n      }\r\n    };\r\n\r\n    proto.checkIfDone = function() {\r\n      if (--this.numElements === 0) {\r\n        this.instances = this.instances.filter(function(el) {\r\n          // eslint-disable-next-line no-eq-null, eqeqeq\r\n          return el != null;\r\n        });\r\n        this.callback(this.instances, this.elements);\r\n      }\r\n    };\r\n  })(fabric.ElementsParser.prototype);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Point) {\r\n      fabric.warn('fabric.Point is already defined');\r\n      return;\r\n    }\r\n\r\n    fabric.Point = Point;\r\n\r\n    /**\r\n     * Point class\r\n     * @class fabric.Point\r\n     * @memberOf fabric\r\n     * @constructor\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @return {fabric.Point} thisArg\r\n     */\r\n    function Point(x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n\r\n    Point.prototype = /** @lends fabric.Point.prototype */ {\r\n\r\n      type: 'point',\r\n\r\n      constructor: Point,\r\n\r\n      /**\r\n       * Adds another point to this one and returns another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point instance with added values\r\n       */\r\n      add: function (that) {\r\n        return new Point(this.x + that.x, this.y + that.y);\r\n      },\r\n\r\n      /**\r\n       * Adds another point to this one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      addEquals: function (that) {\r\n        this.x += that.x;\r\n        this.y += that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} new Point with added value\r\n       */\r\n      scalarAdd: function (scalar) {\r\n        return new Point(this.x + scalar, this.y + scalar);\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarAddEquals: function (scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point and returns a new one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point object with subtracted values\r\n       */\r\n      subtract: function (that) {\r\n        return new Point(this.x - that.x, this.y - that.y);\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      subtractEquals: function (that) {\r\n        this.x -= that.x;\r\n        this.y -= that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      scalarSubtract: function (scalar) {\r\n        return new Point(this.x - scalar, this.y - scalar);\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarSubtractEquals: function (scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value and returns a new one\r\n       * TODO: rename in scalarMultiply in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      multiply: function (scalar) {\r\n        return new Point(this.x * scalar, this.y * scalar);\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value\r\n       * TODO: rename in scalarMultiplyEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      multiplyEquals: function (scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value and returns a new one\r\n       * TODO: rename in scalarDivide in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      divide: function (scalar) {\r\n        return new Point(this.x / scalar, this.y / scalar);\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value\r\n       * TODO: rename in scalarDivideEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      divideEquals: function (scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      eq: function (that) {\r\n        return (this.x === that.x && this.y === that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lt: function (that) {\r\n        return (this.x < that.x && this.y < that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lte: function (that) {\r\n        return (this.x <= that.x && this.y <= that.y);\r\n      },\r\n\r\n      /**\r\n\r\n       * Returns true if this point is greater another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gt: function (that) {\r\n        return (this.x > that.x && this.y > that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is greater than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gte: function (that) {\r\n        return (this.x >= that.x && this.y >= that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns new point which is the result of linear interpolation with this one and another one\r\n       * @param {fabric.Point} that\r\n       * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\r\n       * @return {fabric.Point}\r\n       */\r\n      lerp: function (that, t) {\r\n        if (typeof t === 'undefined') {\r\n          t = 0.5;\r\n        }\r\n        t = Math.max(Math.min(1, t), 0);\r\n        return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\r\n      },\r\n\r\n      /**\r\n       * Returns distance from this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {Number}\r\n       */\r\n      distanceFrom: function (that) {\r\n        var dx = this.x - that.x,\r\n            dy = this.y - that.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n      },\r\n\r\n      /**\r\n       * Returns the point between this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      midPointFrom: function (that) {\r\n        return this.lerp(that);\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the min of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      min: function (that) {\r\n        return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the max of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      max: function (that) {\r\n        return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of this point\r\n       * @return {String}\r\n       */\r\n      toString: function () {\r\n        return this.x + ',' + this.y;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point\r\n       * @param {Number} x\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setXY: function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x of this point\r\n       * @param {Number} x\r\n       * @chainable\r\n       */\r\n      setX: function (x) {\r\n        this.x = x;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets y of this point\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setY: function (y) {\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point from another point\r\n       * @param {fabric.Point} that\r\n       * @chainable\r\n       */\r\n      setFromPoint: function (that) {\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Swaps x/y of this point and another point\r\n       * @param {fabric.Point} that\r\n       */\r\n      swap: function (that) {\r\n        var x = this.x,\r\n            y = this.y;\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        that.x = x;\r\n        that.y = y;\r\n      },\r\n\r\n      /**\r\n       * return a cloned instance of the point\r\n       * @return {fabric.Point}\r\n       */\r\n      clone: function () {\r\n        return new Point(this.x, this.y);\r\n      }\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Intersection) {\r\n      fabric.warn('fabric.Intersection is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Intersection class\r\n     * @class fabric.Intersection\r\n     * @memberOf fabric\r\n     * @constructor\r\n     */\r\n    function Intersection(status) {\r\n      this.status = status;\r\n      this.points = [];\r\n    }\r\n\r\n    fabric.Intersection = Intersection;\r\n\r\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\r\n\r\n      constructor: Intersection,\r\n\r\n      /**\r\n       * Appends a point to intersection\r\n       * @param {fabric.Point} point\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoint: function (point) {\r\n        this.points.push(point);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Appends points to intersection\r\n       * @param {Array} points\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoints: function (points) {\r\n        this.points = this.points.concat(points);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Checks if one line intersects another\r\n     * TODO: rename in intersectSegmentSegment\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {fabric.Point} b1\r\n     * @param {fabric.Point} b2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\r\n      var result,\r\n          uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\r\n          ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\r\n          uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n      if (uB !== 0) {\r\n        var ua = uaT / uB,\r\n            ub = ubT / uB;\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n          result = new Intersection('Intersection');\r\n          result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\r\n        }\r\n        else {\r\n          result = new Intersection();\r\n        }\r\n      }\r\n      else {\r\n        if (uaT === 0 || ubT === 0) {\r\n          result = new Intersection('Coincident');\r\n        }\r\n        else {\r\n          result = new Intersection('Parallel');\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if line intersects polygon\r\n     * TODO: rename in intersectSegmentPolygon\r\n     * fix detection of coincident\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {Array} points\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\r\n      var result = new Intersection(),\r\n          length = points.length,\r\n          b1, b2, inter, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        b1 = points[i];\r\n        b2 = points[(i + 1) % length];\r\n        inter = Intersection.intersectLineLine(a1, a2, b1, b2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects another polygon\r\n     * @static\r\n     * @param {Array} points1\r\n     * @param {Array} points2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\r\n      var result = new Intersection(),\r\n          length = points1.length, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        var a1 = points1[i],\r\n            a2 = points1[(i + 1) % length],\r\n            inter = Intersection.intersectLinePolygon(a1, a2, points2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects rectangle\r\n     * @static\r\n     * @param {Array} points\r\n     * @param {fabric.Point} r1\r\n     * @param {fabric.Point} r2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\r\n      var min = r1.min(r2),\r\n          max = r1.max(r2),\r\n          topRight = new fabric.Point(max.x, min.y),\r\n          bottomLeft = new fabric.Point(min.x, max.y),\r\n          inter1 = Intersection.intersectLinePolygon(min, topRight, points),\r\n          inter2 = Intersection.intersectLinePolygon(topRight, max, points),\r\n          inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\r\n          inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\r\n          result = new Intersection();\r\n\r\n      result.appendPoints(inter1.points);\r\n      result.appendPoints(inter2.points);\r\n      result.appendPoints(inter3.points);\r\n      result.appendPoints(inter4.points);\r\n\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Color) {\r\n      fabric.warn('fabric.Color is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Color class\r\n     * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\r\n     * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\r\n     *\r\n     * @class fabric.Color\r\n     * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\r\n     * @return {fabric.Color} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\r\n     */\r\n    function Color(color) {\r\n      if (!color) {\r\n        this.setSource([0, 0, 0, 1]);\r\n      }\r\n      else {\r\n        this._tryParsingColor(color);\r\n      }\r\n    }\r\n\r\n    fabric.Color = Color;\r\n\r\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {String|Array} color Color value to parse\r\n       */\r\n      _tryParsingColor: function(color) {\r\n        var source;\r\n\r\n        if (color in Color.colorNameMap) {\r\n          color = Color.colorNameMap[color];\r\n        }\r\n\r\n        if (color === 'transparent') {\r\n          source = [255, 255, 255, 0];\r\n        }\r\n\r\n        if (!source) {\r\n          source = Color.sourceFromHex(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromRgb(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromHsl(color);\r\n        }\r\n        if (!source) {\r\n          //if color is not recognize let's make black as canvas does\r\n          source = [0, 0, 0, 1];\r\n        }\r\n        if (source) {\r\n          this.setSource(source);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n       * @private\r\n       * @param {Number} r Red color value\r\n       * @param {Number} g Green color value\r\n       * @param {Number} b Blue color value\r\n       * @return {Array} Hsl color\r\n       */\r\n      _rgbToHsl: function(r, g, b) {\r\n        r /= 255; g /= 255; b /= 255;\r\n\r\n        var h, s, l,\r\n            max = fabric.util.array.max([r, g, b]),\r\n            min = fabric.util.array.min([r, g, b]);\r\n\r\n        l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n          h = s = 0; // achromatic\r\n        }\r\n        else {\r\n          var d = max - min;\r\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n          switch (max) {\r\n            case r:\r\n              h = (g - b) / d + (g < b ? 6 : 0);\r\n              break;\r\n            case g:\r\n              h = (b - r) / d + 2;\r\n              break;\r\n            case b:\r\n              h = (r - g) / d + 4;\r\n              break;\r\n          }\r\n          h /= 6;\r\n        }\r\n\r\n        return [\r\n          Math.round(h * 360),\r\n          Math.round(s * 100),\r\n          Math.round(l * 100)\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @return {Array}\r\n       */\r\n      getSource: function() {\r\n        return this._source;\r\n      },\r\n\r\n      /**\r\n       * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @param {Array} source\r\n       */\r\n      setSource: function(source) {\r\n        this._source = source;\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGB format\r\n       * @return {String} ex: rgb(0-255,0-255,0-255)\r\n       */\r\n      toRgb: function() {\r\n        var source = this.getSource();\r\n        return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGBA format\r\n       * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\r\n       */\r\n      toRgba: function() {\r\n        var source = this.getSource();\r\n        return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSL format\r\n       * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\r\n       */\r\n      toHsl: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSLA format\r\n       * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\r\n       */\r\n      toHsla: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEX format\r\n       * @return {String} ex: FF5555\r\n       */\r\n      toHex: function() {\r\n        var source = this.getSource(), r, g, b;\r\n\r\n        r = source[0].toString(16);\r\n        r = (r.length === 1) ? ('0' + r) : r;\r\n\r\n        g = source[1].toString(16);\r\n        g = (g.length === 1) ? ('0' + g) : g;\r\n\r\n        b = source[2].toString(16);\r\n        b = (b.length === 1) ? ('0' + b) : b;\r\n\r\n        return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEXA format\r\n       * @return {String} ex: FF5555CC\r\n       */\r\n      toHexa: function() {\r\n        var source = this.getSource(), a;\r\n\r\n        a = Math.round(source[3] * 255);\r\n        a = a.toString(16);\r\n        a = (a.length === 1) ? ('0' + a) : a;\r\n\r\n        return this.toHex() + a.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Gets value of alpha channel for this color\r\n       * @return {Number} 0-1\r\n       */\r\n      getAlpha: function() {\r\n        return this.getSource()[3];\r\n      },\r\n\r\n      /**\r\n       * Sets value of alpha channel for this color\r\n       * @param {Number} alpha Alpha value 0-1\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      setAlpha: function(alpha) {\r\n        var source = this.getSource();\r\n        source[3] = alpha;\r\n        this.setSource(source);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its grayscale representation\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toGrayscale: function() {\r\n        var source = this.getSource(),\r\n            average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\r\n            currentAlpha = source[3];\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its black and white representation\r\n       * @param {Number} threshold\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toBlackWhite: function(threshold) {\r\n        var source = this.getSource(),\r\n            average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\r\n            currentAlpha = source[3];\r\n\r\n        threshold = threshold || 127;\r\n\r\n        average = (Number(average) < Number(threshold)) ? 0 : 255;\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Overlays color with another color\r\n       * @param {String|fabric.Color} otherColor\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      overlayWith: function(otherColor) {\r\n        if (!(otherColor instanceof Color)) {\r\n          otherColor = new Color(otherColor);\r\n        }\r\n\r\n        var result = [],\r\n            alpha = this.getAlpha(),\r\n            otherAlpha = 0.5,\r\n            source = this.getSource(),\r\n            otherSource = otherColor.getSource(), i;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\r\n        }\r\n\r\n        result[3] = alpha;\r\n        this.setSource(result);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\r\n\r\n    /**\r\n     * Map of the 148 color names with HEX code\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     * @see: https://www.w3.org/TR/css3-color/#svg-color\r\n     */\r\n    fabric.Color.colorNameMap = {\r\n      aliceblue:            '#F0F8FF',\r\n      antiquewhite:         '#FAEBD7',\r\n      aqua:                 '#00FFFF',\r\n      aquamarine:           '#7FFFD4',\r\n      azure:                '#F0FFFF',\r\n      beige:                '#F5F5DC',\r\n      bisque:               '#FFE4C4',\r\n      black:                '#000000',\r\n      blanchedalmond:       '#FFEBCD',\r\n      blue:                 '#0000FF',\r\n      blueviolet:           '#8A2BE2',\r\n      brown:                '#A52A2A',\r\n      burlywood:            '#DEB887',\r\n      cadetblue:            '#5F9EA0',\r\n      chartreuse:           '#7FFF00',\r\n      chocolate:            '#D2691E',\r\n      coral:                '#FF7F50',\r\n      cornflowerblue:       '#6495ED',\r\n      cornsilk:             '#FFF8DC',\r\n      crimson:              '#DC143C',\r\n      cyan:                 '#00FFFF',\r\n      darkblue:             '#00008B',\r\n      darkcyan:             '#008B8B',\r\n      darkgoldenrod:        '#B8860B',\r\n      darkgray:             '#A9A9A9',\r\n      darkgrey:             '#A9A9A9',\r\n      darkgreen:            '#006400',\r\n      darkkhaki:            '#BDB76B',\r\n      darkmagenta:          '#8B008B',\r\n      darkolivegreen:       '#556B2F',\r\n      darkorange:           '#FF8C00',\r\n      darkorchid:           '#9932CC',\r\n      darkred:              '#8B0000',\r\n      darksalmon:           '#E9967A',\r\n      darkseagreen:         '#8FBC8F',\r\n      darkslateblue:        '#483D8B',\r\n      darkslategray:        '#2F4F4F',\r\n      darkslategrey:        '#2F4F4F',\r\n      darkturquoise:        '#00CED1',\r\n      darkviolet:           '#9400D3',\r\n      deeppink:             '#FF1493',\r\n      deepskyblue:          '#00BFFF',\r\n      dimgray:              '#696969',\r\n      dimgrey:              '#696969',\r\n      dodgerblue:           '#1E90FF',\r\n      firebrick:            '#B22222',\r\n      floralwhite:          '#FFFAF0',\r\n      forestgreen:          '#228B22',\r\n      fuchsia:              '#FF00FF',\r\n      gainsboro:            '#DCDCDC',\r\n      ghostwhite:           '#F8F8FF',\r\n      gold:                 '#FFD700',\r\n      goldenrod:            '#DAA520',\r\n      gray:                 '#808080',\r\n      grey:                 '#808080',\r\n      green:                '#008000',\r\n      greenyellow:          '#ADFF2F',\r\n      honeydew:             '#F0FFF0',\r\n      hotpink:              '#FF69B4',\r\n      indianred:            '#CD5C5C',\r\n      indigo:               '#4B0082',\r\n      ivory:                '#FFFFF0',\r\n      khaki:                '#F0E68C',\r\n      lavender:             '#E6E6FA',\r\n      lavenderblush:        '#FFF0F5',\r\n      lawngreen:            '#7CFC00',\r\n      lemonchiffon:         '#FFFACD',\r\n      lightblue:            '#ADD8E6',\r\n      lightcoral:           '#F08080',\r\n      lightcyan:            '#E0FFFF',\r\n      lightgoldenrodyellow: '#FAFAD2',\r\n      lightgray:            '#D3D3D3',\r\n      lightgrey:            '#D3D3D3',\r\n      lightgreen:           '#90EE90',\r\n      lightpink:            '#FFB6C1',\r\n      lightsalmon:          '#FFA07A',\r\n      lightseagreen:        '#20B2AA',\r\n      lightskyblue:         '#87CEFA',\r\n      lightslategray:       '#778899',\r\n      lightslategrey:       '#778899',\r\n      lightsteelblue:       '#B0C4DE',\r\n      lightyellow:          '#FFFFE0',\r\n      lime:                 '#00FF00',\r\n      limegreen:            '#32CD32',\r\n      linen:                '#FAF0E6',\r\n      magenta:              '#FF00FF',\r\n      maroon:               '#800000',\r\n      mediumaquamarine:     '#66CDAA',\r\n      mediumblue:           '#0000CD',\r\n      mediumorchid:         '#BA55D3',\r\n      mediumpurple:         '#9370DB',\r\n      mediumseagreen:       '#3CB371',\r\n      mediumslateblue:      '#7B68EE',\r\n      mediumspringgreen:    '#00FA9A',\r\n      mediumturquoise:      '#48D1CC',\r\n      mediumvioletred:      '#C71585',\r\n      midnightblue:         '#191970',\r\n      mintcream:            '#F5FFFA',\r\n      mistyrose:            '#FFE4E1',\r\n      moccasin:             '#FFE4B5',\r\n      navajowhite:          '#FFDEAD',\r\n      navy:                 '#000080',\r\n      oldlace:              '#FDF5E6',\r\n      olive:                '#808000',\r\n      olivedrab:            '#6B8E23',\r\n      orange:               '#FFA500',\r\n      orangered:            '#FF4500',\r\n      orchid:               '#DA70D6',\r\n      palegoldenrod:        '#EEE8AA',\r\n      palegreen:            '#98FB98',\r\n      paleturquoise:        '#AFEEEE',\r\n      palevioletred:        '#DB7093',\r\n      papayawhip:           '#FFEFD5',\r\n      peachpuff:            '#FFDAB9',\r\n      peru:                 '#CD853F',\r\n      pink:                 '#FFC0CB',\r\n      plum:                 '#DDA0DD',\r\n      powderblue:           '#B0E0E6',\r\n      purple:               '#800080',\r\n      rebeccapurple:        '#663399',\r\n      red:                  '#FF0000',\r\n      rosybrown:            '#BC8F8F',\r\n      royalblue:            '#4169E1',\r\n      saddlebrown:          '#8B4513',\r\n      salmon:               '#FA8072',\r\n      sandybrown:           '#F4A460',\r\n      seagreen:             '#2E8B57',\r\n      seashell:             '#FFF5EE',\r\n      sienna:               '#A0522D',\r\n      silver:               '#C0C0C0',\r\n      skyblue:              '#87CEEB',\r\n      slateblue:            '#6A5ACD',\r\n      slategray:            '#708090',\r\n      slategrey:            '#708090',\r\n      snow:                 '#FFFAFA',\r\n      springgreen:          '#00FF7F',\r\n      steelblue:            '#4682B4',\r\n      tan:                  '#D2B48C',\r\n      teal:                 '#008080',\r\n      thistle:              '#D8BFD8',\r\n      tomato:               '#FF6347',\r\n      turquoise:            '#40E0D0',\r\n      violet:               '#EE82EE',\r\n      wheat:                '#F5DEB3',\r\n      white:                '#FFFFFF',\r\n      whitesmoke:           '#F5F5F5',\r\n      yellow:               '#FFFF00',\r\n      yellowgreen:          '#9ACD32'\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @param {Number} p\r\n     * @param {Number} q\r\n     * @param {Number} t\r\n     * @return {Number}\r\n     */\r\n    function hue2rgb(p, q, t) {\r\n      if (t < 0) {\r\n        t += 1;\r\n      }\r\n      if (t > 1) {\r\n        t -= 1;\r\n      }\r\n      if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n      }\r\n      if (t < 1 / 2) {\r\n        return q;\r\n      }\r\n      if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n      }\r\n      return p;\r\n    }\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGB format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgb = function(color) {\r\n      return Color.fromSource(Color.sourceFromRgb(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromRgb = function(color) {\r\n      var match = color.match(Color.reRGBa);\r\n      if (match) {\r\n        var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\r\n            g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\r\n            b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\r\n\r\n        return [\r\n          parseInt(r, 10),\r\n          parseInt(g, 10),\r\n          parseInt(b, 10),\r\n          match[4] ? parseFloat(match[4]) : 1\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGBA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgba = Color.fromRgb;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSL format\r\n     * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\r\n     * @memberOf fabric.Color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsl = function(color) {\r\n      return Color.fromSource(Color.sourceFromHsl(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\r\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\r\n     * @return {Array} source\r\n     * @see http://http://www.w3.org/TR/css3-color/#hsl-color\r\n     */\r\n    fabric.Color.sourceFromHsl = function(color) {\r\n      var match = color.match(Color.reHSLa);\r\n      if (!match) {\r\n        return;\r\n      }\r\n\r\n      var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\r\n          s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\r\n          l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\r\n          r, g, b;\r\n\r\n      if (s === 0) {\r\n        r = g = b = l;\r\n      }\r\n      else {\r\n        var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n            p = l * 2 - q;\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n      }\r\n\r\n      return [\r\n        Math.round(r * 255),\r\n        Math.round(g * 255),\r\n        Math.round(b * 255),\r\n        match[4] ? parseFloat(match[4]) : 1\r\n      ];\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSLA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsla = Color.fromHsl;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: FF5555\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHex = function(color) {\r\n      return Color.fromSource(Color.sourceFromHex(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color ex: FF5555 or FF5544CC (RGBa)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromHex = function(color) {\r\n      if (color.match(Color.reHex)) {\r\n        var value = color.slice(color.indexOf('#') + 1),\r\n            isShortNotation = (value.length === 3 || value.length === 4),\r\n            isRGBa = (value.length === 8 || value.length === 4),\r\n            r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\r\n            g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\r\n            b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\r\n            a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\r\n\r\n        return [\r\n          parseInt(r, 16),\r\n          parseInt(g, 16),\r\n          parseInt(b, 16),\r\n          parseFloat((parseInt(a, 16) / 255).toFixed(2))\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {Array} source\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromSource = function(source) {\r\n      var oColor = new Color();\r\n      oColor.setSource(source);\r\n      return oColor;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    /* _FROM_SVG_START_ */\r\n    function getColorStop(el, multiplier) {\r\n      var style = el.getAttribute('style'),\r\n          offset = el.getAttribute('offset') || 0,\r\n          color, colorAlpha, opacity, i;\r\n\r\n      // convert percents to absolute values\r\n      offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\r\n      offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\r\n      if (style) {\r\n        var keyValuePairs = style.split(/\\s*;\\s*/);\r\n\r\n        if (keyValuePairs[keyValuePairs.length - 1] === '') {\r\n          keyValuePairs.pop();\r\n        }\r\n\r\n        for (i = keyValuePairs.length; i--; ) {\r\n\r\n          var split = keyValuePairs[i].split(/\\s*:\\s*/),\r\n              key = split[0].trim(),\r\n              value = split[1].trim();\r\n\r\n          if (key === 'stop-color') {\r\n            color = value;\r\n          }\r\n          else if (key === 'stop-opacity') {\r\n            opacity = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!color) {\r\n        color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\r\n      }\r\n      if (!opacity) {\r\n        opacity = el.getAttribute('stop-opacity');\r\n      }\r\n\r\n      color = new fabric.Color(color);\r\n      colorAlpha = color.getAlpha();\r\n      opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\r\n      opacity *= colorAlpha * multiplier;\r\n\r\n      return {\r\n        offset: offset,\r\n        color: color.toRgb(),\r\n        opacity: opacity\r\n      };\r\n    }\r\n\r\n    function getLinearCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('x1') || 0,\r\n        y1: el.getAttribute('y1') || 0,\r\n        x2: el.getAttribute('x2') || '100%',\r\n        y2: el.getAttribute('y2') || 0\r\n      };\r\n    }\r\n\r\n    function getRadialCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\r\n        y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\r\n        r1: 0,\r\n        x2: el.getAttribute('cx') || '50%',\r\n        y2: el.getAttribute('cy') || '50%',\r\n        r2: el.getAttribute('r') || '50%'\r\n      };\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    /**\r\n     * Gradient class\r\n     * @class fabric.Gradient\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\r\n     * @see {@link fabric.Gradient#initialize} for constructor definition\r\n     */\r\n    fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\r\n\r\n      /**\r\n       * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Vertical offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * A transform matrix to apply to the gradient before painting.\r\n       * Imported from svg gradients, is not applied with the current transform in the center.\r\n       * Before this transform is applied, the origin point is at the top left corner of the object\r\n       * plus the addition of offsetY and offsetX.\r\n       * @type Number[]\r\n       * @default null\r\n       */\r\n      gradientTransform: null,\r\n\r\n      /**\r\n       * coordinates units for coords.\r\n       * If `pixels`, the number of coords are in the same unit of width / height.\r\n       * If set as `percentage` the coords are still a number, but 1 means 100% of width\r\n       * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\r\n       * allowed values pixels or percentage.\r\n       * @type String\r\n       * @default 'pixels'\r\n       */\r\n      gradientUnits: 'pixels',\r\n\r\n      /**\r\n       * Gradient type linear or radial\r\n       * @type String\r\n       * @default 'pixels'\r\n       */\r\n      type: 'linear',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} options Options object with type, coords, gradientUnits and colorStops\r\n       * @param {Object} [options.type] gradient type linear or radial\r\n       * @param {Object} [options.gradientUnits] gradient units\r\n       * @param {Object} [options.offsetX] SVG import compatibility\r\n       * @param {Object} [options.offsetY] SVG import compatibility\r\n       * @param {Object[]} options.colorStops contains the colorstops.\r\n       * @param {Object} options.coords contains the coords of the gradient\r\n       * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial\r\n       * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial\r\n       * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial\r\n       * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial\r\n       * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle\r\n       * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        options || (options = { });\r\n        options.coords || (options.coords = { });\r\n\r\n        var coords, _this = this;\r\n\r\n        // sets everything, then coords and colorstops get sets again\r\n        Object.keys(options).forEach(function(option) {\r\n          _this[option] = options[option];\r\n        });\r\n\r\n        if (this.id) {\r\n          this.id += '_' + fabric.Object.__uid++;\r\n        }\r\n        else {\r\n          this.id = fabric.Object.__uid++;\r\n        }\r\n\r\n        coords = {\r\n          x1: options.coords.x1 || 0,\r\n          y1: options.coords.y1 || 0,\r\n          x2: options.coords.x2 || 0,\r\n          y2: options.coords.y2 || 0\r\n        };\r\n\r\n        if (this.type === 'radial') {\r\n          coords.r1 = options.coords.r1 || 0;\r\n          coords.r2 = options.coords.r2 || 0;\r\n        }\r\n\r\n        this.coords = coords;\r\n        this.colorStops = options.colorStops.slice();\r\n      },\r\n\r\n      /**\r\n       * Adds another colorStop\r\n       * @param {Object} colorStop Object with offset and color\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      addColorStop: function(colorStops) {\r\n        for (var position in colorStops) {\r\n          var color = new fabric.Color(colorStops[position]);\r\n          this.colorStops.push({\r\n            offset: parseFloat(position),\r\n            color: color.toRgb(),\r\n            opacity: color.getAlpha()\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a gradient\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object}\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var object = {\r\n          type: this.type,\r\n          coords: this.coords,\r\n          colorStops: this.colorStops,\r\n          offsetX: this.offsetX,\r\n          offsetY: this.offsetY,\r\n          gradientUnits: this.gradientUnits,\r\n          gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an gradient\r\n       * @param {Object} object Object to create a gradient for\r\n       * @return {String} SVG representation of an gradient (linear/radial)\r\n       */\r\n      toSVG: function(object, options) {\r\n        var coords = clone(this.coords, true), i, len, options = options || {},\r\n            markup, commonAttributes, colorStops = clone(this.colorStops, true),\r\n            needsSwap = coords.r1 > coords.r2,\r\n            transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),\r\n            offsetX = -this.offsetX, offsetY = -this.offsetY,\r\n            withViewport = !!options.additionalTransform,\r\n            gradientUnits = this.gradientUnits === 'pixels' ? 'userSpaceOnUse' : 'objectBoundingBox';\r\n        // colorStops must be sorted ascending\r\n        colorStops.sort(function(a, b) {\r\n          return a.offset - b.offset;\r\n        });\r\n\r\n        if (gradientUnits === 'objectBoundingBox') {\r\n          offsetX /= object.width;\r\n          offsetY /= object.height;\r\n        }\r\n        else {\r\n          offsetX += object.width / 2;\r\n          offsetY += object.height / 2;\r\n        }\r\n        if (object.type === 'path') {\r\n          offsetX -= object.pathOffset.x;\r\n          offsetY -= object.pathOffset.y;\r\n        }\r\n\r\n\r\n        transform[4] -= offsetX;\r\n        transform[5] -= offsetY;\r\n\r\n        commonAttributes = 'id=\"SVGID_' + this.id +\r\n                       '\" gradientUnits=\"' + gradientUnits + '\"';\r\n        commonAttributes += ' gradientTransform=\"' + (withViewport ?\r\n          options.additionalTransform + ' ' : '') + fabric.util.matrixToSVG(transform) + '\" ';\r\n\r\n        if (this.type === 'linear') {\r\n          markup = [\r\n            '<linearGradient ',\r\n            commonAttributes,\r\n            ' x1=\"', coords.x1,\r\n            '\" y1=\"', coords.y1,\r\n            '\" x2=\"', coords.x2,\r\n            '\" y2=\"', coords.y2,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n        else if (this.type === 'radial') {\r\n          // svg radial gradient has just 1 radius. the biggest.\r\n          markup = [\r\n            '<radialGradient ',\r\n            commonAttributes,\r\n            ' cx=\"', needsSwap ? coords.x1 : coords.x2,\r\n            '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\r\n            '\" r=\"', needsSwap ? coords.r1 : coords.r2,\r\n            '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\r\n            '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n\r\n        if (this.type === 'radial') {\r\n          if (needsSwap) {\r\n            // svg goes from internal to external radius. if radius are inverted, swap color stops.\r\n            colorStops = colorStops.concat();\r\n            colorStops.reverse();\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset = 1 - colorStops[i].offset;\r\n            }\r\n          }\r\n          var minRadius = Math.min(coords.r1, coords.r2);\r\n          if (minRadius > 0) {\r\n            // i have to shift all colorStops and add new one in 0.\r\n            var maxRadius = Math.max(coords.r1, coords.r2),\r\n                percentageShift = minRadius / maxRadius;\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\r\n            }\r\n          }\r\n        }\r\n\r\n        for (i = 0, len = colorStops.length; i < len; i++) {\r\n          var colorStop = colorStops[i];\r\n          markup.push(\r\n            '<stop ',\r\n            'offset=\"', (colorStop.offset * 100) + '%',\r\n            '\" style=\"stop-color:', colorStop.color,\r\n            (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\r\n            '\"/>\\n'\r\n          );\r\n        }\r\n\r\n        markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\r\n\r\n        return markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns an instance of CanvasGradient\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {fabric.Object} object the fabric.Object for which the gradient is\r\n       * @return {CanvasGradient}\r\n       */\r\n      toLive: function(ctx, object) {\r\n        var gradient, coords = fabric.util.object.clone(this.coords), i, len,\r\n            x1 = coords.x1, y1 = coords.y1, x2 = coords.x2, y2 = coords.y2,\r\n            stops = this.colorStops;\r\n\r\n        if (!this.type) {\r\n          return;\r\n        }\r\n\r\n        if (object instanceof fabric.Text && this.gradientUnits === 'percentage') {\r\n          x1 *= object.width;\r\n          y1 *= object.height;\r\n          x2 *= object.width;\r\n          y2 *= object.height;\r\n        }\r\n        if (this.type === 'linear') {\r\n          gradient = ctx.createLinearGradient(x1, y1, x2, y2);\r\n        }\r\n        else if (this.type === 'radial') {\r\n          gradient = ctx.createRadialGradient(x1, y1, coords.r1, x2, y2, coords.r2);\r\n        }\r\n        for (i = 0, len = stops.length; i < len; i++) {\r\n          var color = stops[i].color,\r\n              opacity = stops[i].opacity,\r\n              offset = stops[i].offset;\r\n\r\n          if (typeof opacity !== 'undefined') {\r\n            color = new fabric.Color(color).setAlpha(opacity).toRgba();\r\n          }\r\n          gradient.addColorStop(offset, color);\r\n        }\r\n\r\n        return gradient;\r\n      }\r\n    });\r\n\r\n    fabric.util.object.extend(fabric.Gradient, {\r\n\r\n      /* _FROM_SVG_START_ */\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from an SVG element\r\n       * @static\r\n       * @memberOf fabric.Gradient\r\n       * @param {SVGGradientElement} el SVG gradient element\r\n       * @param {fabric.Object} instance\r\n       * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\r\n       * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly graidents\r\n       * that uses gradientUnits as 'userSpaceOnUse' and percentages.\r\n       * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg\r\n       * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg\r\n       * @param {Object.number} width width part of the svg tag if viewBox is not specified\r\n       * @param {Object.number} height height part of the svg tag if viewBox is not specified\r\n       * @return {fabric.Gradient} Gradient instance\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\r\n       */\r\n      fromElement: function(el, instance, opacityAttr, svgOptions) {\r\n        /**\r\n         *  @example:\r\n         *\r\n         *  <linearGradient id=\"linearGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\"/>\r\n         *    <stop offset=\"100%\" stop-color=\"black\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <linearGradient id=\"linearGrad2\">\r\n         *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\r\n         *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\r\n         *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *  </radialGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad2\">\r\n         *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\r\n         *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\r\n         *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\r\n         *  </radialGradient>\r\n         *\r\n         */\r\n\r\n        var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);\r\n        multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;\r\n        if (isNaN(multiplier)) {\r\n          multiplier = 1;\r\n        }\r\n\r\n        var colorStopEls = el.getElementsByTagName('stop'),\r\n            type,\r\n            gradientUnits = el.getAttribute('gradientUnits') === 'userSpaceOnUse' ?\r\n              'pixels' : 'percentage',\r\n            gradientTransform = el.getAttribute('gradientTransform') || '',\r\n            colorStops = [],\r\n            coords, i, offsetX = 0, offsetY = 0,\r\n            transformMatrix;\r\n        if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\r\n          type = 'linear';\r\n          coords = getLinearCoords(el);\r\n        }\r\n        else {\r\n          type = 'radial';\r\n          coords = getRadialCoords(el);\r\n        }\r\n\r\n        for (i = colorStopEls.length; i--; ) {\r\n          colorStops.push(getColorStop(colorStopEls[i], multiplier));\r\n        }\r\n\r\n        transformMatrix = fabric.parseTransformAttribute(gradientTransform);\r\n\r\n        __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);\r\n\r\n        if (gradientUnits === 'pixels') {\r\n          offsetX = -instance.left;\r\n          offsetY = -instance.top;\r\n        }\r\n\r\n        var gradient = new fabric.Gradient({\r\n          id: el.getAttribute('id'),\r\n          type: type,\r\n          coords: coords,\r\n          colorStops: colorStops,\r\n          gradientUnits: gradientUnits,\r\n          gradientTransform: transformMatrix,\r\n          offsetX: offsetX,\r\n          offsetY: offsetY,\r\n        });\r\n\r\n        return gradient;\r\n      },\r\n      /* _FROM_SVG_END_ */\r\n\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from its object representation\r\n       * this function is uniquely used by Object.setGradient and is deprecated with it.\r\n       * @static\r\n       * @deprecated since 3.4.0\r\n       * @memberOf fabric.Gradient\r\n       * @param {Object} obj\r\n       * @param {Object} [options] Options object\r\n       */\r\n      forObject: function(obj, options) {\r\n        options || (options = { });\r\n        __convertPercentUnitsToValues(obj, options.coords, options.gradientUnits, {\r\n          // those values are to avoid errors. this function is uniquely used by\r\n          viewBoxWidth: 100,\r\n          viewBoxHeight: 100,\r\n        });\r\n        return new fabric.Gradient(options);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {\r\n      var propValue, finalValue;\r\n      Object.keys(options).forEach(function(prop) {\r\n        propValue = options[prop];\r\n        if (propValue === 'Infinity') {\r\n          finalValue = 1;\r\n        }\r\n        else if (propValue === '-Infinity') {\r\n          finalValue = 0;\r\n        }\r\n        else {\r\n          finalValue = parseFloat(options[prop], 10);\r\n          if (typeof propValue === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(propValue)) {\r\n            finalValue *= 0.01;\r\n            if (gradientUnits === 'pixels') {\r\n              // then we need to fix those percentages here in svg parsing\r\n              if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\r\n                finalValue *= svgOptions.viewBoxWidth || svgOptions.width;\r\n              }\r\n              if (prop === 'y1' || prop === 'y2') {\r\n                finalValue *= svgOptions.viewBoxHeight || svgOptions.height;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        options[prop] = finalValue;\r\n      });\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    /**\r\n     * Pattern class\r\n     * @class fabric.Pattern\r\n     * @see {@link http://fabricjs.com/patterns|Pattern demo}\r\n     * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\r\n     * @see {@link fabric.Pattern#initialize} for constructor definition\r\n     */\r\n\r\n\r\n    fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\r\n\r\n      /**\r\n       * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @type String\r\n       * @default\r\n       */\r\n      repeat: 'repeat',\r\n\r\n      /**\r\n       * Pattern horizontal offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Pattern vertical offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * transform matrix to change the pattern, imported from svgs.\r\n       * @type Array\r\n       * @default\r\n       */\r\n      patternTransform: null,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [callback] function to invoke after callback init.\r\n       * @return {fabric.Pattern} thisArg\r\n       */\r\n      initialize: function(options, callback) {\r\n        options || (options = { });\r\n\r\n        this.id = fabric.Object.__uid++;\r\n        this.setOptions(options);\r\n        if (!options.source || (options.source && typeof options.source !== 'string')) {\r\n          callback && callback(this);\r\n          return;\r\n        }\r\n        // function string\r\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\r\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\r\n          callback && callback(this);\r\n        }\r\n        else {\r\n          // img src string\r\n          var _this = this;\r\n          this.source = fabric.util.createImage();\r\n          fabric.util.loadImage(options.source, function(img) {\r\n            _this.source = img;\r\n            callback && callback(_this);\r\n          }, null, this.crossOrigin);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a pattern\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of a pattern instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            source, object;\r\n\r\n        // callback\r\n        if (typeof this.source === 'function') {\r\n          source = String(this.source);\r\n        }\r\n        // <img> element\r\n        else if (typeof this.source.src === 'string') {\r\n          source = this.source.src;\r\n        }\r\n        // <canvas> element\r\n        else if (typeof this.source === 'object' && this.source.toDataURL) {\r\n          source = this.source.toDataURL();\r\n        }\r\n\r\n        object = {\r\n          type: 'pattern',\r\n          source: source,\r\n          repeat: this.repeat,\r\n          crossOrigin: this.crossOrigin,\r\n          offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\r\n          offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\r\n          patternTransform: this.patternTransform ? this.patternTransform.concat() : null\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a pattern\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a pattern\r\n       */\r\n      toSVG: function(object) {\r\n        var patternSource = typeof this.source === 'function' ? this.source() : this.source,\r\n            patternWidth = patternSource.width / object.width,\r\n            patternHeight = patternSource.height / object.height,\r\n            patternOffsetX = this.offsetX / object.width,\r\n            patternOffsetY = this.offsetY / object.height,\r\n            patternImgSrc = '';\r\n        if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\r\n          patternHeight = 1;\r\n          if (patternOffsetY) {\r\n            patternHeight += Math.abs(patternOffsetY);\r\n          }\r\n        }\r\n        if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\r\n          patternWidth = 1;\r\n          if (patternOffsetX) {\r\n            patternWidth += Math.abs(patternOffsetX);\r\n          }\r\n\r\n        }\r\n        if (patternSource.src) {\r\n          patternImgSrc = patternSource.src;\r\n        }\r\n        else if (patternSource.toDataURL) {\r\n          patternImgSrc = patternSource.toDataURL();\r\n        }\r\n\r\n        return '<pattern id=\"SVGID_' + this.id +\r\n                      '\" x=\"' + patternOffsetX +\r\n                      '\" y=\"' + patternOffsetY +\r\n                      '\" width=\"' + patternWidth +\r\n                      '\" height=\"' + patternHeight + '\">\\n' +\r\n                 '<image x=\"0\" y=\"0\"' +\r\n                        ' width=\"' + patternSource.width +\r\n                        '\" height=\"' + patternSource.height +\r\n                        '\" xlink:href=\"' + patternImgSrc +\r\n                 '\"></image>\\n' +\r\n               '</pattern>\\n';\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      setOptions: function(options) {\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns an instance of CanvasPattern\r\n       * @param {CanvasRenderingContext2D} ctx Context to create pattern\r\n       * @return {CanvasPattern}\r\n       */\r\n      toLive: function(ctx) {\r\n        var source = typeof this.source === 'function' ? this.source() : this.source;\r\n\r\n        // if the image failed to load, return, and allow rest to continue loading\r\n        if (!source) {\r\n          return '';\r\n        }\r\n\r\n        // if an image\r\n        if (typeof source.src !== 'undefined') {\r\n          if (!source.complete) {\r\n            return '';\r\n          }\r\n          if (source.naturalWidth === 0 || source.naturalHeight === 0) {\r\n            return '';\r\n          }\r\n        }\r\n        return ctx.createPattern(source, this.repeat);\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Shadow) {\r\n      fabric.warn('fabric.Shadow is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Shadow class\r\n     * @class fabric.Shadow\r\n     * @see {@link http://fabricjs.com/shadows|Shadow demo}\r\n     * @see {@link fabric.Shadow#initialize} for constructor definition\r\n     */\r\n    fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\r\n\r\n      /**\r\n       * Shadow color\r\n       * @type String\r\n       * @default\r\n       */\r\n      color: 'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Shadow blur\r\n       * @type Number\r\n       */\r\n      blur: 0,\r\n\r\n      /**\r\n       * Shadow horizontal offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Shadow vertical offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * Whether the shadow should affect stroke operations\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      affectStroke: false,\r\n\r\n      /**\r\n       * Indicates whether toObject should include default values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * When `false`, the shadow will scale with the object.\r\n       * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\r\n       * default to false\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      nonScaling: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\r\n       * @return {fabric.Shadow} thisArg\r\n       */\r\n      initialize: function(options) {\r\n\r\n        if (typeof options === 'string') {\r\n          options = this._parseShadow(options);\r\n        }\r\n\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n\r\n        this.id = fabric.Object.__uid++;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} shadow Shadow value to parse\r\n       * @return {Object} Shadow object with color, offsetX, offsetY and blur\r\n       */\r\n      _parseShadow: function(shadow) {\r\n        var shadowStr = shadow.trim(),\r\n            offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\r\n            color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\r\n\r\n        return {\r\n          color: color.trim(),\r\n          offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\r\n          offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\r\n          blur: parseInt(offsetsAndBlur[3], 10) || 0\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\r\n       * @return {String} Returns CSS3 text-shadow declaration\r\n       */\r\n      toString: function() {\r\n        return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a shadow\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a shadow\r\n       */\r\n      toSVG: function(object) {\r\n        var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            offset = fabric.util.rotateVector(\r\n              { x: this.offsetX, y: this.offsetY },\r\n              fabric.util.degreesToRadians(-object.angle)),\r\n            BLUR_BOX = 20, color = new fabric.Color(this.color);\r\n\r\n        if (object.width && object.height) {\r\n          //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\r\n          // we add some extra space to filter box to contain the blur ( 20 )\r\n          fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n          fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n        }\r\n        if (object.flipX) {\r\n          offset.x *= -1;\r\n        }\r\n        if (object.flipY) {\r\n          offset.y *= -1;\r\n        }\r\n\r\n        return (\r\n          '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\r\n            'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\r\n            '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\r\n              toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\r\n            '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\r\n            '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\r\n            '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\r\n            '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\r\n            '\\t<feMerge>\\n' +\r\n              '\\t\\t<feMergeNode></feMergeNode>\\n' +\r\n              '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\r\n            '\\t</feMerge>\\n' +\r\n          '</filter>\\n');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns object representation of a shadow\r\n       * @return {Object} Object representation of a shadow instance\r\n       */\r\n      toObject: function() {\r\n        if (this.includeDefaultValues) {\r\n          return {\r\n            color: this.color,\r\n            blur: this.blur,\r\n            offsetX: this.offsetX,\r\n            offsetY: this.offsetY,\r\n            affectStroke: this.affectStroke,\r\n            nonScaling: this.nonScaling\r\n          };\r\n        }\r\n        var obj = { }, proto = fabric.Shadow.prototype;\r\n\r\n        ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke', 'nonScaling'].forEach(function(prop) {\r\n          if (this[prop] !== proto[prop]) {\r\n            obj[prop] = this[prop];\r\n          }\r\n        }, this);\r\n\r\n        return obj;\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Shadow\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function () {\r\n\r\n    'use strict';\r\n\r\n    if (fabric.StaticCanvas) {\r\n      fabric.warn('fabric.StaticCanvas is already defined.');\r\n      return;\r\n    }\r\n\r\n    // aliases for faster resolution\r\n    var extend = fabric.util.object.extend,\r\n        getElementOffset = fabric.util.getElementOffset,\r\n        removeFromArray = fabric.util.removeFromArray,\r\n        toFixed = fabric.util.toFixed,\r\n        transformPoint = fabric.util.transformPoint,\r\n        invertTransform = fabric.util.invertTransform,\r\n        getNodeCanvas = fabric.util.getNodeCanvas,\r\n        createCanvasElement = fabric.util.createCanvasElement,\r\n\r\n        CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\r\n\r\n    /**\r\n     * Static canvas class\r\n     * @class fabric.StaticCanvas\r\n     * @mixes fabric.Collection\r\n     * @mixes fabric.Observable\r\n     * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\r\n     * @see {@link fabric.StaticCanvas#initialize} for constructor definition\r\n     * @fires before:render\r\n     * @fires after:render\r\n     * @fires canvas:cleared\r\n     * @fires object:added\r\n     * @fires object:removed\r\n     */\r\n    fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n      },\r\n\r\n      /**\r\n       * Background color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      backgroundColor: '',\r\n\r\n      /**\r\n       * Background image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\r\n       * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\r\n       * since 2.4.0 image caching is active, please when putting an image as background, add to the\r\n       * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n       * vale. As an alternative you can disable image objectCaching\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      backgroundImage: null,\r\n\r\n      /**\r\n       * Overlay color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\r\n       * @since 1.3.9\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      overlayColor: '',\r\n\r\n      /**\r\n       * Overlay image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\r\n       * and \"overlayImageTop\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\r\n       * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\r\n       * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n       * vale. As an alternative you can disable image objectCaching\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      overlayImage: null,\r\n\r\n      /**\r\n       * Indicates whether toObject/toDatalessObject should include default values\r\n       * if set to false, takes precedence over the object value.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * Indicates whether objects' state should be saved\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      stateful: false,\r\n\r\n      /**\r\n       * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\r\n       * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\r\n       * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\r\n       * since the renders are quequed and executed one per frame.\r\n       * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\r\n       * Left default to true to do not break documentation and old app, fiddles.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      renderOnAddRemove: true,\r\n\r\n      /**\r\n       * Function that determines clipping of entire canvas area\r\n       * Being passed context as first argument.\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       * @default\r\n       */\r\n      clipTo: null,\r\n\r\n      /**\r\n       * Indicates whether object controls (borders/controls) are rendered above overlay image\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      controlsAboveOverlay: false,\r\n\r\n      /**\r\n       * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      allowTouchScrolling: false,\r\n\r\n      /**\r\n       * Indicates whether this canvas will use image smoothing, this is on by default in browsers\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      imageSmoothingEnabled: true,\r\n\r\n      /**\r\n       * The transformation (in the format of Canvas transform) which focuses the viewport\r\n       * @type Array\r\n       * @default\r\n       */\r\n      viewportTransform: fabric.iMatrix.concat(),\r\n\r\n      /**\r\n       * if set to false background image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      backgroundVpt: true,\r\n\r\n      /**\r\n       * if set to false overlya image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overlayVpt: true,\r\n\r\n      /**\r\n       * Callback; invoked right before object is about to be scaled/rotated\r\n       * @deprecated since 2.3.0\r\n       * Use before:transform event\r\n       */\r\n      onBeforeScaleRotate: function () {\r\n        /* NOOP */\r\n      },\r\n\r\n      /**\r\n       * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      enableRetinaScaling: true,\r\n\r\n      /**\r\n       * Describe canvas element extension over design\r\n       * properties are tl,tr,bl,br.\r\n       * if canvas is not zoomed/panned those points are the four corner of canvas\r\n       * if canvas is viewportTransformed you those points indicate the extension\r\n       * of canvas element in plain untrasformed coordinates\r\n       * The coordinates get updated with @method calcViewportBoundaries.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       */\r\n      vptCoords: { },\r\n\r\n      /**\r\n       * Based on vptCoords and object.aCoords, skip rendering of objects that\r\n       * are not included in current viewport.\r\n       * May greatly help in applications with crowded canvas and use of zoom/pan\r\n       * If One of the corner of the bounding box of the object is on the canvas\r\n       * the objects get rendered.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipOffscreen: true,\r\n\r\n      /**\r\n       * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n       * the clipPath object gets used when the canvas has rendered, and the context is placed in the\r\n       * top left corner of the canvas.\r\n       * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\r\n       * @type fabric.Object\r\n       */\r\n      clipPath: undefined,\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initStatic: function(el, options) {\r\n        var cb = this.requestRenderAllBound;\r\n        this._objects = [];\r\n        this._createLowerCanvas(el);\r\n        this._initOptions(options);\r\n        this._setImageSmoothing();\r\n        // only initialize retina scaling once\r\n        if (!this.interactive) {\r\n          this._initRetinaScaling();\r\n        }\r\n\r\n        if (options.overlayImage) {\r\n          this.setOverlayImage(options.overlayImage, cb);\r\n        }\r\n        if (options.backgroundImage) {\r\n          this.setBackgroundImage(options.backgroundImage, cb);\r\n        }\r\n        if (options.backgroundColor) {\r\n          this.setBackgroundColor(options.backgroundColor, cb);\r\n        }\r\n        if (options.overlayColor) {\r\n          this.setOverlayColor(options.overlayColor, cb);\r\n        }\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _isRetinaScaling: function() {\r\n        return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} retinaScaling if applied, otherwise 1;\r\n       */\r\n      getRetinaScaling: function() {\r\n        return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initRetinaScaling: function() {\r\n        if (!this._isRetinaScaling()) {\r\n          return;\r\n        }\r\n        var scaleRatio = fabric.devicePixelRatio;\r\n        this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\r\n        if (this.upperCanvasEl) {\r\n          this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\r\n        }\r\n      },\r\n\r\n      __initRetinaScaling: function(scaleRatio, canvas, context) {\r\n        canvas.setAttribute('width', this.width * scaleRatio);\r\n        canvas.setAttribute('height', this.height * scaleRatio);\r\n        context.scale(scaleRatio, scaleRatio);\r\n      },\r\n\r\n\r\n      /**\r\n       * Calculates canvas element offset relative to the document\r\n       * This method is also attached as \"resize\" event handler of window\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      calcOffset: function () {\r\n        this._offset = getElementOffset(this.lowerCanvasEl);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\r\n       * @param {Function} callback callback to invoke when image is loaded and set as an overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\r\n       * @example <caption>Normal overlayImage with left/top = 0</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage with different properties</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage loaded from cross-origin</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      setOverlayImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('overlayImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundImage with left/top = 0</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage with different properties</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage loaded from cross-origin</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      // TODO: fix stretched examples\r\n      setBackgroundImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('backgroundImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\r\n       * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\r\n       * @param {Function} callback Callback to invoke when foreground color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\r\n       * @example <caption>Normal overlayColor - color value</caption>\r\n       * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setOverlayColor: function(overlayColor, callback) {\r\n        return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\r\n       * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\r\n       * @param {Function} callback Callback to invoke when background color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundColor - color value</caption>\r\n       * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setBackgroundColor: function(backgroundColor, callback) {\r\n        return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\r\n       */\r\n      _setImageSmoothing: function() {\r\n        var ctx = this.getContext();\r\n\r\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\r\n          || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\r\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\r\n       * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\r\n       * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\r\n       */\r\n      __setBgOverlayImage: function(property, image, callback, options) {\r\n        if (typeof image === 'string') {\r\n          fabric.util.loadImage(image, function(img) {\r\n            if (img) {\r\n              var instance = new fabric.Image(img, options);\r\n              this[property] = instance;\r\n              instance.canvas = this;\r\n            }\r\n            callback && callback(img);\r\n          }, this, options && options.crossOrigin);\r\n        }\r\n        else {\r\n          options && image.setOptions(options);\r\n          this[property] = image;\r\n          image && (image.canvas = this);\r\n          callback && callback(image);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\r\n       * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\r\n       * @param {(Object|String|null)} color Object with pattern information, color value or null\r\n       * @param {Function} [callback] Callback is invoked when color is set\r\n       */\r\n      __setBgOverlayColor: function(property, color, callback) {\r\n        this[property] = color;\r\n        this._initGradient(color, property);\r\n        this._initPattern(color, property, callback);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCanvasElement: function() {\r\n        var element = createCanvasElement();\r\n        if (!element) {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        if (!element.style) {\r\n          element.style = { };\r\n        }\r\n        if (typeof element.getContext === 'undefined') {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        return element;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initOptions: function (options) {\r\n        var lowerCanvasEl = this.lowerCanvasEl;\r\n        this._setOptions(options);\r\n\r\n        this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\r\n        this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\r\n\r\n        if (!this.lowerCanvasEl.style) {\r\n          return;\r\n        }\r\n\r\n        lowerCanvasEl.width = this.width;\r\n        lowerCanvasEl.height = this.height;\r\n\r\n        lowerCanvasEl.style.width = this.width + 'px';\r\n        lowerCanvasEl.style.height = this.height + 'px';\r\n\r\n        this.viewportTransform = this.viewportTransform.slice();\r\n      },\r\n\r\n      /**\r\n       * Creates a bottom canvas\r\n       * @private\r\n       * @param {HTMLElement} [canvasEl]\r\n       */\r\n      _createLowerCanvas: function (canvasEl) {\r\n        // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\r\n        if (canvasEl && canvasEl.getContext) {\r\n          this.lowerCanvasEl = canvasEl;\r\n        }\r\n        else {\r\n          this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\r\n        }\r\n\r\n        fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\r\n\r\n        if (this.interactive) {\r\n          this._applyCanvasStyle(this.lowerCanvasEl);\r\n        }\r\n\r\n        this.contextContainer = this.lowerCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * Returns canvas width (in px)\r\n       * @return {Number}\r\n       */\r\n      getWidth: function () {\r\n        return this.width;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas height (in px)\r\n       * @return {Number}\r\n       */\r\n      getHeight: function () {\r\n        return this.height;\r\n      },\r\n\r\n      /**\r\n       * Sets width of this canvas instance\r\n       * @param {Number|String} value                         Value to set width to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setWidth: function (value, options) {\r\n        return this.setDimensions({ width: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets height of this canvas instance\r\n       * @param {Number|String} value                         Value to set height to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setHeight: function (value, options) {\r\n        return this.setDimensions({ height: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\r\n       * @param {Object}        dimensions                    Object with width/height properties\r\n       * @param {Number|String} [dimensions.width]            Width of canvas element\r\n       * @param {Number|String} [dimensions.height]           Height of canvas element\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setDimensions: function (dimensions, options) {\r\n        var cssValue;\r\n\r\n        options = options || {};\r\n\r\n        for (var prop in dimensions) {\r\n          cssValue = dimensions[prop];\r\n\r\n          if (!options.cssOnly) {\r\n            this._setBackstoreDimension(prop, dimensions[prop]);\r\n            cssValue += 'px';\r\n            this.hasLostContext = true;\r\n          }\r\n\r\n          if (!options.backstoreOnly) {\r\n            this._setCssDimension(prop, cssValue);\r\n          }\r\n        }\r\n        if (this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\r\n        }\r\n        this._initRetinaScaling();\r\n        this._setImageSmoothing();\r\n        this.calcOffset();\r\n\r\n        if (!options.cssOnly) {\r\n          this.requestRenderAll();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {Number} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setBackstoreDimension: function (prop, value) {\r\n        this.lowerCanvasEl[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl[prop] = value;\r\n        }\r\n\r\n        if (this.cacheCanvasEl) {\r\n          this.cacheCanvasEl[prop] = value;\r\n        }\r\n\r\n        this[prop] = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting css width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {String} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setCssDimension: function (prop, value) {\r\n        this.lowerCanvasEl.style[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl.style[prop] = value;\r\n        }\r\n\r\n        if (this.wrapperEl) {\r\n          this.wrapperEl.style[prop] = value;\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas zoom level\r\n       * @return {Number}\r\n       */\r\n      getZoom: function () {\r\n        return this.viewportTransform[0];\r\n      },\r\n\r\n      /**\r\n       * Sets viewport transform of this canvas instance\r\n       * @param {Array} vpt the transform in the form of context.transform\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setViewportTransform: function (vpt) {\r\n        var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\r\n        this.viewportTransform = vpt;\r\n        for (i = 0, len = this._objects.length; i < len; i++) {\r\n          object = this._objects[i];\r\n          object.group || object.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          activeObject.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        this.calcViewportBoundaries();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance, zoom centered around point\r\n       * @param {fabric.Point} point to zoom with respect to\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      zoomToPoint: function (point, value) {\r\n        // TODO: just change the scale, preserve other transformations\r\n        var before = point, vpt = this.viewportTransform.slice(0);\r\n        point = transformPoint(point, invertTransform(this.viewportTransform));\r\n        vpt[0] = value;\r\n        vpt[3] = value;\r\n        var after = transformPoint(point, vpt);\r\n        vpt[4] += before.x - after.x;\r\n        vpt[5] += before.y - after.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setZoom: function (value) {\r\n        this.zoomToPoint(new fabric.Point(0, 0), value);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Pan viewport so as to place point at top left corner of canvas\r\n       * @param {fabric.Point} point to move to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      absolutePan: function (point) {\r\n        var vpt = this.viewportTransform.slice(0);\r\n        vpt[4] = -point.x;\r\n        vpt[5] = -point.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Pans viewpoint relatively\r\n       * @param {fabric.Point} point (position vector) to move by\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      relativePan: function (point) {\r\n        return this.absolutePan(new fabric.Point(\r\n          -point.x - this.viewportTransform[4],\r\n          -point.y - this.viewportTransform[5]\r\n        ));\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element corresponding to this instance\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getElement: function () {\r\n        return this.lowerCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was added\r\n       */\r\n      _onObjectAdded: function(obj) {\r\n        this.stateful && obj.setupState();\r\n        obj._set('canvas', this);\r\n        obj.setCoords();\r\n        this.fire('object:added', { target: obj });\r\n        obj.fire('added');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        this.fire('object:removed', { target: obj });\r\n        obj.fire('removed');\r\n        delete obj.canvas;\r\n      },\r\n\r\n      /**\r\n       * Clears specified context of canvas element\r\n       * @param {CanvasRenderingContext2D} ctx Context to clear\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clearContext: function(ctx) {\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where objects are drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getContext: function () {\r\n        return this.contextContainer;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        this._objects.length = 0;\r\n        this.backgroundImage = null;\r\n        this.overlayImage = null;\r\n        this.backgroundColor = '';\r\n        this.overlayColor = '';\r\n        if (this._hasITextHandlers) {\r\n          this.off('mouse:up', this._mouseUpITextHandler);\r\n          this._iTextInstances = null;\r\n          this._hasITextHandlers = false;\r\n        }\r\n        this.clearContext(this.contextContainer);\r\n        this.fire('canvas:cleared');\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Renders the canvas\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._objects);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Function created to be instance bound at initialization\r\n       * used in requestAnimationFrame rendering\r\n       * Let the fabricJS call it. If you call it manually you could have more\r\n       * animationFrame stacking on to of each other\r\n       * for an imperative rendering, use canvas.renderAll\r\n       * @private\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAndReset: function() {\r\n        this.isRendering = 0;\r\n        this.renderAll();\r\n      },\r\n\r\n      /**\r\n       * Append a renderAll request to next animation frame.\r\n       * unless one is already in progress, in that case nothing is done\r\n       * a boolean flag will avoid appending more.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      requestRenderAll: function () {\r\n        if (!this.isRendering) {\r\n          this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Calculate the position of the 4 corner of canvas with current viewportTransform.\r\n       * helps to determinate when an object is in the current rendering viewport using\r\n       * object absolute coordinates ( aCoords )\r\n       * @return {Object} points.tl\r\n       * @chainable\r\n       */\r\n      calcViewportBoundaries: function() {\r\n        var points = { }, width = this.width, height = this.height,\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\r\n        points.br = transformPoint({ x: width, y: height }, iVpt);\r\n        points.tr = new fabric.Point(points.br.x, points.tl.y);\r\n        points.bl = new fabric.Point(points.tl.x, points.br.y);\r\n        this.vptCoords = points;\r\n        return points;\r\n      },\r\n\r\n      cancelRequestedRender: function() {\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders background, objects, overlay and controls.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {Array} objects to render\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderCanvas: function(ctx, objects) {\r\n        var v = this.viewportTransform, path = this.clipPath;\r\n        this.cancelRequestedRender();\r\n        this.calcViewportBoundaries();\r\n        this.clearContext(ctx);\r\n        this.fire('before:render', { ctx: ctx, });\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, ctx);\r\n        }\r\n        this._renderBackground(ctx);\r\n\r\n        ctx.save();\r\n        //apply viewport transform once for all rendering process\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        this._renderObjects(ctx, objects);\r\n        ctx.restore();\r\n        if (!this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        if (this.clipTo) {\r\n          ctx.restore();\r\n        }\r\n        if (path) {\r\n          path.canvas = this;\r\n          // needed to setup a couple of variables\r\n          path.shouldCache();\r\n          path._transformDone = true;\r\n          path.renderCache({ forClipping: true });\r\n          this.drawClipPathOnCanvas(ctx);\r\n        }\r\n        this._renderOverlay(ctx);\r\n        if (this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        this.fire('after:render', { ctx: ctx, });\r\n      },\r\n\r\n      /**\r\n       * Paint the cached clipPath on the lowerCanvasEl\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawClipPathOnCanvas: function(ctx) {\r\n        var v = this.viewportTransform, path = this.clipPath;\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        // DEBUG: uncomment this line, comment the following\r\n        // ctx.globalAlpha = 0.4;\r\n        ctx.globalCompositeOperation = 'destination-in';\r\n        path.transform(ctx);\r\n        ctx.scale(1 / path.zoomX, 1 / path.zoomY);\r\n        ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Array} objects to render\r\n       */\r\n      _renderObjects: function(ctx, objects) {\r\n        var i, len;\r\n        for (i = 0, len = objects.length; i < len; ++i) {\r\n          objects[i] && objects[i].render(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {string} property 'background' or 'overlay'\r\n       */\r\n      _renderBackgroundOrOverlay: function(ctx, property) {\r\n        var fill = this[property + 'Color'], object = this[property + 'Image'],\r\n            v = this.viewportTransform, needsVpt = this[property + 'Vpt'];\r\n        if (!fill && !object) {\r\n          return;\r\n        }\r\n        if (fill) {\r\n          ctx.save();\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, 0);\r\n          ctx.lineTo(this.width, 0);\r\n          ctx.lineTo(this.width, this.height);\r\n          ctx.lineTo(0, this.height);\r\n          ctx.closePath();\r\n          ctx.fillStyle = fill.toLive\r\n            ? fill.toLive(ctx, this)\r\n            : fill;\r\n          if (needsVpt) {\r\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          }\r\n          ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\r\n          var m = fill.gradientTransform || fill.patternTransform;\r\n          m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n          ctx.fill();\r\n          ctx.restore();\r\n        }\r\n        if (object) {\r\n          ctx.save();\r\n          if (needsVpt) {\r\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          }\r\n          object.render(ctx);\r\n          ctx.restore();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'background');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderOverlay: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'overlay');\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a center of canvas.\r\n       * Returned value is an object with top and left properties\r\n       * @return {Object} object with \"top\" and \"left\" number values\r\n       */\r\n      getCenter: function () {\r\n        return {\r\n          top: this.height / 2,\r\n          left: this.width / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       */\r\n      centerObjectH: function (object) {\r\n        return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically in the canvas\r\n       * @param {fabric.Object} object Object to center vertically\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObjectV: function (object) {\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObject: function(object) {\r\n        var center = this.getCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(center.left, center.top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the viewport\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObject: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, vpCenter);\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectH: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n        this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object Vertically in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectV: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\r\n      },\r\n\r\n      /**\r\n       * Calculate the point in canvas that correspond to the center of actual viewport.\r\n       * @return {fabric.Point} vpCenter, viewport center\r\n       * @chainable\r\n       */\r\n      getVpCenter: function() {\r\n        var center = this.getCenter(),\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        return transformPoint({ x: center.left, y: center.top }, iVpt);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} object Object to center\r\n       * @param {fabric.Point} center Center point\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      _centerObject: function(object, center) {\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        object.setCoords();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returs dataless JSON representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {String} json string\r\n       */\r\n      toDatalessJSON: function (propertiesToInclude) {\r\n        return this.toDatalessObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toDatalessObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjectMethod: function (methodName, propertiesToInclude) {\r\n\r\n        var clipPath = this.clipPath, data = {\r\n          version: fabric.version,\r\n          objects: this._toObjects(methodName, propertiesToInclude),\r\n        };\r\n        if (clipPath) {\r\n          data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\r\n        }\r\n        extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\r\n\r\n        fabric.util.populateWithProperties(this, data, propertiesToInclude);\r\n\r\n        return data;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjects: function(methodName, propertiesToInclude) {\r\n        return this._objects.filter(function(object) {\r\n          return !object.excludeFromExport;\r\n        }).map(function(instance) {\r\n          return this._toObject(instance, methodName, propertiesToInclude);\r\n        }, this);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        var originalValue;\r\n\r\n        if (!this.includeDefaultValues) {\r\n          originalValue = instance.includeDefaultValues;\r\n          instance.includeDefaultValues = false;\r\n        }\r\n\r\n        var object = instance[methodName](propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          instance.includeDefaultValues = originalValue;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __serializeBgOverlay: function(methodName, propertiesToInclude) {\r\n        var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\r\n\r\n        if (this.backgroundColor) {\r\n          data.background = this.backgroundColor.toObject\r\n            ? this.backgroundColor.toObject(propertiesToInclude)\r\n            : this.backgroundColor;\r\n        }\r\n\r\n        if (this.overlayColor) {\r\n          data.overlay = this.overlayColor.toObject\r\n            ? this.overlayColor.toObject(propertiesToInclude)\r\n            : this.overlayColor;\r\n        }\r\n        if (bgImage && !bgImage.excludeFromExport) {\r\n          data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\r\n        }\r\n        if (overlay && !overlay.excludeFromExport) {\r\n          data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\r\n        }\r\n\r\n        return data;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\r\n       * a zoomed canvas will then produce zoomed SVG output.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      svgViewportTransformation: true,\r\n\r\n      /**\r\n       * Returns SVG representation of canvas\r\n       * @function\r\n       * @param {Object} [options] Options object for SVG output\r\n       * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\r\n       * @param {Object} [options.viewBox] SVG viewbox object\r\n       * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\r\n       * @param {Number} [options.viewBox.y] y-coordinate of viewbox\r\n       * @param {Number} [options.viewBox.width] Width of viewbox\r\n       * @param {Number} [options.viewBox.height] Height of viewbox\r\n       * @param {String} [options.encoding=UTF-8] Encoding of SVG output\r\n       * @param {String} [options.width] desired width of svg with or without units\r\n       * @param {String} [options.height] desired height of svg with or without units\r\n       * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\r\n       * @return {String} SVG string\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n       * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\r\n       * @example <caption>Normal SVG output</caption>\r\n       * var svg = canvas.toSVG();\r\n       * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\r\n       * var svg = canvas.toSVG({suppressPreamble: true});\r\n       * @example <caption>SVG output with viewBox attribute</caption>\r\n       * var svg = canvas.toSVG({\r\n       *   viewBox: {\r\n       *     x: 100,\r\n       *     y: 100,\r\n       *     width: 200,\r\n       *     height: 300\r\n       *   }\r\n       * });\r\n       * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\r\n       * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\r\n       * @example <caption>Modify SVG output with reviver function</caption>\r\n       * var svg = canvas.toSVG(null, function(svg) {\r\n       *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\r\n       * });\r\n       */\r\n      toSVG: function(options, reviver) {\r\n        options || (options = { });\r\n        options.reviver = reviver;\r\n        var markup = [];\r\n\r\n        this._setSVGPreamble(markup, options);\r\n        this._setSVGHeader(markup, options);\r\n        if (this.clipPath) {\r\n          markup.push('<g clip-path=\"url(#' + this.clipPath.clipPathId + ')\" >\\n');\r\n        }\r\n        this._setSVGBgOverlayColor(markup, 'background');\r\n        this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\r\n        this._setSVGObjects(markup, reviver);\r\n        if (this.clipPath) {\r\n          markup.push('</g>\\n');\r\n        }\r\n        this._setSVGBgOverlayColor(markup, 'overlay');\r\n        this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\r\n\r\n        markup.push('</svg>');\r\n\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGPreamble: function(markup, options) {\r\n        if (options.suppressPreamble) {\r\n          return;\r\n        }\r\n        markup.push(\r\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\r\n          '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\r\n          '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGHeader: function(markup, options) {\r\n        var width = options.width || this.width,\r\n            height = options.height || this.height,\r\n            vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        if (options.viewBox) {\r\n          viewBox = 'viewBox=\"' +\r\n                  options.viewBox.x + ' ' +\r\n                  options.viewBox.y + ' ' +\r\n                  options.viewBox.width + ' ' +\r\n                  options.viewBox.height + '\" ';\r\n        }\r\n        else {\r\n          if (this.svgViewportTransformation) {\r\n            vpt = this.viewportTransform;\r\n            viewBox = 'viewBox=\"' +\r\n                    toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\r\n          }\r\n        }\r\n\r\n        markup.push(\r\n          '<svg ',\r\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\r\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\r\n          'version=\"1.1\" ',\r\n          'width=\"', width, '\" ',\r\n          'height=\"', height, '\" ',\r\n          viewBox,\r\n          'xml:space=\"preserve\">\\n',\r\n          '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\r\n          '<defs>\\n',\r\n          this.createSVGFontFacesMarkup(),\r\n          this.createSVGRefElementsMarkup(),\r\n          this.createSVGClipPathMarkup(options),\r\n          '</defs>\\n'\r\n        );\r\n      },\r\n\r\n      createSVGClipPathMarkup: function(options) {\r\n        var clipPath = this.clipPath;\r\n        if (clipPath) {\r\n          clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\r\n          return  '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\r\n            this.clipPath.toClipPathSVG(options.reviver) +\r\n            '</clipPath>\\n';\r\n        }\r\n        return '';\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG referenced elements like patterns, gradients etc.\r\n       * @return {String}\r\n       */\r\n      createSVGRefElementsMarkup: function() {\r\n        var _this = this,\r\n            markup = ['background', 'overlay'].map(function(prop) {\r\n              var fill = _this[prop + 'Color'];\r\n              if (fill && fill.toLive) {\r\n                var shouldTransform = _this[prop + 'Vpt'], vpt = _this.viewportTransform,\r\n                    object = {\r\n                      width: _this.width / (shouldTransform ? vpt[0] : 1),\r\n                      height: _this.height / (shouldTransform ? vpt[3] : 1)\r\n                    };\r\n                return fill.toSVG(\r\n                  object,\r\n                  { additionalTransform: shouldTransform ? fabric.util.matrixToSVG(vpt) : '' }\r\n                );\r\n              }\r\n            });\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG font faces,\r\n       * font URLs for font faces must be collected by developers\r\n       * and are not extracted from the DOM by fabricjs\r\n       * @param {Array} objects Array of fabric objects\r\n       * @return {String}\r\n       */\r\n      createSVGFontFacesMarkup: function() {\r\n        var markup = '', fontList = { }, obj, fontFamily,\r\n            style, row, rowIndex, _char, charIndex, i, len,\r\n            fontPaths = fabric.fontPaths, objects = this._objects;\r\n\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          obj = objects[i];\r\n          fontFamily = obj.fontFamily;\r\n          if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\r\n            continue;\r\n          }\r\n          fontList[fontFamily] = true;\r\n          if (!obj.styles) {\r\n            continue;\r\n          }\r\n          style = obj.styles;\r\n          for (rowIndex in style) {\r\n            row = style[rowIndex];\r\n            for (charIndex in row) {\r\n              _char = row[charIndex];\r\n              fontFamily = _char.fontFamily;\r\n              if (!fontList[fontFamily] && fontPaths[fontFamily]) {\r\n                fontList[fontFamily] = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var j in fontList) {\r\n          markup += [\r\n            '\\t\\t@font-face {\\n',\r\n            '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\r\n            '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\r\n            '\\t\\t}\\n'\r\n          ].join('');\r\n        }\r\n\r\n        if (markup) {\r\n          markup = [\r\n            '\\t<style type=\"text/css\">',\r\n            '<![CDATA[\\n',\r\n            markup,\r\n            ']]>',\r\n            '</style>\\n'\r\n          ].join('');\r\n        }\r\n\r\n        return markup;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObjects: function(markup, reviver) {\r\n        var instance, i, len, objects = this._objects;\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          instance = objects[i];\r\n          if (instance.excludeFromExport) {\r\n            continue;\r\n          }\r\n          this._setSVGObject(markup, instance, reviver);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        markup.push(instance.toSVG(reviver));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayImage: function(markup, property, reviver) {\r\n        if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\r\n          markup.push(this[property].toSVG(reviver));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayColor: function(markup, property) {\r\n        var filler = this[property + 'Color'], vpt = this.viewportTransform, finalWidth = this.width,\r\n            finalHeight = this.height;\r\n        if (!filler) {\r\n          return;\r\n        }\r\n        if (filler.toLive) {\r\n          var repeat = filler.repeat, iVpt = fabric.util.invertTransform(vpt), shouldInvert = this[property + 'Vpt'],\r\n              additionalTransform = shouldInvert ? fabric.util.matrixToSVG(iVpt) : '';\r\n          markup.push(\r\n            '<rect transform=\"' + additionalTransform + ' translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\r\n            ' x=\"', filler.offsetX - finalWidth / 2,\r\n            '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\r\n            'width=\"',\r\n            (repeat === 'repeat-y' || repeat === 'no-repeat'\r\n              ? filler.source.width\r\n              : finalWidth ),\r\n            '\" height=\"',\r\n            (repeat === 'repeat-x' || repeat === 'no-repeat'\r\n              ? filler.source.height\r\n              : finalHeight),\r\n            '\" fill=\"url(#SVGID_' + filler.id + ')\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n        else {\r\n          markup.push(\r\n            '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\r\n            'fill=\"', filler, '\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the bottom of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send to back\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendToBack: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.unshift(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.unshift(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the top of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringToFront: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.push(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.push(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection down in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in behind\r\n       * the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendBackwards: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx > 0 + objsMoved) {\r\n              newIdx = idx - 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== 0) {\r\n            // if object is not on the bottom of stack\r\n            newIdx = this._findNewLowerIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewLowerIndex: function(object, idx, intersecting) {\r\n        var newIdx, i;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse down the stack looking for the nearest intersecting object\r\n          for (i = idx - 1; i >= 0; --i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx - 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection up in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in front\r\n       * of the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringForward: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx < this._objects.length - 1 - objsMoved) {\r\n              newIdx = idx + 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== this._objects.length - 1) {\r\n            // if object is not on top of stack (last item in an array)\r\n            newIdx = this._findNewUpperIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewUpperIndex: function(object, idx, intersecting) {\r\n        var newIdx, i, len;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse up the stack looking for the nearest intersecting object\r\n          for (i = idx + 1, len = this._objects.length; i < len; ++i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx + 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object to specified level in stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Number} index Position to move to\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      moveTo: function (object, index) {\r\n        removeFromArray(this._objects, object);\r\n        this._objects.splice(index, 0, object);\r\n        return this.renderOnAddRemove && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and dispose objects\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        // cancel eventually ongoing renders\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n        this.forEachObject(function(object) {\r\n          object.dispose && object.dispose();\r\n        });\r\n        this._objects = [];\r\n        if (this.backgroundImage && this.backgroundImage.dispose) {\r\n          this.backgroundImage.dispose();\r\n        }\r\n        this.backgroundImage = null;\r\n        if (this.overlayImage && this.overlayImage.dispose) {\r\n          this.overlayImage.dispose();\r\n        }\r\n        this.overlayImage = null;\r\n        this._iTextInstances = null;\r\n        this.contextContainer = null;\r\n        fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\r\n        this.lowerCanvasEl = undefined;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function () {\r\n        return '#<fabric.Canvas (' + this.complexity() + '): ' +\r\n                 '{ objects: ' + this._objects.length + ' }>';\r\n      }\r\n    });\r\n\r\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\r\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\r\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\r\n\r\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\r\n\r\n      /**\r\n       * @static\r\n       * @type String\r\n       * @default\r\n       */\r\n      EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\r\n\r\n      /**\r\n       * Provides a way to check support of some of the canvas methods\r\n       * (either those of HTMLCanvasElement itself, or rendering context)\r\n       *\r\n       * @param {String} methodName Method to check support for;\r\n       *                            Could be one of \"setLineDash\"\r\n       * @return {Boolean | null} `true` if method is supported (or at least exists),\r\n       *                          `null` if canvas element or context can not be initialized\r\n       */\r\n      supports: function (methodName) {\r\n        var el = createCanvasElement();\r\n\r\n        if (!el || !el.getContext) {\r\n          return null;\r\n        }\r\n\r\n        var ctx = el.getContext('2d');\r\n        if (!ctx) {\r\n          return null;\r\n        }\r\n\r\n        switch (methodName) {\r\n\r\n          case 'setLineDash':\r\n            return typeof ctx.setLineDash !== 'undefined';\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns JSON representation of canvas\r\n     * @function\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {String} JSON string\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\r\n     * @example <caption>JSON without additional properties</caption>\r\n     * var json = canvas.toJSON();\r\n     * @example <caption>JSON with additional properties included</caption>\r\n     * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\r\n     * @example <caption>JSON without default values</caption>\r\n     * canvas.includeDefaultValues = false;\r\n     * var json = canvas.toJSON();\r\n     */\r\n    fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\r\n\r\n    if (fabric.isLikelyNode) {\r\n      fabric.StaticCanvas.prototype.createPNGStream = function() {\r\n        var impl = getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createPNGStream();\r\n      };\r\n      fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\r\n        var impl = getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createJPEGStream(opts);\r\n      };\r\n    }\r\n  })();\r\n\r\n\r\n  /**\r\n   * BaseBrush class\r\n   * @class fabric.BaseBrush\r\n   * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\r\n   */\r\n  fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\r\n\r\n    /**\r\n     * Color of a brush\r\n     * @type String\r\n     * @default\r\n     */\r\n    color: 'rgb(0, 0, 0)',\r\n\r\n    /**\r\n     * Width of a brush, has to be a Number, no string literals\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 1,\r\n\r\n    /**\r\n     * Shadow object representing shadow of this shape.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\r\n     * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */\r\n    shadow: null,\r\n\r\n    /**\r\n     * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineCap: 'round',\r\n\r\n    /**\r\n     * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineJoin: 'round',\r\n\r\n    /**\r\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeMiterLimit:         10,\r\n\r\n    /**\r\n     * Stroke Dash Array.\r\n     * @type Array\r\n     * @default\r\n     */\r\n    strokeDashArray: null,\r\n\r\n    /**\r\n     * Sets shadow of an object\r\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setShadow: function(options) {\r\n      this.shadow = new fabric.Shadow(options);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     * @private\r\n     */\r\n    _setBrushStyles: function() {\r\n      var ctx = this.canvas.contextTop;\r\n      ctx.strokeStyle = this.color;\r\n      ctx.lineWidth = this.width;\r\n      ctx.lineCap = this.strokeLineCap;\r\n      ctx.miterLimit = this.strokeMiterLimit;\r\n      ctx.lineJoin = this.strokeLineJoin;\r\n      if (fabric.StaticCanvas.supports('setLineDash')) {\r\n        ctx.setLineDash(this.strokeDashArray || []);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the transformation on given context\r\n     * @param {RenderingContext2d} ctx context to render on\r\n     * @private\r\n     */\r\n    _saveAndTransform: function(ctx) {\r\n      var v = this.canvas.viewportTransform;\r\n      ctx.save();\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n    },\r\n\r\n    /**\r\n     * Sets brush shadow styles\r\n     * @private\r\n     */\r\n    _setShadow: function() {\r\n      if (!this.shadow) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.canvas,\r\n          shadow = this.shadow,\r\n          ctx = canvas.contextTop,\r\n          zoom = canvas.getZoom();\r\n      if (canvas && canvas._isRetinaScaling()) {\r\n        zoom *= fabric.devicePixelRatio;\r\n      }\r\n\r\n      ctx.shadowColor = shadow.color;\r\n      ctx.shadowBlur = shadow.blur * zoom;\r\n      ctx.shadowOffsetX = shadow.offsetX * zoom;\r\n      ctx.shadowOffsetY = shadow.offsetY * zoom;\r\n    },\r\n\r\n    needsFullRender: function() {\r\n      var color = new fabric.Color(this.color);\r\n      return color.getAlpha() < 1 || !!this.shadow;\r\n    },\r\n\r\n    /**\r\n     * Removes brush shadow styles\r\n     * @private\r\n     */\r\n    _resetShadow: function() {\r\n      var ctx = this.canvas.contextTop;\r\n\r\n      ctx.shadowColor = '';\r\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n    /**\r\n     * PencilBrush class\r\n     * @class fabric.PencilBrush\r\n     * @extends fabric.BaseBrush\r\n     */\r\n    fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\r\n\r\n      /**\r\n       * Discard points that are less than `decimate` pixel distant from each other\r\n       * @type Number\r\n       * @default 0.4\r\n       */\r\n      decimate: 0.4,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {fabric.Canvas} canvas\r\n       * @return {fabric.PencilBrush} Instance of a pencil brush\r\n       */\r\n      initialize: function(canvas) {\r\n        this.canvas = canvas;\r\n        this._points = [];\r\n      },\r\n\r\n      /**\r\n       * Invoked inside on mouse down and mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      _drawSegment: function (ctx, p1, p2) {\r\n        var midPoint = p1.midPointFrom(p2);\r\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\r\n        return midPoint;\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse down\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseDown: function(pointer, options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return;\r\n        }\r\n        this._prepareForDrawing(pointer);\r\n        // capture coordinates immediately\r\n        // this allows to draw dots (when movement never occurs)\r\n        this._captureDrawingPath(pointer);\r\n        this._render();\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseMove: function(pointer, options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return;\r\n        }\r\n        if (this._captureDrawingPath(pointer) && this._points.length > 1) {\r\n          if (this.needsFullRender()) {\r\n            // redraw curve\r\n            // clear top canvas\r\n            this.canvas.clearContext(this.canvas.contextTop);\r\n            this._render();\r\n          }\r\n          else {\r\n            var points = this._points, length = points.length, ctx = this.canvas.contextTop;\r\n            // draw the curve update\r\n            this._saveAndTransform(ctx);\r\n            if (this.oldEnd) {\r\n              ctx.beginPath();\r\n              ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\r\n            }\r\n            this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invoked on mouse up\r\n       */\r\n      onMouseUp: function(options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return true;\r\n        }\r\n        this.oldEnd = undefined;\r\n        this._finalizeAndAddPath();\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _prepareForDrawing: function(pointer) {\r\n\r\n        var p = new fabric.Point(pointer.x, pointer.y);\r\n\r\n        this._reset();\r\n        this._addPoint(p);\r\n        this.canvas.contextTop.moveTo(p.x, p.y);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Point} point Point to be added to points array\r\n       */\r\n      _addPoint: function(point) {\r\n        if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\r\n          return false;\r\n        }\r\n        this._points.push(point);\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Clear points array and set contextTop canvas style.\r\n       * @private\r\n       */\r\n      _reset: function() {\r\n        this._points = [];\r\n        this._setBrushStyles();\r\n        this._setShadow();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _captureDrawingPath: function(pointer) {\r\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y);\r\n        return this._addPoint(pointerPoint);\r\n      },\r\n\r\n      /**\r\n       * Draw a smooth path on the topCanvas using quadraticCurveTo\r\n       * @private\r\n       */\r\n      _render: function() {\r\n        var ctx  = this.canvas.contextTop, i, len,\r\n            p1 = this._points[0],\r\n            p2 = this._points[1];\r\n\r\n        this._saveAndTransform(ctx);\r\n        ctx.beginPath();\r\n        //if we only have 2 points in the path and they are the same\r\n        //it means that the user only clicked the canvas without moving the mouse\r\n        //then we should be drawing a dot. A path isn't drawn between two identical dots\r\n        //that's why we set them apart a bit\r\n        if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\r\n          var width = this.width / 1000;\r\n          p1 = new fabric.Point(p1.x, p1.y);\r\n          p2 = new fabric.Point(p2.x, p2.y);\r\n          p1.x -= width;\r\n          p2.x += width;\r\n        }\r\n        ctx.moveTo(p1.x, p1.y);\r\n\r\n        for (i = 1, len = this._points.length; i < len; i++) {\r\n          // we pick the point between pi + 1 & pi + 2 as the\r\n          // end point and p1 as our control point.\r\n          this._drawSegment(ctx, p1, p2);\r\n          p1 = this._points[i];\r\n          p2 = this._points[i + 1];\r\n        }\r\n        // Draw last line as a straight line while\r\n        // we wait for the next point to be able to calculate\r\n        // the bezier control point\r\n        ctx.lineTo(p1.x, p1.y);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Converts points to SVG path\r\n       * @param {Array} points Array of points\r\n       * @return {String} SVG path\r\n       */\r\n      convertPointsToSVGPath: function(points) {\r\n        var path = [], i, width = this.width / 1000,\r\n            p1 = new fabric.Point(points[0].x, points[0].y),\r\n            p2 = new fabric.Point(points[1].x, points[1].y),\r\n            len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\r\n\r\n        if (manyPoints) {\r\n          multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\r\n          multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\r\n        }\r\n        path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\r\n        for (i = 1; i < len; i++) {\r\n          if (!p1.eq(p2)) {\r\n            var midPoint = p1.midPointFrom(p2);\r\n            // p1 is our bezier control point\r\n            // midpoint is our endpoint\r\n            // start point is p(i-1) value.\r\n            path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\r\n          }\r\n          p1 = points[i];\r\n          if ((i + 1) < points.length) {\r\n            p2 = points[i + 1];\r\n          }\r\n        }\r\n        if (manyPoints) {\r\n          multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\r\n          multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\r\n        }\r\n        path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Creates fabric.Path object to add on canvas\r\n       * @param {String} pathData Path data\r\n       * @return {fabric.Path} Path to add on canvas\r\n       */\r\n      createPath: function(pathData) {\r\n        var path = new fabric.Path(pathData, {\r\n          fill: null,\r\n          stroke: this.color,\r\n          strokeWidth: this.width,\r\n          strokeLineCap: this.strokeLineCap,\r\n          strokeMiterLimit: this.strokeMiterLimit,\r\n          strokeLineJoin: this.strokeLineJoin,\r\n          strokeDashArray: this.strokeDashArray,\r\n        });\r\n        if (this.shadow) {\r\n          this.shadow.affectStroke = true;\r\n          path.setShadow(this.shadow);\r\n        }\r\n\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Decimate poins array with the decimate value\r\n       */\r\n      decimatePoints: function(points, distance) {\r\n        if (points.length <= 2) {\r\n          return points;\r\n        }\r\n        var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2),\r\n            i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint],\r\n            cDistance;\r\n        for (i = 1; i < l; i++) {\r\n          cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\r\n          if (cDistance >= adjustedDistance) {\r\n            lastPoint = points[i];\r\n            newPoints.push(lastPoint);\r\n          }\r\n        }\r\n        if (newPoints.length === 1) {\r\n          newPoints.push(new fabric.Point(newPoints[0].x, newPoints[0].y));\r\n        }\r\n        return newPoints;\r\n      },\r\n\r\n      /**\r\n       * On mouseup after drawing the path on contextTop canvas\r\n       * we use the points captured to create an new fabric path object\r\n       * and add it to the fabric canvas.\r\n       */\r\n      _finalizeAndAddPath: function() {\r\n        var ctx = this.canvas.contextTop;\r\n        ctx.closePath();\r\n        if (this.decimate) {\r\n          this._points = this.decimatePoints(this._points, this.decimate);\r\n        }\r\n        var pathData = this.convertPointsToSVGPath(this._points).join('');\r\n        if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\r\n          // do not create 0 width/height paths, as they are\r\n          // rendered inconsistently across browsers\r\n          // Firefox 4, for example, renders a dot,\r\n          // whereas Chrome 10 renders nothing\r\n          this.canvas.requestRenderAll();\r\n          return;\r\n        }\r\n\r\n        var path = this.createPath(pathData);\r\n        this.canvas.clearContext(this.canvas.contextTop);\r\n        this.canvas.add(path);\r\n        this.canvas.requestRenderAll();\r\n        path.setCoords();\r\n        this._resetShadow();\r\n\r\n\r\n        // fire event 'path' created\r\n        this.canvas.fire('path:created', { path: path });\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  /**\r\n   * CircleBrush class\r\n   * @class fabric.CircleBrush\r\n   */\r\n  fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a brush\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 10,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.CircleBrush} Instance of a circle brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.points = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked inside on mouse down and mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    drawDot: function(pointer) {\r\n      var point = this.addPoint(pointer),\r\n          ctx = this.canvas.contextTop;\r\n      this._saveAndTransform(ctx);\r\n      this.dot(ctx, point);\r\n      ctx.restore();\r\n    },\r\n\r\n    dot: function(ctx, point) {\r\n      ctx.fillStyle = point.fill;\r\n      ctx.beginPath();\r\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.points.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n      this.drawDot(pointer);\r\n    },\r\n\r\n    /**\r\n     * Render the full state of the brush\r\n     * @private\r\n     */\r\n    _render: function() {\r\n      var ctx  = this.canvas.contextTop, i, len,\r\n          points = this.points;\r\n      this._saveAndTransform(ctx);\r\n      for (i = 0, len = points.length; i < len; i++) {\r\n        this.dot(ctx, points[i]);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      if (this.needsFullRender()) {\r\n        this.canvas.clearContext(this.canvas.contextTop);\r\n        this.addPoint(pointer);\r\n        this._render();\r\n      }\r\n      else {\r\n        this.drawDot(pointer);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var circles = [];\r\n\r\n      for (i = 0, len = this.points.length; i < len; i++) {\r\n        var point = this.points[i],\r\n            circle = new fabric.Circle({\r\n              radius: point.radius,\r\n              left: point.x,\r\n              top: point.y,\r\n              originX: 'center',\r\n              originY: 'center',\r\n              fill: point.fill\r\n            });\r\n\r\n        this.shadow && circle.setShadow(this.shadow);\r\n\r\n        circles.push(circle);\r\n      }\r\n      var group = new fabric.Group(circles);\r\n      group.canvas = this.canvas;\r\n\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     * @return {fabric.Point} Just added pointer point\r\n     */\r\n    addPoint: function(pointer) {\r\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y),\r\n\r\n          circleRadius = fabric.util.getRandomInt(\r\n            Math.max(0, this.width - 20), this.width + 20) / 2,\r\n\r\n          circleColor = new fabric.Color(this.color)\r\n            .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\r\n            .toRgba();\r\n\r\n      pointerPoint.radius = circleRadius;\r\n      pointerPoint.fill = circleColor;\r\n\r\n      this.points.push(pointerPoint);\r\n\r\n      return pointerPoint;\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * SprayBrush class\r\n   * @class fabric.SprayBrush\r\n   */\r\n  fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a spray\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width:              10,\r\n\r\n    /**\r\n     * Density of a spray (number of dots per chunk)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    density:            20,\r\n\r\n    /**\r\n     * Width of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidth:           1,\r\n\r\n    /**\r\n     * Width variance of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidthVariance:   1,\r\n\r\n    /**\r\n     * Whether opacity of a dot should be random\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    randomOpacity:        false,\r\n\r\n    /**\r\n     * Whether overlapping dots (rectangles) should be removed (for performance reasons)\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    optimizeOverlapping:  true,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.SprayBrush} Instance of a spray brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.sprayChunks = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.sprayChunks.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var rects = [];\r\n\r\n      for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        var sprayChunk = this.sprayChunks[i];\r\n\r\n        for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\r\n\r\n          var rect = new fabric.Rect({\r\n            width: sprayChunk[j].width,\r\n            height: sprayChunk[j].width,\r\n            left: sprayChunk[j].x + 1,\r\n            top: sprayChunk[j].y + 1,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            fill: this.color\r\n          });\r\n          rects.push(rect);\r\n        }\r\n      }\r\n\r\n      if (this.optimizeOverlapping) {\r\n        rects = this._getOptimizedRects(rects);\r\n      }\r\n\r\n      var group = new fabric.Group(rects);\r\n      this.shadow && group.setShadow(this.shadow);\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} rects\r\n     */\r\n    _getOptimizedRects: function(rects) {\r\n\r\n      // avoid creating duplicate rects at the same coordinates\r\n      var uniqueRects = { }, key, i, len;\r\n\r\n      for (i = 0, len = rects.length; i < len; i++) {\r\n        key = rects[i].left + '' + rects[i].top;\r\n        if (!uniqueRects[key]) {\r\n          uniqueRects[key] = rects[i];\r\n        }\r\n      }\r\n      var uniqueRectsArray = [];\r\n      for (key in uniqueRects) {\r\n        uniqueRectsArray.push(uniqueRects[key]);\r\n      }\r\n\r\n      return uniqueRectsArray;\r\n    },\r\n\r\n    /**\r\n     * Render new chunk of spray brush\r\n     */\r\n    render: function(sprayChunk) {\r\n      var ctx = this.canvas.contextTop, i, len;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, len = sprayChunk.length; i < len; i++) {\r\n        var point = sprayChunk[i];\r\n        if (typeof point.opacity !== 'undefined') {\r\n          ctx.globalAlpha = point.opacity;\r\n        }\r\n        ctx.fillRect(point.x, point.y, point.width, point.width);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Render all spray chunks\r\n     */\r\n    _render: function() {\r\n      var ctx = this.canvas.contextTop, i, ilen;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        this.render(this.sprayChunks[i]);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     */\r\n    addSprayChunk: function(pointer) {\r\n      this.sprayChunkPoints = [];\r\n\r\n      var x, y, width, radius = this.width / 2, i;\r\n\r\n      for (i = 0; i < this.density; i++) {\r\n\r\n        x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\r\n        y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\r\n\r\n        if (this.dotWidthVariance) {\r\n          width = fabric.util.getRandomInt(\r\n            // bottom clamp width to 1\r\n            Math.max(1, this.dotWidth - this.dotWidthVariance),\r\n            this.dotWidth + this.dotWidthVariance);\r\n        }\r\n        else {\r\n          width = this.dotWidth;\r\n        }\r\n\r\n        var point = new fabric.Point(x, y);\r\n        point.width = width;\r\n\r\n        if (this.randomOpacity) {\r\n          point.opacity = fabric.util.getRandomInt(0, 100) / 100;\r\n        }\r\n\r\n        this.sprayChunkPoints.push(point);\r\n      }\r\n\r\n      this.sprayChunks.push(this.sprayChunkPoints);\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * PatternBrush class\r\n   * @class fabric.PatternBrush\r\n   * @extends fabric.BaseBrush\r\n   */\r\n  fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\r\n\r\n    getPatternSrc: function() {\r\n\r\n      var dotWidth = 20,\r\n          dotDistance = 5,\r\n          patternCanvas = fabric.util.createCanvasElement(),\r\n          patternCtx = patternCanvas.getContext('2d');\r\n\r\n      patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\r\n\r\n      patternCtx.fillStyle = this.color;\r\n      patternCtx.beginPath();\r\n      patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\r\n      patternCtx.closePath();\r\n      patternCtx.fill();\r\n\r\n      return patternCanvas;\r\n    },\r\n\r\n    getPatternSrcFunction: function() {\r\n      return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\r\n    },\r\n\r\n    /**\r\n     * Creates \"pattern\" instance property\r\n     */\r\n    getPattern: function() {\r\n      return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     */\r\n    _setBrushStyles: function() {\r\n      this.callSuper('_setBrushStyles');\r\n      this.canvas.contextTop.strokeStyle = this.getPattern();\r\n    },\r\n\r\n    /**\r\n     * Creates path\r\n     */\r\n    createPath: function(pathData) {\r\n      var path = this.callSuper('createPath', pathData),\r\n          topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\r\n\r\n      path.stroke = new fabric.Pattern({\r\n        source: this.source || this.getPatternSrcFunction(),\r\n        offsetX: -topLeft.x,\r\n        offsetY: -topLeft.y\r\n      });\r\n      return path;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    var getPointer = fabric.util.getPointer,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        radiansToDegrees = fabric.util.radiansToDegrees,\r\n        atan2 = Math.atan2,\r\n        abs = Math.abs,\r\n        supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n\r\n        STROKE_OFFSET = 0.5;\r\n\r\n    /**\r\n     * Canvas class\r\n     * @class fabric.Canvas\r\n     * @extends fabric.StaticCanvas\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\r\n     * @see {@link fabric.Canvas#initialize} for constructor definition\r\n     *\r\n     * @fires object:modified at the end of a transform or any change when statefull is true\r\n     * @fires object:rotated at the end of a rotation transform\r\n     * @fires object:scaled at the end of a scale transform\r\n     * @fires object:moved at the end of translation transform\r\n     * @fires object:skewed at the end of a skew transform\r\n     * @fires object:rotating while an object is being rotated from the control\r\n     * @fires object:scaling while an object is being scaled by controls\r\n     * @fires object:moving while an object is being dragged\r\n     * @fires object:skewing while an object is being skewed from the controls\r\n     * @fires object:selected this event is deprecated. use selection:created\r\n     *\r\n     * @fires before:transform before a transform is is started\r\n     * @fires before:selection:cleared\r\n     * @fires selection:cleared\r\n     * @fires selection:updated\r\n     * @fires selection:created\r\n     *\r\n     * @fires path:created after a drawing operation ends and the path is added\r\n     * @fires mouse:down\r\n     * @fires mouse:move\r\n     * @fires mouse:up\r\n     * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\r\n     * @fires mouse:move:before on mouse move, before the inner fabric logic runs\r\n     * @fires mouse:up:before on mouse up, before the inner fabric logic runs\r\n     * @fires mouse:over\r\n     * @fires mouse:out\r\n     * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     * @fires after:render at the end of the render process, receives the context in the callback\r\n     * @fires before:render at start the render process, receives the context in the callback\r\n     *\r\n     */\r\n    fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n        this._initInteractive();\r\n        this._createCacheCanvas();\r\n      },\r\n\r\n      /**\r\n       * When true, objects can be transformed by one side (unproportionally)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      uniScaleTransform:      false,\r\n\r\n      /**\r\n       * Indicates which key enable unproportional scaling\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      uniScaleKey:           'shiftKey',\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of scale transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:        false,\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of rotate transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:       false,\r\n\r\n      /**\r\n       * Indicates which key enable centered Transform\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      centeredKey:           'altKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternate action on corner\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      altActionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates that canvas is interactive. This property should not be changed.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      interactive:            true,\r\n\r\n      /**\r\n       * Indicates whether group selection should be enabled\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selection:              true,\r\n\r\n      /**\r\n       * Indicates which key or keys enable multiple click selection\r\n       * Pass value as a string or array of strings\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or empty or containing any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.2\r\n       * @type String|Array\r\n       * @default\r\n       */\r\n      selectionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternative selection\r\n       * in case of target overlapping with active object\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * For a series of reason that come from the general expectations on how\r\n       * things should work, this feature works only for preserveObjectStacking true.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.5\r\n       * @type null|String\r\n       * @default\r\n       */\r\n      altSelectionKey:           null,\r\n\r\n      /**\r\n       * Color of selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\r\n\r\n      /**\r\n       * Default dash array pattern\r\n       * If not empty the selection border is dashed\r\n       * @type Array\r\n       */\r\n      selectionDashArray:     [],\r\n\r\n      /**\r\n       * Color of the border of selection (usually slightly darker than color of selection itself)\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\r\n\r\n      /**\r\n       * Width of a line used in object/group selection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionLineWidth:     1,\r\n\r\n      /**\r\n       * Select only shapes that are fully contained in the dragged selection rectangle.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectionFullyContained: false,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:            'move',\r\n\r\n      /**\r\n       * Default cursor value used when moving an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:             'move',\r\n\r\n      /**\r\n       * Default cursor value used for the entire canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      defaultCursor:          'default',\r\n\r\n      /**\r\n       * Cursor value used during free drawing\r\n       * @type String\r\n       * @default\r\n       */\r\n      freeDrawingCursor:      'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for rotation point\r\n       * @type String\r\n       * @default\r\n       */\r\n      rotationCursor:         'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for disabled elements ( corners with disabled action )\r\n       * @type String\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      notAllowedCursor:         'not-allowed',\r\n\r\n      /**\r\n       * Default element class that's given to wrapper (div) element of canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      containerClass:         'canvas-container',\r\n\r\n      /**\r\n       * When true, object detection happens on per-pixel basis rather than on per-bounding-box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:     false,\r\n\r\n      /**\r\n       * Number of pixels around target pixel to tolerate (consider active) during object detection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      targetFindTolerance:    0,\r\n\r\n      /**\r\n       * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipTargetFind:         false,\r\n\r\n      /**\r\n       * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\r\n       * After mousedown, mousemove creates a shape,\r\n       * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isDrawingMode:          false,\r\n\r\n      /**\r\n       * Indicates whether objects should remain in current stack position when selected.\r\n       * When false objects are brought to top and rendered as part of the selection group\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      preserveObjectStacking: false,\r\n\r\n      /**\r\n       * Indicates the angle that an object will lock to while rotating.\r\n       * @type Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapAngle: 0,\r\n\r\n      /**\r\n       * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\r\n       * When `null`, the snapThreshold will default to the snapAngle.\r\n       * @type null|Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapThreshold: null,\r\n\r\n      /**\r\n       * Indicates if the right click on canvas can output the context menu or not\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      stopContextMenu: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire right click events\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      fireRightClick: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire middle click events\r\n       * @type Boolean\r\n       * @since 1.7.8\r\n       * @default\r\n       */\r\n      fireMiddleClick: false,\r\n\r\n      /**\r\n       * Keep track of the subTargets for Mouse Events\r\n       * @type fabric.Object[]\r\n       */\r\n      targets: [],\r\n\r\n      /**\r\n       * Keep track of the hovered target\r\n       * @type fabric.Object\r\n       * @private\r\n       */\r\n      _hoveredTarget: null,\r\n\r\n      /**\r\n       * hold the list of nested targets hovered\r\n       * @type fabric.Object[]\r\n       * @private\r\n       */\r\n      _hoveredTargets: [],\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initInteractive: function() {\r\n        this._currentTransform = null;\r\n        this._groupSelector = null;\r\n        this._initWrapperElement();\r\n        this._createUpperCanvas();\r\n        this._initEventListeners();\r\n\r\n        this._initRetinaScaling();\r\n\r\n        this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\r\n\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Divides objects in two groups, one to render immediately\r\n       * and one to render as activeGroup.\r\n       * @return {Array} objects to render immediately and pushes the other in the activeGroup.\r\n       */\r\n      _chooseObjectsToRender: function() {\r\n        var activeObjects = this.getActiveObjects(),\r\n            object, objsToRender, activeGroupObjects;\r\n\r\n        if (activeObjects.length > 0 && !this.preserveObjectStacking) {\r\n          objsToRender = [];\r\n          activeGroupObjects = [];\r\n          for (var i = 0, length = this._objects.length; i < length; i++) {\r\n            object = this._objects[i];\r\n            if (activeObjects.indexOf(object) === -1 ) {\r\n              objsToRender.push(object);\r\n            }\r\n            else {\r\n              activeGroupObjects.push(object);\r\n            }\r\n          }\r\n          if (activeObjects.length > 1) {\r\n            this._activeObject._objects = activeGroupObjects;\r\n          }\r\n          objsToRender.push.apply(objsToRender, activeGroupObjects);\r\n        }\r\n        else {\r\n          objsToRender = this._objects;\r\n        }\r\n        return objsToRender;\r\n      },\r\n\r\n      /**\r\n       * Renders both the top canvas and the secondary container canvas.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\r\n          this.clearContext(this.contextTop);\r\n          this.contextTopDirty = false;\r\n        }\r\n        if (this.hasLostContext) {\r\n          this.renderTopLayer(this.contextTop);\r\n        }\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\r\n        return this;\r\n      },\r\n\r\n      renderTopLayer: function(ctx) {\r\n        ctx.save();\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._render();\r\n          this.contextTopDirty = true;\r\n        }\r\n        // we render the top context - last object\r\n        if (this.selection && this._groupSelector) {\r\n          this._drawSelection(ctx);\r\n          this.contextTopDirty = true;\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Method to render only the top canvas.\r\n       * Also used to render the group selection box.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      renderTop: function () {\r\n        var ctx = this.contextTop;\r\n        this.clearContext(ctx);\r\n        this.renderTopLayer(ctx);\r\n        this.fire('after:render');\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Resets the current transform to its original values and chooses the type of resizing based on the event\r\n       * @private\r\n       */\r\n      _resetCurrentTransform: function() {\r\n        var t = this._currentTransform;\r\n\r\n        t.target.set({\r\n          scaleX: t.original.scaleX,\r\n          scaleY: t.original.scaleY,\r\n          skewX: t.original.skewX,\r\n          skewY: t.original.skewY,\r\n          left: t.original.left,\r\n          top: t.original.top\r\n        });\r\n\r\n        if (this._shouldCenterTransform(t.target)) {\r\n          if (t.originX !== 'center') {\r\n            if (t.originX === 'right') {\r\n              t.mouseXSign = -1;\r\n            }\r\n            else {\r\n              t.mouseXSign = 1;\r\n            }\r\n          }\r\n          if (t.originY !== 'center') {\r\n            if (t.originY === 'bottom') {\r\n              t.mouseYSign = -1;\r\n            }\r\n            else {\r\n              t.mouseYSign = 1;\r\n            }\r\n          }\r\n\r\n          t.originX = 'center';\r\n          t.originY = 'center';\r\n        }\r\n        else {\r\n          t.originX = t.original.originX;\r\n          t.originY = t.original.originY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Checks if point is contained within an area of given object\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target Object to test against\r\n       * @param {Object} [point] x,y object of point coordinates we want to check.\r\n       * @return {Boolean} true if point is contained within an area of given object\r\n       */\r\n      containsPoint: function (e, target, point) {\r\n        var ignoreZoom = true,\r\n            pointer = point || this.getPointer(e, ignoreZoom),\r\n            xy;\r\n\r\n        if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\r\n          xy = this._normalizePointer(target.group, pointer);\r\n        }\r\n        else {\r\n          xy = { x: pointer.x, y: pointer.y };\r\n        }\r\n        // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\r\n        // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\r\n        return (target.containsPoint(xy) || target._findTargetCorner(pointer));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _normalizePointer: function (object, pointer) {\r\n        var m = object.calcTransformMatrix(),\r\n            invertedM = fabric.util.invertTransform(m),\r\n            vptPointer = this.restorePointerVpt(pointer);\r\n        return fabric.util.transformPoint(vptPointer, invertedM);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object is transparent at a certain location\r\n       * @param {fabric.Object} target Object to check\r\n       * @param {Number} x Left coordinate\r\n       * @param {Number} y Top coordinate\r\n       * @return {Boolean}\r\n       */\r\n      isTargetTransparent: function (target, x, y) {\r\n        // in case the target is the activeObject, we cannot execute this optimization\r\n        // because we need to draw controls too.\r\n        if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\r\n          var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\r\n              targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\r\n              targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\r\n\r\n          var isTransparent = fabric.util.isTransparent(\r\n            target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\r\n\r\n          return isTransparent;\r\n        }\r\n\r\n        var ctx = this.contextCache,\r\n            originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\r\n\r\n        target.selectionBackgroundColor = '';\r\n\r\n        this.clearContext(ctx);\r\n\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        target.render(ctx);\r\n        ctx.restore();\r\n\r\n        target === this._activeObject && target._renderControls(ctx, {\r\n          hasBorders: false,\r\n          transparentCorners: false\r\n        }, {\r\n          hasBorders: false,\r\n        });\r\n\r\n        target.selectionBackgroundColor = originalColor;\r\n\r\n        var isTransparent = fabric.util.isTransparent(\r\n          ctx, x, y, this.targetFindTolerance);\r\n\r\n        return isTransparent;\r\n      },\r\n\r\n      /**\r\n       * takes an event and determins if selection key has been pressed\r\n       * @private\r\n       * @param {Event} e Event object\r\n       */\r\n      _isSelectionKeyPressed: function(e) {\r\n        var selectionKeyPressed = false;\r\n\r\n        if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\r\n          selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\r\n        }\r\n        else {\r\n          selectionKeyPressed = e[this.selectionKey];\r\n        }\r\n\r\n        return selectionKeyPressed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldClearSelection: function (e, target) {\r\n        var activeObjects = this.getActiveObjects(),\r\n            activeObject = this._activeObject;\r\n\r\n        return (\r\n          !target\r\n          ||\r\n          (target &&\r\n            activeObject &&\r\n            activeObjects.length > 1 &&\r\n            activeObjects.indexOf(target) === -1 &&\r\n            activeObject !== target &&\r\n            !this._isSelectionKeyPressed(e))\r\n          ||\r\n          (target && !target.evented)\r\n          ||\r\n          (target &&\r\n            !target.selectable &&\r\n            activeObject &&\r\n            activeObject !== target)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * centeredScaling from object can't override centeredScaling from canvas.\r\n       * this should be fixed, since object setting should take precedence over canvas.\r\n       * @private\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldCenterTransform: function (target) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var t = this._currentTransform,\r\n            centerTransform;\r\n\r\n        if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\r\n          centerTransform = this.centeredScaling || target.centeredScaling;\r\n        }\r\n        else if (t.action === 'rotate') {\r\n          centerTransform = this.centeredRotation || target.centeredRotation;\r\n        }\r\n\r\n        return centerTransform ? !t.altKey : t.altKey;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getOriginFromCorner: function(target, corner) {\r\n        var origin = {\r\n          x: target.originX,\r\n          y: target.originY\r\n        };\r\n\r\n        if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\r\n          origin.x = 'right';\r\n        }\r\n        else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\r\n          origin.x = 'left';\r\n        }\r\n\r\n        if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\r\n          origin.y = 'bottom';\r\n        }\r\n        else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\r\n          origin.y = 'top';\r\n        }\r\n\r\n        return origin;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} alreadySelected true if target is already selected\r\n       * @param {String} corner a string representing the corner ml, mr, tl ...\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} [target] inserted back to help overriding. Unused\r\n       */\r\n      _getActionFromCorner: function(alreadySelected, corner, e /* target */) {\r\n        if (!corner || !alreadySelected) {\r\n          return 'drag';\r\n        }\r\n\r\n        switch (corner) {\r\n          case 'mtr':\r\n            return 'rotate';\r\n          case 'ml':\r\n          case 'mr':\r\n            return e[this.altActionKey] ? 'skewY' : 'scaleX';\r\n          case 'mt':\r\n          case 'mb':\r\n            return e[this.altActionKey] ? 'skewX' : 'scaleY';\r\n          default:\r\n            return 'scale';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _setupCurrentTransform: function (e, target, alreadySelected) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this.getPointer(e),\r\n            corner = target._findTargetCorner(this.getPointer(e, true)),\r\n            action = this._getActionFromCorner(alreadySelected, corner, e, target),\r\n            origin = this._getOriginFromCorner(target, corner);\r\n\r\n        this._currentTransform = {\r\n          target: target,\r\n          action: action,\r\n          corner: corner,\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          // used by transation\r\n          offsetX: pointer.x - target.left,\r\n          offsetY: pointer.y - target.top,\r\n          originX: origin.x,\r\n          originY: origin.y,\r\n          ex: pointer.x,\r\n          ey: pointer.y,\r\n          lastX: pointer.x,\r\n          lastY: pointer.y,\r\n          // unsure they are usefull anymore.\r\n          // left: target.left,\r\n          // top: target.top,\r\n          theta: degreesToRadians(target.angle),\r\n          // end of unsure\r\n          width: target.width * target.scaleX,\r\n          mouseXSign: 1,\r\n          mouseYSign: 1,\r\n          shiftKey: e.shiftKey,\r\n          altKey: e[this.centeredKey],\r\n          original: fabric.util.saveObjectTransform(target),\r\n        };\r\n\r\n        this._currentTransform.original.originX = origin.x;\r\n        this._currentTransform.original.originY = origin.y;\r\n\r\n        this._resetCurrentTransform();\r\n        this._beforeTransform(e);\r\n      },\r\n\r\n      /**\r\n       * Translates object by \"setting\" its left/top\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the translation occurred\r\n       */\r\n      _translateObject: function (x, y) {\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            newLeft = x - transform.offsetX,\r\n            newTop = y - transform.offsetY,\r\n            moveX = !target.get('lockMovementX') && target.left !== newLeft,\r\n            moveY = !target.get('lockMovementY') && target.top !== newTop;\r\n\r\n        moveX && target.set('left', newLeft);\r\n        moveY && target.set('top', newTop);\r\n        return moveX || moveY;\r\n      },\r\n\r\n      /**\r\n       * Check if we are increasing a positive skew or lower it,\r\n       * checking mouse direction and pressed corner.\r\n       * @private\r\n       */\r\n      _changeSkewTransformOrigin: function(mouseMove, t, by) {\r\n        var property = 'originX', origins = { 0: 'center' },\r\n            skew = t.target.skewX, originA = 'left', originB = 'right',\r\n            corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\r\n            flipSign = 1;\r\n\r\n        mouseMove = mouseMove > 0 ? 1 : -1;\r\n        if (by === 'y') {\r\n          skew = t.target.skewY;\r\n          originA = 'top';\r\n          originB = 'bottom';\r\n          property = 'originY';\r\n        }\r\n        origins[-1] = originA;\r\n        origins[1] = originB;\r\n\r\n        t.target.flipX && (flipSign *= -1);\r\n        t.target.flipY && (flipSign *= -1);\r\n\r\n        if (skew === 0) {\r\n          t.skewSign = -corner * mouseMove * flipSign;\r\n          t[property] = origins[-mouseMove];\r\n        }\r\n        else {\r\n          skew = skew > 0 ? 1 : -1;\r\n          t.skewSign = skew;\r\n          t[property] = origins[skew * corner * flipSign];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Skew object by mouse events\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y'\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _skewObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target, skewed = false,\r\n            lockSkewingX = target.get('lockSkewingX'),\r\n            lockSkewingY = target.get('lockSkewingY');\r\n\r\n        if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var center = target.getCenterPoint(),\r\n            actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\r\n            lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\r\n            actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\r\n\r\n        this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\r\n        actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\r\n        constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\r\n        // Actually skew the object\r\n        skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\r\n        t.lastX = x;\r\n        t.lastY = y;\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Set object skew\r\n       * @private\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _setObjectSkew: function(localMouse, transform, by, _dim) {\r\n        var target = transform.target, newValue, skewed = false,\r\n            skewSign = transform.skewSign, newDim, dimNoSkew,\r\n            otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\r\n\r\n        if (by === 'x') {\r\n          otherBy = 'y';\r\n          _otherBy = 'Y';\r\n          _by = 'X';\r\n          skewX = 0;\r\n          skewY = target.skewY;\r\n        }\r\n        else {\r\n          otherBy = 'x';\r\n          _otherBy = 'X';\r\n          _by = 'Y';\r\n          skewX = target.skewX;\r\n          skewY = 0;\r\n        }\r\n\r\n        dimNoSkew = target._getTransformedDimensions(skewX, skewY);\r\n        newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\r\n        if (newDimMouse <= 2) {\r\n          newValue = 0;\r\n        }\r\n        else {\r\n          newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\r\n                                          (dimNoSkew[otherBy] / target['scale' + _otherBy]));\r\n          newValue = fabric.util.radiansToDegrees(newValue);\r\n        }\r\n        skewed = target['skew' + _by] !== newValue;\r\n        target.set('skew' + _by, newValue);\r\n        if (target['skew' + _otherBy] !== 0) {\r\n          newDim = target._getTransformedDimensions();\r\n          newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\r\n          target.set('scale' + _otherBy, newValue);\r\n        }\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Scales object by invoking its scaleX/scaleY methods\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\r\n       *                    When not provided, an object is scaled by both dimensions equally\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target,\r\n            lockScalingX = target.lockScalingX,\r\n            lockScalingY = target.lockScalingY,\r\n            lockScalingFlip = target.lockScalingFlip;\r\n\r\n        if (lockScalingX && lockScalingY) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\r\n            localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\r\n            dim = target._getTransformedDimensions(), scaled = false;\r\n\r\n        this._setLocalMouse(localMouse, t);\r\n\r\n        // Actually scale the object\r\n        scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\r\n\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\r\n        var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\r\n            scaleX = localMouse.x * target.scaleX / _dim.x,\r\n            scaleY = localMouse.y * target.scaleY / _dim.y,\r\n            changeX = target.scaleX !== scaleX,\r\n            changeY = target.scaleY !== scaleY;\r\n\r\n        transform.newScaleX = scaleX;\r\n        transform.newScaleY = scaleY;\r\n        if (fabric.Textbox && by === 'x' && target instanceof fabric.Textbox) {\r\n          var w = target.width * (localMouse.x / _dim.x);\r\n          if (w >= target.getMinWidth()) {\r\n            scaled = w !== target.width;\r\n            target.set('width', w);\r\n            return scaled;\r\n          }\r\n          return false;\r\n        }\r\n\r\n        if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\r\n          forbidScalingX = true;\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\r\n          forbidScalingY = true;\r\n          localMouse.y = 0;\r\n        }\r\n\r\n        if (by === 'equally' && !lockScalingX && !lockScalingY) {\r\n          scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\r\n        }\r\n        else if (!by) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\r\n        }\r\n        else if (by === 'x' && !target.get('lockUniScaling')) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = changeX));\r\n        }\r\n        else if (by === 'y' && !target.get('lockUniScaling')) {\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = changeY));\r\n        }\r\n        forbidScalingX || forbidScalingY || this._flipObject(transform, by);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObjectEqually: function(localMouse, target, transform, _dim) {\r\n\r\n        var dist = localMouse.y + localMouse.x,\r\n            lastDist = _dim.y * transform.original.scaleY / target.scaleY +\r\n                       _dim.x * transform.original.scaleX / target.scaleX,\r\n            scaled, signX = localMouse.x < 0 ? -1 : 1,\r\n            signY = localMouse.y < 0 ? -1 : 1, newScaleX, newScaleY;\r\n\r\n        // We use transform.scaleX/Y instead of target.scaleX/Y\r\n        // because the object may have a min scale and we'll loose the proportions\r\n        newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\r\n        newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\r\n        scaled = newScaleX !== target.scaleX || newScaleY !== target.scaleY;\r\n        target.set('scaleX', newScaleX);\r\n        target.set('scaleY', newScaleY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _flipObject: function(transform, by) {\r\n        if (transform.newScaleX < 0 && by !== 'y') {\r\n          if (transform.originX === 'left') {\r\n            transform.originX = 'right';\r\n          }\r\n          else if (transform.originX === 'right') {\r\n            transform.originX = 'left';\r\n          }\r\n        }\r\n\r\n        if (transform.newScaleY < 0 && by !== 'x') {\r\n          if (transform.originY === 'top') {\r\n            transform.originY = 'bottom';\r\n          }\r\n          else if (transform.originY === 'bottom') {\r\n            transform.originY = 'top';\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setLocalMouse: function(localMouse, t) {\r\n        var target = t.target, zoom = this.getZoom(),\r\n            padding = target.padding / zoom;\r\n\r\n        if (t.originX === 'right') {\r\n          localMouse.x *= -1;\r\n        }\r\n        else if (t.originX === 'center') {\r\n          localMouse.x *= t.mouseXSign * 2;\r\n          if (localMouse.x < 0) {\r\n            t.mouseXSign = -t.mouseXSign;\r\n          }\r\n        }\r\n\r\n        if (t.originY === 'bottom') {\r\n          localMouse.y *= -1;\r\n        }\r\n        else if (t.originY === 'center') {\r\n          localMouse.y *= t.mouseYSign * 2;\r\n          if (localMouse.y < 0) {\r\n            t.mouseYSign = -t.mouseYSign;\r\n          }\r\n        }\r\n\r\n        // adjust the mouse coordinates when dealing with padding\r\n        if (abs(localMouse.x) > padding) {\r\n          if (localMouse.x < 0) {\r\n            localMouse.x += padding;\r\n          }\r\n          else {\r\n            localMouse.x -= padding;\r\n          }\r\n        }\r\n        else { // mouse is within the padding, set to 0\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (abs(localMouse.y) > padding) {\r\n          if (localMouse.y < 0) {\r\n            localMouse.y += padding;\r\n          }\r\n          else {\r\n            localMouse.y -= padding;\r\n          }\r\n        }\r\n        else {\r\n          localMouse.y = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Rotates object by invoking its rotate method\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the rotation occurred\r\n       */\r\n      _rotateObject: function (x, y) {\r\n\r\n        var t = this._currentTransform,\r\n            target = t.target, constraintPosition,\r\n            constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\r\n\r\n        if (target.lockRotation) {\r\n          return false;\r\n        }\r\n\r\n        var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\r\n            curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\r\n            angle = radiansToDegrees(curAngle - lastAngle + t.theta),\r\n            hasRotated = true;\r\n\r\n        if (target.snapAngle > 0) {\r\n          var snapAngle  = target.snapAngle,\r\n              snapThreshold  = target.snapThreshold || snapAngle,\r\n              rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\r\n              leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\r\n\r\n          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\r\n            angle = leftAngleLocked;\r\n          }\r\n          else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\r\n            angle = rightAngleLocked;\r\n          }\r\n        }\r\n\r\n        // normalize angle to positive value\r\n        if (angle < 0) {\r\n          angle = 360 + angle;\r\n        }\r\n        angle %= 360;\r\n\r\n        if (target.angle === angle) {\r\n          hasRotated = false;\r\n        }\r\n        else {\r\n          // rotation only happen here\r\n          target.angle = angle;\r\n          // Make sure the constraints apply\r\n          target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        }\r\n\r\n        return hasRotated;\r\n      },\r\n\r\n      /**\r\n       * Set the cursor type of the canvas element\r\n       * @param {String} value Cursor type of the canvas element.\r\n       * @see http://www.w3.org/TR/css3-ui/#cursor\r\n       */\r\n      setCursor: function (value) {\r\n        this.upperCanvasEl.style.cursor = value;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx to draw the selection on\r\n       */\r\n      _drawSelection: function (ctx) {\r\n        var groupSelector = this._groupSelector,\r\n            left = groupSelector.left,\r\n            top = groupSelector.top,\r\n            aleft = abs(left),\r\n            atop = abs(top);\r\n\r\n        if (this.selectionColor) {\r\n          ctx.fillStyle = this.selectionColor;\r\n\r\n          ctx.fillRect(\r\n            groupSelector.ex - ((left > 0) ? 0 : -left),\r\n            groupSelector.ey - ((top > 0) ? 0 : -top),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n\r\n        if (!this.selectionLineWidth || !this.selectionBorderColor) {\r\n          return;\r\n        }\r\n        ctx.lineWidth = this.selectionLineWidth;\r\n        ctx.strokeStyle = this.selectionBorderColor;\r\n\r\n        // selection border\r\n        if (this.selectionDashArray.length > 1 && !supportLineDash) {\r\n\r\n          var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n              py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\r\n\r\n          ctx.beginPath();\r\n\r\n          fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\r\n\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        }\r\n        else {\r\n          fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\r\n          ctx.strokeRect(\r\n            groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n            groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that determines what object we are clicking on\r\n       * the skipGroup parameter is for internal use, is needed for shift+click action\r\n       * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\r\n       * or the outside part of the corner.\r\n       * @param {Event} e mouse event\r\n       * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\r\n       * @return {fabric.Object} the target found\r\n       */\r\n      findTarget: function (e, skipGroup) {\r\n        if (this.skipTargetFind) {\r\n          return;\r\n        }\r\n\r\n        var ignoreZoom = true,\r\n            pointer = this.getPointer(e, ignoreZoom),\r\n            activeObject = this._activeObject,\r\n            aObjects = this.getActiveObjects(),\r\n            activeTarget, activeTargetSubs;\r\n\r\n        // first check current group (if one exists)\r\n        // active group does not check sub targets like normal groups.\r\n        // if active group just exits.\r\n        this.targets = [];\r\n\r\n        if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          return activeObject;\r\n        }\r\n        // if we hit the corner of an activeObject, let's return that.\r\n        if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\r\n          return activeObject;\r\n        }\r\n        if (aObjects.length === 1 &&\r\n          activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          if (!this.preserveObjectStacking) {\r\n            return activeObject;\r\n          }\r\n          else {\r\n            activeTarget = activeObject;\r\n            activeTargetSubs = this.targets;\r\n            this.targets = [];\r\n          }\r\n        }\r\n        var target = this._searchPossibleTargets(this._objects, pointer);\r\n        if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\r\n          target = activeTarget;\r\n          this.targets = activeTargetSubs;\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * Checks point is inside the object.\r\n       * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n       * @param {fabric.Object} obj Object to test against\r\n       * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\r\n       * @return {Boolean} true if point is contained within an area of given object\r\n       * @private\r\n       */\r\n      _checkTarget: function(pointer, obj, globalPointer) {\r\n        if (obj &&\r\n            obj.visible &&\r\n            obj.evented &&\r\n            this.containsPoint(null, obj, pointer)){\r\n          if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\r\n            var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\r\n            if (!isTransparent) {\r\n              return true;\r\n            }\r\n          }\r\n          else {\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\r\n       * @param {Array} [objects] objects array to look into\r\n       * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n       * @return {fabric.Object} object that contains pointer\r\n       * @private\r\n       */\r\n      _searchPossibleTargets: function(objects, pointer) {\r\n        // Cache all targets where their bounding box contains point.\r\n        var target, i = objects.length, subTarget;\r\n        // Do not check for currently grouped objects, since we check the parent group itself.\r\n        // until we call this function specifically to search inside the activeGroup\r\n        while (i--) {\r\n          var objToCheck = objects[i];\r\n          var pointerToUse = objToCheck.group && objToCheck.group.type !== 'activeSelection' ?\r\n            this._normalizePointer(objToCheck.group, pointer) : pointer;\r\n          if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\r\n            target = objects[i];\r\n            if (target.subTargetCheck && target instanceof fabric.Group) {\r\n              subTarget = this._searchPossibleTargets(target._objects, pointer);\r\n              subTarget && this.targets.push(subTarget);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates without the effect of the viewport\r\n       * @param {Object} pointer with \"x\" and \"y\" number values\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      restorePointerVpt: function(pointer) {\r\n        return fabric.util.transformPoint(\r\n          pointer,\r\n          fabric.util.invertTransform(this.viewportTransform)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates relative to canvas.\r\n       * Can return coordinates with or without viewportTransform.\r\n       * ignoreZoom false gives back coordinates that represent\r\n       * the point clicked on canvas element.\r\n       * ignoreZoom true gives back coordinates after being processed\r\n       * by the viewportTransform ( sort of coordinates of what is displayed\r\n       * on the canvas where you are clicking.\r\n       * ignoreZoom true = HTMLElement coordinates relative to top,left\r\n       * ignoreZoom false, default = fabric space coordinates, the same used for shape position\r\n       * To interact with your shapes top and left you want to use ignoreZoom true\r\n       * most of the time, while ignoreZoom false will give you coordinates\r\n       * compatible with the object.oCoords system.\r\n       * of the time.\r\n       * @param {Event} e\r\n       * @param {Boolean} ignoreZoom\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      getPointer: function (e, ignoreZoom) {\r\n        // return cached values if we are in the event processing chain\r\n        if (this._absolutePointer && !ignoreZoom) {\r\n          return this._absolutePointer;\r\n        }\r\n        if (this._pointer && ignoreZoom) {\r\n          return this._pointer;\r\n        }\r\n\r\n        var pointer = getPointer(e),\r\n            upperCanvasEl = this.upperCanvasEl,\r\n            bounds = upperCanvasEl.getBoundingClientRect(),\r\n            boundsWidth = bounds.width || 0,\r\n            boundsHeight = bounds.height || 0,\r\n            cssScale;\r\n\r\n        if (!boundsWidth || !boundsHeight ) {\r\n          if ('top' in bounds && 'bottom' in bounds) {\r\n            boundsHeight = Math.abs( bounds.top - bounds.bottom );\r\n          }\r\n          if ('right' in bounds && 'left' in bounds) {\r\n            boundsWidth = Math.abs( bounds.right - bounds.left );\r\n          }\r\n        }\r\n\r\n        this.calcOffset();\r\n        pointer.x = pointer.x - this._offset.left;\r\n        pointer.y = pointer.y - this._offset.top;\r\n        if (!ignoreZoom) {\r\n          pointer = this.restorePointerVpt(pointer);\r\n        }\r\n\r\n        var retinaScaling = this.getRetinaScaling();\r\n        if (retinaScaling !== 1) {\r\n          pointer.x /= retinaScaling;\r\n          pointer.y /= retinaScaling;\r\n        }\r\n\r\n        if (boundsWidth === 0 || boundsHeight === 0) {\r\n          // If bounds are not available (i.e. not visible), do not apply scale.\r\n          cssScale = { width: 1, height: 1 };\r\n        }\r\n        else {\r\n          cssScale = {\r\n            width: upperCanvasEl.width / boundsWidth,\r\n            height: upperCanvasEl.height / boundsHeight\r\n          };\r\n        }\r\n\r\n        return {\r\n          x: pointer.x * cssScale.width,\r\n          y: pointer.y * cssScale.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\r\n       */\r\n      _createUpperCanvas: function () {\r\n        var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, ''),\r\n            lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\r\n\r\n        // there is no need to create a new upperCanvas element if we have already one.\r\n        if (upperCanvasEl) {\r\n          upperCanvasEl.className = '';\r\n        }\r\n        else {\r\n          upperCanvasEl = this._createCanvasElement();\r\n          this.upperCanvasEl = upperCanvasEl;\r\n        }\r\n        fabric.util.addClass(upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\r\n\r\n        this.wrapperEl.appendChild(upperCanvasEl);\r\n\r\n        this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\r\n        this._applyCanvasStyle(upperCanvasEl);\r\n        this.contextTop = upperCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function () {\r\n        this.cacheCanvasEl = this._createCanvasElement();\r\n        this.cacheCanvasEl.setAttribute('width', this.width);\r\n        this.cacheCanvasEl.setAttribute('height', this.height);\r\n        this.contextCache = this.cacheCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initWrapperElement: function () {\r\n        this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\r\n          'class': this.containerClass\r\n        });\r\n        fabric.util.setStyle(this.wrapperEl, {\r\n          width: this.width + 'px',\r\n          height: this.height + 'px',\r\n          position: 'relative'\r\n        });\r\n        fabric.util.makeElementUnselectable(this.wrapperEl);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement} element canvas element to apply styles on\r\n       */\r\n      _applyCanvasStyle: function (element) {\r\n        var width = this.width || element.width,\r\n            height = this.height || element.height;\r\n\r\n        fabric.util.setStyle(element, {\r\n          position: 'absolute',\r\n          width: width + 'px',\r\n          height: height + 'px',\r\n          left: 0,\r\n          top: 0,\r\n          'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',\r\n          '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\r\n        });\r\n        element.width = width;\r\n        element.height = height;\r\n        fabric.util.makeElementUnselectable(element);\r\n      },\r\n\r\n      /**\r\n       * Copy the entire inline style from one element (fromEl) to another (toEl)\r\n       * @private\r\n       * @param {Element} fromEl Element style is copied from\r\n       * @param {Element} toEl Element copied style is applied to\r\n       */\r\n      _copyCanvasStyle: function (fromEl, toEl) {\r\n        toEl.style.cssText = fromEl.style.cssText;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where object selection is drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getSelectionContext: function() {\r\n        return this.contextTop;\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element on which object selection is drawn\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getSelectionElement: function () {\r\n        return this.upperCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * Returns currently active object\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObject: function () {\r\n        return this._activeObject;\r\n      },\r\n\r\n      /**\r\n       * Returns an array with the current selected objects\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObjects: function () {\r\n        var active = this._activeObject;\r\n        if (active) {\r\n          if (active.type === 'activeSelection' && active._objects) {\r\n            return active._objects.slice(0);\r\n          }\r\n          else {\r\n            return [active];\r\n          }\r\n        }\r\n        return [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        // removing active object should fire \"selection:cleared\" events\r\n        if (obj === this._activeObject) {\r\n          this.fire('before:selection:cleared', { target: obj });\r\n          this._discardActiveObject();\r\n          this.fire('selection:cleared', { target: obj });\r\n          obj.fire('deselected');\r\n        }\r\n        if (obj === this._hoveredTarget){\r\n          this._hoveredTarget = null;\r\n          this._hoveredTargets = [];\r\n        }\r\n        this.callSuper('_onObjectRemoved', obj);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Compares the old activeObject with the current one and fires correct events\r\n       * @param {fabric.Object} obj old activeObject\r\n       */\r\n      _fireSelectionEvents: function(oldObjects, e) {\r\n        var somethingChanged = false, objects = this.getActiveObjects(),\r\n            added = [], removed = [], opt = { e: e };\r\n        oldObjects.forEach(function(oldObject) {\r\n          if (objects.indexOf(oldObject) === -1) {\r\n            somethingChanged = true;\r\n            oldObject.fire('deselected', opt);\r\n            removed.push(oldObject);\r\n          }\r\n        });\r\n        objects.forEach(function(object) {\r\n          if (oldObjects.indexOf(object) === -1) {\r\n            somethingChanged = true;\r\n            object.fire('selected', opt);\r\n            added.push(object);\r\n          }\r\n        });\r\n        if (oldObjects.length > 0 && objects.length > 0) {\r\n          opt.selected = added;\r\n          opt.deselected = removed;\r\n          // added for backward compatibility\r\n          opt.updated = added[0] || removed[0];\r\n          opt.target = this._activeObject;\r\n          somethingChanged && this.fire('selection:updated', opt);\r\n        }\r\n        else if (objects.length > 0) {\r\n          // deprecated event\r\n          if (objects.length === 1) {\r\n            opt.target = added[0];\r\n            this.fire('object:selected', opt);\r\n          }\r\n          opt.selected = added;\r\n          // added for backward compatibility\r\n          opt.target = this._activeObject;\r\n          this.fire('selection:created', opt);\r\n        }\r\n        else if (oldObjects.length > 0) {\r\n          opt.deselected = removed;\r\n          this.fire('selection:cleared', opt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets given object as the only active object on canvas\r\n       * @param {fabric.Object} object Object to set as an active one\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setActiveObject: function (object, e) {\r\n        var currentActives = this.getActiveObjects();\r\n        this._setActiveObject(object, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object to set as active\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {Boolean} true if the selection happened\r\n       */\r\n      _setActiveObject: function(object, e) {\r\n        if (this._activeObject === object) {\r\n          return false;\r\n        }\r\n        if (!this._discardActiveObject(e, object)) {\r\n          return false;\r\n        }\r\n        if (object.onSelect({ e: e })) {\r\n          return false;\r\n        }\r\n        this._activeObject = object;\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _discardActiveObject: function(e, object) {\r\n        var obj = this._activeObject;\r\n        if (obj) {\r\n          // onDeselect return TRUE to cancel selection;\r\n          if (obj.onDeselect({ e: e, object: object })) {\r\n            return false;\r\n          }\r\n          this._activeObject = null;\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Discards currently active object and fire events. If the function is called by fabric\r\n       * as a consequence of a mouse event, the event is passed as a parameter and\r\n       * sent to the fire function for the custom events. When used as a method the\r\n       * e param does not have any application.\r\n       * @param {event} e\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      discardActiveObject: function (e) {\r\n        var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\r\n        if (currentActives.length) {\r\n          this.fire('before:selection:cleared', { target: activeObject, e: e });\r\n        }\r\n        this._discardActiveObject(e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and removes all event listeners\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        var wrapper = this.wrapperEl;\r\n        this.removeListeners();\r\n        wrapper.removeChild(this.upperCanvasEl);\r\n        wrapper.removeChild(this.lowerCanvasEl);\r\n        this.contextCache = null;\r\n        this.contextTop = null;\r\n        ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n        if (wrapper.parentNode) {\r\n          wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\r\n        }\r\n        delete this.wrapperEl;\r\n        fabric.StaticCanvas.prototype.dispose.call(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        // this.discardActiveGroup();\r\n        this.discardActiveObject();\r\n        this.clearContext(this.contextTop);\r\n        return this.callSuper('clear');\r\n      },\r\n\r\n      /**\r\n       * Draws objects' controls (borders/controls)\r\n       * @param {CanvasRenderingContext2D} ctx Context to render controls on\r\n       */\r\n      drawControls: function(ctx) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (activeObject) {\r\n          activeObject._renderControls(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        //If the object is part of the current selection group, it should\r\n        //be transformed appropriately\r\n        //i.e. it should be serialised as it would appear if the selection group\r\n        //were to be destroyed.\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance),\r\n            object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\r\n        //Undo the damage we did by changing all of its properties\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Realises an object's group transformation on it\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to transform (gets mutated)\r\n       * @returns the original values of instance which were changed\r\n       */\r\n      _realizeGroupTransformOnObject: function(instance) {\r\n        if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\r\n          var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\r\n          //Copy all the positionally relevant properties across now\r\n          var originalValues = {};\r\n          layoutProps.forEach(function(prop) {\r\n            originalValues[prop] = instance[prop];\r\n          });\r\n          this._activeObject.realizeTransform(instance);\r\n          return originalValues;\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Restores the changed properties of instance\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\r\n       * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\r\n       */\r\n      _unwindGroupTransformOnObject: function(instance, originalValues) {\r\n        if (originalValues) {\r\n          instance.set(originalValues);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        //If the object is in a selection group, simulate what would happen to that\r\n        //object when the group is deselected\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance);\r\n        this.callSuper('_setSVGObject', markup, instance, reviver);\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n      },\r\n\r\n      setViewportTransform: function (vpt) {\r\n        if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\r\n          this._activeObject.clearContextTop();\r\n        }\r\n        fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\r\n      }\r\n    });\r\n\r\n    // copying static properties manually to work around Opera's bug,\r\n    // where \"prototype\" property is enumerable and overrides existing prototype\r\n    for (var prop in fabric.StaticCanvas) {\r\n      if (prop !== 'prototype') {\r\n        fabric.Canvas[prop] = fabric.StaticCanvas[prop];\r\n      }\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var cursorOffset = {\r\n          mt: 0, // n\r\n          tr: 1, // ne\r\n          mr: 2, // e\r\n          br: 3, // se\r\n          mb: 4, // s\r\n          bl: 5, // sw\r\n          ml: 6, // w\r\n          tl: 7 // nw\r\n        },\r\n        addListener = fabric.util.addListener,\r\n        removeListener = fabric.util.removeListener,\r\n        RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\r\n        addEventOptions = { passive: false };\r\n\r\n    function checkClick(e, value) {\r\n      return e.button && (e.button === value - 1);\r\n    }\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Map of cursor style values for each of the object controls\r\n       * @private\r\n       */\r\n      cursorMap: [\r\n        'n-resize',\r\n        'ne-resize',\r\n        'e-resize',\r\n        'se-resize',\r\n        's-resize',\r\n        'sw-resize',\r\n        'w-resize',\r\n        'nw-resize'\r\n      ],\r\n\r\n      /**\r\n       * Contains the id of the touch event that owns the fabric transform\r\n       * @type Number\r\n       * @private\r\n       */\r\n      mainTouchId: null,\r\n\r\n      /**\r\n       * Adds mouse listeners to canvas\r\n       * @private\r\n       */\r\n      _initEventListeners: function () {\r\n        // in case we initialized the class twice. This should not happen normally\r\n        // but in some kind of applications where the canvas element may be changed\r\n        // this is a workaround to having double listeners.\r\n        this.removeListeners();\r\n        this._bindEvents();\r\n        this.addOrRemove(addListener, 'add');\r\n      },\r\n\r\n      /**\r\n       * return an event prefix pointer or mouse.\r\n       * @private\r\n       */\r\n      _getEventPrefix: function () {\r\n        return this.enablePointerEvents ? 'pointer' : 'mouse';\r\n      },\r\n\r\n      addOrRemove: function(functor, eventjsFunctor) {\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        functor(fabric.window, 'resize', this._onResize);\r\n        functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n        functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);\r\n        functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);\r\n        functor(canvasElement, 'wheel', this._onMouseWheel);\r\n        functor(canvasElement, 'contextmenu', this._onContextMenu);\r\n        functor(canvasElement, 'dblclick', this._onDoubleClick);\r\n        functor(canvasElement, 'dragover', this._onDragOver);\r\n        functor(canvasElement, 'dragenter', this._onDragEnter);\r\n        functor(canvasElement, 'dragleave', this._onDragLeave);\r\n        functor(canvasElement, 'drop', this._onDrop);\r\n        if (!this.enablePointerEvents) {\r\n          functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\r\n        }\r\n        if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\r\n          eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\r\n          eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\r\n          eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);\r\n          eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\r\n          eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Removes all event listeners\r\n       */\r\n      removeListeners: function() {\r\n        this.addOrRemove(removeListener, 'remove');\r\n        // if you dispose on a mouseDown, before mouse up, you need to clean document to...\r\n        var eventTypePrefix = this._getEventPrefix();\r\n        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n        removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _bindEvents: function() {\r\n        if (this.eventsBound) {\r\n          // for any reason we pass here twice we do not want to bind events twice.\r\n          return;\r\n        }\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onTouchStart = this._onTouchStart.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onTouchEnd = this._onTouchEnd.bind(this);\r\n        this._onResize = this._onResize.bind(this);\r\n        this._onGesture = this._onGesture.bind(this);\r\n        this._onDrag = this._onDrag.bind(this);\r\n        this._onShake = this._onShake.bind(this);\r\n        this._onLongPress = this._onLongPress.bind(this);\r\n        this._onOrientationChange = this._onOrientationChange.bind(this);\r\n        this._onMouseWheel = this._onMouseWheel.bind(this);\r\n        this._onMouseOut = this._onMouseOut.bind(this);\r\n        this._onMouseEnter = this._onMouseEnter.bind(this);\r\n        this._onContextMenu = this._onContextMenu.bind(this);\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onDragOver = this._onDragOver.bind(this);\r\n        this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\r\n        this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\r\n        this._onDrop = this._simpleEventHandler.bind(this, 'drop');\r\n        this.eventsBound = true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js gesture\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onGesture: function(e, self) {\r\n        this.__onTransformGesture && this.__onTransformGesture(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js drag\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onDrag: function(e, self) {\r\n        this.__onDrag && this.__onDrag(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on wheel event\r\n       */\r\n      _onMouseWheel: function(e) {\r\n        this.__onMouseWheel(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseOut: function(e) {\r\n        var target = this._hoveredTarget;\r\n        this.fire('mouse:out', { target: target, e: e });\r\n        this._hoveredTarget = null;\r\n        target && target.fire('mouseout', { e: e });\r\n\r\n        var _this = this;\r\n        this._hoveredTargets.forEach(function(_target){\r\n          _this.fire('mouse:out', { target: target, e: e });\r\n          _target && target.fire('mouseout', { e: e });\r\n        });\r\n        this._hoveredTargets = [];\r\n\r\n        if (this._iTextInstances) {\r\n          this._iTextInstances.forEach(function(obj) {\r\n            if (obj.isEditing) {\r\n              obj.hiddenTextarea.focus();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseenter\r\n       */\r\n      _onMouseEnter: function(e) {\r\n        // This find target and consequent 'mouse:over' is used to\r\n        // clear old instances on hovered target.\r\n        // calling findTarget has the side effect of killing target.__corner.\r\n        // as a short term fix we are not firing this if we are currently transforming.\r\n        // as a long term fix we need to separate the action of finding a target with the\r\n        // side effects we added to it.\r\n        if (!this.currentTransform && !this.findTarget(e)) {\r\n          this.fire('mouse:over', { target: null, e: e });\r\n          this._hoveredTarget = null;\r\n          this._hoveredTargets = [];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js orientation change\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onOrientationChange: function(e, self) {\r\n        this.__onOrientationChange && this.__onOrientationChange(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onShake: function(e, self) {\r\n        this.__onShake && this.__onShake(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onLongPress: function(e, self) {\r\n        this.__onLongPress && this.__onLongPress(e, self);\r\n      },\r\n\r\n      /**\r\n       * prevent default to allow drop event to be fired\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       */\r\n      _onDragOver: function(e) {\r\n        e.preventDefault();\r\n        var target = this._simpleEventHandler('dragover', e);\r\n        this._fireEnterLeaveEvents(target, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onContextMenu: function (e) {\r\n        if (this.stopContextMenu) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onDoubleClick: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'dblclick');\r\n        this._resetTransformEventData(e);\r\n      },\r\n\r\n      /**\r\n       * Return a the id of an event.\r\n       * returns either the pointerId or the identifier or 0 for the mouse event\r\n       * @private\r\n       * @param {Event} evt Event object\r\n       */\r\n      getPointerId: function(evt) {\r\n        var changedTouches = evt.changedTouches;\r\n\r\n        if (changedTouches) {\r\n          return changedTouches[0] && changedTouches[0].identifier;\r\n        }\r\n\r\n        if (this.enablePointerEvents) {\r\n          return evt.pointerId;\r\n        }\r\n\r\n        return -1;\r\n      },\r\n\r\n      /**\r\n       * Determines if an event has the id of the event that is considered main\r\n       * @private\r\n       * @param {evt} event Event object\r\n       */\r\n      _isMainEvent: function(evt) {\r\n        if (evt.isPrimary === true) {\r\n          return true;\r\n        }\r\n        if (evt.isPrimary === false) {\r\n          return false;\r\n        }\r\n        if (evt.type === 'touchend' && evt.touches.length === 0) {\r\n          return true;\r\n        }\r\n        if (evt.changedTouches) {\r\n          return evt.changedTouches[0].identifier === this.mainTouchId;\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onTouchStart: function(e) {\r\n        e.preventDefault();\r\n        if (this.mainTouchId === null) {\r\n          this.mainTouchId = this.getPointerId(e);\r\n        }\r\n        this.__onMouseDown(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n        // Unbind mousedown to prevent double triggers from touch devices\r\n        removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDown: function (e) {\r\n        this.__onMouseDown(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n        addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onTouchEnd: function(e) {\r\n        if (e.touches.length > 0) {\r\n          // if there are still touches stop here\r\n          return;\r\n        }\r\n        this.__onMouseUp(e);\r\n        this._resetTransformEventData();\r\n        this.mainTouchId = null;\r\n        var eventTypePrefix = this._getEventPrefix();\r\n        removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n        var _this = this;\r\n        if (this._willAddMouseDown) {\r\n          clearTimeout(this._willAddMouseDown);\r\n        }\r\n        this._willAddMouseDown = setTimeout(function() {\r\n          // Wait 400ms before rebinding mousedown to prevent double triggers\r\n          // from touch devices\r\n          addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);\r\n          _this._willAddMouseDown = 0;\r\n        }, 400);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUp: function (e) {\r\n        this.__onMouseUp(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        if (this._isMainEvent(e)) {\r\n          removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n          removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n          addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMove: function (e) {\r\n        !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\r\n        this.__onMouseMove(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onResize: function () {\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Decides whether the canvas should be redrawn in mouseup and mousedown events.\r\n       * @private\r\n       * @param {Object} target\r\n       */\r\n      _shouldRender: function(target) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (\r\n          !!activeObject !== !!target ||\r\n          (activeObject && target && (activeObject !== target))\r\n        ) {\r\n          // this covers: switch of target, from target to no target, selection of target\r\n          // multiSelection with key and mouse\r\n          return true;\r\n        }\r\n        else if (activeObject && activeObject.isEditing) {\r\n          // if we mouse up/down over a editing textbox a cursor change,\r\n          // there is no need to re render\r\n          return false;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is released on canvas.\r\n       * The method resets the currentTransform parameters, store the image corner\r\n       * position in the image object and render the canvas on top.\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseUp: function (e) {\r\n        var target, transform = this._currentTransform,\r\n            groupSelector = this._groupSelector, shouldRender = false,\r\n            isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\r\n        this._cacheTransformEventData(e);\r\n        target = this._target;\r\n        this._handleEvent(e, 'up:before');\r\n        // if right/middle click just fire events and return\r\n        // target undefined will make the _handleEvent search the target\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\r\n          }\r\n          this._resetTransformEventData();\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this._onMouseUpInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n        if (transform) {\r\n          this._finalizeCurrentTransform(e);\r\n          shouldRender = transform.actionPerformed;\r\n        }\r\n\r\n        if (!isClick) {\r\n          this._maybeGroupObjects(e);\r\n          shouldRender || (shouldRender = this._shouldRender(target));\r\n        }\r\n        if (target) {\r\n          target.isMoving = false;\r\n        }\r\n        this._setCursorFromEvent(e, target);\r\n        this._handleEvent(e, 'up', LEFT_CLICK, isClick);\r\n        this._groupSelector = null;\r\n        this._currentTransform = null;\r\n        // reset the target information about which corner is selected\r\n        target && (target.__corner = 0);\r\n        if (shouldRender) {\r\n          this.requestRenderAll();\r\n        }\r\n        else if (!isClick) {\r\n          this.renderTop();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @return {Fabric.Object} target return the the target found, for internal reasons.\r\n       */\r\n      _simpleEventHandler: function(eventType, e) {\r\n        var target = this.findTarget(e),\r\n            targets = this.targets,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n            };\r\n        this.fire(eventType, options);\r\n        target && target.fire(eventType, options);\r\n        if (!targets) {\r\n          return target;\r\n        }\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire(eventType, options);\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @param {fabric.Object} targetObj receiving event\r\n       * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\r\n       * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\r\n       */\r\n      _handleEvent: function(e, eventType, button, isClick) {\r\n        var target = this._target,\r\n            targets = this.targets || [],\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n              button: button || LEFT_CLICK,\r\n              isClick: isClick || false,\r\n              pointer: this._pointer,\r\n              absolutePointer: this._absolutePointer,\r\n              transform: this._currentTransform\r\n            };\r\n        this.fire('mouse:' + eventType, options);\r\n        target && target.fire('mouse' + eventType, options);\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire('mouse' + eventType, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\r\n       */\r\n      _finalizeCurrentTransform: function(e) {\r\n\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            eventName,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              transform: transform,\r\n            };\r\n\r\n        if (target._scaling) {\r\n          target._scaling = false;\r\n        }\r\n\r\n        target.setCoords();\r\n\r\n        if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\r\n          if (transform.actionPerformed) {\r\n            eventName = this._addEventOptions(options, transform);\r\n            this._fire(eventName, options);\r\n          }\r\n          this._fire('modified', options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Mutate option object in order to add by property and give back the event name.\r\n       * @private\r\n       * @param {Object} options to mutate\r\n       * @param {Object} transform to inspect action from\r\n       */\r\n      _addEventOptions: function(options, transform) {\r\n        // we can probably add more details at low cost\r\n        // scale change, rotation changes, translation changes\r\n        var eventName, by;\r\n        switch (transform.action) {\r\n          case 'scaleX':\r\n            eventName = 'scaled';\r\n            by = 'x';\r\n            break;\r\n          case 'scaleY':\r\n            eventName = 'scaled';\r\n            by = 'y';\r\n            break;\r\n          case 'skewX':\r\n            eventName = 'skewed';\r\n            by = 'x';\r\n            break;\r\n          case 'skewY':\r\n            eventName = 'skewed';\r\n            by = 'y';\r\n            break;\r\n          case 'scale':\r\n            eventName = 'scaled';\r\n            by = 'equally';\r\n            break;\r\n          case 'rotate':\r\n            eventName = 'rotated';\r\n            break;\r\n          case 'drag':\r\n            eventName = 'moved';\r\n            break;\r\n        }\r\n        options.by = by;\r\n        return eventName;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDownInDrawingMode: function(e) {\r\n        this._isCurrentlyDrawing = true;\r\n        if (this.getActiveObject()) {\r\n          this.discardActiveObject(e).requestRenderAll();\r\n        }\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, this.contextTop);\r\n        }\r\n        var pointer = this.getPointer(e);\r\n        this.freeDrawingBrush.onMouseDown(pointer, { e: e, pointer: pointer });\r\n        this._handleEvent(e, 'down');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMoveInDrawingMode: function(e) {\r\n        if (this._isCurrentlyDrawing) {\r\n          var pointer = this.getPointer(e);\r\n          this.freeDrawingBrush.onMouseMove(pointer, { e: e, pointer: pointer });\r\n        }\r\n        this.setCursor(this.freeDrawingCursor);\r\n        this._handleEvent(e, 'move');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUpInDrawingMode: function(e) {\r\n        if (this.clipTo) {\r\n          this.contextTop.restore();\r\n        }\r\n        var pointer = this.getPointer(e);\r\n        this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e, pointer: pointer });\r\n        this._handleEvent(e, 'up');\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is clicked on canvas.\r\n       * The method inits the currentTransform parameters and renders all the\r\n       * canvas so the current image can be placed on the top canvas and the rest\r\n       * in on the container one.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      __onMouseDown: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'down:before');\r\n        var target = this._target;\r\n        // if right click just fire events\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'down', RIGHT_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'down', MIDDLE_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseDownInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n\r\n        // ignore if some object is being transformed at this moment\r\n        if (this._currentTransform) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this._pointer;\r\n        // save pointer for check in __onMouseUp event\r\n        this._previousPointer = pointer;\r\n        var shouldRender = this._shouldRender(target),\r\n            shouldGroup = this._shouldGroup(e, target);\r\n        if (this._shouldClearSelection(e, target)) {\r\n          this.discardActiveObject(e);\r\n        }\r\n        else if (shouldGroup) {\r\n          this._handleGrouping(e, target);\r\n          target = this._activeObject;\r\n        }\r\n\r\n        if (this.selection && (!target ||\r\n          (!target.selectable && !target.isEditing && target !== this._activeObject))) {\r\n          this._groupSelector = {\r\n            ex: pointer.x,\r\n            ey: pointer.y,\r\n            top: 0,\r\n            left: 0\r\n          };\r\n        }\r\n\r\n        if (target) {\r\n          var alreadySelected = target === this._activeObject;\r\n          if (target.selectable) {\r\n            this.setActiveObject(target, e);\r\n          }\r\n          if (target === this._activeObject && (target.__corner || !shouldGroup)) {\r\n            this._setupCurrentTransform(e, target, alreadySelected);\r\n          }\r\n        }\r\n        this._handleEvent(e, 'down');\r\n        // we must renderAll so that we update the visuals\r\n        (shouldRender || shouldGroup) && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * reset cache form common information needed during event processing\r\n       * @private\r\n       */\r\n      _resetTransformEventData: function() {\r\n        this._target = null;\r\n        this._pointer = null;\r\n        this._absolutePointer = null;\r\n      },\r\n\r\n      /**\r\n       * Cache common information needed during event processing\r\n       * @private\r\n       * @param {Event} e Event object fired on event\r\n       */\r\n      _cacheTransformEventData: function(e) {\r\n        // reset in order to avoid stale caching\r\n        this._resetTransformEventData();\r\n        this._pointer = this.getPointer(e, true);\r\n        this._absolutePointer = this.restorePointerVpt(this._pointer);\r\n        this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeTransform: function(e) {\r\n        var t = this._currentTransform;\r\n        this.stateful && t.target.saveState();\r\n        this.fire('before:transform', {\r\n          e: e,\r\n          transform: t,\r\n        });\r\n        // determine if it's a drag or rotate case\r\n        if (t.corner) {\r\n          this.onBeforeScaleRotate(t.target);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is hovering the canvas.\r\n       * The currentTransform parameter will define whether the user is rotating/scaling/translating\r\n       * an image or neither of them (only hovering). A group selection is also possible and would cancel\r\n       * all any other type of action.\r\n       * In case of an image transformation only the top canvas will be rendered.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      __onMouseMove: function (e) {\r\n        this._handleEvent(e, 'move:before');\r\n        this._cacheTransformEventData(e);\r\n        var target, pointer;\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseMoveInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n\r\n        var groupSelector = this._groupSelector;\r\n\r\n        // We initially clicked in an empty area, so we draw a box for multiple selection\r\n        if (groupSelector) {\r\n          pointer = this._pointer;\r\n\r\n          groupSelector.left = pointer.x - groupSelector.ex;\r\n          groupSelector.top = pointer.y - groupSelector.ey;\r\n\r\n          this.renderTop();\r\n        }\r\n        else if (!this._currentTransform) {\r\n          target = this.findTarget(e) || null;\r\n          this._setCursorFromEvent(e, target);\r\n          this._fireOverOutEvents(target, e);\r\n        }\r\n        else {\r\n          this._transformObject(e);\r\n        }\r\n        this._handleEvent(e, 'move');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * Manage the mouseout, mouseover events for the fabric object on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the mousemove event\r\n       * @param {Event} e Event object fired on mousemove\r\n       * @private\r\n       */\r\n      _fireOverOutEvents: function(target, e) {\r\n        var _hoveredTarget = this._hoveredTarget,\r\n            _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n            length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n        this.fireSyntheticInOutEvents(target, e, {\r\n          oldTarget: _hoveredTarget,\r\n          evtOut: 'mouseout',\r\n          canvasEvtOut: 'mouse:out',\r\n          evtIn: 'mouseover',\r\n          canvasEvtIn: 'mouse:over',\r\n        });\r\n        for (var i = 0; i < length; i++){\r\n          this.fireSyntheticInOutEvents(targets[i], e, {\r\n            oldTarget: _hoveredTargets[i],\r\n            evtOut: 'mouseout',\r\n            evtIn: 'mouseover',\r\n          });\r\n        }\r\n        this._hoveredTarget = target;\r\n        this._hoveredTargets = this.targets.concat();\r\n      },\r\n\r\n      /**\r\n       * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the onDrag event\r\n       * @param {Event} e Event object fired on ondrag\r\n       * @private\r\n       */\r\n      _fireEnterLeaveEvents: function(target, e) {\r\n        var _draggedoverTarget = this._draggedoverTarget,\r\n            _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n            length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n        this.fireSyntheticInOutEvents(target, e, {\r\n          oldTarget: _draggedoverTarget,\r\n          evtOut: 'dragleave',\r\n          evtIn: 'dragenter',\r\n        });\r\n        for (var i = 0; i < length; i++) {\r\n          this.fireSyntheticInOutEvents(targets[i], e, {\r\n            oldTarget: _hoveredTargets[i],\r\n            evtOut: 'dragleave',\r\n            evtIn: 'dragenter',\r\n          });\r\n        }\r\n        this._draggedoverTarget = target;\r\n      },\r\n\r\n      /**\r\n       * Manage the synthetic in/out events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the supported events\r\n       * @param {Event} e Event object fired\r\n       * @param {Object} config configuration for the function to work\r\n       * @param {String} config.targetName property on the canvas where the old target is stored\r\n       * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\r\n       * @param {String} config.evtOut name of the event to fire for out\r\n       * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\r\n       * @param {String} config.evtIn name of the event to fire for in\r\n       * @private\r\n       */\r\n      fireSyntheticInOutEvents: function(target, e, config) {\r\n        var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires,\r\n            targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\r\n        if (targetChanged) {\r\n          inOpt = { e: e, target: target, previousTarget: oldTarget };\r\n          outOpt = { e: e, target: oldTarget, nextTarget: target };\r\n        }\r\n        inFires = target && targetChanged;\r\n        outFires = oldTarget && targetChanged;\r\n        if (outFires) {\r\n          canvasEvtOut && this.fire(canvasEvtOut, outOpt);\r\n          oldTarget.fire(config.evtOut, outOpt);\r\n        }\r\n        if (inFires) {\r\n          canvasEvtIn && this.fire(canvasEvtIn, inOpt);\r\n          target.fire(config.evtIn, inOpt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines actions when an Event Mouse Wheel\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseWheel: function(e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'wheel');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event fired on mousemove\r\n       */\r\n      _transformObject: function(e) {\r\n        var pointer = this.getPointer(e),\r\n            transform = this._currentTransform;\r\n\r\n        transform.reset = false;\r\n        transform.target.isMoving = true;\r\n        transform.shiftKey = e.shiftKey;\r\n        transform.altKey = e[this.centeredKey];\r\n\r\n        this._beforeScaleTransform(e, transform);\r\n        this._performTransformAction(e, transform, pointer);\r\n\r\n        transform.actionPerformed && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _performTransformAction: function(e, transform, pointer) {\r\n        var x = pointer.x,\r\n            y = pointer.y,\r\n            action = transform.action,\r\n            actionPerformed = false,\r\n            options = {\r\n              target: transform.target,\r\n              e: e,\r\n              transform: transform,\r\n              pointer: pointer\r\n            };\r\n\r\n        if (action === 'rotate') {\r\n          (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\r\n        }\r\n        else if (action === 'scale') {\r\n          (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleX') {\r\n          (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleY') {\r\n          (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'skewX') {\r\n          (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\r\n        }\r\n        else if (action === 'skewY') {\r\n          (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\r\n        }\r\n        else {\r\n          actionPerformed = this._translateObject(x, y);\r\n          if (actionPerformed) {\r\n            this._fire('moving', options);\r\n            this.setCursor(options.target.moveCursor || this.moveCursor);\r\n          }\r\n        }\r\n        transform.actionPerformed = transform.actionPerformed || actionPerformed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fire: function(eventName, options) {\r\n        this.fire('object:' + eventName, options);\r\n        options.target.fire(eventName, options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeScaleTransform: function(e, transform) {\r\n        if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\r\n          var centerTransform = this._shouldCenterTransform(transform.target);\r\n\r\n          // Switch from a normal resize to center-based\r\n          if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\r\n             // Switch from center-based resize to normal one\r\n             (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\r\n          ) {\r\n            this._resetCurrentTransform();\r\n            transform.reset = true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {Object} transform current transform\r\n       * @param {Number} x mouse position x from origin\r\n       * @param {Number} y mouse position y from origin\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _onScale: function(e, transform, x, y) {\r\n        if (this._isUniscalePossible(e, transform.target)) {\r\n          transform.currentAction = 'scale';\r\n          return this._scaleObject(x, y);\r\n        }\r\n        else {\r\n          // Switch from a normal resize to proportional\r\n          if (!transform.reset && transform.currentAction === 'scale') {\r\n            this._resetCurrentTransform();\r\n          }\r\n\r\n          transform.currentAction = 'scaleEqually';\r\n          return this._scaleObject(x, y, 'equally');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target current target\r\n       * @return {Boolean} true if unproportional scaling is possible\r\n       */\r\n      _isUniscalePossible: function(e, target) {\r\n        return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\r\n      },\r\n\r\n      /**\r\n       * Sets the cursor depending on where the canvas is being hovered.\r\n       * Note: very buggy in Opera\r\n       * @param {Event} e Event object\r\n       * @param {Object} target Object that the mouse is hovering, if so.\r\n       */\r\n      _setCursorFromEvent: function (e, target) {\r\n        if (!target) {\r\n          this.setCursor(this.defaultCursor);\r\n          return false;\r\n        }\r\n        var hoverCursor = target.hoverCursor || this.hoverCursor,\r\n            activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\r\n              this._activeObject : null,\r\n            // only show proper corner when group selection is not active\r\n            corner = (!activeSelection || !activeSelection.contains(target))\r\n                      && target._findTargetCorner(this.getPointer(e, true));\r\n\r\n        if (!corner) {\r\n          if (target.subTargetCheck){\r\n            // hoverCursor should come from top-most subTarget,\r\n            // so we walk the array backwards\r\n            this.targets.concat().reverse().map(function(_target){\r\n              hoverCursor = _target.hoverCursor || hoverCursor;\r\n            });\r\n          }\r\n          this.setCursor(hoverCursor);\r\n        }\r\n        else {\r\n          this.setCursor(this.getCornerCursor(corner, target, e));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      getCornerCursor: function(corner, target, e) {\r\n        if (this.actionIsDisabled(corner, target, e)) {\r\n          return this.notAllowedCursor;\r\n        }\r\n        else if (corner in cursorOffset) {\r\n          return this._getRotatedCornerCursor(corner, target, e);\r\n        }\r\n        else if (corner === 'mtr' && target.hasRotatingPoint) {\r\n          return this.rotationCursor;\r\n        }\r\n        else {\r\n          return this.defaultCursor;\r\n        }\r\n      },\r\n\r\n      actionIsDisabled: function(corner, target, e) {\r\n        if (corner === 'mt' || corner === 'mb') {\r\n          return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\r\n        }\r\n        else if (corner === 'ml' || corner === 'mr') {\r\n          return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\r\n        }\r\n        else if (corner === 'mtr') {\r\n          return target.lockRotation;\r\n        }\r\n        else {\r\n          return this._isUniscalePossible(e, target) ?\r\n            target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getRotatedCornerCursor: function(corner, target, e) {\r\n        var n = Math.round((target.angle % 360) / 45);\r\n\r\n        if (n < 0) {\r\n          n += 8; // full circle ahead\r\n        }\r\n        n += cursorOffset[corner];\r\n        if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\r\n          //if we are holding shift and we are on a mx corner...\r\n          n += 2;\r\n        }\r\n        // normalize n to be from 0 to 7\r\n        n %= 8;\r\n\r\n        return this.cursorMap[n];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var min = Math.min,\r\n        max = Math.max;\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       * @return {Boolean}\r\n       */\r\n      _shouldGroup: function(e, target) {\r\n        var activeObject = this._activeObject;\r\n        return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\r\n              (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _handleGrouping: function (e, target) {\r\n        var activeObject = this._activeObject;\r\n        // avoid multi select when shift click on a corner\r\n        if (activeObject.__corner) {\r\n          return;\r\n        }\r\n        if (target === activeObject) {\r\n          // if it's a group, find target again, using activeGroup objects\r\n          target = this.findTarget(e, true);\r\n          // if even object is not found or we are on activeObjectCorner, bail out\r\n          if (!target || !target.selectable) {\r\n            return;\r\n          }\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          this._updateActiveSelection(target, e);\r\n        }\r\n        else {\r\n          this._createActiveSelection(target, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateActiveSelection: function(target, e) {\r\n        var activeSelection = this._activeObject,\r\n            currentActiveObjects = activeSelection._objects.slice(0);\r\n        if (activeSelection.contains(target)) {\r\n          activeSelection.removeWithUpdate(target);\r\n          this._hoveredTarget = target;\r\n          this._hoveredTargets = this.targets.concat();\r\n          if (activeSelection.size() === 1) {\r\n            // activate last remaining object\r\n            this._setActiveObject(activeSelection.item(0), e);\r\n          }\r\n        }\r\n        else {\r\n          activeSelection.addWithUpdate(target);\r\n          this._hoveredTarget = activeSelection;\r\n          this._hoveredTargets = this.targets.concat();\r\n        }\r\n        this._fireSelectionEvents(currentActiveObjects, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createActiveSelection: function(target, e) {\r\n        var currentActives = this.getActiveObjects(), group = this._createGroup(target);\r\n        this._hoveredTarget = group;\r\n        // ISSUE 4115: should we consider subTargets here?\r\n        // this._hoveredTargets = [];\r\n        // this._hoveredTargets = this.targets.concat();\r\n        this._setActiveObject(group, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} target\r\n       */\r\n      _createGroup: function(target) {\r\n        var objects = this._objects,\r\n            isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\r\n            groupObjects = isActiveLower\r\n              ? [this._activeObject, target]\r\n              : [target, this._activeObject];\r\n        this._activeObject.isEditing && this._activeObject.exitEditing();\r\n        return new fabric.ActiveSelection(groupObjects, {\r\n          canvas: this\r\n        });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e mouse event\r\n       */\r\n      _groupSelectedObjects: function (e) {\r\n\r\n        var group = this._collectObjects(e),\r\n            aGroup;\r\n\r\n        // do not create group for 1 element only\r\n        if (group.length === 1) {\r\n          this.setActiveObject(group[0], e);\r\n        }\r\n        else if (group.length > 1) {\r\n          aGroup = new fabric.ActiveSelection(group.reverse(), {\r\n            canvas: this\r\n          });\r\n          this.setActiveObject(aGroup, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _collectObjects: function(e) {\r\n        var group = [],\r\n            currentObject,\r\n            x1 = this._groupSelector.ex,\r\n            y1 = this._groupSelector.ey,\r\n            x2 = x1 + this._groupSelector.left,\r\n            y2 = y1 + this._groupSelector.top,\r\n            selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\r\n            selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\r\n            allowIntersect = !this.selectionFullyContained,\r\n            isClick = x1 === x2 && y1 === y2;\r\n        // we iterate reverse order to collect top first in case of click.\r\n        for (var i = this._objects.length; i--; ) {\r\n          currentObject = this._objects[i];\r\n\r\n          if (!currentObject || !currentObject.selectable || !currentObject.visible) {\r\n            continue;\r\n          }\r\n\r\n          if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\r\n              currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX2Y2))\r\n          ) {\r\n            group.push(currentObject);\r\n            // only add one object if it's a click\r\n            if (isClick) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (group.length > 1) {\r\n          group = group.filter(function(object) {\r\n            return !object.onSelect({ e: e });\r\n          });\r\n        }\r\n\r\n        return group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _maybeGroupObjects: function(e) {\r\n        if (this.selection && this._groupSelector) {\r\n          this._groupSelectedObjects(e);\r\n        }\r\n        this.setCursor(this.defaultCursor);\r\n        // clear selection and current transformation\r\n        this._groupSelector = null;\r\n      }\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function () {\r\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\r\n       * @example <caption>Generate jpeg dataURL with lower quality</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'jpeg',\r\n       *   quality: 0.8\r\n       * });\r\n       * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   left: 100,\r\n       *   top: 100,\r\n       *   width: 200,\r\n       *   height: 200\r\n       * });\r\n       * @example <caption>Generate double scaled png dataURL</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   multiplier: 2\r\n       * });\r\n       */\r\n      toDataURL: function (options) {\r\n        options || (options = { });\r\n\r\n        var format = options.format || 'png',\r\n            quality = options.quality || 1,\r\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\r\n            canvasEl = this.toCanvasElement(multiplier, options);\r\n        return fabric.util.toDataURL(canvasEl, format, quality);\r\n      },\r\n\r\n      /**\r\n       * Create a new HTMLCanvas element painted with the current canvas content.\r\n       * No need to resize the actual one or repaint it.\r\n       * Will transfer object ownership to a new canvas, paint it, and set everything back.\r\n       * This is an intermediary step used to get to a dataUrl but also it is useful to\r\n       * create quick image copies of a canvas without passing for the dataUrl string\r\n       * @param {Number} [multiplier] a zoom factor.\r\n       * @param {Object} [cropping] Cropping informations\r\n       * @param {Number} [cropping.left] Cropping left offset.\r\n       * @param {Number} [cropping.top] Cropping top offset.\r\n       * @param {Number} [cropping.width] Cropping width.\r\n       * @param {Number} [cropping.height] Cropping height.\r\n       */\r\n      toCanvasElement: function(multiplier, cropping) {\r\n        multiplier = multiplier || 1;\r\n        cropping = cropping || { };\r\n        var scaledWidth = (cropping.width || this.width) * multiplier,\r\n            scaledHeight = (cropping.height || this.height) * multiplier,\r\n            zoom = this.getZoom(),\r\n            originalWidth = this.width,\r\n            originalHeight = this.height,\r\n            newZoom = zoom * multiplier,\r\n            vp = this.viewportTransform,\r\n            translateX = (vp[4] - (cropping.left || 0)) * multiplier,\r\n            translateY = (vp[5] - (cropping.top || 0)) * multiplier,\r\n            originalInteractive = this.interactive,\r\n            newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\r\n            originalRetina = this.enableRetinaScaling,\r\n            canvasEl = fabric.util.createCanvasElement(),\r\n            originalContextTop = this.contextTop;\r\n        canvasEl.width = scaledWidth;\r\n        canvasEl.height = scaledHeight;\r\n        this.contextTop = null;\r\n        this.enableRetinaScaling = false;\r\n        this.interactive = false;\r\n        this.viewportTransform = newVp;\r\n        this.width = scaledWidth;\r\n        this.height = scaledHeight;\r\n        this.calcViewportBoundaries();\r\n        this.renderCanvas(canvasEl.getContext('2d'), this._objects);\r\n        this.viewportTransform = vp;\r\n        this.width = originalWidth;\r\n        this.height = originalHeight;\r\n        this.calcViewportBoundaries();\r\n        this.interactive = originalInteractive;\r\n        this.enableRetinaScaling = originalRetina;\r\n        this.contextTop = originalContextTop;\r\n        return canvasEl;\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Populates canvas with data from the specified dataless JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\r\n     * @deprecated since 1.2.2\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     */\r\n    loadFromDatalessJSON: function (json, callback, reviver) {\r\n      return this.loadFromJSON(json, callback, reviver);\r\n    },\r\n\r\n    /**\r\n     * Populates canvas with data from the specified JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\r\n     * @example <caption>loadFromJSON</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\r\n     * @example <caption>loadFromJSON with reviver</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\r\n     *   // `o` = json object\r\n     *   // `object` = fabric.Object instance\r\n     *   // ... do some stuff ...\r\n     * });\r\n     */\r\n    loadFromJSON: function (json, callback, reviver) {\r\n      if (!json) {\r\n        return;\r\n      }\r\n\r\n      // serialize if it wasn't already\r\n      var serialized = (typeof json === 'string')\r\n        ? JSON.parse(json)\r\n        : fabric.util.object.clone(json);\r\n\r\n      var _this = this,\r\n          clipPath = serialized.clipPath,\r\n          renderOnAddRemove = this.renderOnAddRemove;\r\n\r\n      this.renderOnAddRemove = false;\r\n\r\n      delete serialized.clipPath;\r\n\r\n      this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\r\n        _this.clear();\r\n        _this._setBgOverlay(serialized, function () {\r\n          if (clipPath) {\r\n            _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {\r\n              _this.clipPath = enlivenedCanvasClip[0];\r\n              _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n            });\r\n          }\r\n          else {\r\n            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n          }\r\n        });\r\n      }, reviver);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} serialized Object with background and overlay information\r\n     * @param {Array} restored canvas objects\r\n     * @param {Function} cached renderOnAddRemove callback\r\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n     */\r\n    __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\r\n      var _this = this;\r\n      enlivenedObjects.forEach(function(obj, index) {\r\n        // we splice the array just in case some custom classes restored from JSON\r\n        // will add more object to canvas at canvas init.\r\n        _this.insertAt(obj, index);\r\n      });\r\n      this.renderOnAddRemove = renderOnAddRemove;\r\n      // remove parts i cannot set as options\r\n      delete serialized.objects;\r\n      delete serialized.backgroundImage;\r\n      delete serialized.overlayImage;\r\n      delete serialized.background;\r\n      delete serialized.overlay;\r\n      // this._initOptions does too many things to just\r\n      // call it. Normally loading an Object from JSON\r\n      // create the Object instance. Here the Canvas is\r\n      // already an instance and we are just loading things over it\r\n      this._setOptions(serialized);\r\n      this.renderAll();\r\n      callback && callback();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} serialized Object with background and overlay information\r\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n     */\r\n    _setBgOverlay: function(serialized, callback) {\r\n      var loaded = {\r\n        backgroundColor: false,\r\n        overlayColor: false,\r\n        backgroundImage: false,\r\n        overlayImage: false\r\n      };\r\n\r\n      if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      var cbIfLoaded = function () {\r\n        if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\r\n          callback && callback();\r\n        }\r\n      };\r\n\r\n      this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\r\n     * @param {(Object|String)} value Value to set\r\n     * @param {Object} loaded Set loaded property to true if property is set\r\n     * @param {Object} callback Callback function to invoke after property is set\r\n     */\r\n    __setBgOverlay: function(property, value, loaded, callback) {\r\n      var _this = this;\r\n\r\n      if (!value) {\r\n        loaded[property] = true;\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      if (property === 'backgroundImage' || property === 'overlayImage') {\r\n        fabric.util.enlivenObjects([value], function(enlivedObject){\r\n          _this[property] = enlivedObject[0];\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n      else {\r\n        this['set' + fabric.util.string.capitalize(property, true)](value, function() {\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} objects\r\n     * @param {Function} callback\r\n     * @param {Function} [reviver]\r\n     */\r\n    _enlivenObjects: function (objects, callback, reviver) {\r\n      if (!objects || objects.length === 0) {\r\n        callback && callback([]);\r\n        return;\r\n      }\r\n\r\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n        callback && callback(enlivenedObjects);\r\n      }, null, reviver);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURL: function (format, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURL(format));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Number} multiplier\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURLWithMultiplier: function (format, multiplier, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURLWithMultiplier(format, multiplier));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     * @param {Array} [properties] Array of properties to include in the cloned canvas and children\r\n     */\r\n    clone: function (callback, properties) {\r\n      var data = JSON.stringify(this.toJSON(properties));\r\n      this.cloneWithoutData(function(clone) {\r\n        clone.loadFromJSON(data, function() {\r\n          callback && callback(clone);\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance without cloning existing data.\r\n     * This essentially copies canvas dimensions, clipping properties, etc.\r\n     * but leaves data empty (so that you can populate it with your own)\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     */\r\n    cloneWithoutData: function(callback) {\r\n      var el = fabric.util.createCanvasElement();\r\n\r\n      el.width = this.width;\r\n      el.height = this.height;\r\n\r\n      var clone = new fabric.Canvas(el);\r\n      clone.clipTo = this.clipTo;\r\n      if (this.backgroundImage) {\r\n        clone.setBackgroundImage(this.backgroundImage.src, function() {\r\n          clone.renderAll();\r\n          callback && callback(clone);\r\n        });\r\n        clone.backgroundImageOpacity = this.backgroundImageOpacity;\r\n        clone.backgroundImageStretch = this.backgroundImageStretch;\r\n      }\r\n      else {\r\n        callback && callback(clone);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        capitalize = fabric.util.string.capitalize,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n        objectCaching = !fabric.isLikelyNode,\r\n        ALIASING_LIMIT = 2;\r\n\r\n    if (fabric.Object) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Root object class from which all 2d shape classes inherit from\r\n     * @class fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\r\n     * @see {@link fabric.Object#initialize} for constructor definition\r\n     *\r\n     * @fires added\r\n     * @fires removed\r\n     *\r\n     * @fires selected\r\n     * @fires deselected\r\n     * @fires modified\r\n     * @fires modified\r\n     * @fires moved\r\n     * @fires scaled\r\n     * @fires rotated\r\n     * @fires skewed\r\n     *\r\n     * @fires rotating\r\n     * @fires scaling\r\n     * @fires moving\r\n     * @fires skewing\r\n     *\r\n     * @fires mousedown\r\n     * @fires mouseup\r\n     * @fires mouseover\r\n     * @fires mouseout\r\n     * @fires mousewheel\r\n     * @fires mousedblclick\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     */\r\n    fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Type of an object (rect, circle, path, etc.).\r\n       * Note that this property is meant to be read-only and not meant to be modified.\r\n       * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                     'object',\r\n\r\n      /**\r\n       * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originX:                  'left',\r\n\r\n      /**\r\n       * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originY:                  'top',\r\n\r\n      /**\r\n       * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      top:                      0,\r\n\r\n      /**\r\n       * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      left:                     0,\r\n\r\n      /**\r\n       * Object width\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width:                    0,\r\n\r\n      /**\r\n       * Object height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height:                   0,\r\n\r\n      /**\r\n       * Object scale factor (horizontal)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleX:                   1,\r\n\r\n      /**\r\n       * Object scale factor (vertical)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleY:                   1,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped horizontally\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipX:                    false,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped vertically\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipY:                    false,\r\n\r\n      /**\r\n       * Opacity of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      opacity:                  1,\r\n\r\n      /**\r\n       * Angle of rotation of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      angle:                    0,\r\n\r\n      /**\r\n       * Angle of skew on x axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewX:                    0,\r\n\r\n      /**\r\n       * Angle of skew on y axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewY:                    0,\r\n\r\n      /**\r\n       * Size of object's controlling corners (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cornerSize:               13,\r\n\r\n      /**\r\n       * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      transparentCorners:       true,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:              null,\r\n\r\n      /**\r\n       * Default cursor value used when moving this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:               null,\r\n\r\n      /**\r\n       * Padding between object and its controlling borders (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      padding:                  0,\r\n\r\n      /**\r\n       * Color of controlling borders of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      borderColor:              'rgba(102,153,255,0.75)',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's borders (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      borderDashArray:          null,\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerColor:              'rgba(102,153,255,0.5)',\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active and transparentCorners false)\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerStrokeColor:        null,\r\n\r\n      /**\r\n       * Specify style of control, 'rect' or 'circle'\r\n       * @since 1.6.2\r\n       * @type String\r\n       */\r\n      cornerStyle:          'rect',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's control (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      cornerDashArray:          null,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being scaled via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:          false,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being rotated via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:         true,\r\n\r\n      /**\r\n       * Color of object's fill\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      fill:                     'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Fill rule used to fill an object\r\n       * accepted values are nonzero, evenodd\r\n       * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\r\n       * @type String\r\n       * @default\r\n       */\r\n      fillRule:                 'nonzero',\r\n\r\n      /**\r\n       * Composite rule used for canvas globalCompositeOperation\r\n       * @type String\r\n       * @default\r\n       */\r\n      globalCompositeOperation: 'source-over',\r\n\r\n      /**\r\n       * Background color of an object.\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      backgroundColor:          '',\r\n\r\n      /**\r\n       * Selection Background color of an object. colored layer behind the object when it is active.\r\n       * does not mix good with globalCompositeOperation methods.\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBackgroundColor:          '',\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:                   null,\r\n\r\n      /**\r\n       * Width of a stroke used to render this object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth:              1,\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's stroke (stroke must be defined)\r\n       * @type Array\r\n       */\r\n      strokeDashArray:          null,\r\n\r\n      /**\r\n       * Line offset of an object's stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeDashOffset: 0,\r\n\r\n      /**\r\n       * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineCap:            'butt',\r\n\r\n      /**\r\n       * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineJoin:           'miter',\r\n\r\n      /**\r\n       * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeMiterLimit:         4,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:                   null,\r\n\r\n      /**\r\n       * Opacity of object's controlling borders when object is active and moving\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderOpacityWhenMoving:  0.4,\r\n\r\n      /**\r\n       * Scale factor of object's controlling borders\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderScaleFactor:        1,\r\n\r\n      /**\r\n       * Transform matrix (similar to SVG's transform matrix)\r\n       * This property has been depreacted. Since caching and and qrDecompose this\r\n       * property can be handled with the standard top,left,scaleX,scaleY,angle and skewX.\r\n       * A documentation example on how to parse and merge a transformMatrix will be provided before\r\n       * completely removing it in fabric 4.0\r\n       * If you are starting a project now, DO NOT use it.\r\n       * @deprecated since 3.2.0\r\n       * @type Array\r\n       */\r\n      transformMatrix:          null,\r\n\r\n      /**\r\n       * Minimum allowed scale value of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minScaleLimit:            0,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\r\n       * But events still fire on it.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectable:               true,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      evented:                  true,\r\n\r\n      /**\r\n       * When set to `false`, an object is not rendered on canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      visible:                  true,\r\n\r\n      /**\r\n       * When set to `false`, object's controls are not displayed and can not be used to manipulate object\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasControls:              true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling borders are not rendered\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasBorders:               true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling rotating point will not be visible or selectable\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasRotatingPoint:         true,\r\n\r\n      /**\r\n       * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rotatingPointOffset:      40,\r\n\r\n      /**\r\n       * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:       false,\r\n\r\n      /**\r\n       * When `false`, default object's values are not included in its serialization\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues:     true,\r\n\r\n      /**\r\n       * Function that determines clipping of an object (context is passed as a first argument).\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * Note that context origin is at the object's center point (not left/top corner)\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       */\r\n      clipTo:                   null,\r\n\r\n      /**\r\n       * When `true`, object horizontal movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementX:            false,\r\n\r\n      /**\r\n       * When `true`, object vertical movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementY:            false,\r\n\r\n      /**\r\n       * When `true`, object rotation is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockRotation:             false,\r\n\r\n      /**\r\n       * When `true`, object horizontal scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingY:             false,\r\n\r\n      /**\r\n       * When `true`, object non-uniform scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockUniScaling:           false,\r\n\r\n      /**\r\n       * When `true`, object horizontal skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingY:             false,\r\n\r\n      /**\r\n       * When `true`, object cannot be flipped by scaling into negative values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingFlip:          false,\r\n\r\n      /**\r\n       * When `true`, object is not exported in OBJECT/JSON\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      excludeFromExport:        false,\r\n\r\n      /**\r\n       * When `true`, object is cached on an additional canvas.\r\n       * When `false`, object is not cached unless necessary ( clipPath )\r\n       * default to true\r\n       * @since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      objectCaching:            objectCaching,\r\n\r\n      /**\r\n       * When `true`, object properties are checked for cache invalidation. In some particular\r\n       * situation you may want this to be disabled ( spray brush, very big, groups)\r\n       * or if your application does not allow you to modify properties for groups child you want\r\n       * to disable it for groups.\r\n       * default to false\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default false\r\n       */\r\n      statefullCache:            false,\r\n\r\n      /**\r\n       * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\r\n       * too much and will be redrawn with correct details at the end of scaling.\r\n       * this setting is performance and application dependant.\r\n       * default to true\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      noScaleCache:              true,\r\n\r\n      /**\r\n       * When `false`, the stoke width will scale with the object.\r\n       * When `true`, the stroke will always match the exact pixel size entered for stroke width.\r\n       * default to false\r\n       * @since 2.6.0\r\n       * @type Boolean\r\n       * @default false\r\n       * @type Boolean\r\n       * @default false\r\n       */\r\n      strokeUniform:              false,\r\n\r\n      /**\r\n       * When set to `true`, object's cache will be rerendered next render call.\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      dirty:                true,\r\n\r\n      /**\r\n       * keeps the value of the last hovered corner during mouse move.\r\n       * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\r\n       * It should be private, but there is no harm in using it as\r\n       * a read-only property.\r\n       * @type number|string|any\r\n       * @default 0\r\n       */\r\n      __corner: 0,\r\n\r\n      /**\r\n       * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      paintFirst:           'fill',\r\n\r\n      /**\r\n       * List of properties to consider when checking if state\r\n       * of an object is changed (fabric.Object#hasStateChanged)\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: (\r\n        'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\r\n        'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\r\n        'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\r\n        'skewX skewY fillRule paintFirst clipPath strokeUniform'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n       * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n       * and refreshed at the next render\r\n       * @type Array\r\n       */\r\n      cacheProperties: (\r\n        'fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' +\r\n        ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n       * the clipPath object gets used when the object has rendered, and the context is placed in the center\r\n       * of the object cacheCanvas.\r\n       * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\r\n       * @type fabric.Object\r\n       */\r\n      clipPath: undefined,\r\n\r\n      /**\r\n       * Meaningful ONLY when the object is used as clipPath.\r\n       * if true, the clipPath will make the object clip to the outside of the clipPath\r\n       * since 2.4.0\r\n       * @type boolean\r\n       * @default false\r\n       */\r\n      inverted: false,\r\n\r\n      /**\r\n       * Meaningful ONLY when the object is used as clipPath.\r\n       * if true, the clipPath will have its top and left relative to canvas, and will\r\n       * not be influenced by the object transform. This will make the clipPath relative\r\n       * to the canvas, but clipping just a particular object.\r\n       * WARNING this is beta, this feature may change or be renamed.\r\n       * since 2.4.0\r\n       * @type boolean\r\n       * @default false\r\n       */\r\n      absolutePositioned: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        if (options) {\r\n          this.setOptions(options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a the canvas used to keep the cached copy of the object\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function() {\r\n        this._cacheProperties = {};\r\n        this._cacheCanvas = fabric.util.createCanvasElement();\r\n        this._cacheContext = this._cacheCanvas.getContext('2d');\r\n        this._updateCacheCanvas();\r\n        // if canvas gets created, is empty, so dirty.\r\n        this.dirty = true;\r\n      },\r\n\r\n      /**\r\n       * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\r\n       * and each side do not cross fabric.cacheSideLimit\r\n       * those numbers are configurable so that you can get as much detail as you want\r\n       * making bargain with performances.\r\n       * @param {Object} dims\r\n       * @param {Object} dims.width width of canvas\r\n       * @param {Object} dims.height height of canvas\r\n       * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _limitCacheSize: function(dims) {\r\n        var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\r\n            width = dims.width, height = dims.height,\r\n            max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\r\n        if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\r\n          if (width < min) {\r\n            dims.width = min;\r\n          }\r\n          if (height < min) {\r\n            dims.height = min;\r\n          }\r\n          return dims;\r\n        }\r\n        var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\r\n            capValue = fabric.util.capValue,\r\n            x = capValue(min, limitedDims.x, max),\r\n            y = capValue(min, limitedDims.y, max);\r\n        if (width > x) {\r\n          dims.zoomX /= width / x;\r\n          dims.width = x;\r\n          dims.capped = true;\r\n        }\r\n        if (height > y) {\r\n          dims.zoomY /= height / y;\r\n          dims.height = y;\r\n          dims.capped = true;\r\n        }\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @return {Object}.x width of object to be cached\r\n       * @return {Object}.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var objectScale = this.getTotalObjectScaling(),\r\n            // caculate dimensions without skewing\r\n            dim = this._getTransformedDimensions(0, 0),\r\n            neededX = dim.x * objectScale.scaleX / this.scaleX,\r\n            neededY = dim.y * objectScale.scaleY / this.scaleY;\r\n        return {\r\n          // for sure this ALIASING_LIMIT is slightly creating problem\r\n          // in situation in which the cache canvas gets an upper limit\r\n          // also objectScale contains already scaleX and scaleY\r\n          width: neededX + ALIASING_LIMIT,\r\n          height: neededY + ALIASING_LIMIT,\r\n          zoomX: objectScale.scaleX,\r\n          zoomY: objectScale.scaleY,\r\n          x: neededX,\r\n          y: neededY\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Update width and height of the canvas for cache\r\n       * returns true or false if canvas needed resize.\r\n       * @private\r\n       * @return {Boolean} true if the canvas has been resized\r\n       */\r\n      _updateCacheCanvas: function() {\r\n        var targetCanvas = this.canvas;\r\n        if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\r\n          var target = targetCanvas._currentTransform.target,\r\n              action = targetCanvas._currentTransform.action;\r\n          if (this === target && action.slice && action.slice(0, 5) === 'scale') {\r\n            return false;\r\n          }\r\n        }\r\n        var canvas = this._cacheCanvas,\r\n            dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n            minCacheSize = fabric.minCacheSideLimit,\r\n            width = dims.width, height = dims.height, drawingWidth, drawingHeight,\r\n            zoomX = dims.zoomX, zoomY = dims.zoomY,\r\n            dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\r\n            zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\r\n            shouldRedraw = dimensionsChanged || zoomChanged,\r\n            additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\r\n        if (dimensionsChanged) {\r\n          var canvasWidth = this._cacheCanvas.width,\r\n              canvasHeight = this._cacheCanvas.height,\r\n              sizeGrowing = width > canvasWidth || height > canvasHeight,\r\n              sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\r\n                canvasWidth > minCacheSize && canvasHeight > minCacheSize;\r\n          shouldResizeCanvas = sizeGrowing || sizeShrinking;\r\n          if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\r\n            additionalWidth = width * 0.1;\r\n            additionalHeight = height * 0.1;\r\n          }\r\n        }\r\n        if (shouldRedraw) {\r\n          if (shouldResizeCanvas) {\r\n            canvas.width = Math.ceil(width + additionalWidth);\r\n            canvas.height = Math.ceil(height + additionalHeight);\r\n          }\r\n          else {\r\n            this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\r\n            this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\r\n          }\r\n          drawingWidth = dims.x / 2;\r\n          drawingHeight = dims.y / 2;\r\n          this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\r\n          this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\r\n          this.cacheWidth = width;\r\n          this.cacheHeight = height;\r\n          this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\r\n          this._cacheContext.scale(zoomX, zoomY);\r\n          this.zoomX = zoomX;\r\n          this.zoomY = zoomY;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets object's properties from options\r\n       * @param {Object} [options] Options object\r\n       */\r\n      setOptions: function(options) {\r\n        this._setOptions(options);\r\n        this._initGradient(options.fill, 'fill');\r\n        this._initGradient(options.stroke, 'stroke');\r\n        this._initClipping(options);\r\n        this._initPattern(options.fill, 'fill');\r\n        this._initPattern(options.stroke, 'stroke');\r\n      },\r\n\r\n      /**\r\n       * Transforms context when rendering an object\r\n       * @param {CanvasRenderingContext2D} ctx Context\r\n       */\r\n      transform: function(ctx) {\r\n        var m;\r\n        if (this.group && !this.group._transformDone) {\r\n          m = this.calcTransformMatrix();\r\n        }\r\n        else {\r\n          m = this.calcOwnMatrix();\r\n        }\r\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n      },\r\n\r\n      /**\r\n       * Returns an object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n\r\n            object = {\r\n              type:                     this.type,\r\n              version:                  fabric.version,\r\n              originX:                  this.originX,\r\n              originY:                  this.originY,\r\n              left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\r\n              top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\r\n              width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\r\n              height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\r\n              fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\r\n              stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\r\n              strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\r\n              strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\r\n              strokeLineCap:            this.strokeLineCap,\r\n              strokeDashOffset:         this.strokeDashOffset,\r\n              strokeLineJoin:           this.strokeLineJoin,\r\n              strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\r\n              scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\r\n              scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\r\n              angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\r\n              flipX:                    this.flipX,\r\n              flipY:                    this.flipY,\r\n              opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\r\n              shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\r\n              visible:                  this.visible,\r\n              clipTo:                   this.clipTo && String(this.clipTo),\r\n              backgroundColor:          this.backgroundColor,\r\n              fillRule:                 this.fillRule,\r\n              paintFirst:               this.paintFirst,\r\n              globalCompositeOperation: this.globalCompositeOperation,\r\n              transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\r\n              skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\r\n              skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\r\n            };\r\n\r\n        if (this.clipPath) {\r\n          object.clipPath = this.clipPath.toObject(propertiesToInclude);\r\n          object.clipPath.inverted = this.clipPath.inverted;\r\n          object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\r\n        }\r\n\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          object = this._removeDefaultValues(object);\r\n        }\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns (dataless) object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        // will be overwritten by subclasses\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       */\r\n      _removeDefaultValues: function(object) {\r\n        var prototype = fabric.util.getKlass(object.type).prototype,\r\n            stateProperties = prototype.stateProperties;\r\n        stateProperties.forEach(function(prop) {\r\n          if (prop === 'left' || prop === 'top') {\r\n            return;\r\n          }\r\n          if (object[prop] === prototype[prop]) {\r\n            delete object[prop];\r\n          }\r\n          var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\r\n                        Object.prototype.toString.call(prototype[prop]) === '[object Array]';\r\n\r\n          // basically a check for [] === []\r\n          if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\r\n            delete object[prop];\r\n          }\r\n        });\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.' + capitalize(this.type) + '>';\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getObjectScaling: function() {\r\n        var scaleX = this.scaleX, scaleY = this.scaleY;\r\n        if (this.group) {\r\n          var scaling = this.group.getObjectScaling();\r\n          scaleX *= scaling.scaleX;\r\n          scaleY *= scaling.scaleY;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling, zoom and retina\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getTotalObjectScaling: function() {\r\n        var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\r\n        if (this.canvas) {\r\n          var zoom = this.canvas.getZoom();\r\n          var retina = this.canvas.getRetinaScaling();\r\n          scaleX *= zoom * retina;\r\n          scaleY *= zoom * retina;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object opacity counting also the group property\r\n       * @return {Number}\r\n       */\r\n      getObjectOpacity: function() {\r\n        var opacity = this.opacity;\r\n        if (this.group) {\r\n          opacity *= this.group.getObjectOpacity();\r\n        }\r\n        return opacity;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\r\n            isChanged = this[key] !== value, groupNeedsUpdate = false;\r\n\r\n        if (shouldConstrainValue) {\r\n          value = this._constrainScale(value);\r\n        }\r\n        if (key === 'scaleX' && value < 0) {\r\n          this.flipX = !this.flipX;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'scaleY' && value < 0) {\r\n          this.flipY = !this.flipY;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\r\n          value = new fabric.Shadow(value);\r\n        }\r\n        else if (key === 'dirty' && this.group) {\r\n          this.group.set('dirty', value);\r\n        }\r\n\r\n        this[key] = value;\r\n\r\n        if (isChanged) {\r\n          groupNeedsUpdate = this.group && this.group.isOnACache();\r\n          if (this.cacheProperties.indexOf(key) > -1) {\r\n            this.dirty = true;\r\n            groupNeedsUpdate && this.group.set('dirty', true);\r\n          }\r\n          else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\r\n            this.group.set('dirty', true);\r\n          }\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called by the parent group of an object every\r\n       * time a non-delegated property changes on the group. It is passed the key\r\n       * and value as parameters. Not adding in this function's signature to avoid\r\n       * Travis build error about unused variables.\r\n       */\r\n      setOnGroup: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n      /**\r\n       * Retrieves viewportTransform from Object's canvas if possible\r\n       * @method getViewportTransform\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Array}\r\n       */\r\n      getViewportTransform: function() {\r\n        if (this.canvas && this.canvas.viewportTransform) {\r\n          return this.canvas.viewportTransform;\r\n        }\r\n        return fabric.iMatrix.concat();\r\n      },\r\n\r\n      /*\r\n       * @private\r\n       * return if the object would be visible in rendering\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Boolean}\r\n       */\r\n      isNotVisible: function() {\r\n        return this.opacity === 0 ||\r\n          (this.width === 0 && this.height === 0 && this.strokeWidth === 0) ||\r\n          !this.visible;\r\n      },\r\n\r\n      /**\r\n       * Renders an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if width/height are zeros or object is not visible\r\n        if (this.isNotVisible()) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        ctx.save();\r\n        this._setupCompositeOperation(ctx);\r\n        this.drawSelectionBackground(ctx);\r\n        this.transform(ctx);\r\n        this._setOpacity(ctx);\r\n        this._setShadow(ctx, this);\r\n        if (this.transformMatrix) {\r\n          ctx.transform.apply(ctx, this.transformMatrix);\r\n        }\r\n        this.clipTo && fabric.util.clipContext(this, ctx);\r\n        if (this.shouldCache()) {\r\n          this.renderCache();\r\n          this.drawCacheOnCanvas(ctx);\r\n        }\r\n        else {\r\n          this._removeCacheCanvas();\r\n          this.dirty = false;\r\n          this.drawObject(ctx);\r\n          if (this.objectCaching && this.statefullCache) {\r\n            this.saveState({ propertySet: 'cacheProperties' });\r\n          }\r\n        }\r\n        this.clipTo && ctx.restore();\r\n        ctx.restore();\r\n      },\r\n\r\n      renderCache: function(options) {\r\n        options = options || {};\r\n        if (!this._cacheCanvas) {\r\n          this._createCacheCanvas();\r\n        }\r\n        if (this.isCacheDirty()) {\r\n          this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\r\n          this.drawObject(this._cacheContext, options.forClipping);\r\n          this.dirty = false;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Remove cacheCanvas and its dimensions from the objects\r\n       */\r\n      _removeCacheCanvas: function() {\r\n        this._cacheCanvas = null;\r\n        this.cacheWidth = 0;\r\n        this.cacheHeight = 0;\r\n      },\r\n\r\n      /**\r\n       * return true if the object will draw a stroke\r\n       * Does not consider text styles. This is just a shortcut used at rendering time\r\n       * We want it to be an aproximation and be fast.\r\n       * wrote to avoid extra caching, it has to return true when stroke happens,\r\n       * can guess when it will not happen at 100% chance, does not matter if it misses\r\n       * some use case where the stroke is invisible.\r\n       * @since 3.0.0\r\n       * @returns Boolean\r\n       */\r\n      hasStroke: function() {\r\n        return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;\r\n      },\r\n\r\n      /**\r\n       * return true if the object will draw a fill\r\n       * Does not consider text styles. This is just a shortcut used at rendering time\r\n       * We want it to be an aproximation and be fast.\r\n       * wrote to avoid extra caching, it has to return true when fill happens,\r\n       * can guess when it will not happen at 100% chance, does not matter if it misses\r\n       * some use case where the fill is invisible.\r\n       * @since 3.0.0\r\n       * @returns Boolean\r\n       */\r\n      hasFill: function() {\r\n        return this.fill && this.fill !== 'transparent';\r\n      },\r\n\r\n      /**\r\n       * When set to `true`, force the object to have its own cache, even if it is inside a group\r\n       * it may be needed when your object behave in a particular way on the cache and always needs\r\n       * its own isolated canvas to render correctly.\r\n       * Created to be overridden\r\n       * since 1.7.12\r\n       * @returns Boolean\r\n       */\r\n      needsItsOwnCache: function() {\r\n        if (this.paintFirst === 'stroke' &&\r\n          this.hasFill() && this.hasStroke() && typeof this.shadow === 'object') {\r\n          return true;\r\n        }\r\n        if (this.clipPath) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        this.ownCaching = this.needsItsOwnCache() || (\r\n          this.objectCaching &&\r\n          (!this.group || !this.group.isOnACache())\r\n        );\r\n        return this.ownCaching;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * used by Group.shouldCache to know if child has a shadow recursively\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object clipPath\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawClipPathOnCache: function(ctx) {\r\n        var path = this.clipPath;\r\n        ctx.save();\r\n        // DEBUG: uncomment this line, comment the following\r\n        // ctx.globalAlpha = 0.4\r\n        if (path.inverted) {\r\n          ctx.globalCompositeOperation = 'destination-out';\r\n        }\r\n        else {\r\n          ctx.globalCompositeOperation = 'destination-in';\r\n        }\r\n        //ctx.scale(1 / 2, 1 / 2);\r\n        if (path.absolutePositioned) {\r\n          var m = fabric.util.invertTransform(this.calcTransformMatrix());\r\n          ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n        }\r\n        path.transform(ctx);\r\n        ctx.scale(1 / path.zoomX, 1 / path.zoomY);\r\n        ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx, forClipping) {\r\n        var originalFill = this.fill, originalStroke = this.stroke;\r\n        if (forClipping) {\r\n          this.fill = 'black';\r\n          this.stroke = '';\r\n          this._setClippingProperties(ctx);\r\n        }\r\n        else {\r\n          this._renderBackground(ctx);\r\n          this._setStrokeStyles(ctx, this);\r\n          this._setFillStyles(ctx, this);\r\n        }\r\n        this._render(ctx);\r\n        this._drawClipPath(ctx);\r\n        this.fill = originalFill;\r\n        this.stroke = originalStroke;\r\n      },\r\n\r\n      _drawClipPath: function(ctx) {\r\n        var path = this.clipPath;\r\n        if (!path) { return; }\r\n        // needed to setup a couple of variables\r\n        // path canvas gets overridden with this one.\r\n        // TODO find a better solution?\r\n        path.canvas = this.canvas;\r\n        path.shouldCache();\r\n        path._transformDone = true;\r\n        path.renderCache({ forClipping: true });\r\n        this.drawClipPathOnCache(ctx);\r\n      },\r\n\r\n      /**\r\n       * Paint the cached copy of the object on the target context.\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawCacheOnCanvas: function(ctx) {\r\n        ctx.scale(1 / this.zoomX, 1 / this.zoomY);\r\n        ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       * @param {Boolean} skipCanvas skip canvas checks because this object is painted\r\n       * on parent canvas.\r\n       */\r\n      isCacheDirty: function(skipCanvas) {\r\n        if (this.isNotVisible()) {\r\n          return false;\r\n        }\r\n        if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\r\n          // in this case the context is already cleared.\r\n          return true;\r\n        }\r\n        else {\r\n          if (this.dirty ||\r\n            (this.clipPath && this.clipPath.absolutePositioned) ||\r\n            (this.statefullCache && this.hasStateChanged('cacheProperties'))\r\n          ) {\r\n            if (this._cacheCanvas && !skipCanvas) {\r\n              var width = this.cacheWidth / this.zoomX;\r\n              var height = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Draws a background for the object big as its untransformed dimensions\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        if (!this.backgroundColor) {\r\n          return;\r\n        }\r\n        var dim = this._getNonTransformedDimensions();\r\n        ctx.fillStyle = this.backgroundColor;\r\n\r\n        ctx.fillRect(\r\n          -dim.x / 2,\r\n          -dim.y / 2,\r\n          dim.x,\r\n          dim.y\r\n        );\r\n        // if there is background color no other shadows\r\n        // should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setOpacity: function(ctx) {\r\n        if (this.group && !this.group._transformDone) {\r\n          ctx.globalAlpha = this.getObjectOpacity();\r\n        }\r\n        else {\r\n          ctx.globalAlpha *= this.opacity;\r\n        }\r\n      },\r\n\r\n      _setStrokeStyles: function(ctx, decl) {\r\n        if (decl.stroke) {\r\n          ctx.lineWidth = decl.strokeWidth;\r\n          ctx.lineCap = decl.strokeLineCap;\r\n          ctx.lineDashOffset = decl.strokeDashOffset;\r\n          ctx.lineJoin = decl.strokeLineJoin;\r\n          ctx.miterLimit = decl.strokeMiterLimit;\r\n          ctx.strokeStyle = decl.stroke.toLive\r\n            ? decl.stroke.toLive(ctx, this)\r\n            : decl.stroke;\r\n        }\r\n      },\r\n\r\n      _setFillStyles: function(ctx, decl) {\r\n        if (decl.fill) {\r\n          ctx.fillStyle = decl.fill.toLive\r\n            ? decl.fill.toLive(ctx, this)\r\n            : decl.fill;\r\n        }\r\n      },\r\n\r\n      _setClippingProperties: function(ctx) {\r\n        ctx.globalAlpha = 1;\r\n        ctx.strokeStyle = 'transparent';\r\n        ctx.fillStyle = '#000000';\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Sets line dash\r\n       * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\r\n       * @param {Array} dashArray array representing dashes\r\n       * @param {Function} alternative function to call if browser does not support lineDash\r\n       */\r\n      _setLineDash: function(ctx, dashArray, alternative) {\r\n        if (!dashArray || dashArray.length === 0) {\r\n          return;\r\n        }\r\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\r\n        if (1 & dashArray.length) {\r\n          dashArray.push.apply(dashArray, dashArray);\r\n        }\r\n        if (supportsLineDash) {\r\n          ctx.setLineDash(dashArray);\r\n        }\r\n        else {\r\n          alternative && alternative(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       */\r\n      _renderControls: function(ctx, styleOverride) {\r\n        var vpt = this.getViewportTransform(),\r\n            matrix = this.calcTransformMatrix(),\r\n            options, drawBorders, drawControls;\r\n        styleOverride = styleOverride || { };\r\n        drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\r\n        drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\r\n        matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\r\n        options = fabric.util.qrDecompose(matrix);\r\n        ctx.save();\r\n        ctx.translate(options.translateX, options.translateY);\r\n        ctx.lineWidth = 1 * this.borderScaleFactor;\r\n        if (!this.group) {\r\n          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        }\r\n        if (styleOverride.forActiveSelection) {\r\n          ctx.rotate(degreesToRadians(options.angle));\r\n          drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\r\n        }\r\n        else {\r\n          ctx.rotate(degreesToRadians(this.angle));\r\n          drawBorders && this.drawBorders(ctx, styleOverride);\r\n        }\r\n        drawControls && this.drawControls(ctx, styleOverride);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        var shadow = this.shadow, canvas = this.canvas, scaling,\r\n            multX = (canvas && canvas.viewportTransform[0]) || 1,\r\n            multY = (canvas && canvas.viewportTransform[3]) || 1;\r\n        if (shadow.nonScaling) {\r\n          scaling = { scaleX: 1, scaleY: 1 };\r\n        }\r\n        else {\r\n          scaling = this.getObjectScaling();\r\n        }\r\n        if (canvas && canvas._isRetinaScaling()) {\r\n          multX *= fabric.devicePixelRatio;\r\n          multY *= fabric.devicePixelRatio;\r\n        }\r\n        ctx.shadowColor = shadow.color;\r\n        ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\r\n          (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\r\n        ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\r\n        ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _removeShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        ctx.shadowColor = '';\r\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n       * @return {Object} offset.offsetX offset for text rendering\r\n       * @return {Object} offset.offsetY offset for text rendering\r\n       */\r\n      _applyPatternGradientTransform: function(ctx, filler) {\r\n        if (!filler || !filler.toLive) {\r\n          return { offsetX: 0, offsetY: 0 };\r\n        }\r\n        var t = filler.gradientTransform || filler.patternTransform;\r\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n            offsetY = -this.height / 2 + filler.offsetY || 0;\r\n\r\n        if (filler.gradientUnits === 'percentage') {\r\n          ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\r\n        }\r\n        else {\r\n          ctx.transform(1, 0, 0, 1, offsetX, offsetY);\r\n        }\r\n        if (t) {\r\n          ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\r\n        }\r\n        return { offsetX: offsetX, offsetY: offsetY };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderPaintInOrder: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderStroke(ctx);\r\n          this._renderFill(ctx);\r\n        }\r\n        else {\r\n          this._renderFill(ctx);\r\n          this._renderStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * function that actually render something on the context.\r\n       * empty here to allow Obects to work on tests to benchmark fabric functionalites\r\n       * not related to rendering\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(/* ctx */) {\r\n\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderFill: function(ctx) {\r\n        if (!this.fill) {\r\n          return;\r\n        }\r\n\r\n        ctx.save();\r\n        this._applyPatternGradientTransform(ctx, this.fill);\r\n        if (this.fillRule === 'evenodd') {\r\n          ctx.fill('evenodd');\r\n        }\r\n        else {\r\n          ctx.fill();\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderStroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        if (this.strokeUniform) {\r\n          ctx.scale(1 / this.scaleX, 1 / this.scaleY);\r\n        }\r\n        this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\r\n        if (this.stroke.toLive && this.stroke.gradientUnits === 'percentage') {\r\n          // need to transform gradient in a pattern.\r\n          // this is a slow process. If you are hitting this codepath, and the object\r\n          // is not using caching, you should consider switching it on.\r\n          // we need a canvas as big as the current object caching canvas.\r\n          this._applyPatternForTransformedGradient(ctx, this.stroke);\r\n        }\r\n        else {\r\n          this._applyPatternGradientTransform(ctx, this.stroke);\r\n        }\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * This function try to patch the missing gradientTransform on canvas gradients.\r\n       * transforming a context to transform the gradient, is going to transform the stroke too.\r\n       * we want to transform the gradient but not the stroke operation, so we create\r\n       * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n       * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\r\n       * is limited.\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {fabric.Gradient} filler a fabric gradient instance\r\n       */\r\n      _applyPatternForTransformedGradient: function(ctx, filler) {\r\n        var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n            pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(),\r\n            width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\r\n        pCanvas.width = width;\r\n        pCanvas.height = height;\r\n        pCtx = pCanvas.getContext('2d');\r\n        pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\r\n        pCtx.lineTo(0, height); pCtx.closePath();\r\n        pCtx.translate(width / 2, height / 2);\r\n        pCtx.scale(\r\n          dims.zoomX / this.scaleX / retinaScaling,\r\n          dims.zoomY / this.scaleY / retinaScaling\r\n        );\r\n        this._applyPatternGradientTransform(pCtx, filler);\r\n        pCtx.fillStyle = filler.toLive(ctx);\r\n        pCtx.fill();\r\n        ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\r\n        ctx.scale(\r\n          retinaScaling * this.scaleX / dims.zoomX,\r\n          retinaScaling * this.scaleY / dims.zoomY\r\n        );\r\n        ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it decompose the transformMatrix\r\n       * and assign properties to object.\r\n       * untransformed coordinates\r\n       * @private\r\n       * @chainable\r\n       */\r\n      _assignTransformMatrixProps: function() {\r\n        if (this.transformMatrix) {\r\n          var options = fabric.util.qrDecompose(this.transformMatrix);\r\n          this.flipX = false;\r\n          this.flipY = false;\r\n          this.set('scaleX', options.scaleX);\r\n          this.set('scaleY', options.scaleY);\r\n          this.angle = options.angle;\r\n          this.skewX = options.skewX;\r\n          this.skewY = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it removes the transform matrix\r\n       * and set to object properties that fabricjs can handle\r\n       * @private\r\n       * @param {Object} preserveAspectRatioOptions\r\n       * @return {thisArg}\r\n       */\r\n      _removeTransformMatrix: function(preserveAspectRatioOptions) {\r\n        var center = this._findCenterFromElement();\r\n        if (this.transformMatrix) {\r\n          this._assignTransformMatrixProps();\r\n          center = fabric.util.transformPoint(center, this.transformMatrix);\r\n        }\r\n        this.transformMatrix = null;\r\n        if (preserveAspectRatioOptions) {\r\n          this.scaleX *= preserveAspectRatioOptions.scaleX;\r\n          this.scaleY *= preserveAspectRatioOptions.scaleY;\r\n          this.cropX = preserveAspectRatioOptions.cropX;\r\n          this.cropY = preserveAspectRatioOptions.cropY;\r\n          center.x += preserveAspectRatioOptions.offsetLeft;\r\n          center.y += preserveAspectRatioOptions.offsetTop;\r\n          this.width = preserveAspectRatioOptions.width;\r\n          this.height = preserveAspectRatioOptions.height;\r\n        }\r\n        this.setPositionByOrigin(center, 'center', 'center');\r\n      },\r\n\r\n      /**\r\n       * Clones an instance, using a callback method will work for every object.\r\n       * @param {Function} callback Callback is invoked with a clone as a first argument\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       */\r\n      clone: function(callback, propertiesToInclude) {\r\n        var objectForm = this.toObject(propertiesToInclude);\r\n        if (this.constructor.fromObject) {\r\n          this.constructor.fromObject(objectForm, callback);\r\n        }\r\n        else {\r\n          fabric.Object._fromObject('Object', objectForm, callback);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Creates an instance of fabric.Image out of an object\r\n       * could make use of both toDataUrl or toCanvasElement.\r\n       * @param {Function} callback callback, invoked with an instance as a first argument\r\n       * @param {Object} [options] for clone as image, passed to toDataURL\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      cloneAsImage: function(callback, options) {\r\n        var canvasEl = this.toCanvasElement(options);\r\n        if (callback) {\r\n          callback(new fabric.Image(canvasEl));\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Converts an object into a HTMLCanvas element\r\n       * @param {Object} options Options object\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       */\r\n      toCanvasElement: function(options) {\r\n        options || (options = { });\r\n\r\n        var utils = fabric.util, origParams = utils.saveObjectTransform(this),\r\n            originalGroup = this.group,\r\n            originalShadow = this.shadow, abs = Math.abs,\r\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\r\n        delete this.group;\r\n        if (options.withoutTransform) {\r\n          utils.resetObjectTransform(this);\r\n        }\r\n        if (options.withoutShadow) {\r\n          this.shadow = null;\r\n        }\r\n\r\n        var el = fabric.util.createCanvasElement(),\r\n            // skip canvas zoom and calculate with setCoords now.\r\n            boundingRect = this.getBoundingRect(true, true),\r\n            shadow = this.shadow, scaling,\r\n            shadowOffset = { x: 0, y: 0 }, shadowBlur,\r\n            width, height;\r\n\r\n        if (shadow) {\r\n          shadowBlur = shadow.blur;\r\n          if (shadow.nonScaling) {\r\n            scaling = { scaleX: 1, scaleY: 1 };\r\n          }\r\n          else {\r\n            scaling = this.getObjectScaling();\r\n          }\r\n          // consider non scaling shadow.\r\n          shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * (abs(scaling.scaleX));\r\n          shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * (abs(scaling.scaleY));\r\n        }\r\n        width = boundingRect.width + shadowOffset.x;\r\n        height = boundingRect.height + shadowOffset.y;\r\n        // if the current width/height is not an integer\r\n        // we need to make it so.\r\n        el.width = Math.ceil(width);\r\n        el.height = Math.ceil(height);\r\n        var canvas = new fabric.StaticCanvas(el, {\r\n          enableRetinaScaling: false,\r\n          renderOnAddRemove: false,\r\n          skipOffscreen: false,\r\n        });\r\n        if (options.format === 'jpeg') {\r\n          canvas.backgroundColor = '#fff';\r\n        }\r\n        this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\r\n\r\n        var originalCanvas = this.canvas;\r\n        canvas.add(this);\r\n        var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\r\n        this.shadow = originalShadow;\r\n        this.canvas = originalCanvas;\r\n        if (originalGroup) {\r\n          this.group = originalGroup;\r\n        }\r\n        this.set(origParams).setCoords();\r\n        // canvas.dispose will call image.dispose that will nullify the elements\r\n        // since this canvas is a simple element for the process, we remove references\r\n        // to objects in this way in order to avoid object trashing.\r\n        canvas._objects = [];\r\n        canvas.dispose();\r\n        canvas = null;\r\n\r\n        return canvasEl;\r\n      },\r\n\r\n      /**\r\n       * Converts an object into a data-url-like string\r\n       * @param {Object} options Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       */\r\n      toDataURL: function(options) {\r\n        options || (options = { });\r\n        return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\r\n      },\r\n\r\n      /**\r\n       * Returns true if specified type is identical to the type of an instance\r\n       * @param {String} type Type to check against\r\n       * @return {Boolean}\r\n       */\r\n      isType: function(type) {\r\n        return this.type === type;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance (is 1 unless subclassed)\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n       * Returns a JSON representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} JSON\r\n       */\r\n      toJSON: function(propertiesToInclude) {\r\n        // delegate, not alias\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Sets gradient (fill or stroke) of an object\r\n       * percentages for x1,x2,y1,y2,r1,r2 together with gradientUnits 'pixels', are not supported.\r\n       * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\r\n       * @param {String} property Property name 'stroke' or 'fill'\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.type] Type of gradient 'radial' or 'linear'\r\n       * @param {Number} [options.x1=0] x-coordinate of start point\r\n       * @param {Number} [options.y1=0] y-coordinate of start point\r\n       * @param {Number} [options.x2=0] x-coordinate of end point\r\n       * @param {Number} [options.y2=0] y-coordinate of end point\r\n       * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\r\n       * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\r\n       * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\r\n       * @param {Object} [options.gradientTransform] transformMatrix for gradient\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.4.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\r\n       * @example <caption>Set linear gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'linear',\r\n       *   x1: -object.width / 2,\r\n       *   y1: 0,\r\n       *   x2: object.width / 2,\r\n       *   y2: 0,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       * @example <caption>Set radial gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'radial',\r\n       *   x1: 0,\r\n       *   y1: 0,\r\n       *   x2: 0,\r\n       *   y2: 0,\r\n       *   r1: object.width / 2,\r\n       *   r2: 10,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setGradient: function(property, options) {\r\n        options || (options = { });\r\n\r\n        var gradient = { colorStops: [] };\r\n\r\n        gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\r\n        gradient.coords = {\r\n          x1: options.x1,\r\n          y1: options.y1,\r\n          x2: options.x2,\r\n          y2: options.y2\r\n        };\r\n        gradient.gradientUnits = options.gradientUnits || 'pixels';\r\n        if (options.r1 || options.r2) {\r\n          gradient.coords.r1 = options.r1;\r\n          gradient.coords.r2 = options.r2;\r\n        }\r\n\r\n        gradient.gradientTransform = options.gradientTransform;\r\n        fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\r\n\r\n        return this.set(property, fabric.Gradient.forObject(this, gradient));\r\n      },\r\n\r\n      /**\r\n       * Sets pattern fill of an object\r\n       * @param {Object} options Options object\r\n       * @param {(String|HTMLImageElement)} options.source Pattern source\r\n       * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\r\n       * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\r\n       * @param {Function} [callback] Callback to invoke when image set as a pattern\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.5.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\r\n       * @example <caption>Set pattern</caption>\r\n       * object.setPatternFill({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat'\r\n       * },canvas.renderAll.bind(canvas));\r\n       */\r\n      setPatternFill: function(options, callback) {\r\n        return this.set('fill', new fabric.Pattern(options, callback));\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.Object#shadow|shadow} of an object\r\n       * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n       * @param {String} [options.color=rgb(0,0,0)] Shadow color\r\n       * @param {Number} [options.blur=0] Shadow blur\r\n       * @param {Number} [options.offsetX=0] Shadow horizontal offset\r\n       * @param {Number} [options.offsetY=0] Shadow vertical offset\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.5.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\r\n       * @example <caption>Set shadow with string notation</caption>\r\n       * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\r\n       * canvas.renderAll();\r\n       * @example <caption>Set shadow with object notation</caption>\r\n       * object.setShadow({\r\n       *   color: 'red',\r\n       *   blur: 10,\r\n       *   offsetX: 20,\r\n       *   offsetY: 20\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setShadow: function(options) {\r\n        return this.set('shadow', options ? new fabric.Shadow(options) : null);\r\n      },\r\n\r\n      /**\r\n       * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\r\n       * @param {String} color Color value\r\n       * @return {fabric.Object} thisArg\r\n       * @deprecated since 3.5.0\r\n       * @chainable\r\n       */\r\n      setColor: function(color) {\r\n        this.set('fill', color);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets \"angle\" of an instance with centered rotation\r\n       * @param {Number} angle Angle value (in degrees)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      rotate: function(angle) {\r\n        var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._setOriginToCenter();\r\n        }\r\n\r\n        this.set('angle', angle);\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._resetOrigin();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerH: function () {\r\n        this.canvas && this.canvas.centerObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterH: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerV: function () {\r\n        this.canvas && this.canvas.centerObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterV: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally on canvas to which is was added last\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      center: function () {\r\n        this.canvas && this.canvas.centerObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenter: function () {\r\n        this.canvas && this.canvas.viewportCenterObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a pointer relative to an object\r\n       * @param {Event} e Event to operate upon\r\n       * @param {Object} [pointer] Pointer to operate upon (instead of event)\r\n       * @return {Object} Coordinates of a pointer (x, y)\r\n       */\r\n      getLocalPointer: function(e, pointer) {\r\n        pointer = pointer || this.canvas.getPointer(e);\r\n        var pClicked = new fabric.Point(pointer.x, pointer.y),\r\n            objectLeftTop = this._getLeftTopCoords();\r\n        if (this.angle) {\r\n          pClicked = fabric.util.rotatePoint(\r\n            pClicked, objectLeftTop, degreesToRadians(-this.angle));\r\n        }\r\n        return {\r\n          x: pClicked.x - objectLeftTop.x,\r\n          y: pClicked.y - objectLeftTop.y\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Sets canvas globalCompositeOperation for specific object\r\n       * custom composition operation for the particular object can be specified using globalCompositeOperation property\r\n       * @param {CanvasRenderingContext2D} ctx Rendering canvas context\r\n       */\r\n      _setupCompositeOperation: function (ctx) {\r\n        if (this.globalCompositeOperation) {\r\n          ctx.globalCompositeOperation = this.globalCompositeOperation;\r\n        }\r\n      }\r\n    });\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\r\n\r\n    extend(fabric.Object.prototype, fabric.Observable);\r\n\r\n    /**\r\n     * Defines the number of fraction digits to use when serializing object values.\r\n     * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @constant\r\n     * @type Number\r\n     */\r\n    fabric.Object.NUM_FRACTION_DIGITS = 2;\r\n\r\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\r\n      var klass = fabric[className];\r\n      object = clone(object, true);\r\n      fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\r\n        if (typeof patterns[0] !== 'undefined') {\r\n          object.fill = patterns[0];\r\n        }\r\n        if (typeof patterns[1] !== 'undefined') {\r\n          object.stroke = patterns[1];\r\n        }\r\n        fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\r\n          object.clipPath = enlivedProps[0];\r\n          var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\r\n          callback && callback(instance);\r\n        });\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Unique id used internally when creating SVG elements\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @type Number\r\n     */\r\n    fabric.Object.__uid = 0;\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        originXOffset = {\r\n          left: -0.5,\r\n          center: 0,\r\n          right: 0.5\r\n        },\r\n        originYOffset = {\r\n          top: -0.5,\r\n          center: 0,\r\n          bottom: 0.5\r\n        };\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Translates the coordinates from a set of origin to another (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\r\n        var x = point.x,\r\n            y = point.y,\r\n            offsetX, offsetY, dim;\r\n\r\n        if (typeof fromOriginX === 'string') {\r\n          fromOriginX = originXOffset[fromOriginX];\r\n        }\r\n        else {\r\n          fromOriginX -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginX === 'string') {\r\n          toOriginX = originXOffset[toOriginX];\r\n        }\r\n        else {\r\n          toOriginX -= 0.5;\r\n        }\r\n\r\n        offsetX = toOriginX - fromOriginX;\r\n\r\n        if (typeof fromOriginY === 'string') {\r\n          fromOriginY = originYOffset[fromOriginY];\r\n        }\r\n        else {\r\n          fromOriginY -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginY === 'string') {\r\n          toOriginY = originYOffset[toOriginY];\r\n        }\r\n        else {\r\n          toOriginY -= 0.5;\r\n        }\r\n\r\n        offsetY = toOriginY - fromOriginY;\r\n\r\n        if (offsetX || offsetY) {\r\n          dim = this._getTransformedDimensions();\r\n          x = point.x + offsetX * dim.x;\r\n          y = point.y + offsetY * dim.y;\r\n        }\r\n\r\n        return new fabric.Point(x, y);\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToCenterPoint: function(point, originX, originY) {\r\n        var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} center The point which corresponds to center of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToOriginPoint: function(center, originX, originY) {\r\n        var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Returns the real center coordinates of the object\r\n       * @return {fabric.Point}\r\n       */\r\n      getCenterPoint: function() {\r\n        var leftTop = new fabric.Point(this.left, this.top);\r\n        return this.translateToCenterPoint(leftTop, this.originX, this.originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the coordinates of the object based on center coordinates\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @return {fabric.Point}\r\n       */\r\n      // getOriginPoint: function(center) {\r\n      //   return this.translateToOriginPoint(center, this.originX, this.originY);\r\n      // },\r\n\r\n      /**\r\n       * Returns the coordinates of the object as if it has a different origin\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      getPointByOrigin: function(originX, originY) {\r\n        var center = this.getCenterPoint();\r\n        return this.translateToOriginPoint(center, originX, originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in local coordinates\r\n       * @param {fabric.Point} point The point relative to the global coordinate system\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      toLocalPoint: function(point, originX, originY) {\r\n        var center = this.getCenterPoint(),\r\n            p, p2;\r\n\r\n        if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\r\n          p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        }\r\n        else {\r\n          p = new fabric.Point(this.left, this.top);\r\n        }\r\n\r\n        p2 = new fabric.Point(point.x, point.y);\r\n        if (this.angle) {\r\n          p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\r\n        }\r\n        return p2.subtractEquals(p);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in global coordinates\r\n       * @param {fabric.Point} The point relative to the local coordinate system\r\n       * @return {fabric.Point}\r\n       */\r\n      // toGlobalPoint: function(point) {\r\n      //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\r\n      // },\r\n\r\n      /**\r\n       * Sets the position of the object taking into consideration the object's origin\r\n       * @param {fabric.Point} pos The new position of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {void}\r\n       */\r\n      setPositionByOrigin: function(pos, originX, originY) {\r\n        var center = this.translateToCenterPoint(pos, originX, originY),\r\n            position = this.translateToOriginPoint(center, this.originX, this.originY);\r\n        this.set('left', position.x);\r\n        this.set('top', position.y);\r\n      },\r\n\r\n      /**\r\n       * @param {String} to One of 'left', 'center', 'right'\r\n       */\r\n      adjustPosition: function(to) {\r\n        var angle = degreesToRadians(this.angle),\r\n            hypotFull = this.getScaledWidth(),\r\n            xFull = fabric.util.cos(angle) * hypotFull,\r\n            yFull = fabric.util.sin(angle) * hypotFull,\r\n            offsetFrom, offsetTo;\r\n\r\n        //TODO: this function does not consider mixed situation like top, center.\r\n        if (typeof this.originX === 'string') {\r\n          offsetFrom = originXOffset[this.originX];\r\n        }\r\n        else {\r\n          offsetFrom = this.originX - 0.5;\r\n        }\r\n        if (typeof to === 'string') {\r\n          offsetTo = originXOffset[to];\r\n        }\r\n        else {\r\n          offsetTo = to - 0.5;\r\n        }\r\n        this.left += xFull * (offsetTo - offsetFrom);\r\n        this.top += yFull * (offsetTo - offsetFrom);\r\n        this.setCoords();\r\n        this.originX = to;\r\n      },\r\n\r\n      /**\r\n       * Sets the origin/position of the object to it's center point\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _setOriginToCenter: function() {\r\n        this._originalOriginX = this.originX;\r\n        this._originalOriginY = this.originY;\r\n\r\n        var center = this.getCenterPoint();\r\n\r\n        this.originX = 'center';\r\n        this.originY = 'center';\r\n\r\n        this.left = center.x;\r\n        this.top = center.y;\r\n      },\r\n\r\n      /**\r\n       * Resets the origin/position of the object to it's original origin\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _resetOrigin: function() {\r\n        var originPoint = this.translateToOriginPoint(\r\n          this.getCenterPoint(),\r\n          this._originalOriginX,\r\n          this._originalOriginY);\r\n\r\n        this.originX = this._originalOriginX;\r\n        this.originY = this._originalOriginY;\r\n\r\n        this.left = originPoint.x;\r\n        this.top = originPoint.y;\r\n\r\n        this._originalOriginX = null;\r\n        this._originalOriginY = null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getLeftTopCoords: function() {\r\n        return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function getCoords(coords) {\r\n      return [\r\n        new fabric.Point(coords.tl.x, coords.tl.y),\r\n        new fabric.Point(coords.tr.x, coords.tr.y),\r\n        new fabric.Point(coords.br.x, coords.br.y),\r\n        new fabric.Point(coords.bl.x, coords.bl.y)\r\n      ];\r\n    }\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        multiplyMatrices = fabric.util.multiplyTransformMatrices,\r\n        transformPoint = fabric.util.transformPoint;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Describe object's corner position in canvas element coordinates.\r\n       * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\r\n       * each property is an object with x, y and corner.\r\n       * The `corner` property contains in a similar manner the 4 points of the\r\n       * interactive area of the corner.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords;\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      oCoords: null,\r\n\r\n      /**\r\n       * Describe object's corner position in canvas object absolute coordinates\r\n       * properties are tl,tr,bl,br and describe the four main corner.\r\n       * each property is an object with x, y, instance of Fabric.Point.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, top, left.\r\n       * Those coordinates are useful to understand where an object is. They get updated\r\n       * with oCoords but they do not need to be updated when zoom or panning change.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords(true);\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      aCoords: null,\r\n\r\n      /**\r\n       * storage for object transform matrix\r\n       */\r\n      ownMatrixCache: null,\r\n\r\n      /**\r\n       * storage for object full transform matrix\r\n       */\r\n      matrixCache: null,\r\n\r\n      /**\r\n       * return correct set of coordinates for intersection\r\n       */\r\n      getCoords: function(absolute, calculate) {\r\n        if (!this.oCoords) {\r\n          this.setCoords();\r\n        }\r\n        var coords = absolute ? this.aCoords : this.oCoords;\r\n        return getCoords(calculate ? this.calcCoords(absolute) : coords);\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with an area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with an area formed by 2 points\r\n       */\r\n      intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate),\r\n            intersection = fabric.Intersection.intersectPolygonRectangle(\r\n              coords,\r\n              pointTL,\r\n              pointBR\r\n            );\r\n        return intersection.status === 'Intersection';\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with another object\r\n       */\r\n      intersectsWithObject: function(other, absolute, calculate) {\r\n        var intersection = fabric.Intersection.intersectPolygonPolygon(\r\n          this.getCoords(absolute, calculate),\r\n          other.getCoords(absolute, calculate)\r\n        );\r\n\r\n        return intersection.status === 'Intersection'\r\n          || other.isContainedWithinObject(this, absolute, calculate)\r\n          || this.isContainedWithinObject(other, absolute, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area of another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area of another object\r\n       */\r\n      isContainedWithinObject: function(other, absolute, calculate) {\r\n        var points = this.getCoords(absolute, calculate),\r\n            i = 0, lines = other._getImageLines(\r\n              calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\r\n            );\r\n        for (; i < 4; i++) {\r\n          if (!other.containsPoint(points[i], lines)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area formed by 2 points\r\n       */\r\n      isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var boundingRect = this.getBoundingRect(absolute, calculate);\r\n\r\n        return (\r\n          boundingRect.left >= pointTL.x &&\r\n          boundingRect.left + boundingRect.width <= pointBR.x &&\r\n          boundingRect.top >= pointTL.y &&\r\n          boundingRect.top + boundingRect.height <= pointBR.y\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Checks if point is inside the object\r\n       * @param {fabric.Point} point Point to check against\r\n       * @param {Object} [lines] object returned from @method _getImageLines\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if point is inside the object\r\n       */\r\n      containsPoint: function(point, lines, absolute, calculate) {\r\n        var lines = lines || this._getImageLines(\r\n              calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\r\n            ),\r\n            xPoints = this._findCrossPoints(point, lines);\r\n\r\n        // if xPoints is odd then point is inside the object\r\n        return (xPoints !== 0 && xPoints % 2 === 1);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is contained within the canvas with current viewportTransform\r\n       * the check is done stopping at first point that appears on screen\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\r\n       * @return {Boolean} true if object is fully or partially contained within canvas\r\n       */\r\n      isOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        var points = this.getCoords(true, calculate), point;\r\n        for (var i = 0; i < 4; i++) {\r\n          point = points[i];\r\n          if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\r\n            return true;\r\n          }\r\n        }\r\n        // no points on screen, check intersection with absolute coordinates\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if the object contains the midpoint between canvas extremities\r\n       * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\r\n       * @private\r\n       * @param {Fabric.Point} pointTL Top Left point\r\n       * @param {Fabric.Point} pointBR Top Right point\r\n       * @param {Boolean} calculate use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if the object contains the point\r\n       */\r\n      _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\r\n        // worst case scenario the object is so big that contains the screen\r\n        var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\r\n        if (this.containsPoint(centerPoint, null, true, calculate)) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is partially contained within the canvas with current viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is partially contained within canvas\r\n       */\r\n      isPartiallyOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Method that returns an object with the object edges in it, given the coordinates of the corners\r\n       * @private\r\n       * @param {Object} oCoords Coordinates of the object corners\r\n       */\r\n      _getImageLines: function(oCoords) {\r\n        return {\r\n          topline: {\r\n            o: oCoords.tl,\r\n            d: oCoords.tr\r\n          },\r\n          rightline: {\r\n            o: oCoords.tr,\r\n            d: oCoords.br\r\n          },\r\n          bottomline: {\r\n            o: oCoords.br,\r\n            d: oCoords.bl\r\n          },\r\n          leftline: {\r\n            o: oCoords.bl,\r\n            d: oCoords.tl\r\n          }\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Helper method to determine how many cross points are between the 4 object edges\r\n       * and the horizontal line determined by a point on canvas\r\n       * @private\r\n       * @param {fabric.Point} point Point to check\r\n       * @param {Object} lines Coordinates of the object being evaluated\r\n       */\r\n      // remove yi, not used but left code here just in case.\r\n      _findCrossPoints: function(point, lines) {\r\n        var b1, b2, a1, a2, xi, // yi,\r\n            xcount = 0,\r\n            iLine;\r\n\r\n        for (var lineKey in lines) {\r\n          iLine = lines[lineKey];\r\n          // optimisation 1: line below point. no cross\r\n          if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 2: line above point. no cross\r\n          if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 3: vertical line case\r\n          if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\r\n            xi = iLine.o.x;\r\n            // yi = point.y;\r\n          }\r\n          // calculate the intersection point\r\n          else {\r\n            b1 = 0;\r\n            b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\r\n            a1 = point.y - b1 * point.x;\r\n            a2 = iLine.o.y - b2 * iLine.o.x;\r\n\r\n            xi = -(a1 - a2) / (b1 - b2);\r\n            // yi = a1 + b1 * xi;\r\n          }\r\n          // dont count xi < point.x cases\r\n          if (xi >= point.x) {\r\n            xcount += 1;\r\n          }\r\n          // optimisation 4: specific for square images\r\n          if (xcount === 2) {\r\n            break;\r\n          }\r\n        }\r\n        return xcount;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of object's bounding rectangle (left, top, width, height)\r\n       * the box is intended as aligned to axis of canvas.\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      getBoundingRect: function(absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate);\r\n        return fabric.util.makeBoundingBoxFromPoints(coords);\r\n      },\r\n\r\n      /**\r\n       * Returns width of an object's bounding box counting transformations\r\n       * before 2.0 it was named getWidth();\r\n       * @return {Number} width value\r\n       */\r\n      getScaledWidth: function() {\r\n        return this._getTransformedDimensions().x;\r\n      },\r\n\r\n      /**\r\n       * Returns height of an object bounding box counting transformations\r\n       * before 2.0 it was named getHeight();\r\n       * @return {Number} height value\r\n       */\r\n      getScaledHeight: function() {\r\n        return this._getTransformedDimensions().y;\r\n      },\r\n\r\n      /**\r\n       * Makes sure the scale is valid and modifies it if necessary\r\n       * @private\r\n       * @param {Number} value\r\n       * @return {Number}\r\n       */\r\n      _constrainScale: function(value) {\r\n        if (Math.abs(value) < this.minScaleLimit) {\r\n          if (value < 0) {\r\n            return -this.minScaleLimit;\r\n          }\r\n          else {\r\n            return this.minScaleLimit;\r\n          }\r\n        }\r\n        else if (value === 0) {\r\n          return 0.0001;\r\n        }\r\n        return value;\r\n      },\r\n\r\n      /**\r\n       * Scales an object (equally by x and y)\r\n       * @param {Number} value Scale factor\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scale: function(value) {\r\n        this._set('scaleX', value);\r\n        this._set('scaleY', value);\r\n        return this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New width value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToWidth: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\r\n        return this.scale(value / this.width / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New height value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToHeight: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\r\n        return this.scale(value / this.height / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Calculates and returns the .coords of an object.\r\n       * @return {Object} Object with tl, tr, br, bl ....\r\n       * @chainable\r\n       */\r\n      calcCoords: function(absolute) {\r\n        var rotateMatrix = this._calcRotateMatrix(),\r\n            translateMatrix = this._calcTranslateMatrix(),\r\n            startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\r\n            vpt = this.getViewportTransform(),\r\n            finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\r\n            dim = this._getTransformedDimensions(),\r\n            w = dim.x / 2, h = dim.y / 2,\r\n            tl = transformPoint({ x: -w, y: -h }, finalMatrix),\r\n            tr = transformPoint({ x: w, y: -h }, finalMatrix),\r\n            bl = transformPoint({ x: -w, y: h }, finalMatrix),\r\n            br = transformPoint({ x: w, y: h }, finalMatrix);\r\n        if (!absolute) {\r\n          var padding = this.padding, angle = degreesToRadians(this.angle),\r\n              cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\r\n              cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\r\n              cosPMinusSinP = cosP - sinP;\r\n          if (padding) {\r\n            tl.x -= cosPMinusSinP;\r\n            tl.y -= cosPSinP;\r\n            tr.x += cosPSinP;\r\n            tr.y -= cosPMinusSinP;\r\n            bl.x -= cosPSinP;\r\n            bl.y += cosPMinusSinP;\r\n            br.x += cosPMinusSinP;\r\n            br.y += cosPSinP;\r\n          }\r\n          var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\r\n              mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\r\n              mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\r\n              mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\r\n              mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\r\n        }\r\n\r\n        // if (!absolute) {\r\n        //   var canvas = this.canvas;\r\n        //   setTimeout(function() {\r\n        //     canvas.contextTop.clearRect(0, 0, 700, 700);\r\n        //     canvas.contextTop.fillStyle = 'green';\r\n        //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\r\n        //   }, 50);\r\n        // }\r\n\r\n        var coords = {\r\n          // corners\r\n          tl: tl, tr: tr, br: br, bl: bl,\r\n        };\r\n        if (!absolute) {\r\n          // middle\r\n          coords.ml = ml;\r\n          coords.mt = mt;\r\n          coords.mr = mr;\r\n          coords.mb = mb;\r\n          // rotating point\r\n          coords.mtr = mtr;\r\n        }\r\n        return coords;\r\n      },\r\n\r\n      /**\r\n       * Sets corner position coordinates based on current angle, width and height.\r\n       * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\r\n       * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\r\n       * @param {Boolean} [skipAbsolute] skip calculation of aCoords, useful in setViewportTransform\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setCoords: function(ignoreZoom, skipAbsolute) {\r\n        this.oCoords = this.calcCoords(ignoreZoom);\r\n        if (!skipAbsolute) {\r\n          this.aCoords = this.calcCoords(true);\r\n        }\r\n\r\n        // set coordinates of the draggable boxes in the corners used to scale/rotate the image\r\n        ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * calculate rotation matrix of an object\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcRotateMatrix: function() {\r\n        return fabric.util.calcRotateMatrix(this);\r\n      },\r\n\r\n      /**\r\n       * calculate the translation matrix for an object transform\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcTranslateMatrix: function() {\r\n        var center = this.getCenterPoint();\r\n        return [1, 0, 0, 1, center.x, center.y];\r\n      },\r\n\r\n      transformMatrixKey: function(skipGroup) {\r\n        var sep = '_', prefix = '';\r\n        if (!skipGroup && this.group) {\r\n          prefix = this.group.transformMatrixKey(skipGroup) + sep;\r\n        };\r\n        return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\r\n          sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\r\n          sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\r\n      },\r\n\r\n      /**\r\n       * calculate transform matrix that represents the current transformations from the\r\n       * object's properties.\r\n       * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\r\n       * @return {Array} transform matrix for the object\r\n       */\r\n      calcTransformMatrix: function(skipGroup) {\r\n        if (skipGroup) {\r\n          return this.calcOwnMatrix();\r\n        }\r\n        var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var matrix = this.calcOwnMatrix();\r\n        if (this.group) {\r\n          matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\r\n        }\r\n        cache.key = key;\r\n        cache.value = matrix;\r\n        return matrix;\r\n      },\r\n\r\n      /**\r\n       * calculate transform matrix that represents the current transformations from the\r\n       * object's properties, this matrix does not include the group transformation\r\n       * @return {Array} transform matrix for the object\r\n       */\r\n      calcOwnMatrix: function() {\r\n        var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var tMatrix = this._calcTranslateMatrix();\r\n        this.translateX = tMatrix[4];\r\n        this.translateY = tMatrix[5];\r\n        cache.key = key;\r\n        cache.value = fabric.util.composeMatrix(this);\r\n        return cache.value;\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       * @deprecated since 3.4.0, please use fabric.util._calcDimensionsTransformMatrix\r\n       * not including or including flipX, flipY to emulate the flipping boolean\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\r\n        return fabric.util.calcDimensionsMatrix({\r\n          skewX: skewX,\r\n          skewY: skewY,\r\n          scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),\r\n          scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)\r\n        });\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var strokeWidth = this.strokeWidth,\r\n            w = this.width + strokeWidth,\r\n            h = this.height + strokeWidth;\r\n        return { x: w, y: h };\r\n      },\r\n\r\n      /*\r\n       * Calculate object bounding box dimensions from its properties scale, skew.\r\n       * The skewX and skewY parameters are used in the skewing logic path and\r\n       * do not provide something useful to common use cases.\r\n       * @param {Number} [skewX], a value to override current skewX\r\n       * @param {Number} [skewY], a value to override current skewY\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getTransformedDimensions: function(skewX, skewY) {\r\n        if (typeof skewX === 'undefined') {\r\n          skewX = this.skewX;\r\n        }\r\n        if (typeof skewY === 'undefined') {\r\n          skewY = this.skewY;\r\n        }\r\n        var dimensions = this._getNonTransformedDimensions(), dimX, dimY,\r\n            noSkew = skewX === 0 && skewY === 0;\r\n\r\n        if (this.strokeUniform) {\r\n          dimX = this.width;\r\n          dimY = this.height;\r\n        }\r\n        else {\r\n          dimX = dimensions.x;\r\n          dimY = dimensions.y;\r\n        }\r\n        if (noSkew) {\r\n          return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\r\n        }\r\n        else {\r\n          dimX /= 2;\r\n          dimY /= 2;\r\n        }\r\n        var points = [\r\n              {\r\n                x: -dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: -dimX,\r\n                y: dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: dimY\r\n              }],\r\n            transformMatrix = fabric.util.calcDimensionsMatrix({\r\n              scaleX: this.scaleX,\r\n              scaleY: this.scaleY,\r\n              skewX: skewX,\r\n              skewY: skewY,\r\n            }),\r\n            bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\r\n        return this._finalizeDimensions(bbox.width, bbox.height);\r\n      },\r\n\r\n      /*\r\n       * Calculate object bounding box dimensions from its properties scale, skew.\r\n       * @param Number width width of the bbox\r\n       * @param Number height height of the bbox\r\n       * @private\r\n       * @return {Object} .x finalized width dimension\r\n       * @return {Object} .y finalized height dimension\r\n       */\r\n      _finalizeDimensions: function(width, height) {\r\n        return this.strokeUniform ?\r\n          { x: width + this.strokeWidth, y: height + this.strokeWidth }\r\n          :\r\n          { x: width, y: height };\r\n      },\r\n      /*\r\n       * Calculate object dimensions for controls, including padding and canvas zoom.\r\n       * private\r\n       */\r\n      _calculateCurrentDimensions: function()  {\r\n        var vpt = this.getViewportTransform(),\r\n            dim = this._getTransformedDimensions(),\r\n            p = fabric.util.transformPoint(dim, vpt, true);\r\n\r\n        return p.scalarAdd(2 * this.padding);\r\n      },\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Moves an object to the bottom of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendToBack: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.sendToBack(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to the top of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringToFront: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.bringToFront(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object down in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendBackwards: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.sendBackwards(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object up in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringForward: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.bringForward(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to specified level in stack of drawn objects\r\n     * @param {Number} index New position of object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    moveTo: function(index) {\r\n      if (this.group && this.group.type !== 'activeSelection') {\r\n        fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\r\n      }\r\n      else {\r\n        this.canvas.moveTo(this, index);\r\n      }\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    function getSvgColorString(prop, value) {\r\n      if (!value) {\r\n        return prop + ': none; ';\r\n      }\r\n      else if (value.toLive) {\r\n        return prop + ': url(#SVGID_' + value.id + '); ';\r\n      }\r\n      else {\r\n        var color = new fabric.Color(value),\r\n            str = prop + ': ' + color.toRgb() + '; ',\r\n            opacity = color.getAlpha();\r\n        if (opacity !== 1) {\r\n          //change the color in rgb + opacity\r\n          str += prop + '-opacity: ' + opacity.toString() + '; ';\r\n        }\r\n        return str;\r\n      }\r\n    }\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n\r\n        var fillRule = this.fillRule ? this.fillRule : 'nonzero',\r\n            strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\r\n            strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\r\n            strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\r\n            strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\r\n            strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\r\n            strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\r\n            opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\r\n            visibility = this.visible ? '' : ' visibility: hidden;',\r\n            filter = skipShadow ? '' : this.getSvgFilter(),\r\n            fill = getSvgColorString('fill', this.fill),\r\n            stroke = getSvgColorString('stroke', this.stroke);\r\n\r\n        return [\r\n          stroke,\r\n          'stroke-width: ', strokeWidth, '; ',\r\n          'stroke-dasharray: ', strokeDashArray, '; ',\r\n          'stroke-linecap: ', strokeLineCap, '; ',\r\n          'stroke-dashoffset: ', strokeDashOffset, '; ',\r\n          'stroke-linejoin: ', strokeLineJoin, '; ',\r\n          'stroke-miterlimit: ', strokeMiterLimit, '; ',\r\n          fill,\r\n          'fill-rule: ', fillRule, '; ',\r\n          'opacity: ', opacity, ';',\r\n          filter,\r\n          visibility\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\r\n       * @return {String}\r\n       */\r\n      getSvgSpanStyles: function(style, useWhiteSpace) {\r\n        var term = '; ';\r\n        var fontFamily = style.fontFamily ?\r\n          'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\r\n            '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\r\n        var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\r\n            fontFamily = fontFamily,\r\n            fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\r\n            fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\r\n            fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\r\n            fill = style.fill ? getSvgColorString('fill', style.fill) : '',\r\n            stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\r\n            textDecoration = this.getSvgTextDecoration(style),\r\n            deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\r\n        if (textDecoration) {\r\n          textDecoration = 'text-decoration: ' + textDecoration + term;\r\n        }\r\n\r\n        return [\r\n          stroke,\r\n          strokeWidth,\r\n          fontFamily,\r\n          fontSize,\r\n          fontStyle,\r\n          fontWeight,\r\n          textDecoration,\r\n          fill,\r\n          deltaY,\r\n          useWhiteSpace ? 'white-space: pre; ' : ''\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns text-decoration property for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @return {String}\r\n       */\r\n      getSvgTextDecoration: function(style) {\r\n        if ('overline' in style || 'underline' in style || 'linethrough' in style) {\r\n          return (style.overline ? 'overline ' : '') +\r\n            (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\r\n        }\r\n        return '';\r\n      },\r\n\r\n      /**\r\n       * Returns filter for svg shadow\r\n       * @return {String}\r\n       */\r\n      getSvgFilter: function() {\r\n        return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\r\n      },\r\n\r\n      /**\r\n       * Returns id attribute for svg output\r\n       * @return {String}\r\n       */\r\n      getSvgCommons: function() {\r\n        return [\r\n          this.id ? 'id=\"' + this.id + '\" ' : '',\r\n          this.clipPath ? 'clip-path=\"url(#' + this.clipPath.clipPathId + ')\" ' : '',\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export\r\n       * @param {Boolean} use the full transform or the single object one.\r\n       * @return {String}\r\n       */\r\n      getSvgTransform: function(full, additionalTransform) {\r\n        var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\r\n            svgTransform = 'transform=\"' + fabric.util.matrixToSVG(transform);\r\n        return svgTransform +\r\n          (additionalTransform || '') + this.getSvgTransformMatrix() + '\" ';\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export from the transform matrix of single elements\r\n       * @return {String}\r\n       */\r\n      getSvgTransformMatrix: function() {\r\n        return this.transformMatrix ? ' ' + fabric.util.matrixToSVG(this.transformMatrix) : '';\r\n      },\r\n\r\n      _setSVGBg: function(textBgRects) {\r\n        if (this.backgroundColor) {\r\n          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n          textBgRects.push(\r\n            '\\t\\t<rect ',\r\n            this._getFillAttributes(this.backgroundColor),\r\n            ' x=\"',\r\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\r\n            '\" y=\"',\r\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\r\n            '\" width=\"',\r\n            toFixed(this.width, NUM_FRACTION_DIGITS),\r\n            '\" height=\"',\r\n            toFixed(this.height, NUM_FRACTION_DIGITS),\r\n            '\"></rect>\\n');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        return this._createBaseSVGMarkup(this._toSVG(reviver), { reviver: reviver });\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        return '\\t' + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), { reviver: reviver });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createBaseClipPathSVGMarkup: function(objectMarkup, options) {\r\n        options = options || {};\r\n        var reviver = options.reviver,\r\n            additionalTransform = options.additionalTransform || '',\r\n            commonPieces = [\r\n              this.getSvgTransform(true, additionalTransform),\r\n              this.getSvgCommons(),\r\n            ].join(''),\r\n            // insert commons in the markup, style and svgCommons\r\n            index = objectMarkup.indexOf('COMMON_PARTS');\r\n        objectMarkup[index] = commonPieces;\r\n        return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createBaseSVGMarkup: function(objectMarkup, options) {\r\n        options = options || {};\r\n        var noStyle = options.noStyle,\r\n            reviver = options.reviver,\r\n            styleInfo = noStyle ? '' : 'style=\"' + this.getSvgStyles() + '\" ',\r\n            shadowInfo = options.withShadow ? 'style=\"' + this.getSvgFilter() + '\" ' : '',\r\n            clipPath = this.clipPath,\r\n            vectorEffect = this.strokeUniform ? 'vector-effect=\"non-scaling-stroke\" ' : '',\r\n            absoluteClipPath = clipPath && clipPath.absolutePositioned,\r\n            stroke = this.stroke, fill = this.fill, shadow = this.shadow,\r\n            commonPieces, markup = [], clipPathMarkup,\r\n            // insert commons in the markup, style and svgCommons\r\n            index = objectMarkup.indexOf('COMMON_PARTS'),\r\n            additionalTransform = options.additionalTransform;\r\n        if (clipPath) {\r\n          clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\r\n          clipPathMarkup = '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\r\n            clipPath.toClipPathSVG(reviver) +\r\n            '</clipPath>\\n';\r\n        }\r\n        if (absoluteClipPath) {\r\n          markup.push(\r\n            '<g ', shadowInfo, this.getSvgCommons(), ' >\\n'\r\n          );\r\n        }\r\n        markup.push(\r\n          '<g ',\r\n          this.getSvgTransform(false),\r\n          !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\r\n          ' >\\n'\r\n        );\r\n        commonPieces = [\r\n          styleInfo,\r\n          vectorEffect,\r\n          noStyle ? '' : this.addPaintOrder(), ' ',\r\n          additionalTransform ? 'transform=\"' + additionalTransform + '\" ' : '',\r\n        ].join('');\r\n        objectMarkup[index] = commonPieces;\r\n        if (fill && fill.toLive) {\r\n          markup.push(fill.toSVG(this));\r\n        }\r\n        if (stroke && stroke.toLive) {\r\n          markup.push(stroke.toSVG(this));\r\n        }\r\n        if (shadow) {\r\n          markup.push(shadow.toSVG(this));\r\n        }\r\n        if (clipPath) {\r\n          markup.push(clipPathMarkup);\r\n        }\r\n        markup.push(objectMarkup.join(''));\r\n        markup.push('</g>\\n');\r\n        absoluteClipPath && markup.push('</g>\\n');\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n\r\n      addPaintOrder: function() {\r\n        return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\r\n      }\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function() {\r\n\r\n    var extend = fabric.util.object.extend,\r\n        originalSet = 'stateProperties';\r\n\r\n    /*\r\n      Depends on `stateProperties`\r\n    */\r\n    function saveProps(origin, destination, props) {\r\n      var tmpObj = { }, deep = true;\r\n      props.forEach(function(prop) {\r\n        tmpObj[prop] = origin[prop];\r\n      });\r\n      extend(origin[destination], tmpObj, deep);\r\n    }\r\n\r\n    function _isEqual(origValue, currentValue, firstPass) {\r\n      if (origValue === currentValue) {\r\n        // if the objects are identical, return\r\n        return true;\r\n      }\r\n      else if (Array.isArray(origValue)) {\r\n        if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = origValue.length; i < len; i++) {\r\n          if (!_isEqual(origValue[i], currentValue[i])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      else if (origValue && typeof origValue === 'object') {\r\n        var keys = Object.keys(origValue), key;\r\n        if (!currentValue ||\r\n            typeof currentValue !== 'object' ||\r\n            (!firstPass && keys.length !== Object.keys(currentValue).length)\r\n        ) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = keys.length; i < len; i++) {\r\n          key = keys[i];\r\n          // since clipPath is in the statefull cache list and the clipPath objects\r\n          // would be iterated as an object, this would lead to possible infinite recursion\r\n          if (key === 'canvas') {\r\n            continue;\r\n          }\r\n          if (!_isEqual(origValue[key], currentValue[key])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Returns true if object state (one of its state properties) was changed\r\n       * @param {String} [propertySet] optional name for the set of property we want to save\r\n       * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\r\n       */\r\n      hasStateChanged: function(propertySet) {\r\n        propertySet = propertySet || originalSet;\r\n        var dashedPropertySet = '_' + propertySet;\r\n        if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\r\n          return true;\r\n        }\r\n        return !_isEqual(this[dashedPropertySet], this, true);\r\n      },\r\n\r\n      /**\r\n       * Saves state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      saveState: function(options) {\r\n        var propertySet = options && options.propertySet || originalSet,\r\n            destination = '_' + propertySet;\r\n        if (!this[destination]) {\r\n          return this.setupState(options);\r\n        }\r\n        saveProps(this, destination, this[propertySet]);\r\n        if (options && options.stateProperties) {\r\n          saveProps(this, destination, options.stateProperties);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Setups state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      setupState: function(options) {\r\n        options = options || { };\r\n        var propertySet = options.propertySet || originalSet;\r\n        options.propertySet = propertySet;\r\n        this['_' + propertySet] = { };\r\n        this.saveState(options);\r\n        return this;\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * The object interactivity controls.\r\n       * @private\r\n       */\r\n      _controlsVisibility: null,\r\n\r\n      /**\r\n       * Determines which corner has been clicked\r\n       * @private\r\n       * @param {Object} pointer The pointer indicating the mouse position\r\n       * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\r\n       */\r\n      _findTargetCorner: function(pointer) {\r\n        // objects in group, anykind, are not self modificable,\r\n        // must not return an hovered corner.\r\n        if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\r\n          return false;\r\n        }\r\n\r\n        var ex = pointer.x,\r\n            ey = pointer.y,\r\n            xPoints,\r\n            lines;\r\n        this.__corner = 0;\r\n        for (var i in this.oCoords) {\r\n\r\n          if (!this.isControlVisible(i)) {\r\n            continue;\r\n          }\r\n\r\n          if (i === 'mtr' && !this.hasRotatingPoint) {\r\n            continue;\r\n          }\r\n\r\n          if (this.get('lockUniScaling') &&\r\n             (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\r\n            continue;\r\n          }\r\n\r\n          lines = this._getImageLines(this.oCoords[i].corner);\r\n\r\n          // debugging\r\n\r\n          // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\r\n\r\n          xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\r\n          if (xPoints !== 0 && xPoints % 2 === 1) {\r\n            this.__corner = i;\r\n            return i;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets the coordinates of the draggable boxes in the corners of\r\n       * the image used to scale/rotate it.\r\n       * @private\r\n       */\r\n      _setCornerCoords: function() {\r\n        var coords = this.oCoords,\r\n            newTheta = degreesToRadians(45 - this.angle),\r\n            /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\r\n            /* 0.707106 stands for sqrt(2)/2 */\r\n            cornerHypotenuse = this.cornerSize * 0.707106,\r\n            cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\r\n            sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\r\n            x, y;\r\n\r\n        for (var point in coords) {\r\n          x = coords[point].x;\r\n          y = coords[point].y;\r\n          coords[point].corner = {\r\n            tl: {\r\n              x: x - sinHalfOffset,\r\n              y: y - cosHalfOffset\r\n            },\r\n            tr: {\r\n              x: x + cosHalfOffset,\r\n              y: y - sinHalfOffset\r\n            },\r\n            bl: {\r\n              x: x - cosHalfOffset,\r\n              y: y + sinHalfOffset\r\n            },\r\n            br: {\r\n              x: x + sinHalfOffset,\r\n              y: y + cosHalfOffset\r\n            }\r\n          };\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a colored layer behind the object, inside its selection borders.\r\n       * Requires public options: padding, selectionBackgroundColor\r\n       * this function is called when the context is transformed\r\n       * has checks to be skipped when the object is on a staticCanvas\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawSelectionBackground: function(ctx) {\r\n        if (!this.selectionBackgroundColor ||\r\n          (this.canvas && !this.canvas.interactive) ||\r\n          (this.canvas && this.canvas._activeObject !== this)\r\n        ) {\r\n          return this;\r\n        }\r\n        ctx.save();\r\n        var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\r\n            vpt = this.canvas.viewportTransform;\r\n        ctx.translate(center.x, center.y);\r\n        ctx.scale(1 / vpt[0], 1 / vpt[3]);\r\n        ctx.rotate(degreesToRadians(this.angle));\r\n        ctx.fillStyle = this.selectionBackgroundColor;\r\n        ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBorders: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth,\r\n            drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            hasControls = typeof styleOverride.hasControls !== 'undefined' ?\r\n              styleOverride.hasControls : this.hasControls,\r\n            rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\r\n              styleOverride.rotatingPointOffset : this.rotatingPointOffset;\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\r\n\r\n          var rotateHeight = -height / 2;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, rotateHeight);\r\n          ctx.lineTo(0, rotateHeight - rotatingPointOffset);\r\n          ctx.stroke();\r\n        }\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box when it is inside a group.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {object} options object representing current object parameters\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBordersInGroup: function(ctx, options, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var p = this._getNonTransformedDimensions(),\r\n            matrix = fabric.util.composeMatrix({\r\n              scaleX: options.scaleX,\r\n              scaleY: options.scaleY,\r\n              skewX: options.skewX\r\n            }),\r\n            wh = fabric.util.transformPoint(p, matrix),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth;\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws corners of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: cornerSize, padding\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawControls: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            width = wh.x,\r\n            height = wh.y,\r\n            scaleOffset = styleOverride.cornerSize || this.cornerSize,\r\n            left = -(width + scaleOffset) / 2,\r\n            top = -(height + scaleOffset) / 2,\r\n            transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\r\n              styleOverride.transparentCorners : this.transparentCorners,\r\n            hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            methodName = transparentCorners ? 'stroke' : 'fill';\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\r\n        if (!this.transparentCorners) {\r\n          ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\r\n        }\r\n        this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\r\n\r\n        // top-left\r\n        this._drawControl('tl', ctx, methodName,\r\n          left,\r\n          top, styleOverride);\r\n\r\n        // top-right\r\n        this._drawControl('tr', ctx, methodName,\r\n          left + width,\r\n          top, styleOverride);\r\n\r\n        // bottom-left\r\n        this._drawControl('bl', ctx, methodName,\r\n          left,\r\n          top + height, styleOverride);\r\n\r\n        // bottom-right\r\n        this._drawControl('br', ctx, methodName,\r\n          left + width,\r\n          top + height, styleOverride);\r\n\r\n        if (!this.get('lockUniScaling')) {\r\n\r\n          // middle-top\r\n          this._drawControl('mt', ctx, methodName,\r\n            left + width / 2,\r\n            top, styleOverride);\r\n\r\n          // middle-bottom\r\n          this._drawControl('mb', ctx, methodName,\r\n            left + width / 2,\r\n            top + height, styleOverride);\r\n\r\n          // middle-right\r\n          this._drawControl('mr', ctx, methodName,\r\n            left + width,\r\n            top + height / 2, styleOverride);\r\n\r\n          // middle-left\r\n          this._drawControl('ml', ctx, methodName,\r\n            left,\r\n            top + height / 2, styleOverride);\r\n        }\r\n\r\n        // middle-top-rotate\r\n        if (hasRotatingPoint) {\r\n          this._drawControl('mtr', ctx, methodName,\r\n            left + width / 2,\r\n            top - this.rotatingPointOffset, styleOverride);\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        if (!this.isControlVisible(control)) {\r\n          return;\r\n        }\r\n        var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\r\n        switch (styleOverride.cornerStyle || this.cornerStyle) {\r\n          case 'circle':\r\n            ctx.beginPath();\r\n            ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\r\n            ctx[methodName]();\r\n            if (stroke) {\r\n              ctx.stroke();\r\n            }\r\n            break;\r\n          default:\r\n            this.transparentCorners || ctx.clearRect(left, top, size, size);\r\n            ctx[methodName + 'Rect'](left, top, size, size);\r\n            if (stroke) {\r\n              ctx.strokeRect(left, top, size, size);\r\n            }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns true if the specified control is visible, false otherwise.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @returns {Boolean} true if the specified control is visible, false otherwise\r\n       */\r\n      isControlVisible: function(controlName) {\r\n        return this._getControlsVisibility()[controlName];\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility of the specified control.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @param {Boolean} visible true to set the specified control visible, false otherwise\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlVisible: function(controlName, visible) {\r\n        this._getControlsVisibility()[controlName] = visible;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility state of object controls.\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\r\n       * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\r\n       * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\r\n       * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\r\n       * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\r\n       * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\r\n       * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\r\n       * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\r\n       * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlsVisibility: function(options) {\r\n        options || (options = { });\r\n\r\n        for (var p in options) {\r\n          this.setControlVisible(p, options[p]);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns the instance of the control visibility set for this object.\r\n       * @private\r\n       * @returns {Object}\r\n       */\r\n      _getControlsVisibility: function() {\r\n        if (!this._controlsVisibility) {\r\n          this._controlsVisibility = {\r\n            tl: true,\r\n            tr: true,\r\n            br: true,\r\n            bl: true,\r\n            ml: true,\r\n            mt: true,\r\n            mr: true,\r\n            mb: true,\r\n            mtr: true\r\n          };\r\n        }\r\n        return this._controlsVisibility;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to deselect this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onDeselect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to select this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onSelect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Animation duration (in ms) for fx* methods\r\n     * @type Number\r\n     * @default\r\n     */\r\n    FX_DURATION: 500,\r\n\r\n    /**\r\n     * Centers object horizontally with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectH: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.left,\r\n        endValue: this.getCenter().left,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('left', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectV: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.top,\r\n        endValue: this.getCenter().top,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('top', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as `fabric.Canvas#remove` but animated\r\n     * @param {fabric.Object} object Object to remove\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxRemove: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.opacity,\r\n        endValue: 0,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('opacity', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function () {\r\n          _this.remove(object);\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n    /**\r\n     * Animates object's properties\r\n     * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\r\n     * @param {Number|Object} value Value to animate property to (if string was given first) or options object\r\n     * @return {fabric.Object} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\r\n     * @chainable\r\n     *\r\n     * As object — multiple properties\r\n     *\r\n     * object.animate({ left: ..., top: ... });\r\n     * object.animate({ left: ..., top: ... }, { duration: ... });\r\n     *\r\n     * As string — one property\r\n     *\r\n     * object.animate('left', ...);\r\n     * object.animate('left', { duration: ... });\r\n     *\r\n     */\r\n    animate: function() {\r\n      if (arguments[0] && typeof arguments[0] === 'object') {\r\n        var propsToAnimate = [], prop, skipCallbacks;\r\n        for (prop in arguments[0]) {\r\n          propsToAnimate.push(prop);\r\n        }\r\n        for (var i = 0, len = propsToAnimate.length; i < len; i++) {\r\n          prop = propsToAnimate[i];\r\n          skipCallbacks = i !== len - 1;\r\n          this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\r\n        }\r\n      }\r\n      else {\r\n        this._animate.apply(this, arguments);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to animate\r\n     * @param {String} to Value to animate to\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\r\n     */\r\n    _animate: function(property, to, options, skipCallbacks) {\r\n      var _this = this, propPair;\r\n\r\n      to = to.toString();\r\n\r\n      if (!options) {\r\n        options = { };\r\n      }\r\n      else {\r\n        options = fabric.util.object.clone(options);\r\n      }\r\n\r\n      if (~property.indexOf('.')) {\r\n        propPair = property.split('.');\r\n      }\r\n\r\n      var currentValue = propPair\r\n        ? this.get(propPair[0])[propPair[1]]\r\n        : this.get(property);\r\n\r\n      if (!('from' in options)) {\r\n        options.from = currentValue;\r\n      }\r\n\r\n      if (~to.indexOf('=')) {\r\n        to = currentValue + parseFloat(to.replace('=', ''));\r\n      }\r\n      else {\r\n        to = parseFloat(to);\r\n      }\r\n\r\n      fabric.util.animate({\r\n        startValue: options.from,\r\n        endValue: to,\r\n        byValue: options.by,\r\n        easing: options.easing,\r\n        duration: options.duration,\r\n        abort: options.abort && function() {\r\n          return options.abort.call(_this);\r\n        },\r\n        onChange: function(value, valueProgress, timeProgress) {\r\n          if (propPair) {\r\n            _this[propPair[0]][propPair[1]] = value;\r\n          }\r\n          else {\r\n            _this.set(property, value);\r\n          }\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n          options.onChange && options.onChange(value, valueProgress, timeProgress);\r\n        },\r\n        onComplete: function(value, valueProgress, timeProgress) {\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n\r\n          _this.setCoords();\r\n          options.onComplete && options.onComplete(value, valueProgress, timeProgress);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\r\n\r\n    if (fabric.Line) {\r\n      fabric.warn('fabric.Line is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Line class\r\n     * @class fabric.Line\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Line#initialize} for constructor definition\r\n     */\r\n    fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'line',\r\n\r\n      /**\r\n       * x value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x1: 0,\r\n\r\n      /**\r\n       * y value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y1: 0,\r\n\r\n      /**\r\n       * x value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x2: 0,\r\n\r\n      /**\r\n       * y value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y2: 0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} [points] Array of points\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Line} thisArg\r\n       */\r\n      initialize: function(points, options) {\r\n        if (!points) {\r\n          points = [0, 0, 0, 0];\r\n        }\r\n\r\n        this.callSuper('initialize', options);\r\n\r\n        this.set('x1', points[0]);\r\n        this.set('y1', points[1]);\r\n        this.set('x2', points[2]);\r\n        this.set('y2', points[3]);\r\n\r\n        this._setWidthHeight(options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n\r\n        this.width = Math.abs(this.x2 - this.x1);\r\n        this.height = Math.abs(this.y2 - this.y1);\r\n\r\n        this.left = 'left' in options\r\n          ? options.left\r\n          : this._getLeftToOriginX();\r\n\r\n        this.top = 'top' in options\r\n          ? options.top\r\n          : this._getTopToOriginY();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        if (typeof coordProps[key] !== 'undefined') {\r\n          this._setWidthHeight();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\r\n       */\r\n      _getLeftToOriginX: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originX',\r\n          axis1: 'x1',\r\n          axis2: 'x2',\r\n          dimension: 'width'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'left',\r\n          center: 'center',\r\n          farthest: 'right'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\r\n       */\r\n      _getTopToOriginY: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originY',\r\n          axis1: 'y1',\r\n          axis2: 'y2',\r\n          dimension: 'height'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'top',\r\n          center: 'center',\r\n          farthest: 'bottom'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n\r\n        if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\r\n          // move from center (of virtual box) to its left/top corner\r\n          // we can't assume x1, y1 is top left and x2, y2 is bottom right\r\n          var p = this.calcLinePoints();\r\n          ctx.moveTo(p.x1, p.y1);\r\n          ctx.lineTo(p.x2, p.y2);\r\n        }\r\n\r\n        ctx.lineWidth = this.strokeWidth;\r\n\r\n        // TODO: test this\r\n        // make sure setting \"fill\" changes color of a line\r\n        // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\r\n        var origStrokeStyle = ctx.strokeStyle;\r\n        ctx.strokeStyle = this.stroke || ctx.fillStyle;\r\n        this.stroke && this._renderStroke(ctx);\r\n        ctx.strokeStyle = origStrokeStyle;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p = this.calcLinePoints();\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return {\r\n          x: (this.x1 + this.x2) / 2,\r\n          y: (this.y1 + this.y2) / 2,\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @methd toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var dim = this.callSuper('_getNonTransformedDimensions');\r\n        if (this.strokeLineCap === 'butt') {\r\n          if (this.width === 0) {\r\n            dim.y -= this.strokeWidth;\r\n          }\r\n          if (this.height === 0) {\r\n            dim.x -= this.strokeWidth;\r\n          }\r\n        }\r\n        return dim;\r\n      },\r\n\r\n      /**\r\n       * Recalculates line points given width and height\r\n       * @private\r\n       */\r\n      calcLinePoints: function() {\r\n        var xMult = this.x1 <= this.x2 ? -1 : 1,\r\n            yMult = this.y1 <= this.y2 ? -1 : 1,\r\n            x1 = (xMult * this.width * 0.5),\r\n            y1 = (yMult * this.height * 0.5),\r\n            x2 = (xMult * this.width * -0.5),\r\n            y2 = (yMult * this.height * -0.5);\r\n\r\n        return {\r\n          x1: x1,\r\n          x2: x2,\r\n          y1: y1,\r\n          y2: y2\r\n        };\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var p = this.calcLinePoints();\r\n        return [\r\n          '<line ', 'COMMON_PARTS',\r\n          'x1=\"', p.x1,\r\n          '\" y1=\"', p.y1,\r\n          '\" x2=\"', p.x2,\r\n          '\" y2=\"', p.y2,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\r\n     */\r\n    fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] callback function invoked after parsing\r\n     */\r\n    fabric.Line.fromElement = function(element, callback, options) {\r\n      options = options || { };\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\r\n          points = [\r\n            parsedAttributes.x1 || 0,\r\n            parsedAttributes.y1 || 0,\r\n            parsedAttributes.x2 || 0,\r\n            parsedAttributes.y2 || 0\r\n          ];\r\n      callback(new fabric.Line(points, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Line.fromObject = function(object, callback) {\r\n      function _callback(instance) {\r\n        delete instance.points;\r\n        callback && callback(instance);\r\n      };\r\n      var options = clone(object, true);\r\n      options.points = [object.x1, object.y1, object.x2, object.y2];\r\n      fabric.Object._fromObject('Line', options, _callback, 'points');\r\n    };\r\n\r\n    /**\r\n     * Produces a function that calculates distance from canvas edge to Line origin.\r\n     */\r\n    function makeEdgeToOriginGetter(propertyNames, originValues) {\r\n      var origin = propertyNames.origin,\r\n          axis1 = propertyNames.axis1,\r\n          axis2 = propertyNames.axis2,\r\n          dimension = propertyNames.dimension,\r\n          nearest = originValues.nearest,\r\n          center = originValues.center,\r\n          farthest = originValues.farthest;\r\n\r\n      return function() {\r\n        switch (this.get(origin)) {\r\n          case nearest:\r\n            return Math.min(this.get(axis1), this.get(axis2));\r\n          case center:\r\n            return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\r\n          case farthest:\r\n            return Math.max(this.get(axis1), this.get(axis2));\r\n        }\r\n      };\r\n\r\n    }\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        pi = Math.PI;\r\n\r\n    if (fabric.Circle) {\r\n      fabric.warn('fabric.Circle is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Circle class\r\n     * @class fabric.Circle\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Circle#initialize} for constructor definition\r\n     */\r\n    fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'circle',\r\n\r\n      /**\r\n       * Radius of this circle\r\n       * @type Number\r\n       * @default\r\n       */\r\n      radius: 0,\r\n\r\n      /**\r\n       * Start angle of the circle, moving clockwise\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      startAngle: 0,\r\n\r\n      /**\r\n       * End angle of the circle\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 2Pi\r\n       */\r\n      endAngle: pi * 2,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n\r\n        if (key === 'radius') {\r\n          this.setRadius(value);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var svgString, x = 0, y = 0,\r\n            angle = (this.endAngle - this.startAngle) % ( 2 * pi);\r\n\r\n        if (angle === 0) {\r\n          svgString = [\r\n            '<circle ', 'COMMON_PARTS',\r\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\r\n            'r=\"', this.radius,\r\n            '\" />\\n'\r\n          ];\r\n        }\r\n        else {\r\n          var startX = fabric.util.cos(this.startAngle) * this.radius,\r\n              startY = fabric.util.sin(this.startAngle) * this.radius,\r\n              endX = fabric.util.cos(this.endAngle) * this.radius,\r\n              endY = fabric.util.sin(this.endAngle) * this.radius,\r\n              largeFlag = angle > pi ? '1' : '0';\r\n          svgString = [\r\n            '<path d=\"M ' + startX + ' ' + startY,\r\n            ' A ' + this.radius + ' ' + this.radius,\r\n            ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\r\n            '\" ', 'COMMON_PARTS', ' />\\n'\r\n          ];\r\n        }\r\n        return svgString;\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.radius,\r\n          this.startAngle,\r\n          this.endAngle, false);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusX: function() {\r\n        return this.get('radius') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusY: function() {\r\n        return this.get('radius') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Sets radius of an object (and updates width accordingly)\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      setRadius: function(value) {\r\n        this.radius = value;\r\n        return this.set('width', value * 2).set('height', value * 2);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\r\n     */\r\n    fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @param {Object} [options] Options object\r\n     * @throws {Error} If value of `r` attribute is missing or invalid\r\n     */\r\n    fabric.Circle.fromElement = function(element, callback) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\r\n\r\n      if (!isValidRadius(parsedAttributes)) {\r\n        throw new Error('value of `r` attribute is required and can not be negative');\r\n      }\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\r\n      callback(new fabric.Circle(parsedAttributes));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function isValidRadius(attributes) {\r\n      return (('radius' in attributes) && (attributes.radius >= 0));\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {Object} Instance of fabric.Circle\r\n     */\r\n    fabric.Circle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Circle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Triangle) {\r\n      fabric.warn('fabric.Triangle is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Triangle class\r\n     * @class fabric.Triangle\r\n     * @extends fabric.Object\r\n     * @return {fabric.Triangle} thisArg\r\n     * @see {@link fabric.Triangle#initialize} for constructor definition\r\n     */\r\n    fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'triangle',\r\n\r\n      /**\r\n       * Width is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width: 100,\r\n\r\n      /**\r\n       * Height is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height: 100,\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(-widthBy2, heightBy2);\r\n        ctx.lineTo(0, -heightBy2);\r\n        ctx.lineTo(widthBy2, heightBy2);\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2,\r\n            points = [\r\n              -widthBy2 + ' ' + heightBy2,\r\n              '0 ' + -heightBy2,\r\n              widthBy2 + ' ' + heightBy2\r\n            ].join(',');\r\n        return [\r\n          '<polygon ', 'COMMON_PARTS',\r\n          'points=\"', points,\r\n          '\" />'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Triangle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Triangle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Triangle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Triangle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        piBy2   = Math.PI * 2;\r\n\r\n    if (fabric.Ellipse) {\r\n      fabric.warn('fabric.Ellipse is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Ellipse class\r\n     * @class fabric.Ellipse\r\n     * @extends fabric.Object\r\n     * @return {fabric.Ellipse} thisArg\r\n     * @see {@link fabric.Ellipse#initialize} for constructor definition\r\n     */\r\n    fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'ellipse',\r\n\r\n      /**\r\n       * Horizontal radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this.set('rx', options && options.rx || 0);\r\n        this.set('ry', options && options.ry || 0);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        switch (key) {\r\n\r\n          case 'rx':\r\n            this.rx = value;\r\n            this.set('width', value * 2);\r\n            break;\r\n\r\n          case 'ry':\r\n            this.ry = value;\r\n            this.set('height', value * 2);\r\n            break;\r\n\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRx: function() {\r\n        return this.get('rx') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns Vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRy: function() {\r\n        return this.get('ry') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        return [\r\n          '<ellipse ', 'COMMON_PARTS',\r\n          'cx=\"0\" cy=\"0\" ',\r\n          'rx=\"', this.rx,\r\n          '\" ry=\"', this.ry,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.save();\r\n        ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.rx,\r\n          0,\r\n          piBy2,\r\n          false);\r\n        ctx.restore();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\r\n     */\r\n    fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromElement = function(element, callback) {\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\r\n      callback(new fabric.Ellipse(parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Ellipse', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend;\r\n\r\n    if (fabric.Rect) {\r\n      fabric.warn('fabric.Rect is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Rectangle class\r\n     * @class fabric.Rect\r\n     * @extends fabric.Object\r\n     * @return {fabric.Rect} thisArg\r\n     * @see {@link fabric.Rect#initialize} for constructor definition\r\n     */\r\n    fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\r\n\r\n      /**\r\n       * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'rect',\r\n\r\n      /**\r\n       * Horizontal border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this._initRxRy();\r\n      },\r\n\r\n      /**\r\n       * Initializes rx/ry attributes\r\n       * @private\r\n       */\r\n      _initRxRy: function() {\r\n        if (this.rx && !this.ry) {\r\n          this.ry = this.rx;\r\n        }\r\n        else if (this.ry && !this.rx) {\r\n          this.rx = this.ry;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n\r\n        // 1x1 case (used in spray brush) optimization was removed because\r\n        // with caching and higher zoom level this makes more damage than help\r\n\r\n        var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\r\n            ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\r\n            w = this.width,\r\n            h = this.height,\r\n            x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            isRounded = rx !== 0 || ry !== 0,\r\n            /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\r\n            k = 1 - 0.5522847498;\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(x + rx, y);\r\n\r\n        ctx.lineTo(x + w - rx, y);\r\n        isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\r\n\r\n        ctx.lineTo(x + w, y + h - ry);\r\n        isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\r\n\r\n        ctx.lineTo(x + rx, y + h);\r\n        isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\r\n\r\n        ctx.lineTo(x, y + ry);\r\n        isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\r\n\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var x = -this.width / 2, y = -this.height / 2;\r\n        return [\r\n          '<rect ', 'COMMON_PARTS',\r\n          'x=\"', x, '\" y=\"', y,\r\n          '\" rx=\"', this.rx, '\" ry=\"', this.ry,\r\n          '\" width=\"', this.width, '\" height=\"', this.height,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\r\n     */\r\n    fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Rect.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n      options = options || { };\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = parsedAttributes.left || 0;\r\n      parsedAttributes.top  = parsedAttributes.top  || 0;\r\n      parsedAttributes.height  = parsedAttributes.height || 0;\r\n      parsedAttributes.width  = parsedAttributes.width || 0;\r\n      var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n      rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\r\n      callback(rect);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\r\n     */\r\n    fabric.Rect.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Rect', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Polyline) {\r\n      fabric.warn('fabric.Polyline is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polyline class\r\n     * @class fabric.Polyline\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Polyline#initialize} for constructor definition\r\n     */\r\n    fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polyline',\r\n\r\n      /**\r\n       * Points array\r\n       * @type Array\r\n       * @default\r\n       */\r\n      points: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} points Array of points (where each point is an object with x and y)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Polyline} thisArg\r\n       * @example\r\n       * var poly = new fabric.Polyline([\r\n       *     { x: 10, y: 10 },\r\n       *     { x: 50, y: 30 },\r\n       *     { x: 40, y: 70 },\r\n       *     { x: 60, y: 50 },\r\n       *     { x: 100, y: 150 },\r\n       *     { x: 40, y: 100 }\r\n       *   ], {\r\n       *   stroke: 'red',\r\n       *   left: 100,\r\n       *   top: 100\r\n       * });\r\n       */\r\n      initialize: function(points, options) {\r\n        options = options || {};\r\n        this.points = points || [];\r\n        this.callSuper('initialize', options);\r\n        this._setPositionDimensions(options);\r\n      },\r\n\r\n      _setPositionDimensions: function(options) {\r\n        var calcDim = this._calcDimensions(options), correctLeftTop;\r\n        this.width = calcDim.width;\r\n        this.height = calcDim.height;\r\n        if (!options.fromSVG) {\r\n          correctLeftTop = this.translateToGivenOrigin(\r\n            { x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2 },\r\n            'left',\r\n            'top',\r\n            this.originX,\r\n            this.originY\r\n          );\r\n        }\r\n        if (typeof options.left === 'undefined') {\r\n          this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\r\n        }\r\n        if (typeof options.top === 'undefined') {\r\n          this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\r\n        }\r\n        this.pathOffset = {\r\n          x: calcDim.left + this.width / 2,\r\n          y: calcDim.top + this.height / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Calculate the polygon min and max point from points array,\r\n       * returning an object with left, top, widht, height to measure the\r\n       * polygon size\r\n       * @return {Object} object.left X coordinate of the polygon leftmost point\r\n       * @return {Object} object.top Y coordinate of the polygon topmost point\r\n       * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\r\n       * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\r\n       * @private\r\n       */\r\n      _calcDimensions: function() {\r\n\r\n        var points = this.points,\r\n            minX = min(points, 'x') || 0,\r\n            minY = min(points, 'y') || 0,\r\n            maxX = max(points, 'x') || 0,\r\n            maxY = max(points, 'y') || 0,\r\n            width = (maxX - minX),\r\n            height = (maxY - minY);\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), {\r\n          points: this.points.concat()\r\n        });\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          points.push(\r\n            toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\r\n            toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\r\n          );\r\n        }\r\n        return [\r\n          '<' + this.type + ' ', 'COMMON_PARTS',\r\n          'points=\"', points.join(''),\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      commonRender: function(ctx) {\r\n        var point, len = this.points.length,\r\n            x = this.pathOffset.x,\r\n            y = this.pathOffset.y;\r\n\r\n        if (!len || isNaN(this.points[len - 1].y)) {\r\n          // do not draw if no points or odd points\r\n          // NaN comes from parseFloat of a empty string in parser\r\n          return false;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\r\n        for (var i = 0; i < len; i++) {\r\n          point = this.points[i];\r\n          ctx.lineTo(point.x - x, point.y - y);\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p1, p2;\r\n\r\n        ctx.beginPath();\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          p1 = this.points[i];\r\n          p2 = this.points[i + 1] || p1;\r\n          fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.get('points').length;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\r\n     */\r\n    fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {SVGElement} element Element to parser\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polyline.fromElementGenerator = function(_class) {\r\n      return function(element, callback, options) {\r\n        if (!element) {\r\n          return callback(null);\r\n        }\r\n        options || (options = { });\r\n\r\n        var points = fabric.parsePointsAttribute(element.getAttribute('points')),\r\n            parsedAttributes = fabric.parseAttributes(element, fabric[_class].ATTRIBUTE_NAMES);\r\n        parsedAttributes.fromSVG = true;\r\n        callback(new fabric[_class](points, extend(parsedAttributes, options)));\r\n      };\r\n    };\r\n\r\n    fabric.Polyline.fromElement = fabric.Polyline.fromElementGenerator('Polyline');\r\n\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polyline.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polyline', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Polygon) {\r\n      fabric.warn('fabric.Polygon is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polygon class\r\n     * @class fabric.Polygon\r\n     * @extends fabric.Polyline\r\n     * @see {@link fabric.Polygon#initialize} for constructor definition\r\n     */\r\n    fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polygon',\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        ctx.closePath();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        this.callSuper('_renderDashedStroke', ctx);\r\n        ctx.closePath();\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\r\n     */\r\n    fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns {@link fabric.Polygon} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polygon.fromElement = fabric.Polyline.fromElementGenerator('Polygon');\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polygon instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polygon.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polygon', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        extend = fabric.util.object.extend,\r\n        _toString = Object.prototype.toString,\r\n        drawArc = fabric.util.drawArc,\r\n        toFixed = fabric.util.toFixed,\r\n        commandLengths = {\r\n          m: 2,\r\n          l: 2,\r\n          h: 1,\r\n          v: 1,\r\n          c: 6,\r\n          s: 4,\r\n          q: 4,\r\n          t: 2,\r\n          a: 7\r\n        },\r\n        repeatedCommands = {\r\n          m: 'l',\r\n          M: 'L'\r\n        };\r\n\r\n    if (fabric.Path) {\r\n      fabric.warn('fabric.Path is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Path class\r\n     * @class fabric.Path\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\r\n     * @see {@link fabric.Path#initialize} for constructor definition\r\n     */\r\n    fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'path',\r\n\r\n      /**\r\n       * Array of path points\r\n       * @type Array\r\n       * @default\r\n       */\r\n      path: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\r\n\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Path} thisArg\r\n       */\r\n      initialize: function(path, options) {\r\n        options = options || { };\r\n        this.callSuper('initialize', options);\r\n\r\n        if (!path) {\r\n          path = [];\r\n        }\r\n\r\n        var fromArray = _toString.call(path) === '[object Array]';\r\n\r\n        this.path = fromArray\r\n          ? path\r\n          // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\r\n          : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\r\n\r\n        if (!this.path) {\r\n          return;\r\n        }\r\n\r\n        if (!fromArray) {\r\n          this.path = this._parsePath();\r\n        }\r\n\r\n        fabric.Polyline.prototype._setPositionDimensions.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _renderPathCommands: function(ctx) {\r\n        var current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            l = -this.pathOffset.x,\r\n            t = -this.pathOffset.y;\r\n\r\n        ctx.beginPath();\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              ctx.bezierCurveTo(\r\n                x + current[1] + l, // x1\r\n                y + current[2] + t, // y1\r\n                controlX + l, // x2\r\n                controlY + t, // y2\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              x = current[5];\r\n              y = current[6];\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              ctx.bezierCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                controlX + l,\r\n                controlY + t,\r\n                x + l,\r\n                y + t\r\n              );\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                x + current[1] + l,\r\n                y + current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n\r\n              ctx.quadraticCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x + l,\r\n                current[7] + y + t\r\n              ]);\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + l,\r\n                current[7] + t\r\n              ]);\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              ctx.closePath();\r\n              break;\r\n          }\r\n          previous = current;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _render: function(ctx) {\r\n        this._renderPathCommands(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Path (' + this.complexity() +\r\n          '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), {\r\n          path: this.path.map(function(item) { return item.slice(); }),\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\r\n        if (o.sourcePath) {\r\n          delete o.path;\r\n        }\r\n        return o;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var path = this.path.map(function(path) {\r\n          return path.join(' ');\r\n        }).join(' ');\r\n        return [\r\n          '<path ', 'COMMON_PARTS',\r\n          'd=\"', path,\r\n          '\" stroke-linecap=\"round\" ',\r\n          '/>\\n'\r\n        ];\r\n      },\r\n\r\n      _getOffsetTransform: function() {\r\n        var digits = fabric.Object.NUM_FRACTION_DIGITS;\r\n        return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' +\r\n            toFixed(-this.pathOffset.y, digits) + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        var additionalTransform = this._getOffsetTransform();\r\n        return '\\t' + this._createBaseClipPathSVGMarkup(\r\n          this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform }\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var additionalTransform = this._getOffsetTransform();\r\n        return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform  });\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns number representation of an instance complexity\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.path.length;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _parsePath: function() {\r\n        var result = [],\r\n            coords = [],\r\n            currentPath,\r\n            parsed,\r\n            re = fabric.rePathCommand,\r\n            match,\r\n            coordsStr;\r\n\r\n        for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\r\n          currentPath = this.path[i];\r\n\r\n          coordsStr = currentPath.slice(1).trim();\r\n          coords.length = 0;\r\n\r\n          while ((match = re.exec(coordsStr))) {\r\n            coords.push(match[0]);\r\n          }\r\n\r\n          coordsParsed = [currentPath.charAt(0)];\r\n\r\n          for (var j = 0, jlen = coords.length; j < jlen; j++) {\r\n            parsed = parseFloat(coords[j]);\r\n            if (!isNaN(parsed)) {\r\n              coordsParsed.push(parsed);\r\n            }\r\n          }\r\n\r\n          var command = coordsParsed[0],\r\n              commandLength = commandLengths[command.toLowerCase()],\r\n              repeatedCommand = repeatedCommands[command] || command;\r\n\r\n          if (coordsParsed.length - 1 > commandLength) {\r\n            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\r\n              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\r\n              command = repeatedCommand;\r\n            }\r\n          }\r\n          else {\r\n            result.push(coordsParsed);\r\n          }\r\n        }\r\n\r\n        return result;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _calcDimensions: function() {\r\n\r\n        var aX = [],\r\n            aY = [],\r\n            current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            bounds;\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                x + current[1], // x1\r\n                y + current[2], // y1\r\n                controlX, // x2\r\n                controlY, // y2\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                current[1],\r\n                current[2],\r\n                controlX,\r\n                controlY,\r\n                current[5],\r\n                current[6]\r\n              );\r\n              x = current[5];\r\n              y = current[6];\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                x + current[1],\r\n                y + current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                current[1],\r\n                current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                current[3],\r\n                current[4]\r\n              );\r\n              x = current[3];\r\n              y = current[4];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x,\r\n                current[7] + y\r\n              );\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6],\r\n                current[7]\r\n              );\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              break;\r\n          }\r\n          previous = current;\r\n          bounds.forEach(function (point) {\r\n            aX.push(point.x);\r\n            aY.push(point.y);\r\n          });\r\n          aX.push(x);\r\n          aY.push(y);\r\n        }\r\n\r\n        var minX = min(aX) || 0,\r\n            minY = min(aY) || 0,\r\n            maxX = max(aX) || 0,\r\n            maxY = max(aY) || 0,\r\n            deltaX = maxX - minX,\r\n            deltaY = maxY - minY;\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: deltaX,\r\n          height: deltaY\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an object\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {Object} object\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Path.fromObject = function(object, callback) {\r\n      if (typeof object.sourcePath === 'string') {\r\n        var pathUrl = object.sourcePath;\r\n        fabric.loadSVGFromURL(pathUrl, function (elements) {\r\n          var path = elements[0];\r\n          path.setOptions(object);\r\n          callback && callback(path);\r\n        });\r\n      }\r\n      else {\r\n        fabric.Object._fromObject('Path', object, callback, 'path');\r\n      }\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @see http://www.w3.org/TR/SVG/paths.html#PathElement\r\n     */\r\n    fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an SVG <path> element\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {SVGElement} element to parse\r\n     * @param {Function} callback Callback to invoke when an fabric.Path instance is created\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     */\r\n    fabric.Path.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\r\n      parsedAttributes.fromSVG = true;\r\n      callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max;\r\n\r\n    if (fabric.Group) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.Group\r\n     * @extends fabric.Object\r\n     * @mixes fabric.Collection\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.Group#initialize} for constructor definition\r\n     */\r\n    fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'group',\r\n\r\n      /**\r\n       * Width of stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      subTargetCheck: false,\r\n\r\n      /**\r\n       * Groups are container, do not render anything on theyr own, ence no cache properties\r\n       * @type Array\r\n       * @default\r\n       */\r\n      cacheProperties: [],\r\n\r\n      /**\r\n       * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\r\n       * available setting this boolean to true.\r\n       * @type Boolean\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      useSetOnGroup: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects Group objects\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options, isAlreadyGrouped) {\r\n        options = options || {};\r\n        this._objects = [];\r\n        // if objects enclosed in a group have been grouped already,\r\n        // we cannot change properties of objects.\r\n        // Thus we need to set options to group without objects,\r\n        isAlreadyGrouped && this.callSuper('initialize', options);\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (!isAlreadyGrouped) {\r\n          var center = options && options.centerPoint;\r\n          // we want to set origins before calculating the bounding box.\r\n          // so that the topleft can be set with that in mind.\r\n          // if specific top and left are passed, are overwritten later\r\n          // with the callSuper('initialize', options)\r\n          if (options.originX !== undefined) {\r\n            this.originX = options.originX;\r\n          }\r\n          if (options.originY !== undefined) {\r\n            this.originY = options.originY;\r\n          }\r\n          // if coming from svg i do not want to calc bounds.\r\n          // i assume width and height are passed along options\r\n          center || this._calcBounds();\r\n          this._updateObjectsCoords(center);\r\n          delete options.centerPoint;\r\n          this.callSuper('initialize', options);\r\n        }\r\n        else {\r\n          this._updateObjectsACoords();\r\n        }\r\n\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsACoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        for (var i = this._objects.length; i--; ){\r\n          this._objects[i].setCoords(ignoreZoom, skipAbsolute);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsCoords: function(center) {\r\n        var center = center || this.getCenterPoint();\r\n        for (var i = this._objects.length; i--; ){\r\n          this._updateObjectCoords(this._objects[i], center);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       * @param {fabric.Point} center, current center of group.\r\n       */\r\n      _updateObjectCoords: function(object, center) {\r\n        var objectLeft = object.left,\r\n            objectTop = object.top,\r\n            ignoreZoom = true, skipAbsolute = true;\r\n\r\n        object.set({\r\n          left: objectLeft - center.x,\r\n          top: objectTop - center.y\r\n        });\r\n        object.group = this;\r\n        object.setCoords(ignoreZoom, skipAbsolute);\r\n      },\r\n\r\n      /**\r\n       * Returns string represenation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Group: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Adds an object to a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      addWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n        if (object) {\r\n          this._objects.push(object);\r\n          object.group = this;\r\n          object._set('canvas', this.canvas);\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Removes an object from a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      removeWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n\r\n        this.remove(object);\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectAdded: function(object) {\r\n        this.dirty = true;\r\n        object.group = this;\r\n        object._set('canvas', this.canvas);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectRemoved: function(object) {\r\n        this.dirty = true;\r\n        delete object.group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _set: function(key, value) {\r\n        var i = this._objects.length;\r\n        if (this.useSetOnGroup) {\r\n          while (i--) {\r\n            this._objects[i].setOnGroup(key, value);\r\n          }\r\n        }\r\n        if (key === 'canvas') {\r\n          while (i--) {\r\n            this._objects[i]._set(key, value);\r\n          }\r\n        }\r\n        fabric.Object.prototype._set.call(this, key, value);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var _includeDefaultValues = this.includeDefaultValues;\r\n        var objsToObject = this._objects.map(function(obj) {\r\n          var originalDefaults = obj.includeDefaultValues;\r\n          obj.includeDefaultValues = _includeDefaultValues;\r\n          var _obj = obj.toObject(propertiesToInclude);\r\n          obj.includeDefaultValues = originalDefaults;\r\n          return _obj;\r\n        });\r\n        var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance, in dataless mode.\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var objsToObject, sourcePath = this.sourcePath;\r\n        if (sourcePath) {\r\n          objsToObject = sourcePath;\r\n        }\r\n        else {\r\n          var _includeDefaultValues = this.includeDefaultValues;\r\n          objsToObject = this._objects.map(function(obj) {\r\n            var originalDefaults = obj.includeDefaultValues;\r\n            obj.includeDefaultValues = _includeDefaultValues;\r\n            var _obj = obj.toDatalessObject(propertiesToInclude);\r\n            obj.includeDefaultValues = originalDefaults;\r\n            return _obj;\r\n          });\r\n        }\r\n        var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Renders instance on a given context\r\n       * @param {CanvasRenderingContext2D} ctx context to render instance on\r\n       */\r\n      render: function(ctx) {\r\n        this._transformDone = true;\r\n        this.callSuper('render', ctx);\r\n        this._transformDone = false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group is already cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        var ownCache = fabric.Object.prototype.shouldCache.call(this);\r\n        if (ownCache) {\r\n          for (var i = 0, len = this._objects.length; i < len; i++) {\r\n            if (this._objects[i].willDrawShadow()) {\r\n              this.ownCaching = false;\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return ownCache;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        if (this.shadow) {\r\n          return fabric.Object.prototype.willDrawShadow.call(this);\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].willDrawShadow()) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return this.ownCaching || (this.group && this.group.isOnACache());\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx) {\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i].render(ctx);\r\n        }\r\n        this._drawClipPath(ctx);\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       */\r\n      isCacheDirty: function(skipCanvas) {\r\n        if (this.callSuper('isCacheDirty', skipCanvas)) {\r\n          return true;\r\n        }\r\n        if (!this.statefullCache) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].isCacheDirty(true)) {\r\n            if (this._cacheCanvas) {\r\n              // if this group has not a cache canvas there is nothing to clean\r\n              var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Retores original state of each of group objects (original state is that which was before group was created).\r\n       * @private\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      _restoreObjectsState: function() {\r\n        this._objects.forEach(this._restoreObjectState, this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Realises the transform from this group onto the supplied object\r\n       * i.e. it tells you what would happen if the supplied object was in\r\n       * the group, and then the group was destroyed. It mutates the supplied\r\n       * object.\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Object} transformedObject\r\n       */\r\n      realizeTransform: function(object) {\r\n        var matrix = object.calcTransformMatrix(),\r\n            options = fabric.util.qrDecompose(matrix),\r\n            center = new fabric.Point(options.translateX, options.translateY);\r\n        object.flipX = false;\r\n        object.flipY = false;\r\n        object.set('scaleX', options.scaleX);\r\n        object.set('scaleY', options.scaleY);\r\n        object.skewX = options.skewX;\r\n        object.skewY = options.skewY;\r\n        object.angle = options.angle;\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Restores original state of a specified object in group\r\n       * @private\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Group} thisArg\r\n       */\r\n      _restoreObjectState: function(object) {\r\n        this.realizeTransform(object);\r\n        object.setCoords();\r\n        delete object.group;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      destroy: function() {\r\n        // when group is destroyed objects needs to get a repaint to be eventually\r\n        // displayed on canvas.\r\n        this._objects.forEach(function(object) {\r\n          object.set('dirty', true);\r\n        });\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * make a group an active selection, remove the group from canvas\r\n       * the group has to be on canvas for this to work.\r\n       * @return {fabric.ActiveSelection} thisArg\r\n       * @chainable\r\n       */\r\n      toActiveSelection: function() {\r\n        if (!this.canvas) {\r\n          return;\r\n        }\r\n        var objects = this._objects, canvas = this.canvas;\r\n        this._objects = [];\r\n        var options = this.toObject();\r\n        delete options.objects;\r\n        var activeSelection = new fabric.ActiveSelection([]);\r\n        activeSelection.set(options);\r\n        activeSelection.type = 'activeSelection';\r\n        canvas.remove(this);\r\n        objects.forEach(function(object) {\r\n          object.group = activeSelection;\r\n          object.dirty = true;\r\n          canvas.add(object);\r\n        });\r\n        activeSelection.canvas = canvas;\r\n        activeSelection._objects = objects;\r\n        canvas._activeObject = activeSelection;\r\n        activeSelection.setCoords();\r\n        return activeSelection;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      ungroupOnCanvas: function() {\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * Sets coordinates of all objects inside group\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      setObjectsCoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        this.forEachObject(function(object) {\r\n          object.setCoords(ignoreZoom, skipAbsolute);\r\n        });\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _calcBounds: function(onlyWidthHeight) {\r\n        var aX = [],\r\n            aY = [],\r\n            o, prop,\r\n            props = ['tr', 'br', 'bl', 'tl'],\r\n            i = 0, iLen = this._objects.length,\r\n            j, jLen = props.length,\r\n            ignoreZoom = true;\r\n\r\n        for ( ; i < iLen; ++i) {\r\n          o = this._objects[i];\r\n          o.setCoords(ignoreZoom);\r\n          for (j = 0; j < jLen; j++) {\r\n            prop = props[j];\r\n            aX.push(o.oCoords[prop].x);\r\n            aY.push(o.oCoords[prop].y);\r\n          }\r\n        }\r\n\r\n        this._getBounds(aX, aY, onlyWidthHeight);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getBounds: function(aX, aY, onlyWidthHeight) {\r\n        var minXY = new fabric.Point(min(aX), min(aY)),\r\n            maxXY = new fabric.Point(max(aX), max(aY)),\r\n            top = minXY.y || 0, left = minXY.x || 0,\r\n            width = (maxXY.x - minXY.x) || 0,\r\n            height = (maxXY.y - minXY.y) || 0;\r\n        this.width = width;\r\n        this.height = height;\r\n        if (!onlyWidthHeight) {\r\n          // the bounding box always finds the topleft most corner.\r\n          // whatever is the group origin, we set up here the left/top position.\r\n          this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\r\n        }\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      _toSVG: function(reviver) {\r\n        var svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\r\n\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\r\n        }\r\n        svgString.push('</g>\\n');\r\n        return svgString;\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export, specific version for group\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function() {\r\n        var opacity = typeof this.opacity !== 'undefined' && this.opacity !== 1 ?\r\n              'opacity: ' + this.opacity + ';' : '',\r\n            visibility = this.visible ? '' : ' visibility: hidden;';\r\n        return [\r\n          opacity,\r\n          this.getSvgFilter(),\r\n          visibility\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        var svgString = [];\r\n\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\r\n        }\r\n\r\n        return this._createBaseClipPathSVGMarkup(svgString, { reviver: reviver });\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Group} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Group\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an group instance is created\r\n     */\r\n    fabric.Group.fromObject = function(object, callback) {\r\n      var objects = object.objects,\r\n          options = fabric.util.object.clone(object, true);\r\n      delete options.objects;\r\n      if (typeof objects === 'string') {\r\n        // it has to be an url or something went wrong.\r\n        fabric.loadSVGFromURL(objects, function (elements) {\r\n          var group = fabric.util.groupSVGElements(elements, object, objects);\r\n          group.set(options);\r\n          callback && callback(group);\r\n        });\r\n        return;\r\n      }\r\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n        fabric.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {\r\n          var options = fabric.util.object.clone(object, true);\r\n          options.clipPath = enlivedClipPath[0];\r\n          delete options.objects;\r\n          callback && callback(new fabric.Group(enlivenedObjects, options, true));\r\n        });\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.ActiveSelection) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.ActiveSelection\r\n     * @extends fabric.Group\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.ActiveSelection#initialize} for constructor definition\r\n     */\r\n    fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'activeSelection',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects ActiveSelection objects\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options) {\r\n        options = options || {};\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (options.originX) {\r\n          this.originX = options.originX;\r\n        }\r\n        if (options.originY) {\r\n          this.originY = options.originY;\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        fabric.Object.prototype.initialize.call(this, options);\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Change te activeSelection to a normal group,\r\n       * High level function that automatically adds it to canvas as\r\n       * active object. no events fired.\r\n       * @since 2.0.0\r\n       * @return {fabric.Group}\r\n       */\r\n      toGroup: function() {\r\n        var objects = this._objects.concat();\r\n        this._objects = [];\r\n        var options = fabric.Object.prototype.toObject.call(this);\r\n        var newGroup = new fabric.Group([]);\r\n        delete options.type;\r\n        newGroup.set(options);\r\n        objects.forEach(function(object) {\r\n          object.canvas.remove(object);\r\n          object.group = newGroup;\r\n        });\r\n        newGroup._objects = objects;\r\n        if (!this.canvas) {\r\n          return newGroup;\r\n        }\r\n        var canvas = this.canvas;\r\n        canvas.add(newGroup);\r\n        canvas._activeObject = newGroup;\r\n        newGroup.setCoords();\r\n        return newGroup;\r\n      },\r\n\r\n      /**\r\n       * If returns true, deselection is cancelled.\r\n       * @since 2.0.0\r\n       * @return {Boolean} [cancel]\r\n       */\r\n      onDeselect: function() {\r\n        this.destroy();\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       * @param {Object} [childrenOverride] properties to override the children overrides\r\n       */\r\n      _renderControls: function(ctx, styleOverride, childrenOverride) {\r\n        ctx.save();\r\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        this.callSuper('_renderControls', ctx, styleOverride);\r\n        childrenOverride = childrenOverride || { };\r\n        if (typeof childrenOverride.hasControls === 'undefined') {\r\n          childrenOverride.hasControls = false;\r\n        }\r\n        if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\r\n          childrenOverride.hasRotatingPoint = false;\r\n        }\r\n        childrenOverride.forActiveSelection = true;\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i]._renderControls(ctx, childrenOverride);\r\n        }\r\n        ctx.restore();\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.ActiveSelection} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.ActiveSelection\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\r\n     */\r\n    fabric.ActiveSelection.fromObject = function(object, callback) {\r\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\r\n        delete object.objects;\r\n        callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var extend = fabric.util.object.extend;\r\n\r\n    if (!global.fabric) {\r\n      global.fabric = { };\r\n    }\r\n\r\n    if (global.fabric.Image) {\r\n      fabric.warn('fabric.Image is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Image class\r\n     * @class fabric.Image\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\r\n     * @see {@link fabric.Image#initialize} for constructor definition\r\n     */\r\n    fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'image',\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * Width of a stroke.\r\n       * For image quality a stroke multiple of 2 gives better results.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\r\n       * This allows for relative urls as image src.\r\n       * @since 2.7.0\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      srcFromAttribute: false,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleX to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleY to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleY: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingY: 1,\r\n\r\n      /**\r\n       * minimum scale factor under which any resizeFilter is triggered to resize the image\r\n       * 0 will disable the automatic resize. 1 will trigger automatically always.\r\n       * number bigger than 1 are not implemented yet.\r\n       * @type Number\r\n       */\r\n      minimumScaleTrigger: 0.5,\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\r\n\r\n      /**\r\n       * key used to retrieve the texture representing this image\r\n       * @since 2.0.0\r\n       * @type String\r\n       * @default\r\n       */\r\n      cacheKey: '',\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * @since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropX: 0,\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * @since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropY: 0,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLImageElement | String} element Image element\r\n       * @param {Object} [options] Options object\r\n       * @param {function} [callback] callback function to call after eventual filters applied.\r\n       * @return {fabric.Image} thisArg\r\n       */\r\n      initialize: function(element, options) {\r\n        options || (options = { });\r\n        this.filters = [];\r\n        this.cacheKey = 'texture' + fabric.Object.__uid++;\r\n        this.callSuper('initialize', options);\r\n        this._initElement(element, options);\r\n      },\r\n\r\n      /**\r\n       * Returns image element which this instance if based on\r\n       * @return {HTMLImageElement} Image element\r\n       */\r\n      getElement: function() {\r\n        return this._element || {};\r\n      },\r\n\r\n      /**\r\n       * Sets image element for this instance to a specified one.\r\n       * If filters defined they are applied to new image.\r\n       * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\r\n       * @param {HTMLImageElement} element\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setElement: function(element, options) {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._element = element;\r\n        this._originalElement = element;\r\n        this._initConfig(options);\r\n        if (this.filters.length !== 0) {\r\n          this.applyFilters();\r\n        }\r\n        // resizeFilters work on the already filtered copy.\r\n        // we need to apply resizeFilters AFTER normal filters.\r\n        // applyResizeFilters is run more often than normal fiters\r\n        // and is triggered by user interactions rather than dev code\r\n        if (this.resizeFilter) {\r\n          this.applyResizeFilters();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Delete a single texture if in webgl mode\r\n       */\r\n      removeTexture: function(key) {\r\n        var backend = fabric.filterBackend;\r\n        if (backend && backend.evictCachesForKey) {\r\n          backend.evictCachesForKey(key);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Delete textures, reference to elements and eventually JSDOM cleanup\r\n       */\r\n      dispose: function() {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._cacheContext = undefined;\r\n        ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n      },\r\n\r\n      /**\r\n       * Sets crossOrigin value (on an instance and corresponding image element)\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setCrossOrigin: function(value) {\r\n        this.crossOrigin = value;\r\n        this._element.crossOrigin = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns original size of an image\r\n       * @return {Object} Object with \"width\" and \"height\" properties\r\n       */\r\n      getOriginalSize: function() {\r\n        var element = this.getElement();\r\n        return {\r\n          width: element.naturalWidth || element.width,\r\n          height: element.naturalHeight || element.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _stroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n        var w = this.width / 2, h = this.height / 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(-w, -h);\r\n        ctx.lineTo(w, -h);\r\n        ctx.lineTo(w, h);\r\n        ctx.lineTo(-w, h);\r\n        ctx.lineTo(-w, -h);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.save();\r\n        this._setStrokeStyles(ctx, this);\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var filters = [];\r\n\r\n        this.filters.forEach(function(filterObj) {\r\n          if (filterObj) {\r\n            filters.push(filterObj.toObject());\r\n          }\r\n        });\r\n        var object = extend(\r\n          this.callSuper(\r\n            'toObject',\r\n            ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\r\n          ), {\r\n            src: this.getSrc(),\r\n            filters: filters,\r\n          });\r\n        if (this.resizeFilter) {\r\n          object.resizeFilter = this.resizeFilter.toObject();\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\r\n       * @return {Boolean}\r\n       */\r\n      hasCrop: function() {\r\n        return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var svgString = [], imageMarkup = [], strokeSvg,\r\n            x = -this.width / 2, y = -this.height / 2, clipPath = '';\r\n        if (this.hasCrop()) {\r\n          var clipPathId = fabric.Object.__uid++;\r\n          svgString.push(\r\n            '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\r\n            '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\r\n            '</clipPath>\\n'\r\n          );\r\n          clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\r\n        }\r\n        imageMarkup.push('\\t<image ', 'COMMON_PARTS', 'xlink:href=\"', this.getSvgSrc(true),\r\n          '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\r\n          // we're essentially moving origin of transformation from top/left corner to the center of the shape\r\n          // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\r\n          // so that object's center aligns with container's left/top\r\n          '\" width=\"', this._element.width || this._element.naturalWidth,\r\n          '\" height=\"', this._element.height || this._element.height,\r\n          '\"', clipPath,\r\n          '></image>\\n');\r\n\r\n        if (this.stroke || this.strokeDashArray) {\r\n          var origFill = this.fill;\r\n          this.fill = null;\r\n          strokeSvg = [\r\n            '\\t<rect ',\r\n            'x=\"', x, '\" y=\"', y,\r\n            '\" width=\"', this.width, '\" height=\"', this.height,\r\n            '\" style=\"', this.getSvgStyles(),\r\n            '\"/>\\n'\r\n          ];\r\n          this.fill = origFill;\r\n        }\r\n        if (this.paintFirst !== 'fill') {\r\n          svgString = svgString.concat(strokeSvg, imageMarkup);\r\n        }\r\n        else {\r\n          svgString = svgString.concat(imageMarkup, strokeSvg);\r\n        }\r\n        return svgString;\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns source of an image\r\n       * @param {Boolean} filtered indicates if the src is needed for svg\r\n       * @return {String} Source of an image\r\n       */\r\n      getSrc: function(filtered) {\r\n        var element = filtered ? this._element : this._originalElement;\r\n        if (element) {\r\n          if (element.toDataURL) {\r\n            return element.toDataURL();\r\n          }\r\n\r\n          if (this.srcFromAttribute) {\r\n            return element.getAttribute('src');\r\n          }\r\n          else {\r\n            return element.src;\r\n          }\r\n        }\r\n        else {\r\n          return this.src || '';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets source of an image\r\n       * @param {String} src Source string (URL)\r\n       * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setSrc: function(src, callback, options) {\r\n        fabric.util.loadImage(src, function(img) {\r\n          this.setElement(img, options);\r\n          this._setWidthHeight();\r\n          callback && callback(this);\r\n        }, this, options && options.crossOrigin);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\r\n      },\r\n\r\n      applyResizeFilters: function() {\r\n        var filter = this.resizeFilter,\r\n            minimumScale = this.minimumScaleTrigger,\r\n            objectScale = this.getTotalObjectScaling(),\r\n            scaleX = objectScale.scaleX,\r\n            scaleY = objectScale.scaleY,\r\n            elementToFilter = this._filteredEl || this._originalElement;\r\n        if (this.group) {\r\n          this.set('dirty', true);\r\n        }\r\n        if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\r\n          this._element = elementToFilter;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          this._lastScaleX = scaleX;\r\n          this._lastScaleY = scaleY;\r\n          return;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        var canvasEl = fabric.util.createCanvasElement(),\r\n            cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\r\n            sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\r\n        canvasEl.width = sourceWidth;\r\n        canvasEl.height = sourceHeight;\r\n        this._element = canvasEl;\r\n        this._lastScaleX = filter.scaleX = scaleX;\r\n        this._lastScaleY = filter.scaleY = scaleY;\r\n        fabric.filterBackend.applyFilters(\r\n          [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\r\n        this._filterScalingX = canvasEl.width / this._originalElement.width;\r\n        this._filterScalingY = canvasEl.height / this._originalElement.height;\r\n      },\r\n\r\n      /**\r\n       * Applies filters assigned to this image (from \"filters\" array) or from filter param\r\n       * @method applyFilters\r\n       * @param {Array} filters to be applied\r\n       * @param {Boolean} forResizing specify if the filter operation is a resize operation\r\n       * @return {thisArg} return the fabric.Image object\r\n       * @chainable\r\n       */\r\n      applyFilters: function(filters) {\r\n\r\n        filters = filters || this.filters || [];\r\n        filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\r\n        this.set('dirty', true);\r\n\r\n        // needs to clear out or WEBGL will not resize correctly\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n\r\n        if (filters.length === 0) {\r\n          this._element = this._originalElement;\r\n          this._filteredEl = null;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          return this;\r\n        }\r\n\r\n        var imgElement = this._originalElement,\r\n            sourceWidth = imgElement.naturalWidth || imgElement.width,\r\n            sourceHeight = imgElement.naturalHeight || imgElement.height;\r\n\r\n        if (this._element === this._originalElement) {\r\n          // if the element is the same we need to create a new element\r\n          var canvasEl = fabric.util.createCanvasElement();\r\n          canvasEl.width = sourceWidth;\r\n          canvasEl.height = sourceHeight;\r\n          this._element = canvasEl;\r\n          this._filteredEl = canvasEl;\r\n        }\r\n        else {\r\n          // clear the existing element to get new filter data\r\n          // also dereference the eventual resized _element\r\n          this._element = this._filteredEl;\r\n          this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\r\n          // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\r\n          this._lastScaleX = 1;\r\n          this._lastScaleY = 1;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        fabric.filterBackend.applyFilters(\r\n          filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\r\n        if (this._originalElement.width !== this._element.width ||\r\n          this._originalElement.height !== this._element.height) {\r\n          this._filterScalingX = this._element.width / this._originalElement.width;\r\n          this._filterScalingY = this._element.height / this._originalElement.height;\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\r\n          this.applyResizeFilters();\r\n        }\r\n        this._stroke(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * This is the special image version where we would like to avoid caching where possible.\r\n       * Essentially images do not benefit from caching. They may require caching, and in that\r\n       * case we do it. Also caching an image usually ends in a loss of details.\r\n       * A full performance audit should be done.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        return this.needsItsOwnCache();\r\n      },\r\n\r\n      _renderFill: function(ctx) {\r\n        var elementToDraw = this._element,\r\n            w = this.width, h = this.height,\r\n            sW = Math.min(elementToDraw.naturalWidth || elementToDraw.width, w * this._filterScalingX),\r\n            sH = Math.min(elementToDraw.naturalHeight || elementToDraw.height, h * this._filterScalingY),\r\n            x = -w / 2, y = -h / 2,\r\n            sX = Math.max(0, this.cropX * this._filterScalingX),\r\n            sY = Math.max(0, this.cropY * this._filterScalingY);\r\n\r\n        elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, w, h);\r\n      },\r\n\r\n      /**\r\n       * needed to check if image needs resize\r\n       * @private\r\n       */\r\n      _needsResize: function() {\r\n        var scale = this.getTotalObjectScaling();\r\n        return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _resetWidthHeight: function() {\r\n        this.set(this.getOriginalSize());\r\n      },\r\n\r\n      /**\r\n       * The Image class's initialization method. This method is automatically\r\n       * called by the constructor.\r\n       * @private\r\n       * @param {HTMLImageElement|String} element The element representing the image\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initElement: function(element, options) {\r\n        this.setElement(fabric.util.getById(element), options);\r\n        fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initConfig: function(options) {\r\n        options || (options = { });\r\n        this.setOptions(options);\r\n        this._setWidthHeight(options);\r\n        if (this._element && this.crossOrigin) {\r\n          this._element.crossOrigin = this.crossOrigin;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Array} filters to be initialized\r\n       * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\r\n       */\r\n      _initFilters: function(filters, callback) {\r\n        if (filters && filters.length) {\r\n          fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\r\n            callback && callback(enlivenedObjects);\r\n          }, 'fabric.Image.filters');\r\n        }\r\n        else {\r\n          callback && callback();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Set the width and the height of the image object, using the element or the\r\n       * options.\r\n       * @param {Object} [options] Object with width/height properties\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n        var el = this.getElement();\r\n        this.width = options.width || el.naturalWidth || el.width || 0;\r\n        this.height = options.height || el.naturalHeight || el.height || 0;\r\n      },\r\n\r\n      /**\r\n       * Calculate offset for center and scale factor for the image in order to respect\r\n       * the preserveAspectRatio attribute\r\n       * @private\r\n       * @return {Object}\r\n       */\r\n      parsePreserveAspectRatioAttribute: function() {\r\n        var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\r\n            rWidth = this._element.width, rHeight = this._element.height,\r\n            scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\r\n            offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\r\n        if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\r\n          if (pAR.meetOrSlice === 'meet') {\r\n            scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\r\n            offset = (pWidth - rWidth * scaleX) / 2;\r\n            if (pAR.alignX === 'Min') {\r\n              offsetLeft = -offset;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              offsetLeft = offset;\r\n            }\r\n            offset = (pHeight - rHeight * scaleY) / 2;\r\n            if (pAR.alignY === 'Min') {\r\n              offsetTop = -offset;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              offsetTop = offset;\r\n            }\r\n          }\r\n          if (pAR.meetOrSlice === 'slice') {\r\n            scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\r\n            offset = rWidth - pWidth / scaleX;\r\n            if (pAR.alignX === 'Mid') {\r\n              cropX = offset / 2;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              cropX = offset;\r\n            }\r\n            offset = rHeight - pHeight / scaleY;\r\n            if (pAR.alignY === 'Mid') {\r\n              cropY = offset / 2;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              cropY = offset;\r\n            }\r\n            rWidth = pWidth / scaleX;\r\n            rHeight = pHeight / scaleY;\r\n          }\r\n        }\r\n        else {\r\n          scaleX = pWidth / rWidth;\r\n          scaleY = pHeight / rHeight;\r\n        }\r\n        return {\r\n          width: rWidth,\r\n          height: rHeight,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          offsetLeft: offsetLeft,\r\n          offsetTop: offsetTop,\r\n          cropX: cropX,\r\n          cropY: cropY\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Default CSS class name for canvas\r\n     * @static\r\n     * @type String\r\n     * @default\r\n     */\r\n    fabric.Image.CSS_CANVAS = 'canvas-img';\r\n\r\n    /**\r\n     * Alias for getSrc\r\n     * @static\r\n     */\r\n    fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from its object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} callback Callback to invoke when an image instance is created\r\n     */\r\n    fabric.Image.fromObject = function(_object, callback) {\r\n      var object = fabric.util.object.clone(_object);\r\n      fabric.util.loadImage(object.src, function(img, error) {\r\n        if (error) {\r\n          callback && callback(null, error);\r\n          return;\r\n        }\r\n        fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\r\n          object.filters = filters || [];\r\n          fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\r\n            object.resizeFilter = resizeFilters[0];\r\n            fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\r\n              object.clipPath = enlivedProps[0];\r\n              var image = new fabric.Image(img, object);\r\n              callback(image);\r\n            });\r\n          });\r\n        });\r\n      }, null, object.crossOrigin);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from an URL string\r\n     * @static\r\n     * @param {String} url URL to create an image from\r\n     * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\r\n     * @param {Object} [imgOptions] Options object\r\n     */\r\n    fabric.Image.fromURL = function(url, callback, imgOptions) {\r\n      fabric.util.loadImage(url, function(img) {\r\n        callback && callback(new fabric.Image(img, imgOptions));\r\n      }, null, imgOptions && imgOptions.crossOrigin);\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\r\n     * @static\r\n     * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\r\n     */\r\n    fabric.Image.ATTRIBUTE_NAMES =\r\n      fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Image} instance from an SVG element\r\n     * @static\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} callback Callback to execute when fabric.Image object is created\r\n     * @return {fabric.Image} Instance of fabric.Image\r\n     */\r\n    fabric.Image.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\r\n      fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\r\n        extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} angle value\r\n     */\r\n    _getAngleValueForStraighten: function() {\r\n      var angle = this.angle % 360;\r\n      if (angle > 0) {\r\n        return Math.round((angle - 1) / 90) * 90;\r\n      }\r\n      return Math.round(angle / 90) * 90;\r\n    },\r\n\r\n    /**\r\n     * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    straighten: function() {\r\n      this.rotate(this._getAngleValueForStraighten());\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Object.prototype.straighten} but with animation\r\n     * @param {Object} callbacks Object with callback functions\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraighten: function(callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: this.get('angle'),\r\n        endValue: this._getAngleValueForStraighten(),\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          _this.rotate(value);\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          _this.setCoords();\r\n          onComplete();\r\n        },\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Straightens object, then rerenders canvas\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    straightenObject: function (object) {\r\n      object.straighten();\r\n      this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraightenObject: function (object) {\r\n      object.fxStraighten({\r\n        onChange: this.requestRenderAllBound\r\n      });\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Tests if webgl supports certain precision\r\n     * @param {WebGL} Canvas WebGL context to test on\r\n     * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\r\n     * @returns {Boolean} Whether the user's browser WebGL supports given precision.\r\n     */\r\n    function testPrecision(gl, precision){\r\n      var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Indicate whether this filtering backend is supported by the user's browser.\r\n     * @param {Number} tileSize check if the tileSize is supported\r\n     * @returns {Boolean} Whether the user's browser supports WebGL.\r\n     */\r\n    fabric.isWebglSupported = function(tileSize) {\r\n      if (fabric.isLikelyNode) {\r\n        return false;\r\n      }\r\n      tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\r\n      var canvas = document.createElement('canvas');\r\n      var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n      var isSupported = false;\r\n      // eslint-disable-next-line\r\n      if (gl) {\r\n        fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n        isSupported = fabric.maxTextureSize >= tileSize;\r\n        var precisions = ['highp', 'mediump', 'lowp'];\r\n        for (var i = 0; i < 3; i++){\r\n          if (testPrecision(gl, precisions[i])){\r\n            fabric.webGlPrecision = precisions[i];\r\n            break;\r\n          };\r\n        }\r\n      }\r\n      this.isSupported = isSupported;\r\n      return isSupported;\r\n    };\r\n\r\n    fabric.WebglFilterBackend = WebglFilterBackend;\r\n\r\n    /**\r\n     * WebGL filter backend.\r\n     */\r\n    function WebglFilterBackend(options) {\r\n      if (options && options.tileSize) {\r\n        this.tileSize = options.tileSize;\r\n      }\r\n      this.setupGLContext(this.tileSize, this.tileSize);\r\n      this.captureGPUInfo();\r\n    };\r\n\r\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\r\n\r\n      tileSize: 2048,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you problably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\r\n       */\r\n      setupGLContext: function(width, height) {\r\n        this.dispose();\r\n        this.createWebGLCanvas(width, height);\r\n        // eslint-disable-next-line\r\n        this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\r\n        this.chooseFastestCopyGLTo2DMethod(width, height);\r\n      },\r\n\r\n      /**\r\n       * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\r\n       * putImageData is faster than drawImage for that specific operation.\r\n       */\r\n      chooseFastestCopyGLTo2DMethod: function(width, height) {\r\n        var canMeasurePerf = typeof window.performance !== 'undefined', canUseImageData;\r\n        try {\r\n          new ImageData(1, 1);\r\n          canUseImageData = true;\r\n        }\r\n        catch (e) {\r\n          canUseImageData = false;\r\n        }\r\n        // eslint-disable-next-line no-undef\r\n        var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\r\n        // eslint-disable-next-line no-undef\r\n        var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\r\n\r\n        if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\r\n          return;\r\n        }\r\n\r\n        var targetCanvas = fabric.util.createCanvasElement();\r\n        // eslint-disable-next-line no-undef\r\n        var imageBuffer = new ArrayBuffer(width * height * 4);\r\n        if (fabric.forceGLPutImageData) {\r\n          this.imageBuffer = imageBuffer;\r\n          this.copyGLTo2D = copyGLTo2DPutImageData;\r\n          return;\r\n        }\r\n        var testContext = {\r\n          imageBuffer: imageBuffer,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var startTime, drawImageTime, putImageDataTime;\r\n        targetCanvas.width = width;\r\n        targetCanvas.height = height;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\r\n        drawImageTime = window.performance.now() - startTime;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\r\n        putImageDataTime = window.performance.now() - startTime;\r\n\r\n        if (drawImageTime > putImageDataTime) {\r\n          this.imageBuffer = imageBuffer;\r\n          this.copyGLTo2D = copyGLTo2DPutImageData;\r\n        }\r\n        else {\r\n          this.copyGLTo2D = copyGLTo2DDrawImage;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a canvas element and associated WebGL context and attaches them as\r\n       * class properties to the GLFilterBackend class.\r\n       */\r\n      createWebGLCanvas: function(width, height) {\r\n        var canvas = fabric.util.createCanvasElement();\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        var glOptions = {\r\n              alpha: true,\r\n              premultipliedAlpha: false,\r\n              depth: false,\r\n              stencil: false,\r\n              antialias: false\r\n            },\r\n            gl = canvas.getContext('webgl', glOptions);\r\n        if (!gl) {\r\n          gl = canvas.getContext('experimental-webgl', glOptions);\r\n        }\r\n        if (!gl) {\r\n          return;\r\n        }\r\n        gl.clearColor(0, 0, 0, 0);\r\n        // this canvas can fire webglcontextlost and webglcontextrestored\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n      },\r\n\r\n      /**\r\n       * Attempts to apply the requested filters to the source provided, drawing the filtered output\r\n       * to the provided target canvas.\r\n       *\r\n       * @param {Array} filters The filters to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\r\n       * @param {Number} width The width of the source input.\r\n       * @param {Number} height The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\r\n       * omitted, caching will be skipped.\r\n       */\r\n      applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\r\n        var gl = this.gl;\r\n        var cachedTexture;\r\n        if (cacheKey) {\r\n          cachedTexture = this.getCachedTexture(cacheKey, source);\r\n        }\r\n        var pipelineState = {\r\n          originalWidth: source.width || source.originalWidth,\r\n          originalHeight: source.height || source.originalHeight,\r\n          sourceWidth: width,\r\n          sourceHeight: height,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          context: gl,\r\n          sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\r\n          targetTexture: this.createTexture(gl, width, height),\r\n          originalTexture: cachedTexture ||\r\n            this.createTexture(gl, width, height, !cachedTexture && source),\r\n          passes: filters.length,\r\n          webgl: true,\r\n          aPosition: this.aPosition,\r\n          programCache: this.programCache,\r\n          pass: 0,\r\n          filterBackend: this,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var tempFbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\r\n        filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\r\n        resizeCanvasIfNeeded(pipelineState);\r\n        this.copyGLTo2D(gl, pipelineState);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(pipelineState.sourceTexture);\r\n        gl.deleteTexture(pipelineState.targetTexture);\r\n        gl.deleteFramebuffer(tempFbo);\r\n        targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n      /**\r\n       * Detach event listeners, remove references, and clean up caches.\r\n       */\r\n      dispose: function() {\r\n        if (this.canvas) {\r\n          this.canvas = null;\r\n          this.gl = null;\r\n        }\r\n        this.clearWebGLCaches();\r\n      },\r\n\r\n      /**\r\n       * Wipe out WebGL-related caches.\r\n       */\r\n      clearWebGLCaches: function() {\r\n        this.programCache = {};\r\n        this.textureCache = {};\r\n      },\r\n\r\n      /**\r\n       * Create a WebGL texture object.\r\n       *\r\n       * Accepts specific dimensions to initialize the textuer to or a source image.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\r\n       * @param {Number} width The width to initialize the texture at.\r\n       * @param {Number} height The height to initialize the texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\r\n       * @returns {WebGLTexture}\r\n       */\r\n      createTexture: function(gl, width, height, textureImageSource) {\r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        if (textureImageSource) {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\r\n        }\r\n        else {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        }\r\n        return texture;\r\n      },\r\n\r\n      /**\r\n       * Can be optionally used to get a texture from the cache array\r\n       *\r\n       * If an existing texture is not found, a new texture is created and cached.\r\n       *\r\n       * @param {String} uniqueId A cache key to use to find an existing texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\r\n       * texture cache entry if one does not already exist.\r\n       */\r\n      getCachedTexture: function(uniqueId, textureImageSource) {\r\n        if (this.textureCache[uniqueId]) {\r\n          return this.textureCache[uniqueId];\r\n        }\r\n        else {\r\n          var texture = this.createTexture(\r\n            this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\r\n          this.textureCache[uniqueId] = texture;\r\n          return texture;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Clear out cached resources related to a source image that has been\r\n       * filtered previously.\r\n       *\r\n       * @param {String} cacheKey The cache key provided when the source image was filtered.\r\n       */\r\n      evictCachesForKey: function(cacheKey) {\r\n        if (this.textureCache[cacheKey]) {\r\n          this.gl.deleteTexture(this.textureCache[cacheKey]);\r\n          delete this.textureCache[cacheKey];\r\n        }\r\n      },\r\n\r\n      copyGLTo2D: copyGLTo2DDrawImage,\r\n\r\n      /**\r\n       * Attempt to extract GPU information strings from a WebGL context.\r\n       *\r\n       * Useful information when debugging or blacklisting specific GPUs.\r\n       *\r\n       * @returns {Object} A GPU info object with renderer and vendor strings.\r\n       */\r\n      captureGPUInfo: function() {\r\n        if (this.gpuInfo) {\r\n          return this.gpuInfo;\r\n        }\r\n        var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\r\n        if (!gl) {\r\n          return gpuInfo;\r\n        }\r\n        var ext = gl.getExtension('WEBGL_debug_renderer_info');\r\n        if (ext) {\r\n          var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\r\n          var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\r\n          if (renderer) {\r\n            gpuInfo.renderer = renderer.toLowerCase();\r\n          }\r\n          if (vendor) {\r\n            gpuInfo.vendor = vendor.toLowerCase();\r\n          }\r\n        }\r\n        this.gpuInfo = gpuInfo;\r\n        return gpuInfo;\r\n      },\r\n    };\r\n  })();\r\n\r\n  function resizeCanvasIfNeeded(pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas,\r\n        width = targetCanvas.width, height = targetCanvas.height,\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight;\r\n\r\n    if (width !== dWidth || height !== dHeight) {\r\n      targetCanvas.width = dWidth;\r\n      targetCanvas.height = dHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas.\r\n   *\r\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\r\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DDrawImage(gl, pipelineState) {\r\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\r\n        ctx = targetCanvas.getContext('2d');\r\n    ctx.translate(0, targetCanvas.height); // move it down again\r\n    ctx.scale(1, -1); // vertical flip\r\n    // where is my image on the big glcanvas?\r\n    var sourceY = glCanvas.height - targetCanvas.height;\r\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\r\n      targetCanvas.width, targetCanvas.height);\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\r\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DPutImageData(gl, pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight,\r\n        numBytes = dWidth * dHeight * 4;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\r\n    // eslint-disable-next-line no-undef\r\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\r\n\r\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\r\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\r\n    ctx.putImageData(imgData, 0, 0);\r\n  }\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var noop = function() {};\r\n\r\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\r\n\r\n    /**\r\n     * Canvas 2D filter backend.\r\n     */\r\n    function Canvas2dFilterBackend() {};\r\n\r\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\r\n      evictCachesForKey: noop,\r\n      dispose: noop,\r\n      clearWebGLCaches: noop,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you probably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Apply a set of filters against a source image and draw the filtered output\r\n       * to the provided destination canvas.\r\n       *\r\n       * @param {EnhancedFilter} filters The filter to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\r\n       * @param {Number} sourceWidth The width of the source input.\r\n       * @param {Number} sourceHeight The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       */\r\n      applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\r\n        var ctx = targetCanvas.getContext('2d');\r\n        ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\r\n        var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var pipelineState = {\r\n          sourceWidth: sourceWidth,\r\n          sourceHeight: sourceHeight,\r\n          imageData: imageData,\r\n          originalEl: sourceElement,\r\n          originalImageData: originalImageData,\r\n          canvasEl: targetCanvas,\r\n          ctx: ctx,\r\n          filterBackend: this,\r\n        };\r\n        filters.forEach(function(filter) { filter.applyTo(pipelineState); });\r\n        if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\r\n          targetCanvas.width = pipelineState.imageData.width;\r\n          targetCanvas.height = pipelineState.imageData.height;\r\n        }\r\n        ctx.putImageData(pipelineState.imageData, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Image.filters\r\n   * @memberOf fabric.Image\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   */\r\n  fabric.Image = fabric.Image || { };\r\n  fabric.Image.filters = fabric.Image.filters || { };\r\n\r\n  /**\r\n   * Root filter class from which all filter classes inherit from\r\n   * @class fabric.Image.filters.BaseFilter\r\n   * @memberOf fabric.Image.filters\r\n   */\r\n  fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'BaseFilter',\r\n\r\n    /**\r\n     * Array of attributes to send with buffers. do not modify\r\n     * @private\r\n     */\r\n\r\n    vertexSource: 'attribute vec2 aPosition;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vTexCoord = aPosition;\\n' +\r\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n      '}',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'void main() {\\n' +\r\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      if (options) {\r\n        this.setOptions(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets filter's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this[prop] = options[prop];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Compile this filter's shader program.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\r\n     * @param {String} fragmentSource fragmentShader source for compilation\r\n     * @param {String} vertexSource vertexShader source for compilation\r\n     */\r\n    createProgram: function(gl, fragmentSource, vertexSource) {\r\n      fragmentSource = fragmentSource || this.fragmentSource;\r\n      vertexSource = vertexSource || this.vertexSource;\r\n      if (fabric.webGlPrecision !== 'highp'){\r\n        fragmentSource = fragmentSource.replace(\r\n          /precision highp float/g,\r\n          'precision ' + fabric.webGlPrecision + ' float'\r\n        );\r\n      }\r\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      gl.shaderSource(vertexShader, vertexSource);\r\n      gl.compileShader(vertexShader);\r\n      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Vertex shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(vertexShader)\r\n        );\r\n      }\r\n\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Fragment shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(fragmentShader)\r\n        );\r\n      }\r\n\r\n      var program = gl.createProgram();\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Shader link error for \"${this.type}\" ' +\r\n          gl.getProgramInfoLog(program)\r\n        );\r\n      }\r\n\r\n      var attributeLocations = this.getAttributeLocations(gl, program);\r\n      var uniformLocations = this.getUniformLocations(gl, program) || { };\r\n      uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\r\n      uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\r\n      return {\r\n        program: program,\r\n        attributeLocations: attributeLocations,\r\n        uniformLocations: uniformLocations\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of attribute names to WebGLAttributeLocation objects.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\r\n     * @returns {Object} A map of attribute names to attribute locations.\r\n     */\r\n    getAttributeLocations: function(gl, program) {\r\n      return {\r\n        aPosition: gl.getAttribLocation(program, 'aPosition'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of uniform names to WebGLUniformLocation objects.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\r\n     * @returns {Object} A map of uniform names to uniform locations.\r\n     */\r\n    getUniformLocations: function (/* gl, program */) {\r\n      // in case i do not need any special uniform i need to return an empty object\r\n      return { };\r\n    },\r\n\r\n    /**\r\n     * Send attribute data from this filter to its shader program on the GPU.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} attributeLocations A map of shader attribute names to their locations.\r\n     */\r\n    sendAttributeData: function(gl, attributeLocations, aPositionData) {\r\n      var attributeLocation = attributeLocations.aPosition;\r\n      var buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(attributeLocation);\r\n      gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n      gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\r\n    },\r\n\r\n    _setupFrameBuffer: function(options) {\r\n      var gl = options.context, width, height;\r\n      if (options.passes > 1) {\r\n        width = options.destinationWidth;\r\n        height = options.destinationHeight;\r\n        if (options.sourceWidth !== width || options.sourceHeight !== height) {\r\n          gl.deleteTexture(options.targetTexture);\r\n          options.targetTexture = options.filterBackend.createTexture(gl, width, height);\r\n        }\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\r\n          options.targetTexture, 0);\r\n      }\r\n      else {\r\n        // draw last filter on canvas and not to framebuffer.\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.finish();\r\n      }\r\n    },\r\n\r\n    _swapTextures: function(options) {\r\n      options.passes--;\r\n      options.pass++;\r\n      var temp = options.targetTexture;\r\n      options.targetTexture = options.sourceTexture;\r\n      options.sourceTexture = temp;\r\n    },\r\n\r\n    /**\r\n     * Generic isNeutral implementation for one parameter based filters.\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\r\n     * @param {Object} options\r\n     **/\r\n    isNeutralState: function(/* options */) {\r\n      var main = this.mainParameter,\r\n          _class = fabric.Image.filters[this.type].prototype;\r\n      if (main) {\r\n        if (Array.isArray(_class[main])) {\r\n          for (var i = _class[main].length; i--;) {\r\n            if (this[main][i] !== _class[main][i]) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        }\r\n        else {\r\n          return _class[main] === this[main];\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply this filter to the input image data provided.\r\n     *\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyTo: function(options) {\r\n      if (options.webgl) {\r\n        this._setupFrameBuffer(options);\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n      }\r\n      else {\r\n        this.applyTo2d(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      if (!options.programCache.hasOwnProperty(this.type)) {\r\n        options.programCache[this.type] = this.createProgram(options.context);\r\n      }\r\n      return options.programCache[this.type];\r\n    },\r\n\r\n    /**\r\n     * Apply this filter using webgl.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.originalTexture The texture of the original input image.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyToWebGL: function(options) {\r\n      var gl = options.context;\r\n      var shader = this.retrieveShader(options);\r\n      if (options.pass === 0 && options.originalTexture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\r\n      }\r\n      else {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\r\n      }\r\n      gl.useProgram(shader.program);\r\n      this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\r\n\r\n      gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\r\n      gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\r\n\r\n      this.sendUniformData(gl, shader.uniformLocations);\r\n      gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    },\r\n\r\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      // reset active texture to 0 as usual\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    unbindAdditionalTexture: function(gl, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    getMainParameter: function() {\r\n      return this[this.mainParameter];\r\n    },\r\n\r\n    setMainParameter: function(value) {\r\n      this[this.mainParameter] = value;\r\n    },\r\n\r\n    /**\r\n     * Send uniform data from this filter to its shader program on the GPU.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} uniformLocations A map of shader uniform names to their locations.\r\n     */\r\n    sendUniformData: function(/* gl, uniformLocations */) {\r\n      // Intentionally left blank.  Override me in subclasses.\r\n    },\r\n\r\n    /**\r\n     * If needed by a 2d filter, this functions can create an helper canvas to be used\r\n     * remember that options.targetCanvas is available for use till end of chain.\r\n     */\r\n    createHelpLayer: function(options) {\r\n      if (!options.helpLayer) {\r\n        var helpLayer = document.createElement('canvas');\r\n        helpLayer.width = options.sourceWidth;\r\n        helpLayer.height = options.sourceHeight;\r\n        options.helpLayer = helpLayer;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      var object = { type: this.type }, mainP = this.mainParameter;\r\n      if (mainP) {\r\n        object[mainP] = this[mainP];\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON representation of an instance\r\n     * @return {Object} JSON\r\n     */\r\n    toJSON: function() {\r\n      // delegate, not alias\r\n      return this.toObject();\r\n    }\r\n  });\r\n\r\n  fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\r\n    var filter = new fabric.Image.filters[object.type](object);\r\n    callback && callback(filter);\r\n    return filter;\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Matrix filter class\r\n     * @class fabric.Image.filters.ColorMatrix\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\r\n     * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\r\n     * @example <caption>Kodachrome filter</caption>\r\n     * var filter = new fabric.Image.filters.ColorMatrix({\r\n     *  matrix: [\r\n         1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n         -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n         -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n         0, 0, 0, 1, 0\r\n        ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'ColorMatrix',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'uniform mat4 uColorMatrix;\\n' +\r\n        'uniform vec4 uConstants;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color *= uColorMatrix;\\n' +\r\n          'color += uConstants;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Colormatrix for pixels.\r\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n       * outside the -1, 1 range.\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Array} matrix array of 20 numbers.\r\n       * @default\r\n       */\r\n      matrix: [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n\r\n      mainParameter: 'matrix',\r\n\r\n      /**\r\n       * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\r\n       * to save some calculation\r\n       */\r\n      colorsOnly: true,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.matrix = this.matrix.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = data.length,\r\n            m = this.matrix,\r\n            r, g, b, a, i, colorsOnly = this.colorsOnly;\r\n\r\n        for (i = 0; i < iLen; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          if (colorsOnly) {\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\r\n          }\r\n          else {\r\n            a = data[i + 3];\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\r\n            data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\r\n          uConstants: gl.getUniformLocation(program, 'uConstants'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var m = this.matrix,\r\n            matrix = [\r\n              m[0], m[1], m[2], m[3],\r\n              m[5], m[6], m[7], m[8],\r\n              m[10], m[11], m[12], m[13],\r\n              m[15], m[16], m[17], m[18]\r\n            ],\r\n            constants = [m[4], m[9], m[14], m[19]];\r\n        gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\r\n        gl.uniform4fv(uniformLocations.uConstants, constants);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] function to invoke after filter creation\r\n     * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\r\n     */\r\n    fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Brightness filter class\r\n     * @class fabric.Image.filters.Brightness\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Brightness({\r\n     *   brightness: 0.05\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Brightness',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBrightness;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += uBrightness;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Brightness value, from -1 to 1.\r\n       * translated to -255 to 255 for 2d\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Number} brightness\r\n       * @default\r\n       */\r\n      brightness: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'brightness',\r\n\r\n      /**\r\n      * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n      *\r\n      * @param {Object} options\r\n      * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n      */\r\n      applyTo2d: function(options) {\r\n        if (this.brightness === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            brightness = Math.round(this.brightness * 255);\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = data[i] + brightness;\r\n          data[i + 1] = data[i + 1] + brightness;\r\n          data[i + 2] = data[i + 2] + brightness;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBrightness: gl.getUniformLocation(program, 'uBrightness'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBrightness, this.brightness);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\r\n     */\r\n    fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\r\n     * @class fabric.Image.filters.Convolute\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example <caption>Sharpen filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 0, -1,  0,\r\n     *            -1,  5, -1,\r\n     *             0, -1,  0 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Blur filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter with opaqueness</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   opaque: true,\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Convolute',\r\n\r\n      /*\r\n       * Opaque value (true/false)\r\n       */\r\n      opaque: false,\r\n\r\n      /*\r\n       * matrix for the filter, max 9x9\r\n       */\r\n      matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: {\r\n        Convolute_3_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_3_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_5_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_5_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_7_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_7_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_9_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_9_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Convolute.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.opaque=false] Opaque value (true/false)\r\n       * @param {Array} [options.matrix] Filter matrix\r\n       */\r\n\r\n\r\n      /**\r\n      * Retrieves the cached shader.\r\n      * @param {Object} options\r\n      * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n      * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n      */\r\n      retrieveShader: function(options) {\r\n        var size = Math.sqrt(this.matrix.length);\r\n        var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\r\n        var shaderSource = this.fragmentSource[cacheKey];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            weights = this.matrix,\r\n            side = Math.round(Math.sqrt(weights.length)),\r\n            halfSide = Math.floor(side / 2),\r\n            sw = imageData.width,\r\n            sh = imageData.height,\r\n            output = options.ctx.createImageData(sw, sh),\r\n            dst = output.data,\r\n            // go through the destination image pixels\r\n            alphaFac = this.opaque ? 1 : 0,\r\n            r, g, b, a, dstOff,\r\n            scx, scy, srcOff, wt,\r\n            x, y, cx, cy;\r\n\r\n        for (y = 0; y < sh; y++) {\r\n          for (x = 0; x < sw; x++) {\r\n            dstOff = (y * sw + x) * 4;\r\n            // calculate the weighed sum of the source image pixels that\r\n            // fall under the convolution matrix\r\n            r = 0; g = 0; b = 0; a = 0;\r\n\r\n            for (cy = 0; cy < side; cy++) {\r\n              for (cx = 0; cx < side; cx++) {\r\n                scy = y + cy - halfSide;\r\n                scx = x + cx - halfSide;\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\r\n                  continue;\r\n                }\r\n\r\n                srcOff = (scy * sw + scx) * 4;\r\n                wt = weights[cy * side + cx];\r\n\r\n                r += data[srcOff] * wt;\r\n                g += data[srcOff + 1] * wt;\r\n                b += data[srcOff + 2] * wt;\r\n                // eslint-disable-next-line max-depth\r\n                if (!alphaFac) {\r\n                  a += data[srcOff + 3] * wt;\r\n                }\r\n              }\r\n            }\r\n            dst[dstOff] = r;\r\n            dst[dstOff + 1] = g;\r\n            dst[dstOff + 2] = b;\r\n            if (!alphaFac) {\r\n              dst[dstOff + 3] = a;\r\n            }\r\n            else {\r\n              dst[dstOff + 3] = data[dstOff + 3];\r\n            }\r\n          }\r\n        }\r\n        options.imageData = output;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMatrix: gl.getUniformLocation(program, 'uMatrix'),\r\n          uOpaque: gl.getUniformLocation(program, 'uOpaque'),\r\n          uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\r\n          uSize: gl.getUniformLocation(program, 'uSize'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          opaque: this.opaque,\r\n          matrix: this.matrix\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\r\n     */\r\n    fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Grayscale image filter class\r\n     * @class fabric.Image.filters.Grayscale\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Grayscale();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Grayscale',\r\n\r\n      fragmentSource: {\r\n        average: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (color.r + color.b + color.g) / 3.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, color.a);\\n' +\r\n          '}',\r\n        lightness: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n        luminosity: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n      },\r\n\r\n\r\n      /**\r\n       * Grayscale mode, between 'average', 'lightness', 'luminosity'\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      mode: 'average',\r\n\r\n      mainParameter: 'mode',\r\n\r\n      /**\r\n       * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length, value,\r\n            mode = this.mode;\r\n        for (i = 0; i < len; i += 4) {\r\n          if (mode === 'average') {\r\n            value = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          }\r\n          else if (mode === 'lightness') {\r\n            value = (Math.min(data[i], data[i + 1], data[i + 2]) +\r\n              Math.max(data[i], data[i + 1], data[i + 2])) / 2;\r\n          }\r\n          else if (mode === 'luminosity') {\r\n            value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\r\n          }\r\n          data[i] = value;\r\n          data[i + 1] = value;\r\n          data[i + 2] = value;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var shaderSource = this.fragmentSource[this.mode];\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMode: gl.getUniformLocation(program, 'uMode'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        // default average mode.\r\n        var mode = 1;\r\n        gl.uniform1i(uniformLocations.uMode, mode);\r\n      },\r\n\r\n      /**\r\n       * Grayscale filter isNeutralState implementation\r\n       * The filter is never neutral\r\n       * on the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return false;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\r\n     */\r\n    fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Invert filter class\r\n     * @class fabric.Image.filters.Invert\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Invert();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Invert',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform int uInvert;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if (uInvert == 1) {\\n' +\r\n            'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Filter invert. if false, does nothing\r\n       * @param {Boolean} invert\r\n       * @default\r\n       */\r\n      invert: true,\r\n\r\n      mainParameter: 'invert',\r\n\r\n      /**\r\n       * Apply the Invert operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length;\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = 255 - data[i];\r\n          data[i + 1] = 255 - data[i + 1];\r\n          data[i + 2] = 255 - data[i + 2];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invert filter isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function() {\r\n        return !this.invert;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uInvert: gl.getUniformLocation(program, 'uInvert'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1i(uniformLocations.uInvert, this.invert);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\r\n     */\r\n    fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Noise filter class\r\n     * @class fabric.Image.filters.Noise\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Noise({\r\n     *   noise: 700\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Noise',\r\n\r\n      /**\r\n       * Fragment source for the noise program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'uniform float uNoise;\\n' +\r\n        'uniform float uSeed;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'float rand(vec2 co, float seed, float vScale) {\\n' +\r\n          'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'noise',\r\n\r\n      /**\r\n       * Noise value, from\r\n       * @param {Number} noise\r\n       * @default\r\n       */\r\n      noise: 0,\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.noise === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            noise = this.noise, rand;\r\n\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n\r\n          rand = (0.5 - Math.random()) * noise;\r\n\r\n          data[i] += rand;\r\n          data[i + 1] += rand;\r\n          data[i + 2] += rand;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uNoise: gl.getUniformLocation(program, 'uNoise'),\r\n          uSeed: gl.getUniformLocation(program, 'uSeed'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\r\n        gl.uniform1f(uniformLocations.uSeed, Math.random());\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          noise: this.noise\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\r\n     */\r\n    fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Pixelate filter class\r\n     * @class fabric.Image.filters.Pixelate\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Pixelate({\r\n     *   blocksize: 8\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Pixelate',\r\n\r\n      blocksize: 4,\r\n\r\n      mainParameter: 'blocksize',\r\n\r\n      /**\r\n       * Fragment source for the Pixelate program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBlocksize;\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'float blockW = uBlocksize * uStepW;\\n' +\r\n          'float blockH = uBlocksize * uStepW;\\n' +\r\n          'int posX = int(vTexCoord.x / blockW);\\n' +\r\n          'int posY = int(vTexCoord.y / blockH);\\n' +\r\n          'float fposX = float(posX);\\n' +\r\n          'float fposY = float(posY);\\n' +\r\n          'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\r\n          'vec4 color = texture2D(uTexture, squareCoords);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = imageData.height,\r\n            jLen = imageData.width,\r\n            index, i, j, r, g, b, a,\r\n            _i, _j, _iLen, _jLen;\r\n\r\n        for (i = 0; i < iLen; i += this.blocksize) {\r\n          for (j = 0; j < jLen; j += this.blocksize) {\r\n\r\n            index = (i * 4) * jLen + (j * 4);\r\n\r\n            r = data[index];\r\n            g = data[index + 1];\r\n            b = data[index + 2];\r\n            a = data[index + 3];\r\n\r\n            _iLen = Math.min(i + this.blocksize, iLen);\r\n            _jLen = Math.min(j + this.blocksize, jLen);\r\n            for (_i = i; _i < _iLen; _i++) {\r\n              for (_j = j; _j < _jLen; _j++) {\r\n                index = (_i * 4) * jLen + (_j * 4);\r\n                data[index] = r;\r\n                data[index + 1] = g;\r\n                data[index + 2] = b;\r\n                data[index + 3] = a;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Indicate when the filter is not gonna apply changes to the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return this.blocksize === 1;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\r\n          uStepW: gl.getUniformLocation(program, 'uStepW'),\r\n          uStepH: gl.getUniformLocation(program, 'uStepH'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\r\n     */\r\n    fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Remove white filter class\r\n     * @class fabric.Image.filters.RemoveColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.RemoveColor({\r\n     *   threshold: 0.2,\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'RemoveColor',\r\n\r\n      /**\r\n       * Color to remove, in any format understood by fabric.Color.\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      color: '#FFFFFF',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec4 uLow;\\n' +\r\n        'uniform vec4 uHigh;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\r\n            'gl_FragColor.a = 0.0;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * distance to actual color, as value up or down from each r,g,b\r\n       * between 0 and 1\r\n       **/\r\n      distance: 0.02,\r\n\r\n      /**\r\n       * For color to remove inside distance, use alpha channel for a smoother deletion\r\n       * NOT IMPLEMENTED YET\r\n       **/\r\n      useAlpha: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.RemoveWhite.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.color=#RRGGBB] Threshold value\r\n       * @param {Number} [options.distance=10] Distance value\r\n       */\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            distance = this.distance * 255,\r\n            r, g, b,\r\n            source = new fabric.Color(this.color).getSource(),\r\n            lowC = [\r\n              source[0] - distance,\r\n              source[1] - distance,\r\n              source[2] - distance,\r\n            ],\r\n            highC = [\r\n              source[0] + distance,\r\n              source[1] + distance,\r\n              source[2] + distance,\r\n            ];\r\n\r\n\r\n        for (i = 0; i < data.length; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          if (r > lowC[0] &&\r\n              g > lowC[1] &&\r\n              b > lowC[2] &&\r\n              r < highC[0] &&\r\n              g < highC[1] &&\r\n              b < highC[2]) {\r\n            data[i + 3] = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uLow: gl.getUniformLocation(program, 'uLow'),\r\n          uHigh: gl.getUniformLocation(program, 'uHigh'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource(),\r\n            distance = parseFloat(this.distance),\r\n            lowC = [\r\n              0 + source[0] / 255 - distance,\r\n              0 + source[1] / 255 - distance,\r\n              0 + source[2] / 255 - distance,\r\n              1\r\n            ],\r\n            highC = [\r\n              source[0] / 255 + distance,\r\n              source[1] / 255 + distance,\r\n              source[2] / 255 + distance,\r\n              1\r\n            ];\r\n        gl.uniform4fv(uniformLocations.uLow, lowC);\r\n        gl.uniform4fv(uniformLocations.uHigh, highC);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          color: this.color,\r\n          distance: this.distance\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\r\n     */\r\n    fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    var matrices = {\r\n      Brownie: [\r\n        0.59970,0.34553,-0.27082,0,0.186,\r\n        -0.03770,0.86095,0.15059,0,-0.1449,\r\n        0.24113,-0.07441,0.44972,0,-0.02965,\r\n        0,0,0,1,0\r\n      ],\r\n      Vintage: [\r\n        0.62793,0.32021,-0.03965,0,0.03784,\r\n        0.02578,0.64411,0.03259,0,0.02926,\r\n        0.04660,-0.08512,0.52416,0,0.02023,\r\n        0,0,0,1,0\r\n      ],\r\n      Kodachrome: [\r\n        1.12855,-0.39673,-0.03992,0,0.24991,\r\n        -0.16404,1.08352,-0.05498,0,0.09698,\r\n        -0.16786,-0.56034,1.60148,0,0.13972,\r\n        0,0,0,1,0\r\n      ],\r\n      Technicolor: [\r\n        1.91252,-0.85453,-0.09155,0,0.04624,\r\n        -0.30878,1.76589,-0.10601,0,-0.27589,\r\n        -0.23110,-0.75018,1.84759,0,0.12137,\r\n        0,0,0,1,0\r\n      ],\r\n      Polaroid: [\r\n        1.438,-0.062,-0.062,0,0,\r\n        -0.122,1.378,-0.122,0,0,\r\n        -0.016,-0.016,1.483,0,0,\r\n        0,0,0,1,0\r\n      ],\r\n      Sepia: [\r\n        0.393, 0.769, 0.189, 0, 0,\r\n        0.349, 0.686, 0.168, 0, 0,\r\n        0.272, 0.534, 0.131, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n      BlackWhite: [\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        0, 0, 0, 1, 0,\r\n      ]\r\n    };\r\n\r\n    for (var key in matrices) {\r\n      filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\r\n\r\n        /**\r\n         * Filter type\r\n         * @param {String} type\r\n         * @default\r\n         */\r\n        type: key,\r\n\r\n        /**\r\n         * Colormatrix for the effect\r\n         * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n         * outside the -1, 1 range.\r\n         * @param {Array} matrix array of 20 numbers.\r\n         * @default\r\n         */\r\n        matrix: matrices[key],\r\n\r\n        /**\r\n         * Lock the matrix export for this kind of static, parameter less filters.\r\n         */\r\n        mainParameter: false,\r\n        /**\r\n         * Lock the colormatrix on the color part, skipping alpha\r\n         */\r\n        colorsOnly: true,\r\n\r\n      });\r\n      fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n    }\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Blend filter class\r\n     * @class fabric.Image.filter.BlendColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\r\n      type: 'BlendColor',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      color: '#F95C63',\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend color operation.\r\n       **/\r\n      alpha: 1,\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\r\n        screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\r\n        add: 'gl_FragColor.rgb += uColor.rgb;\\n',\r\n        diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\r\n        subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\r\n        lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\r\n        overlay: 'if (uColor.r < 0.5) {\\n' +\r\n            'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.g < 0.5) {\\n' +\r\n            'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.b < 0.5) {\\n' +\r\n            'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\r\n          '}\\n',\r\n        tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\r\n          'gl_FragColor.rgb += uColor.rgb;\\n',\r\n      },\r\n\r\n      /**\r\n       * build the fragment source for the filters, joining the common part with\r\n       * the specific one.\r\n       * @param {String} mode the mode of the filter, a key of this.fragmentSource\r\n       * @return {String} the source to be compiled\r\n       * @private\r\n       */\r\n      buildSource: function(mode) {\r\n        return 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'if (color.a > 0.0) {\\n' +\r\n              this.fragmentSource[mode] +\r\n            '}\\n' +\r\n          '}';\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode, shaderSource;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          shaderSource = this.buildSource(this.mode);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, iLen = data.length,\r\n            tr, tg, tb,\r\n            r, g, b,\r\n            source, alpha1 = 1 - this.alpha;\r\n\r\n        source = new fabric.Color(this.color).getSource();\r\n        tr = source[0] * this.alpha;\r\n        tg = source[1] * this.alpha;\r\n        tb = source[2] * this.alpha;\r\n\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              break;\r\n            case 'screen':\r\n              data[i] = 255 - (255 - r) * (255 - tr) / 255;\r\n              data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\r\n              data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\r\n              break;\r\n            case 'add':\r\n              data[i] = r + tr;\r\n              data[i + 1] = g + tg;\r\n              data[i + 2] = b + tb;\r\n              break;\r\n            case 'diff':\r\n            case 'difference':\r\n              data[i] = Math.abs(r - tr);\r\n              data[i + 1] = Math.abs(g - tg);\r\n              data[i + 2] = Math.abs(b - tb);\r\n              break;\r\n            case 'subtract':\r\n              data[i] = r - tr;\r\n              data[i + 1] = g - tg;\r\n              data[i + 2] = b - tb;\r\n              break;\r\n            case 'darken':\r\n              data[i] = Math.min(r, tr);\r\n              data[i + 1] = Math.min(g, tg);\r\n              data[i + 2] = Math.min(b, tb);\r\n              break;\r\n            case 'lighten':\r\n              data[i] = Math.max(r, tr);\r\n              data[i + 1] = Math.max(g, tg);\r\n              data[i + 2] = Math.max(b, tb);\r\n              break;\r\n            case 'overlay':\r\n              data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\r\n              data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\r\n              data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\r\n              break;\r\n            case 'exclusion':\r\n              data[i] = tr + r - ((2 * tr * r) / 255);\r\n              data[i + 1] = tg + g - ((2 * tg * g) / 255);\r\n              data[i + 2] = tb + b - ((2 * tb * b) / 255);\r\n              break;\r\n            case 'tint':\r\n              data[i] = tr + r * alpha1;\r\n              data[i + 1] = tg + g * alpha1;\r\n              data[i + 2] = tb + b * alpha1;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColor: gl.getUniformLocation(program, 'uColor'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource();\r\n        source[0] = this.alpha * source[0] / 255;\r\n        source[1] = this.alpha * source[1] / 255;\r\n        source[2] = this.alpha * source[2] / 255;\r\n        source[3] = this.alpha;\r\n        gl.uniform4fv(uniformLocations.uColor, source);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          color: this.color,\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\r\n     */\r\n    fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Image Blend filter class\r\n     * @class fabric.Image.filter.BlendImage\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\r\n      type: 'BlendImage',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      image: null,\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend image operation.\r\n       * not implemented.\r\n       **/\r\n      alpha: 1,\r\n\r\n      vertexSource: 'attribute vec2 aPosition;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'varying vec2 vTexCoord2;\\n' +\r\n        'uniform mat3 uTransformMatrix;\\n' +\r\n        'void main() {\\n' +\r\n          'vTexCoord = aPosition;\\n' +\r\n          'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\r\n          'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.rgba *= color2.rgba;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        mask: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.a = color2.a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        var shaderSource = this.fragmentSource[this.mode];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      applyToWebGL: function(options) {\r\n        // load texture to blend.\r\n        var gl = options.context,\r\n            texture = this.createTexture(options.filterBackend, this.image);\r\n        this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\r\n        this.callSuper('applyToWebGL', options);\r\n        this.unbindAdditionalTexture(gl, gl.TEXTURE1);\r\n      },\r\n\r\n      createTexture: function(backend, image) {\r\n        return backend.getCachedTexture(image.cacheKey, image._element);\r\n      },\r\n\r\n      /**\r\n       * Calculate a transformMatrix to adapt the image to blend over\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      calculateMatrix: function() {\r\n        var image = this.image,\r\n            width = image._element.width,\r\n            height = image._element.height;\r\n        return [\r\n          1 / image.scaleX, 0, 0,\r\n          0, 1 / image.scaleY, 0,\r\n          -image.left / width, -image.top / height, 1\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            resources = options.filterBackend.resources,\r\n            data = imageData.data, iLen = data.length,\r\n            width = imageData.width,\r\n            height = imageData.height,\r\n            tr, tg, tb, ta,\r\n            r, g, b, a,\r\n            canvas1, context, image = this.image, blendData;\r\n\r\n        if (!resources.blendImage) {\r\n          resources.blendImage = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blendImage;\r\n        context = canvas1.getContext('2d');\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas1.width = width;\r\n          canvas1.height = height;\r\n        }\r\n        else {\r\n          context.clearRect(0, 0, width, height);\r\n        }\r\n        context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\r\n        context.drawImage(image._element, 0, 0, width, height);\r\n        blendData = context.getImageData(0, 0, width, height).data;\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          a = data[i + 3];\r\n\r\n          tr = blendData[i];\r\n          tg = blendData[i + 1];\r\n          tb = blendData[i + 2];\r\n          ta = blendData[i + 3];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              data[i + 3] = a * ta / 255;\r\n              break;\r\n            case 'mask':\r\n              data[i + 3] = ta;\r\n              break;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\r\n          uImage: gl.getUniformLocation(program, 'uImage'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var matrix = this.calculateMatrix();\r\n        gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\r\n        gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          image: this.image && this.image.toObject(),\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} callback to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\r\n     */\r\n    fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\r\n      fabric.Image.fromObject(object.image, function(image) {\r\n        var options = fabric.util.object.clone(object);\r\n        options.image = image;\r\n        callback(new fabric.Image.filters.BlendImage(options));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\r\n        sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\r\n        ceil = Math.ceil,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Resize image filter class\r\n     * @class fabric.Image.filters.Resize\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Resize();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Resize',\r\n\r\n      /**\r\n       * Resize type\r\n       * for webgl resizeType is just lanczos, for canvas2d can be:\r\n       * bilinear, hermite, sliceHack, lanczos.\r\n       * @param {String} resizeType\r\n       * @default\r\n       */\r\n      resizeType: 'hermite',\r\n\r\n      /**\r\n       * Scale factor for resizing, x axis\r\n       * @param {Number} scaleX\r\n       * @default\r\n       */\r\n      scaleX: 1,\r\n\r\n      /**\r\n       * Scale factor for resizing, y axis\r\n       * @param {Number} scaleY\r\n       * @default\r\n       */\r\n      scaleY: 1,\r\n\r\n      /**\r\n       * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\r\n       * @param {Number} lanczosLobes\r\n       * @default\r\n       */\r\n      lanczosLobes: 3,\r\n\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uDelta: gl.getUniformLocation(program, 'uDelta'),\r\n          uTaps: gl.getUniformLocation(program, 'uTaps'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\r\n        gl.uniform1fv(uniformLocations.uTaps, this.taps);\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var fragmentShader = this.generateShader(filterWindow);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      getFilterWindow: function() {\r\n        var scale = this.tempScale;\r\n        return Math.ceil(this.lanczosLobes / scale);\r\n      },\r\n\r\n      getTaps: function() {\r\n        var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\r\n            filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          taps[i - 1] = lobeFunction(i * scale);\r\n        }\r\n        return taps;\r\n      },\r\n\r\n      /**\r\n       * Generate vertex and shader sources from the necessary steps numbers\r\n       * @param {Number} filterWindow\r\n       */\r\n      generateShader: function(filterWindow) {\r\n        var offsets = new Array(filterWindow),\r\n            fragmentShader = this.fragmentSourceTOP, filterWindow;\r\n\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          offsets[i - 1] = i + '.0 * uDelta';\r\n        }\r\n\r\n        fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\r\n        fragmentShader += 'void main() {\\n';\r\n        fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\r\n        fragmentShader += '  float sum = 1.0;\\n';\r\n\r\n        offsets.forEach(function(offset, i) {\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\r\n        });\r\n        fragmentShader += '  gl_FragColor = color / sum;\\n';\r\n        fragmentShader += '}';\r\n        return fragmentShader;\r\n      },\r\n\r\n      fragmentSourceTOP: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n',\r\n\r\n      /**\r\n       * Apply the resize filter to the image\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          options.passes++;\r\n          this.width = options.sourceWidth;\r\n          this.horizontal = true;\r\n          this.dW = Math.round(this.width * this.scaleX);\r\n          this.dH = options.sourceHeight;\r\n          this.tempScale = this.dW / this.width;\r\n          this.taps = this.getTaps();\r\n          options.destinationWidth = this.dW;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceWidth = options.destinationWidth;\r\n\r\n          this.height = options.sourceHeight;\r\n          this.horizontal = false;\r\n          this.dH = Math.round(this.height * this.scaleY);\r\n          this.tempScale = this.dH / this.height;\r\n          this.taps = this.getTaps();\r\n          options.destinationHeight = this.dH;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceHeight = options.destinationHeight;\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return this.scaleX === 1 && this.scaleY === 1;\r\n      },\r\n\r\n      lanczosCreate: function(lobes) {\r\n        return function(x) {\r\n          if (x >= lobes || x <= -lobes) {\r\n            return 0.0;\r\n          }\r\n          if (x < 1.19209290E-07 && x > -1.19209290E-07) {\r\n            return 1.0;\r\n          }\r\n          x *= Math.PI;\r\n          var xx = x / lobes;\r\n          return (sin(x) / x) * sin(xx) / xx;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @memberOf fabric.Image.filters.Resize.prototype\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} scaleX\r\n       * @param {Number} scaleY\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            scaleX = this.scaleX,\r\n            scaleY = this.scaleY;\r\n\r\n        this.rcpScaleX = 1 / scaleX;\r\n        this.rcpScaleY = 1 / scaleY;\r\n\r\n        var oW = imageData.width, oH = imageData.height,\r\n            dW = round(oW * scaleX), dH = round(oH * scaleY),\r\n            newData;\r\n\r\n        if (this.resizeType === 'sliceHack') {\r\n          newData = this.sliceByTwo(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'hermite') {\r\n          newData = this.hermiteFastResize(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'bilinear') {\r\n          newData = this.bilinearFiltering(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'lanczos') {\r\n          newData = this.lanczosResize(options, oW, oH, dW, dH);\r\n        }\r\n        options.imageData = newData;\r\n      },\r\n\r\n      /**\r\n       * Filter sliceByTwo\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      sliceByTwo: function(options, oW, oH, dW, dH) {\r\n        var imageData = options.imageData,\r\n            mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\r\n            stepH = oH * mult, resources = fabric.filterBackend.resources,\r\n            tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\r\n        if (!resources.sliceByTwo) {\r\n          resources.sliceByTwo = document.createElement('canvas');\r\n        }\r\n        tmpCanvas = resources.sliceByTwo;\r\n        if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\r\n          tmpCanvas.width = oW * 1.5;\r\n          tmpCanvas.height = oH;\r\n        }\r\n        ctx = tmpCanvas.getContext('2d');\r\n        ctx.clearRect(0, 0, oW * 1.5, oH);\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        dW = floor(dW);\r\n        dH = floor(dH);\r\n\r\n        while (!doneW || !doneH) {\r\n          oW = stepW;\r\n          oH = stepH;\r\n          if (dW < floor(stepW * mult)) {\r\n            stepW = floor(stepW * mult);\r\n          }\r\n          else {\r\n            stepW = dW;\r\n            doneW = true;\r\n          }\r\n          if (dH < floor(stepH * mult)) {\r\n            stepH = floor(stepH * mult);\r\n          }\r\n          else {\r\n            stepH = dH;\r\n            doneH = true;\r\n          }\r\n          ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\r\n          sX = dX;\r\n          sY = dY;\r\n          dY += stepH;\r\n        }\r\n        return ctx.getImageData(sX, sY, dW, dH);\r\n      },\r\n\r\n      /**\r\n       * Filter lanczosResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      lanczosResize: function(options, oW, oH, dW, dH) {\r\n\r\n        function process(u) {\r\n          var v, i, weight, idx, a, red, green,\r\n              blue, alpha, fX, fY;\r\n          center.x = (u + 0.5) * ratioX;\r\n          icenter.x = floor(center.x);\r\n          for (v = 0; v < dH; v++) {\r\n            center.y = (v + 0.5) * ratioY;\r\n            icenter.y = floor(center.y);\r\n            a = 0; red = 0; green = 0; blue = 0; alpha = 0;\r\n            for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\r\n              if (i < 0 || i >= oW) {\r\n                continue;\r\n              }\r\n              fX = floor(1000 * abs(i - center.x));\r\n              if (!cacheLanc[fX]) {\r\n                cacheLanc[fX] = { };\r\n              }\r\n              for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\r\n                if (j < 0 || j >= oH) {\r\n                  continue;\r\n                }\r\n                fY = floor(1000 * abs(j - center.y));\r\n                if (!cacheLanc[fX][fY]) {\r\n                  cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\r\n                }\r\n                weight = cacheLanc[fX][fY];\r\n                if (weight > 0) {\r\n                  idx = (j * oW + i) * 4;\r\n                  a += weight;\r\n                  red += weight * srcData[idx];\r\n                  green += weight * srcData[idx + 1];\r\n                  blue += weight * srcData[idx + 2];\r\n                  alpha += weight * srcData[idx + 3];\r\n                }\r\n              }\r\n            }\r\n            idx = (v * dW + u) * 4;\r\n            destData[idx] = red / a;\r\n            destData[idx + 1] = green / a;\r\n            destData[idx + 2] = blue / a;\r\n            destData[idx + 3] = alpha / a;\r\n          }\r\n\r\n          if (++u < dW) {\r\n            return process(u);\r\n          }\r\n          else {\r\n            return destImg;\r\n          }\r\n        }\r\n\r\n        var srcData = options.imageData.data,\r\n            destImg = options.ctx.createImageData(dW, dH),\r\n            destData = destImg.data,\r\n            lanczos = this.lanczosCreate(this.lanczosLobes),\r\n            ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\r\n            rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\r\n            range2X = ceil(ratioX * this.lanczosLobes / 2),\r\n            range2Y = ceil(ratioY * this.lanczosLobes / 2),\r\n            cacheLanc = { }, center = { }, icenter = { };\r\n\r\n        return process(0);\r\n      },\r\n\r\n      /**\r\n       * bilinearFiltering\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      bilinearFiltering: function(options, oW, oH, dW, dH) {\r\n        var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\r\n            color, offset = 0, origPix, ratioX = this.rcpScaleX,\r\n            ratioY = this.rcpScaleY,\r\n            w4 = 4 * (oW - 1), img = options.imageData,\r\n            pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\r\n            destPixels = destImage.data;\r\n        for (i = 0; i < dH; i++) {\r\n          for (j = 0; j < dW; j++) {\r\n            x = floor(ratioX * j);\r\n            y = floor(ratioY * i);\r\n            xDiff = ratioX * j - x;\r\n            yDiff = ratioY * i - y;\r\n            origPix = 4 * (y * oW + x);\r\n\r\n            for (chnl = 0; chnl < 4; chnl++) {\r\n              a = pixels[origPix + chnl];\r\n              b = pixels[origPix + 4 + chnl];\r\n              c = pixels[origPix + w4 + chnl];\r\n              d = pixels[origPix + w4 + 4 + chnl];\r\n              color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\r\n                      c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\r\n              destPixels[offset++] = color;\r\n            }\r\n          }\r\n        }\r\n        return destImage;\r\n      },\r\n\r\n      /**\r\n       * hermiteFastResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      hermiteFastResize: function(options, oW, oH, dW, dH) {\r\n        var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\r\n            ratioWHalf = ceil(ratioW / 2),\r\n            ratioHHalf = ceil(ratioH / 2),\r\n            img = options.imageData, data = img.data,\r\n            img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\r\n        for (var j = 0; j < dH; j++) {\r\n          for (var i = 0; i < dW; i++) {\r\n            var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\r\n                gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\r\n            for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\r\n              var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\r\n                  centerX = (i + 0.5) * ratioW, w0 = dy * dy;\r\n              for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\r\n                var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\r\n                    w = sqrt(w0 + dx * dx);\r\n                /* eslint-disable max-depth */\r\n                if (w > 1 && w < -1) {\r\n                  continue;\r\n                }\r\n                //hermite filter\r\n                weight = 2 * w * w * w - 3 * w * w + 1;\r\n                if (weight > 0) {\r\n                  dx = 4 * (xx + yy * oW);\r\n                  //alpha\r\n                  gxA += weight * data[dx + 3];\r\n                  weightsAlpha += weight;\r\n                  //colors\r\n                  if (data[dx + 3] < 255) {\r\n                    weight = weight * data[dx + 3] / 250;\r\n                  }\r\n                  gxR += weight * data[dx];\r\n                  gxG += weight * data[dx + 1];\r\n                  gxB += weight * data[dx + 2];\r\n                  weights += weight;\r\n                }\r\n                /* eslint-enable max-depth */\r\n              }\r\n            }\r\n            data2[x2] = gxR / weights;\r\n            data2[x2 + 1] = gxG / weights;\r\n            data2[x2 + 2] = gxB / weights;\r\n            data2[x2 + 3] = gxA / weightsAlpha;\r\n          }\r\n        }\r\n        return img2;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          scaleX: this.scaleX,\r\n          scaleY: this.scaleY,\r\n          resizeType: this.resizeType,\r\n          lanczosLobes: this.lanczosLobes\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\r\n     */\r\n    fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Contrast filter class\r\n     * @class fabric.Image.filters.Contrast\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Contrast({\r\n     *   contrast: 40\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Contrast',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uContrast;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\r\n          'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      contrast: 0,\r\n\r\n      mainParameter: 'contrast',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Contrast.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\r\n       */\r\n\r\n      /**\r\n        * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\r\n        *\r\n        * @param {Object} options\r\n        * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n        */\r\n      applyTo2d: function(options) {\r\n        if (this.contrast === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData, i, len,\r\n            data = imageData.data, len = data.length,\r\n            contrast = Math.floor(this.contrast * 255),\r\n            contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = contrastF * (data[i] - 128) + 128;\r\n          data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\r\n          data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uContrast: gl.getUniformLocation(program, 'uContrast'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uContrast, this.contrast);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\r\n     */\r\n    fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Saturate filter class\r\n     * @class fabric.Image.filters.Saturation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Saturation({\r\n     *   saturation: 100\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Saturation',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uSaturation;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float rgMax = max(color.r, color.g);\\n' +\r\n          'float rgbMax = max(rgMax, color.b);\\n' +\r\n          'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\r\n          'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\r\n          'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      saturation: 0,\r\n\r\n      mainParameter: 'saturation',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Saturate.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\r\n       */\r\n\r\n      /**\r\n       * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.saturation === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, len = data.length,\r\n            adjust = -this.saturation, i, max;\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          max = Math.max(data[i], data[i + 1], data[i + 2]);\r\n          data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\r\n          data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\r\n          data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uSaturation: gl.getUniformLocation(program, 'uSaturation'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\r\n     */\r\n    fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Blur filter class\r\n     * @class fabric.Image.filters.Blur\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Blur({\r\n     *   blur: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\r\n\r\n      type: 'Blur',\r\n\r\n      /*\r\n  'gl_FragColor = vec4(0.0);',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\r\n  */\r\n\r\n      /* eslint-disable max-len */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'const float nSamples = 15.0;\\n' +\r\n        'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\r\n        'float random(vec3 scale) {\\n' +\r\n          /* use the fragment position for a different seed per-pixel */\r\n          'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0.0);\\n' +\r\n          'float total = 0.0;\\n' +\r\n          'float offset = random(v3offset);\\n' +\r\n          'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\r\n            'float percent = (t + offset - 0.5) / nSamples;\\n' +\r\n            'float weight = 1.0 - abs(percent);\\n' +\r\n            'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\r\n            'total += weight;\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color / total;\\n' +\r\n        '}',\r\n      /* eslint-enable max-len */\r\n\r\n      /**\r\n       * blur value, in percentage of image dimensions.\r\n       * specific to keep the image blur constant at different resolutions\r\n       * range bewteen 0 and 1.\r\n       */\r\n      blur: 0,\r\n\r\n      mainParameter: 'blur',\r\n\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          // this aspectRatio is used to give the same blur to vertical and horizontal\r\n          this.aspectRatio = options.sourceWidth / options.sourceHeight;\r\n          options.passes++;\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = true;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = false;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      applyTo2d: function(options) {\r\n        // paint canvasEl with current image data.\r\n        //options.ctx.putImageData(options.imageData, 0, 0);\r\n        options.imageData = this.simpleBlur(options);\r\n      },\r\n\r\n      simpleBlur: function(options) {\r\n        var resources = options.filterBackend.resources, canvas1, canvas2,\r\n            width = options.imageData.width,\r\n            height = options.imageData.height;\r\n\r\n        if (!resources.blurLayer1) {\r\n          resources.blurLayer1 = fabric.util.createCanvasElement();\r\n          resources.blurLayer2 = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blurLayer1;\r\n        canvas2 = resources.blurLayer2;\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas2.width = canvas1.width = width;\r\n          canvas2.height = canvas1.height = height;\r\n        }\r\n        var ctx1 = canvas1.getContext('2d'),\r\n            ctx2 = canvas2.getContext('2d'),\r\n            nSamples = 15,\r\n            random, percent, j, i,\r\n            blur = this.blur * 0.06 * 0.5;\r\n\r\n        // load first canvas\r\n        ctx1.putImageData(options.imageData, 0, 0);\r\n        ctx2.clearRect(0, 0, width, height);\r\n\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * width + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, j, random);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * height + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, random, j);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        options.ctx.drawImage(canvas1, 0, 0);\r\n        var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\r\n        ctx1.globalAlpha = 1;\r\n        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n        return newImageData;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          delta: gl.getUniformLocation(program, 'uDelta'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var delta = this.chooseRightDelta();\r\n        gl.uniform2fv(uniformLocations.delta, delta);\r\n      },\r\n\r\n      /**\r\n       * choose right value of image percentage to blur with\r\n       * @returns {Array} a numeric array with delta values\r\n       */\r\n      chooseRightDelta: function() {\r\n        var blurScale = 1, delta = [0, 0], blur;\r\n        if (this.horizontal) {\r\n          if (this.aspectRatio > 1) {\r\n            // image is wide, i want to shrink radius horizontal\r\n            blurScale = 1 / this.aspectRatio;\r\n          }\r\n        }\r\n        else {\r\n          if (this.aspectRatio < 1) {\r\n            // image is tall, i want to shrink radius vertical\r\n            blurScale = this.aspectRatio;\r\n          }\r\n        }\r\n        blur = blurScale * this.blur * 0.12;\r\n        if (this.horizontal) {\r\n          delta[0] = blur;\r\n        }\r\n        else {\r\n          delta[1] = blur;\r\n        }\r\n        return delta;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a BlurFilter into a concrete instance.\r\n     */\r\n    filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Gamma filter class\r\n     * @class fabric.Image.filters.Gamma\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Gamma({\r\n     *   brightness: 200\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Gamma',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec3 uGamma;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'vec3 correction = (1.0 / uGamma);\\n' +\r\n          'color.r = pow(color.r, correction.r);\\n' +\r\n          'color.g = pow(color.g, correction.g);\\n' +\r\n          'color.b = pow(color.b, correction.b);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.rgb *= color.a;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Gamma array value, from 0.01 to 2.2.\r\n       * @param {Array} gamma\r\n       * @default\r\n       */\r\n      gamma: [1, 1, 1],\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'gamma',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.gamma = [1, 1, 1];\r\n        filters.BaseFilter.prototype.initialize.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData, data = imageData.data,\r\n            gamma = this.gamma, len = data.length,\r\n            rInv = 1 / gamma[0], gInv = 1 / gamma[1],\r\n            bInv = 1 / gamma[2], i;\r\n\r\n        if (!this.rVals) {\r\n          // eslint-disable-next-line\r\n          this.rVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.gVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.bVals = new Uint8Array(256);\r\n        }\r\n\r\n        // This is an optimization - pre-compute a look-up table for each color channel\r\n        // instead of performing these pow calls for each pixel in the image.\r\n        for (i = 0, len = 256; i < len; i++) {\r\n          this.rVals[i] = Math.pow(i / 255, rInv) * 255;\r\n          this.gVals[i] = Math.pow(i / 255, gInv) * 255;\r\n          this.bVals[i] = Math.pow(i / 255, bInv) * 255;\r\n        }\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n          data[i] = this.rVals[data[i]];\r\n          data[i + 1] = this.gVals[data[i + 1]];\r\n          data[i + 2] = this.bVals[data[i + 2]];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uGamma: gl.getUniformLocation(program, 'uGamma'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform3fv(uniformLocations.uGamma, this.gamma);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\r\n     */\r\n    fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * A container class that knows how to apply a sequence of filters to an input image.\r\n     */\r\n    filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\r\n\r\n      type: 'Composed',\r\n\r\n      /**\r\n       * A non sparse array of filters to apply\r\n       */\r\n      subFilters: [],\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.subFilters = this.subFilters.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply this container's filters to the input image provided.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be applied.\r\n       */\r\n      applyTo: function(options) {\r\n        options.passes += this.subFilters.length - 1;\r\n        this.subFilters.forEach(function(filter) {\r\n          filter.applyTo(options);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Serialize this filter into JSON.\r\n       *\r\n       * @returns {Object} A JSON representation of this filter.\r\n       */\r\n      toObject: function() {\r\n        return fabric.util.object.extend(this.callSuper('toObject'), {\r\n          subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\r\n        });\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\r\n     */\r\n    fabric.Image.filters.Composed.fromObject = function(object, callback) {\r\n      var filters = object.subFilters || [],\r\n          subFilters = filters.map(function(filter) {\r\n            return new fabric.Image.filters[filter.type](filter);\r\n          }),\r\n          instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\r\n      callback && callback(instance);\r\n      return instance;\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * HueRotation filter class\r\n     * @class fabric.Image.filters.HueRotation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.HueRotation({\r\n     *   rotation: -0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'HueRotation',\r\n\r\n      /**\r\n       * HueRotation value, from -1 to 1.\r\n       * the unit is radians\r\n       * @param {Number} myParameter\r\n       * @default\r\n       */\r\n      rotation: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'rotation',\r\n\r\n      calculateMatrix: function() {\r\n        var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\r\n            aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\r\n        this.matrix = [\r\n          1, 0, 0, 0, 0,\r\n          0, 1, 0, 0, 0,\r\n          0, 0, 1, 0, 0,\r\n          0, 0, 0, 1, 0\r\n        ];\r\n        this.matrix[0] = cos + OneMinusCos / 3;\r\n        this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[6] = cos + aThird * OneMinusCos;\r\n        this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[12] = cos + aThird * OneMinusCos;\r\n      },\r\n\r\n      /**\r\n       * HueRotation isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function(options) {\r\n        this.calculateMatrix();\r\n        return filters.BaseFilter.prototype.isNeutralState.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply this filter to the input image data provided.\r\n       *\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        this.calculateMatrix();\r\n        filters.BaseFilter.prototype.applyTo.call(this, options);\r\n      },\r\n\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\r\n     */\r\n    fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        clone = fabric.util.object.clone;\r\n\r\n    if (fabric.Text) {\r\n      fabric.warn('fabric.Text is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Text class\r\n     * @class fabric.Text\r\n     * @extends fabric.Object\r\n     * @return {fabric.Text} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\r\n     * @see {@link fabric.Text#initialize} for constructor definition\r\n     */\r\n    fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Array\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: [\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontFamily',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'text',\r\n        'charSpacing',\r\n        'textAlign',\r\n        'styles',\r\n      ],\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reNewline: /\\r?\\n/,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespaces that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpacesAndTabs: /[ \\t\\r]/g,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespace that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpaceAndTab: /[ \\t\\r]/,\r\n\r\n      /**\r\n       * Use this regular expression to filter consecutive groups of non spaces.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reWords: /\\S+/g,\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                 'text',\r\n\r\n      /**\r\n       * Font size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      fontSize:             40,\r\n\r\n      /**\r\n       * Font weight (e.g. bold, normal, 400, 600, 800)\r\n       * @type {(Number|String)}\r\n       * @default\r\n       */\r\n      fontWeight:           'normal',\r\n\r\n      /**\r\n       * Font family\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontFamily:           'Times New Roman',\r\n\r\n      /**\r\n       * Text decoration underline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      underline:       false,\r\n\r\n      /**\r\n       * Text decoration overline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overline:       false,\r\n\r\n      /**\r\n       * Text decoration linethrough.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      linethrough:       false,\r\n\r\n      /**\r\n       * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\r\n       * \"justify-left\", \"justify-center\" or \"justify-right\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      textAlign:            'left',\r\n\r\n      /**\r\n       * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontStyle:            'normal',\r\n\r\n      /**\r\n       * Line height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      lineHeight:           1.16,\r\n\r\n      /**\r\n       * Superscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      superscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline: -0.35  // baseline-shift factor (upwards)\r\n      },\r\n\r\n      /**\r\n       * Subscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      subscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline:  0.11  // baseline-shift factor (downwards)\r\n      },\r\n\r\n      /**\r\n       * Background color of text lines\r\n       * @type String\r\n       * @default\r\n       */\r\n      textBackgroundColor:  '',\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * @type Array\r\n       */\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:               null,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:               null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fontSizeFraction: 0.222,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      offsets: {\r\n        underline: 0.10,\r\n        linethrough: -0.315,\r\n        overline: -0.88\r\n      },\r\n\r\n      /**\r\n       * Text Line proportion to font Size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      _fontSizeMult:             1.13,\r\n\r\n      /**\r\n       * additional space between characters\r\n       * expressed in thousands of em unit\r\n       * @type Number\r\n       * @default\r\n       */\r\n      charSpacing:             0,\r\n\r\n      /**\r\n       * Object containing character styles - top-level properties -> line numbers,\r\n       * 2nd-level properties - charater numbers\r\n       * @type Object\r\n       * @default\r\n       */\r\n      styles: null,\r\n\r\n      /**\r\n       * Reference to a context to measure text char or couple of chars\r\n       * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\r\n       * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\r\n       * text object created.\r\n       * @type {CanvasRenderingContext2D}\r\n       * @default\r\n       */\r\n      _measuringContext: null,\r\n\r\n      /**\r\n       * Baseline shift, stlyes only, keep at 0 for the main text object\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      deltaY: 0,\r\n\r\n      /**\r\n       * Array of properties that define a style unit (of 'styles').\r\n       * @type {Array}\r\n       * @default\r\n       */\r\n      _styleProperties: [\r\n        'stroke',\r\n        'strokeWidth',\r\n        'fill',\r\n        'fontFamily',\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontStyle',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'deltaY',\r\n        'textBackgroundColor',\r\n      ],\r\n\r\n      /**\r\n       * contains characters bounding boxes\r\n       */\r\n      __charBounds: [],\r\n\r\n      /**\r\n       * use this size when measuring text. To avoid IE11 rounding errors\r\n       * @type {Number}\r\n       * @default\r\n       * @readonly\r\n       * @private\r\n       */\r\n      CACHE_FONT_SIZE: 400,\r\n\r\n      /**\r\n       * contains the min text width to avoid getting 0\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      MIN_TEXT_WIDTH: 2,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.styles = options ? (options.styles || { }) : { };\r\n        this.text = text;\r\n        this.__skipDimension = true;\r\n        this.callSuper('initialize', options);\r\n        this.__skipDimension = false;\r\n        this.initDimensions();\r\n        this.setCoords();\r\n        this.setupState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Return a contex for measurement of text string.\r\n       * if created it gets stored for reuse\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      getMeasuringContext: function() {\r\n        // if we did not return we have to measure something.\r\n        if (!fabric._measuringContext) {\r\n          fabric._measuringContext = this.canvas && this.canvas.contextCache ||\r\n            fabric.util.createCanvasElement().getContext('2d');\r\n        }\r\n        return fabric._measuringContext;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Divides text into lines of text and lines of graphemes.\r\n       */\r\n      _splitText: function() {\r\n        var newLines = this._splitTextIntoLines(this.text);\r\n        this.textLines = newLines.lines;\r\n        this._textLines = newLines.graphemeLines;\r\n        this._unwrappedTextLines = newLines._unwrappedLines;\r\n        this._text = newLines.graphemeText;\r\n        return newLines;\r\n      },\r\n\r\n      /**\r\n       * Initialize or update text dimensions.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this._splitText();\r\n        this._clearCache();\r\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Enlarge space boxes and shift the others\r\n       */\r\n      enlargeSpaces: function() {\r\n        var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\r\n            continue;\r\n          }\r\n          accumulatedSpace = 0;\r\n          line = this._textLines[i];\r\n          currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\r\n            numberOfSpaces = spaces.length;\r\n            diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\r\n            for (var j = 0, jlen = line.length; j <= jlen; j++) {\r\n              charBound = this.__charBounds[i][j];\r\n              if (this._reSpaceAndTab.test(line[j])) {\r\n                charBound.width += diffSpace;\r\n                charBound.kernedWidth += diffSpace;\r\n                charBound.left += accumulatedSpace;\r\n                accumulatedSpace += diffSpace;\r\n              }\r\n              else {\r\n                charBound.left += accumulatedSpace;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        return lineIndex === this._textLines.length - 1;\r\n      },\r\n\r\n      /**\r\n       * Detect if a line has a linebreak and so we need to account for it when moving\r\n       * and counting style.\r\n       * It return always for text and Itext.\r\n       * @return Number\r\n       */\r\n      missingNewlineOffset: function() {\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of text object\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Text (' + this.complexity() +\r\n          '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @param {Object} dim.x width of object to be cached\r\n       * @param {Object} dim.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var dims = this.callSuper('_getCacheCanvasDimensions');\r\n        var fontSize = this.fontSize;\r\n        dims.width += fontSize * dims.zoomX;\r\n        dims.height += fontSize * dims.zoomY;\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this._setTextStyles(ctx);\r\n        this._renderTextLinesBackground(ctx);\r\n        this._renderTextDecoration(ctx, 'underline');\r\n        this._renderText(ctx);\r\n        this._renderTextDecoration(ctx, 'overline');\r\n        this._renderTextDecoration(ctx, 'linethrough');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderText: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderTextStroke(ctx);\r\n          this._renderTextFill(ctx);\r\n        }\r\n        else {\r\n          this._renderTextFill(ctx);\r\n          this._renderTextStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the font parameter of the context with the object properties or with charStyle\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [charStyle] object with font style properties\r\n       * @param {String} [charStyle.fontFamily] Font Family\r\n       * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\r\n       * @param {String} [charStyle.fontWeight] Font weight\r\n       * @param {String} [charStyle.fontStyle] Font style (italic|normal)\r\n       */\r\n      _setTextStyles: function(ctx, charStyle, forMeasuring) {\r\n        ctx.textBaseline = 'alphabetic';\r\n        ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\r\n      },\r\n\r\n      /**\r\n       * calculate and return the text Width measuring each line.\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @return {Number} Maximum width of fabric.Text object\r\n       */\r\n      calcTextWidth: function() {\r\n        var maxWidth = this.getLineWidth(0);\r\n\r\n        for (var i = 1, len = this._textLines.length; i < len; i++) {\r\n          var currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth > maxWidth) {\r\n            maxWidth = currentLineWidth;\r\n          }\r\n        }\r\n        return maxWidth;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Text to render\r\n       * @param {Number} left Left position of text\r\n       * @param {Number} top Top position of text\r\n       * @param {Number} lineIndex Index of a line in a text\r\n       */\r\n      _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\r\n        this._renderChars(method, ctx, line, left, top, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Renders the text background for lines, taking care of style\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextLinesBackground: function(ctx) {\r\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\r\n          return;\r\n        }\r\n        var lineTopOffset = 0, heightOfLine,\r\n            lineLeftOffset, originalFill = ctx.fillStyle,\r\n            line, lastColor,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(),\r\n            boxStart = 0, boxWidth = 0, charBox, currentColor;\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\r\n            lineTopOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxWidth = 0;\r\n          boxStart = 0;\r\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n            if (currentColor !== lastColor) {\r\n              ctx.fillStyle = lastColor;\r\n              lastColor && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                topOffset + lineTopOffset,\r\n                boxWidth,\r\n                heightOfLine / this.lineHeight\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastColor = currentColor;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          if (currentColor) {\r\n            ctx.fillStyle = currentColor;\r\n            ctx.fillRect(\r\n              leftOffset + lineLeftOffset + boxStart,\r\n              topOffset + lineTopOffset,\r\n              boxWidth,\r\n              heightOfLine / this.lineHeight\r\n            );\r\n          }\r\n          lineTopOffset += heightOfLine;\r\n        }\r\n        ctx.fillStyle = originalFill;\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} decl style declaration for cache\r\n       * @param {String} decl.fontFamily fontFamily\r\n       * @param {String} decl.fontStyle fontStyle\r\n       * @param {String} decl.fontWeight fontWeight\r\n       * @return {Object} reference to cache\r\n       */\r\n      getFontCache: function(decl) {\r\n        var fontFamily = decl.fontFamily.toLowerCase();\r\n        if (!fabric.charWidthsCache[fontFamily]) {\r\n          fabric.charWidthsCache[fontFamily] = { };\r\n        }\r\n        var cache = fabric.charWidthsCache[fontFamily],\r\n            cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\r\n        if (!cache[cacheProp]) {\r\n          cache[cacheProp] = { };\r\n        }\r\n        return cache[cacheProp];\r\n      },\r\n\r\n      /**\r\n       * apply all the character style to canvas for rendering\r\n       * @private\r\n       * @param {String} _char\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} [decl]\r\n       */\r\n      _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\r\n\r\n        this._setFillStyles(ctx, styleDeclaration);\r\n        this._setStrokeStyles(ctx, styleDeclaration);\r\n\r\n        ctx.font = this._getFontDeclaration(styleDeclaration);\r\n      },\r\n\r\n      /**\r\n       * measure and return the width of a single character.\r\n       * possibly overridden to accommodate different measure logic or\r\n       * to hook some external lib for character measurement\r\n       * @private\r\n       * @param {String} _char, char to be measured\r\n       * @param {Object} charStyle style of char to be measured\r\n       * @param {String} [previousChar] previous char\r\n       * @param {Object} [prevCharStyle] style of previous char\r\n       */\r\n      _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\r\n        // first i try to return from cache\r\n        var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\r\n            previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\r\n            stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\r\n            fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\r\n\r\n        if (previousChar && fontCache[previousChar] !== undefined) {\r\n          previousWidth = fontCache[previousChar];\r\n        }\r\n        if (fontCache[_char] !== undefined) {\r\n          kernedWidth = width = fontCache[_char];\r\n        }\r\n        if (stylesAreEqual && fontCache[couple] !== undefined) {\r\n          coupleWidth = fontCache[couple];\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\r\n          var ctx = this.getMeasuringContext();\r\n          // send a TRUE to specify measuring font size CACHE_FONT_SIZE\r\n          this._setTextStyles(ctx, charStyle, true);\r\n        }\r\n        if (width === undefined) {\r\n          kernedWidth = width = ctx.measureText(_char).width;\r\n          fontCache[_char] = width;\r\n        }\r\n        if (previousWidth === undefined && stylesAreEqual && previousChar) {\r\n          previousWidth = ctx.measureText(previousChar).width;\r\n          fontCache[previousChar] = previousWidth;\r\n        }\r\n        if (stylesAreEqual && coupleWidth === undefined) {\r\n          // we can measure the kerning couple and subtract the width of the previous character\r\n          coupleWidth = ctx.measureText(couple).width;\r\n          fontCache[couple] = coupleWidth;\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\r\n      },\r\n\r\n      /**\r\n       * Computes height of character at given position\r\n       * @param {Number} line the line index number\r\n       * @param {Number} _char the character index number\r\n       * @return {Number} fontSize of the character\r\n       */\r\n      getHeightOfChar: function(line, _char) {\r\n        return this.getValueOfPropertyAt(line, _char, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * measure a text line measuring all characters.\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      measureLine: function(lineIndex) {\r\n        var lineInfo = this._measureLine(lineIndex);\r\n        if (this.charSpacing !== 0) {\r\n          lineInfo.width -= this._getWidthOfCharSpacing();\r\n        }\r\n        if (lineInfo.width < 0) {\r\n          lineInfo.width = 0;\r\n        }\r\n        return lineInfo;\r\n      },\r\n\r\n      /**\r\n       * measure every grapheme of a line, populating __charBounds\r\n       * @param {Number} lineIndex\r\n       * @return {Object} object.width total width of characters\r\n       * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\r\n       */\r\n      _measureLine: function(lineIndex) {\r\n        var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\r\n            graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\r\n\r\n        this.__charBounds[lineIndex] = lineBounds;\r\n        for (i = 0; i < line.length; i++) {\r\n          grapheme = line[i];\r\n          graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\r\n          lineBounds[i] = graphemeInfo;\r\n          width += graphemeInfo.kernedWidth;\r\n          prevGrapheme = grapheme;\r\n        }\r\n        // this latest bound box represent the last character of the line\r\n        // to simplify cursor handling in interactive mode.\r\n        lineBounds[i] = {\r\n          left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\r\n          width: 0,\r\n          kernedWidth: 0,\r\n          height: this.fontSize\r\n        };\r\n        return { width: width, numOfSpaces: numOfSpaces };\r\n      },\r\n\r\n      /**\r\n       * Measure and return the info of a single grapheme.\r\n       * needs the the info of previous graphemes already filled\r\n       * @private\r\n       * @param {String} grapheme to be measured\r\n       * @param {Number} lineIndex index of the line where the char is\r\n       * @param {Number} charIndex position in the line\r\n       * @param {String} [prevGrapheme] character preceding the one to be measured\r\n       */\r\n      _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\r\n        var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\r\n            info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\r\n            kernedWidth = info.kernedWidth,\r\n            width = info.width, charSpacing;\r\n\r\n        if (this.charSpacing !== 0) {\r\n          charSpacing = this._getWidthOfCharSpacing();\r\n          width += charSpacing;\r\n          kernedWidth += charSpacing;\r\n        }\r\n\r\n        var box = {\r\n          width: width,\r\n          left: 0,\r\n          height: style.fontSize,\r\n          kernedWidth: kernedWidth,\r\n          deltaY: style.deltaY,\r\n        };\r\n        if (charIndex > 0 && !skipLeft) {\r\n          var previousBox = this.__charBounds[lineIndex][charIndex - 1];\r\n          box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\r\n        }\r\n        return box;\r\n      },\r\n\r\n      /**\r\n       * Calculate height of line at 'lineIndex'\r\n       * @param {Number} lineIndex index of line to calculate\r\n       * @return {Number}\r\n       */\r\n      getHeightOfLine: function(lineIndex) {\r\n        if (this.__lineHeights[lineIndex]) {\r\n          return this.__lineHeights[lineIndex];\r\n        }\r\n\r\n        var line = this._textLines[lineIndex],\r\n            // char 0 is measured before the line cycle because it nneds to char\r\n            // emptylines\r\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\r\n        for (var i = 1, len = line.length; i < len; i++) {\r\n          maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\r\n        }\r\n\r\n        return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\r\n      },\r\n\r\n      /**\r\n       * Calculate text box height\r\n       */\r\n      calcTextHeight: function() {\r\n        var lineHeight, height = 0;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineHeight = this.getHeightOfLine(i);\r\n          height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\r\n        }\r\n        return height;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Left offset\r\n       */\r\n      _getLeftOffset: function() {\r\n        return -this.width / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Top offset\r\n       */\r\n      _getTopOffset: function() {\r\n        return -this.height / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n       * @return {Object} offset.offsetX offset for text rendering\r\n       * @return {Object} offset.offsetY offset for text rendering\r\n       */\r\n      _applyPatternGradientTransform: function(ctx, filler) {\r\n        if (!filler || !filler.toLive) {\r\n          return { offsetX: 0, offsetY: 0 };\r\n        }\r\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n            offsetY = -this.height / 2 + filler.offsetY || 0;\r\n\r\n        ctx.transform(1, 0, 0, 1, offsetX, offsetY);\r\n        return { offsetX: offsetX, offsetY: offsetY };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       */\r\n      _renderTextCommon: function(ctx, method) {\r\n        ctx.save();\r\n        var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\r\n            offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          var heightOfLine = this.getHeightOfLine(i),\r\n              maxHeight = heightOfLine / this.lineHeight,\r\n              leftOffset = this._getLineLeftOffset(i);\r\n          this._renderTextLine(\r\n            method,\r\n            ctx,\r\n            this._textLines[i],\r\n            left + leftOffset - offsets.offsetX,\r\n            top + lineHeights + maxHeight - offsets.offsetY,\r\n            i\r\n          );\r\n          lineHeights += heightOfLine;\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextFill: function(ctx) {\r\n        if (!this.fill && !this.styleHas('fill')) {\r\n          return;\r\n        }\r\n\r\n        this._renderTextCommon(ctx, 'fillText');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextStroke: function(ctx) {\r\n        if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, this.strokeDashArray);\r\n        ctx.beginPath();\r\n        this._renderTextCommon(ctx, 'strokeText');\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Content of the line\r\n       * @param {Number} left\r\n       * @param {Number} top\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charOffset\r\n       */\r\n      _renderChars: function(method, ctx, line, left, top, lineIndex) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox,\r\n            boxWidth = 0,\r\n            timeToRender,\r\n            shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\r\n\r\n        ctx.save();\r\n        top -= lineHeight * this._fontSizeFraction / this.lineHeight;\r\n        if (shortCut) {\r\n          // render all the line in one pass without checking\r\n          this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\r\n          ctx.restore();\r\n          return;\r\n        }\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            left += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            left += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {String} _char\r\n       * @param {Number} left Left coordinate\r\n       * @param {Number} top Top coordinate\r\n       * @param {Number} lineHeight Height of the line\r\n       */\r\n      _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\r\n        var decl = this._getStyleDeclaration(lineIndex, charIndex),\r\n            fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            shouldFill = method === 'fillText' && fullDecl.fill,\r\n            shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\r\n\r\n        if (!shouldStroke && !shouldFill) {\r\n          return;\r\n        }\r\n        decl && ctx.save();\r\n\r\n        this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\r\n\r\n        if (decl && decl.textBackgroundColor) {\r\n          this._removeShadow(ctx);\r\n        }\r\n        if (decl && decl.deltaY) {\r\n          top += decl.deltaY;\r\n        }\r\n\r\n        shouldFill && ctx.fillText(_char, left, top);\r\n        shouldStroke && ctx.strokeText(_char, left, top);\r\n        decl && ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Turns the character into a 'superior figure' (i.e. 'superscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSuperscript: function(start, end) {\r\n        return this._setScript(start, end, this.superscript);\r\n      },\r\n\r\n      /**\r\n       * Turns the character into an 'inferior figure' (i.e. 'subscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSubscript: function(start, end) {\r\n        return this._setScript(start, end, this.subscript);\r\n      },\r\n\r\n      /**\r\n       * Applies 'schema' at given position\r\n       * @private\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @param {Number} schema\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      _setScript: function(start, end, schema) {\r\n        var loc = this.get2DCursorLocation(start, true),\r\n            fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\r\n            dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\r\n            style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\r\n        this.setSelectionStyles(style, start, end);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChanged: function(prevStyle, thisStyle) {\r\n        return prevStyle.fill !== thisStyle.fill ||\r\n                prevStyle.stroke !== thisStyle.stroke ||\r\n                prevStyle.strokeWidth !== thisStyle.strokeWidth ||\r\n                prevStyle.fontSize !== thisStyle.fontSize ||\r\n                prevStyle.fontFamily !== thisStyle.fontFamily ||\r\n                prevStyle.fontWeight !== thisStyle.fontWeight ||\r\n                prevStyle.fontStyle !== thisStyle.fontStyle ||\r\n                prevStyle.deltaY !== thisStyle.deltaY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\r\n        return this._hasStyleChanged(prevStyle, thisStyle) ||\r\n          prevStyle.overline !== thisStyle.overline ||\r\n          prevStyle.underline !== thisStyle.underline ||\r\n          prevStyle.linethrough !== thisStyle.linethrough;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} lineIndex index text line\r\n       * @return {Number} Line left offset\r\n       */\r\n      _getLineLeftOffset: function(lineIndex) {\r\n        var lineWidth = this.getLineWidth(lineIndex);\r\n        if (this.textAlign === 'center') {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'right') {\r\n          return this.width - lineWidth;\r\n        }\r\n        if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\r\n          return this.width - lineWidth;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _clearCache: function() {\r\n        this.__lineWidths = [];\r\n        this.__lineHeights = [];\r\n        this.__charBounds = [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _shouldClearDimensionCache: function() {\r\n        var shouldClear = this._forceClearCache;\r\n        shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\r\n        if (shouldClear) {\r\n          this.dirty = true;\r\n          this._forceClearCache = false;\r\n        }\r\n        return shouldClear;\r\n      },\r\n\r\n      /**\r\n       * Measure a single line given its index. Used to calculate the initial\r\n       * text bounding box. The values are calculated and stored in __lineWidths cache.\r\n       * @private\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      getLineWidth: function(lineIndex) {\r\n        if (this.__lineWidths[lineIndex]) {\r\n          return this.__lineWidths[lineIndex];\r\n        }\r\n\r\n        var width, line = this._textLines[lineIndex], lineInfo;\r\n\r\n        if (line === '') {\r\n          width = 0;\r\n        }\r\n        else {\r\n          lineInfo = this.measureLine(lineIndex);\r\n          width = lineInfo.width;\r\n        }\r\n        this.__lineWidths[lineIndex] = width;\r\n        return width;\r\n      },\r\n\r\n      _getWidthOfCharSpacing: function() {\r\n        if (this.charSpacing !== 0) {\r\n          return this.fontSize * this.charSpacing / 1000;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * Retrieves the value of property at given character position\r\n       * @param {Number} lineIndex the line number\r\n       * @param {Number} charIndex the charater number\r\n       * @param {String} property the property name\r\n       * @returns the value of 'property'\r\n       */\r\n      getValueOfPropertyAt: function(lineIndex, charIndex, property) {\r\n        var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\r\n        if (charStyle && typeof charStyle[property] !== 'undefined') {\r\n          return charStyle[property];\r\n        }\r\n        return this[property];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextDecoration: function(ctx, type) {\r\n        if (!this[type] && !this.styleHas(type)) {\r\n          return;\r\n        }\r\n        var heightOfLine, size, _size,\r\n            lineLeftOffset, dy, _dy,\r\n            line, lastDecoration,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(), top,\r\n            boxStart, boxWidth, charBox, currentDecoration,\r\n            maxHeight, currentFill, lastFill,\r\n            charSpacing = this._getWidthOfCharSpacing();\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this[type] && !this.styleHas(type, i)) {\r\n            topOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          maxHeight = heightOfLine / this.lineHeight;\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxStart = 0;\r\n          boxWidth = 0;\r\n          lastDecoration = this.getValueOfPropertyAt(i, 0, type);\r\n          lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\r\n          top = topOffset + maxHeight * (1 - this._fontSizeFraction);\r\n          size = this.getHeightOfChar(i, 0);\r\n          dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentDecoration = this.getValueOfPropertyAt(i, j, type);\r\n            currentFill = this.getValueOfPropertyAt(i, j, 'fill');\r\n            _size = this.getHeightOfChar(i, j);\r\n            _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\r\n            if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\r\n                boxWidth > 0) {\r\n              ctx.fillStyle = lastFill;\r\n              lastDecoration && lastFill && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                top + this.offsets[type] * size + dy,\r\n                boxWidth,\r\n                this.fontSize / 15\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastDecoration = currentDecoration;\r\n              lastFill = currentFill;\r\n              size = _size;\r\n              dy = _dy;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          ctx.fillStyle = currentFill;\r\n          currentDecoration && currentFill && ctx.fillRect(\r\n            leftOffset + lineLeftOffset + boxStart,\r\n            top + this.offsets[type] * size + dy,\r\n            boxWidth - charSpacing,\r\n            this.fontSize / 15\r\n          );\r\n          topOffset += heightOfLine;\r\n        }\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * return font declaration string for canvas context\r\n       * @param {Object} [styleObject] object\r\n       * @returns {String} font declaration formatted for canvas context.\r\n       */\r\n      _getFontDeclaration: function(styleObject, forMeasuring) {\r\n        var style = styleObject || this, family = this.fontFamily,\r\n            fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\r\n        var fontFamily = family === undefined ||\r\n        family.indexOf('\\'') > -1 || family.indexOf(',') > -1 ||\r\n        family.indexOf('\"') > -1 || fontIsGeneric\r\n          ? style.fontFamily : '\"' + style.fontFamily + '\"';\r\n        return [\r\n          // node-canvas needs \"weight style\", while browsers need \"style weight\"\r\n          // verify if this can be fixed in JSDOM\r\n          (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\r\n          (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\r\n          forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\r\n          fontFamily\r\n        ].join(' ');\r\n      },\r\n\r\n      /**\r\n       * Renders text instance on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if object is not visible\r\n        if (!this.visible) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n        }\r\n        this.callSuper('render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns the text as an array of lines.\r\n       * @param {String} text text to split\r\n       * @returns {Array} Lines in the text\r\n       */\r\n      _splitTextIntoLines: function(text) {\r\n        var lines = text.split(this._reNewline),\r\n            newLines = new Array(lines.length),\r\n            newLine = ['\\n'],\r\n            newText = [];\r\n        for (var i = 0; i < lines.length; i++) {\r\n          newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\r\n          newText = newText.concat(newLines[i], newLine);\r\n        }\r\n        newText.pop();\r\n        return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var additionalProperties = [\r\n          'text',\r\n          'fontSize',\r\n          'fontWeight',\r\n          'fontFamily',\r\n          'fontStyle',\r\n          'lineHeight',\r\n          'underline',\r\n          'overline',\r\n          'linethrough',\r\n          'textAlign',\r\n          'textBackgroundColor',\r\n          'charSpacing',\r\n        ].concat(propertiesToInclude);\r\n        var obj = this.callSuper('toObject', additionalProperties);\r\n        obj.styles = clone(this.styles, true);\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n       * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n       * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      set: function(key, value) {\r\n        this.callSuper('set', key, value);\r\n        var needsDims = false;\r\n        if (typeof key === 'object') {\r\n          for (var _key in key) {\r\n            needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\r\n          }\r\n        }\r\n        else {\r\n          needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\r\n        }\r\n        if (needsDims) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @see: http://www.w3.org/TR/SVG/text.html#TextElement\r\n     */\r\n    fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\r\n      'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\r\n\r\n    /**\r\n     * Default SVG font size\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     */\r\n    fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Text.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\r\n          parsedAnchor = parsedAttributes.textAnchor || 'left';\r\n      options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\r\n\r\n      options.top = options.top || 0;\r\n      options.left = options.left || 0;\r\n      if (parsedAttributes.textDecoration) {\r\n        var textDecoration = parsedAttributes.textDecoration;\r\n        if (textDecoration.indexOf('underline') !== -1) {\r\n          options.underline = true;\r\n        }\r\n        if (textDecoration.indexOf('overline') !== -1) {\r\n          options.overline = true;\r\n        }\r\n        if (textDecoration.indexOf('line-through') !== -1) {\r\n          options.linethrough = true;\r\n        }\r\n        delete options.textDecoration;\r\n      }\r\n      if ('dx' in parsedAttributes) {\r\n        options.left += parsedAttributes.dx;\r\n      }\r\n      if ('dy' in parsedAttributes) {\r\n        options.top += parsedAttributes.dy;\r\n      }\r\n      if (!('fontSize' in options)) {\r\n        options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n      }\r\n\r\n      var textContent = '';\r\n\r\n      // The XML is not properly parsed in IE9 so a workaround to get\r\n      // textContent is through firstChild.data. Another workaround would be\r\n      // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\r\n      if (!('textContent' in element)) {\r\n        if ('firstChild' in element && element.firstChild !== null) {\r\n          if ('data' in element.firstChild && element.firstChild.data !== null) {\r\n            textContent = element.firstChild.data;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        textContent = element.textContent;\r\n      }\r\n\r\n      textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\r\n      var originalStrokeWidth = options.strokeWidth;\r\n      options.strokeWidth = 0;\r\n\r\n      var text = new fabric.Text(textContent, options),\r\n          textHeightScaleFactor = text.getScaledHeight() / text.height,\r\n          lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\r\n          scaledDiff = lineHeightDiff * textHeightScaleFactor,\r\n          textHeight = text.getScaledHeight() + scaledDiff,\r\n          offX = 0;\r\n      /*\r\n        Adjust positioning:\r\n          x/y attributes in SVG correspond to the bottom-left corner of text bounding box\r\n          fabric output by default at top, left.\r\n      */\r\n      if (parsedAnchor === 'center') {\r\n        offX = text.getScaledWidth() / 2;\r\n      }\r\n      if (parsedAnchor === 'right') {\r\n        offX = text.getScaledWidth();\r\n      }\r\n      text.set({\r\n        left: text.left - offX,\r\n        top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\r\n        strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\r\n      });\r\n      callback(text);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\r\n     */\r\n    fabric.Text.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Text', object, callback, 'text');\r\n    };\r\n\r\n    fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        if (!this.styles) {\r\n          return true;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return true;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            for (var p3 in obj[p1][p2]) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it ina specified line\r\n       * This function is used to detect if a text will use a particular property or not.\r\n       * @param {String} property to check for\r\n       * @param {Number} lineIndex to check the style on\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return false;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { 0: this.styles[lineIndex] };\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            if (typeof obj[p1][p2][property] !== 'undefined') {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if characters in a text have a value for a property\r\n       * whose value matches the textbox's value for that property.  If so,\r\n       * the character-level property is deleted.  If the character\r\n       * has no other properties, then it is also deleted.  Finally,\r\n       * if the line containing that character has no other characters\r\n       * then it also is deleted.\r\n       *\r\n       * @param {string} property The property to compare between characters and text.\r\n       */\r\n      cleanStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\r\n            allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          letterCount = 0;\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            var styleObject = obj[p1][p2],\r\n                stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\r\n\r\n            stylesCount++;\r\n\r\n            if (stylePropertyHasBeenSet) {\r\n              if (!stylePropertyValue) {\r\n                stylePropertyValue = styleObject[property];\r\n              }\r\n              else if (styleObject[property] !== stylePropertyValue) {\r\n                allStyleObjectPropertiesMatch = false;\r\n              }\r\n\r\n              if (styleObject[property] === this[property]) {\r\n                delete styleObject[property];\r\n              }\r\n            }\r\n            else {\r\n              allStyleObjectPropertiesMatch = false;\r\n            }\r\n\r\n            if (Object.keys(styleObject).length !== 0) {\r\n              letterCount++;\r\n            }\r\n            else {\r\n              delete obj[p1][p2];\r\n            }\r\n          }\r\n\r\n          if (letterCount === 0) {\r\n            delete obj[p1];\r\n          }\r\n        }\r\n        // if every grapheme has the same style set then\r\n        // delete those styles and set it on the parent\r\n        for (var i = 0; i < this._textLines.length; i++) {\r\n          graphemeCount += this._textLines[i].length;\r\n        }\r\n        if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\r\n          this[property] = stylePropertyValue;\r\n          this.removeStyle(property);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Remove a style property or properties from all individual character styles\r\n       * in a text object.  Deletes the character style object if it contains no other style\r\n       * props.  Deletes a line style object if it contains no other character styles.\r\n       *\r\n       * @param {String} props The property to remove from character styles.\r\n       */\r\n      removeStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return;\r\n        }\r\n        var obj = this.styles, line, lineNum, charNum;\r\n        for (lineNum in obj) {\r\n          line = obj[lineNum];\r\n          for (charNum in line) {\r\n            delete line[charNum][property];\r\n            if (Object.keys(line[charNum]).length === 0) {\r\n              delete line[charNum];\r\n            }\r\n          }\r\n          if (Object.keys(line).length === 0) {\r\n            delete obj[lineNum];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _extendStyles: function(index, styles) {\r\n        var loc = this.get2DCursorLocation(index);\r\n\r\n        if (!this._getLineStyle(loc.lineIndex)) {\r\n          this._setLineStyle(loc.lineIndex);\r\n        }\r\n\r\n        if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\r\n          this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\r\n        }\r\n\r\n        fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\r\n      },\r\n\r\n      /**\r\n       * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\r\n       * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\r\n       * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\r\n       */\r\n      get2DCursorLocation: function(selectionStart, skipWrapping) {\r\n        if (typeof selectionStart === 'undefined') {\r\n          selectionStart = this.selectionStart;\r\n        }\r\n        var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,\r\n            len = lines.length;\r\n        for (var i = 0; i < len; i++) {\r\n          if (selectionStart <= lines[i].length) {\r\n            return {\r\n              lineIndex: i,\r\n              charIndex: selectionStart\r\n            };\r\n          }\r\n          selectionStart -= lines[i].length + this.missingNewlineOffset(i);\r\n        }\r\n        return {\r\n          lineIndex: i - 1,\r\n          charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor (at the start position)\r\n       * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @param {Boolean} [complete] get full style or not\r\n       * @return {Array} styles an array with one, zero or more Style objects\r\n       */\r\n      getSelectionStyles: function(startIndex, endIndex, complete) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        var styles = [];\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          styles.push(this.getStyleAtPosition(i, complete));\r\n        }\r\n        return styles;\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor position\r\n       * @param {Number} position  to get styles at\r\n       * @param {Boolean} [complete] full style if true\r\n       * @return {Object} style Style object at a specified index\r\n       * @private\r\n       */\r\n      getStyleAtPosition: function(position, complete) {\r\n        var loc = this.get2DCursorLocation(position),\r\n            style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\r\n              this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\r\n        return style || {};\r\n      },\r\n\r\n      /**\r\n       * Sets style of a current selection, if no selection exist, do not set anything.\r\n       * @param {Object} [styles] Styles object\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      setSelectionStyles: function(styles, startIndex, endIndex) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          this._extendStyles(i, styles);\r\n        }\r\n        /* not included in _extendStyles to avoid clearing cache more than once */\r\n        this._forceClearCache = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * get the reference, not a clone, of the style object for a given character\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @return {Object} style object\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        var lineStyle = this.styles && this.styles[lineIndex];\r\n        if (!lineStyle) {\r\n          return null;\r\n        }\r\n        return lineStyle[charIndex];\r\n      },\r\n\r\n      /**\r\n       * return a new object that contains all the style property for a character\r\n       * the object returned is newly created\r\n       * @param {Number} lineIndex of the line where the character is\r\n       * @param {Number} charIndex position of the character on the line\r\n       * @return {Object} style object\r\n       */\r\n      getCompleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\r\n            styleObject = { }, prop;\r\n        for (var i = 0; i < this._styleProperties.length; i++) {\r\n          prop = this._styleProperties[i];\r\n          styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\r\n        }\r\n        return styleObject;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean} if the line exists or not\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        return !!this.styles[lineIndex];\r\n      },\r\n\r\n      /**\r\n       * Set the line style to an empty object so that is initialized\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex) {\r\n        this.styles[lineIndex] = {};\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _deleteLineStyle: function(lineIndex) {\r\n        delete this.styles[lineIndex];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function parseDecoration(object) {\r\n      if (object.textDecoration) {\r\n        object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\r\n        object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\r\n        object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\r\n        delete object.textDecoration;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\r\n     * prefix when observing canvas.\r\n     * @class fabric.IText\r\n     * @extends fabric.Text\r\n     * @mixes fabric.Observable\r\n     *\r\n     * @fires changed\r\n     * @fires selection:changed\r\n     * @fires editing:entered\r\n     * @fires editing:exited\r\n     *\r\n     * @return {fabric.IText} thisArg\r\n     * @see {@link fabric.IText#initialize} for constructor definition\r\n     *\r\n     * <p>Supported key combinations:</p>\r\n     * <pre>\r\n     *   Move cursor:                    left, right, up, down\r\n     *   Select character:               shift + left, shift + right\r\n     *   Select text vertically:         shift + up, shift + down\r\n     *   Move cursor by word:            alt + left, alt + right\r\n     *   Select words:                   shift + alt + left, shift + alt + right\r\n     *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\r\n     *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\r\n     *   Jump to start/end of text:      cmd + up, cmd + down\r\n     *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\r\n     *   Delete character:               backspace\r\n     *   Delete word:                    alt + backspace\r\n     *   Delete line:                    cmd + backspace\r\n     *   Forward delete:                 delete\r\n     *   Copy text:                      ctrl/cmd + c\r\n     *   Paste text:                     ctrl/cmd + v\r\n     *   Cut text:                       ctrl/cmd + x\r\n     *   Select entire text:             ctrl/cmd + a\r\n     *   Quit editing                    tab or esc\r\n     * </pre>\r\n     *\r\n     * <p>Supported mouse/touch combination</p>\r\n     * <pre>\r\n     *   Position cursor:                click/touch\r\n     *   Create selection:               click/touch & drag\r\n     *   Create selection:               click & shift + click\r\n     *   Select word:                    double click\r\n     *   Select line:                    triple click\r\n     * </pre>\r\n     */\r\n    fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'i-text',\r\n\r\n      /**\r\n       * Index where text selection starts (or where cursor is when there is no selection)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionStart: 0,\r\n\r\n      /**\r\n       * Index where text selection ends\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionEnd: 0,\r\n\r\n      /**\r\n       * Color of text selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor: 'rgba(17,119,255,0.3)',\r\n\r\n      /**\r\n       * Indicates whether text is in editing mode\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isEditing: false,\r\n\r\n      /**\r\n       * Indicates whether a text can be edited\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      editable: true,\r\n\r\n      /**\r\n       * Border color of text object while it's in editing mode\r\n       * @type String\r\n       * @default\r\n       */\r\n      editingBorderColor: 'rgba(102,153,255,0.25)',\r\n\r\n      /**\r\n       * Width of cursor (in px)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorWidth: 2,\r\n\r\n      /**\r\n       * Color of default cursor (when not overwritten by character style)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cursorColor: '#333',\r\n\r\n      /**\r\n       * Delay between cursor blink (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDelay: 1000,\r\n\r\n      /**\r\n       * Duration of cursor fadein (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDuration: 600,\r\n\r\n      /**\r\n       * Indicates whether internal text char widths can be cached\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      caching: true,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reSpace: /\\s|\\n/,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _currentCursorOpacity: 0,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _selectionDirection: null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _abortCursorAnimation: false,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __widthOfSpace: [],\r\n\r\n      /**\r\n       * Helps determining when the text is in composition, so that the cursor\r\n       * rendering is altered.\r\n       */\r\n      inCompositionMode: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.IText} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.callSuper('initialize', text, options);\r\n        this.initBehavior();\r\n      },\r\n\r\n      /**\r\n       * Sets selection start (left boundary of a selection)\r\n       * @param {Number} index Index to set selection start to\r\n       */\r\n      setSelectionStart: function(index) {\r\n        index = Math.max(index, 0);\r\n        this._updateAndFire('selectionStart', index);\r\n      },\r\n\r\n      /**\r\n       * Sets selection end (right boundary of a selection)\r\n       * @param {Number} index Index to set selection end to\r\n       */\r\n      setSelectionEnd: function(index) {\r\n        index = Math.min(index, this.text.length);\r\n        this._updateAndFire('selectionEnd', index);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property 'selectionStart' or 'selectionEnd'\r\n       * @param {Number} index new position of property\r\n       */\r\n      _updateAndFire: function(property, index) {\r\n        if (this[property] !== index) {\r\n          this._fireSelectionChanged();\r\n          this[property] = index;\r\n        }\r\n        this._updateTextarea();\r\n      },\r\n\r\n      /**\r\n       * Fires the even of selection changed\r\n       * @private\r\n       */\r\n      _fireSelectionChanged: function() {\r\n        this.fire('selection:changed');\r\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\r\n      },\r\n\r\n      /**\r\n       * Initialize text dimensions. Render all text on given context\r\n       * or on a offscreen canvas to get the text width with measureText.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       * @private\r\n       */\r\n      initDimensions: function() {\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this.callSuper('initDimensions');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        this.clearContextTop();\r\n        this.callSuper('render', ctx);\r\n        // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\r\n        // the correct position but not at every cursor animation.\r\n        this.cursorOffsetCache = { };\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this.callSuper('_render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Prepare and clean the contextTop\r\n       */\r\n      clearContextTop: function(skipRestore) {\r\n        if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {\r\n          return;\r\n        }\r\n        var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        this.transform(ctx);\r\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\r\n        this._clearTextArea(ctx);\r\n        skipRestore || ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Renders cursor or selection (depending on what exists)\r\n       * it does on the contextTop. If contextTop is not available, do nothing.\r\n       */\r\n      renderCursorOrSelection: function() {\r\n        if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {\r\n          return;\r\n        }\r\n        var boundaries = this._getCursorBoundaries(),\r\n            ctx = this.canvas.contextTop;\r\n        this.clearContextTop(true);\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.renderCursor(boundaries, ctx);\r\n        }\r\n        else {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      _clearTextArea: function(ctx) {\r\n        // we add 4 pixel, to be sure to do not leave any pixel out\r\n        var width = this.width + 4, height = this.height + 4;\r\n        ctx.clearRect(-width / 2, -height / 2, width, height);\r\n      },\r\n\r\n      /**\r\n       * Returns cursor boundaries (left, top, leftOffset, topOffset)\r\n       * @private\r\n       * @param {Array} chars Array of characters\r\n       * @param {String} typeOfBoundaries\r\n       */\r\n      _getCursorBoundaries: function(position) {\r\n\r\n        // left/top are left/top of entire text box\r\n        // leftOffset/topOffset are offset from that left/top point of a text box\r\n\r\n        if (typeof position === 'undefined') {\r\n          position = this.selectionStart;\r\n        }\r\n\r\n        var left = this._getLeftOffset(),\r\n            top = this._getTopOffset(),\r\n            offsets = this._getCursorBoundariesOffsets(position);\r\n\r\n        return {\r\n          left: left,\r\n          top: top,\r\n          leftOffset: offsets.left,\r\n          topOffset: offsets.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getCursorBoundariesOffsets: function(position) {\r\n        if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\r\n          return this.cursorOffsetCache;\r\n        }\r\n        var lineLeftOffset,\r\n            lineIndex,\r\n            charIndex,\r\n            topOffset = 0,\r\n            leftOffset = 0,\r\n            boundaries,\r\n            cursorPosition = this.get2DCursorLocation(position);\r\n        charIndex = cursorPosition.charIndex;\r\n        lineIndex = cursorPosition.lineIndex;\r\n        for (var i = 0; i < lineIndex; i++) {\r\n          topOffset += this.getHeightOfLine(i);\r\n        }\r\n        lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n        var bound = this.__charBounds[lineIndex][charIndex];\r\n        bound && (leftOffset = bound.left);\r\n        if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\r\n          leftOffset -= this._getWidthOfCharSpacing();\r\n        }\r\n        boundaries = {\r\n          top: topOffset,\r\n          left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\r\n        };\r\n        this.cursorOffsetCache = boundaries;\r\n        return this.cursorOffsetCache;\r\n      },\r\n\r\n      /**\r\n       * Renders cursor\r\n       * @param {Object} boundaries\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderCursor: function(boundaries, ctx) {\r\n        var cursorLocation = this.get2DCursorLocation(),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\r\n            multiplier = this.scaleX * this.canvas.getZoom(),\r\n            cursorWidth = this.cursorWidth / multiplier,\r\n            topOffset = boundaries.topOffset,\r\n            dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\r\n\r\n        topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\r\n          - charHeight * (1 - this._fontSizeFraction);\r\n\r\n        if (this.inCompositionMode) {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n\r\n        ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\r\n        ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\r\n        ctx.fillRect(\r\n          boundaries.left + boundaries.leftOffset - cursorWidth / 2,\r\n          topOffset + boundaries.top + dy,\r\n          cursorWidth,\r\n          charHeight);\r\n      },\r\n\r\n      /**\r\n       * Renders text selection\r\n       * @param {Object} boundaries Object with left/top/leftOffset/topOffset\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderSelection: function(boundaries, ctx) {\r\n\r\n        var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\r\n            selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            start = this.get2DCursorLocation(selectionStart),\r\n            end = this.get2DCursorLocation(selectionEnd),\r\n            startLine = start.lineIndex,\r\n            endLine = end.lineIndex,\r\n            startChar = start.charIndex < 0 ? 0 : start.charIndex,\r\n            endChar = end.charIndex < 0 ? 0 : end.charIndex;\r\n\r\n        for (var i = startLine; i <= endLine; i++) {\r\n          var lineOffset = this._getLineLeftOffset(i) || 0,\r\n              lineHeight = this.getHeightOfLine(i),\r\n              realLineHeight = 0, boxStart = 0, boxEnd = 0;\r\n\r\n          if (i === startLine) {\r\n            boxStart = this.__charBounds[startLine][startChar].left;\r\n          }\r\n          if (i >= startLine && i < endLine) {\r\n            boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\r\n          }\r\n          else if (i === endLine) {\r\n            if (endChar === 0) {\r\n              boxEnd = this.__charBounds[endLine][endChar].left;\r\n            }\r\n            else {\r\n              var charSpacing = this._getWidthOfCharSpacing();\r\n              boxEnd = this.__charBounds[endLine][endChar - 1].left\r\n                + this.__charBounds[endLine][endChar - 1].width - charSpacing;\r\n            }\r\n          }\r\n          realLineHeight = lineHeight;\r\n          if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\r\n            lineHeight /= this.lineHeight;\r\n          }\r\n          if (this.inCompositionMode) {\r\n            ctx.fillStyle = this.compositionColor || 'black';\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset + lineHeight,\r\n              boxEnd - boxStart,\r\n              1);\r\n          }\r\n          else {\r\n            ctx.fillStyle = this.selectionColor;\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset,\r\n              boxEnd - boxStart,\r\n              lineHeight);\r\n          }\r\n\r\n\r\n          boundaries.topOffset += realLineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * High level function to know the height of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns fontSize of char at the current cursor\r\n       * @return {Number} Character font size\r\n       */\r\n      getCurrentCharFontSize: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * High level function to know the color of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns color (fill) of char at the current cursor\r\n       * @return {String} Character color (fill)\r\n       */\r\n      getCurrentCharColor: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\r\n      },\r\n\r\n      /**\r\n       * Returns the cursor position for the getCurrent.. functions\r\n       * @private\r\n       */\r\n      _getCurrentCharIndex: function() {\r\n        var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\r\n            charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\r\n        return { l: cursorPosition.lineIndex, c: charIndex };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.IText instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.IText\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as argument\r\n     */\r\n    fabric.IText.fromObject = function(object, callback) {\r\n      parseDecoration(object);\r\n      if (object.styles) {\r\n        for (var i in object.styles) {\r\n          for (var j in object.styles[i]) {\r\n            parseDecoration(object.styles[i][j]);\r\n          }\r\n        }\r\n      }\r\n      fabric.Object._fromObject('IText', object, callback, 'text');\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Initializes all the interactive behavior of IText\r\n       */\r\n      initBehavior: function() {\r\n        this.initAddedHandler();\r\n        this.initRemovedHandler();\r\n        this.initCursorSelectionHandlers();\r\n        this.initDoubleClickSimulation();\r\n        this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\r\n      },\r\n\r\n      onDeselect: function() {\r\n        this.isEditing && this.exitEditing();\r\n        this.selected = false;\r\n      },\r\n\r\n      /**\r\n       * Initializes \"added\" event handler\r\n       */\r\n      initAddedHandler: function() {\r\n        var _this = this;\r\n        this.on('added', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            if (!canvas._hasITextHandlers) {\r\n              canvas._hasITextHandlers = true;\r\n              _this._initCanvasHandlers(canvas);\r\n            }\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            canvas._iTextInstances.push(_this);\r\n          }\r\n        });\r\n      },\r\n\r\n      initRemovedHandler: function() {\r\n        var _this = this;\r\n        this.on('removed', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            fabric.util.removeFromArray(canvas._iTextInstances, _this);\r\n            if (canvas._iTextInstances.length === 0) {\r\n              canvas._hasITextHandlers = false;\r\n              _this._removeCanvasHandlers(canvas);\r\n            }\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * register canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _initCanvasHandlers: function(canvas) {\r\n        canvas._mouseUpITextHandler = function() {\r\n          if (canvas._iTextInstances) {\r\n            canvas._iTextInstances.forEach(function(obj) {\r\n              obj.__isMousedown = false;\r\n            });\r\n          }\r\n        };\r\n        canvas.on('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * remove canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _removeCanvasHandlers: function(canvas) {\r\n        canvas.off('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _tick: function() {\r\n        this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\r\n\r\n        var tickState;\r\n\r\n        tickState = {\r\n          isAborted: false,\r\n          abort: function() {\r\n            this.isAborted = true;\r\n          },\r\n        };\r\n\r\n        obj.animate('_currentCursorOpacity', targetOpacity, {\r\n          duration: duration,\r\n          onComplete: function() {\r\n            if (!tickState.isAborted) {\r\n              obj[completeMethod]();\r\n            }\r\n          },\r\n          onChange: function() {\r\n            // we do not want to animate a selection, only cursor\r\n            if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\r\n              obj.renderCursorOrSelection();\r\n            }\r\n          },\r\n          abort: function() {\r\n            return tickState.isAborted;\r\n          }\r\n        });\r\n        return tickState;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onTickComplete: function() {\r\n\r\n        var _this = this;\r\n\r\n        if (this._cursorTimeout1) {\r\n          clearTimeout(this._cursorTimeout1);\r\n        }\r\n        this._cursorTimeout1 = setTimeout(function() {\r\n          _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\r\n        }, 100);\r\n      },\r\n\r\n      /**\r\n       * Initializes delayed cursor\r\n       */\r\n      initDelayedCursor: function(restart) {\r\n        var _this = this,\r\n            delay = restart ? 0 : this.cursorDelay;\r\n\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this._cursorTimeout2 = setTimeout(function() {\r\n          _this._tick();\r\n        }, delay);\r\n      },\r\n\r\n      /**\r\n       * Aborts cursor animation and clears all timeouts\r\n       */\r\n      abortCursorAnimation: function() {\r\n        var shouldClear = this._currentTickState || this._currentTickCompleteState,\r\n            canvas = this.canvas;\r\n        this._currentTickState && this._currentTickState.abort();\r\n        this._currentTickCompleteState && this._currentTickCompleteState.abort();\r\n\r\n        clearTimeout(this._cursorTimeout1);\r\n        clearTimeout(this._cursorTimeout2);\r\n\r\n        this._currentCursorOpacity = 0;\r\n        // to clear just itext area we need to transform the context\r\n        // it may not be worth it\r\n        if (shouldClear && canvas) {\r\n          canvas.clearContext(canvas.contextTop || canvas.contextContainer);\r\n        }\r\n\r\n      },\r\n\r\n      /**\r\n       * Selects entire text\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectAll: function() {\r\n        this.selectionStart = 0;\r\n        this.selectionEnd = this._text.length;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns selected text\r\n       * @return {String}\r\n       */\r\n      getSelectedText: function() {\r\n        return this._text.slice(this.selectionStart, this.selectionEnd).join('');\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current word according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        // remove space before cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index--;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current word according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        // remove space after cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index++;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index < this._text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index < this._text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Finds index corresponding to beginning or end of a word\r\n       * @param {Number} selectionStart Index of a character\r\n       * @param {Number} direction 1 or -1\r\n       * @return {Number} Index of the beginning or end of a word\r\n       */\r\n      searchWordBoundary: function(selectionStart, direction) {\r\n        var text = this._text,\r\n            index     = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart,\r\n            _char     = text[index],\r\n            // wrong\r\n            reNonWord = fabric.reNonWord;\r\n\r\n        while (!reNonWord.test(_char) && index > 0 && index < text.length) {\r\n          index += direction;\r\n          _char = text[index];\r\n        }\r\n        if (reNonWord.test(_char)) {\r\n          index += direction === 1 ? 0 : 1;\r\n        }\r\n        return index;\r\n      },\r\n\r\n      /**\r\n       * Selects a word based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       */\r\n      selectWord: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\r\n            newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * Selects a line based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectLine: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\r\n            newSelectionEnd = this.findLineBoundaryRight(selectionStart);\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Enters editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      enterEditing: function(e) {\r\n        if (this.isEditing || !this.editable) {\r\n          return;\r\n        }\r\n\r\n        if (this.canvas) {\r\n          this.canvas.calcOffset();\r\n          this.exitEditingOnOthers(this.canvas);\r\n        }\r\n\r\n        this.isEditing = true;\r\n\r\n        this.initHiddenTextarea(e);\r\n        this.hiddenTextarea.focus();\r\n        this.hiddenTextarea.value = this.text;\r\n        this._updateTextarea();\r\n        this._saveEditingProps();\r\n        this._setEditingProps();\r\n        this._textBeforeEdit = this.text;\r\n\r\n        this._tick();\r\n        this.fire('editing:entered');\r\n        this._fireSelectionChanged();\r\n        if (!this.canvas) {\r\n          return this;\r\n        }\r\n        this.canvas.fire('text:editing:entered', { target: this });\r\n        this.initMouseMoveHandler();\r\n        this.canvas.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      exitEditingOnOthers: function(canvas) {\r\n        if (canvas._iTextInstances) {\r\n          canvas._iTextInstances.forEach(function(obj) {\r\n            obj.selected = false;\r\n            if (obj.isEditing) {\r\n              obj.exitEditing();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Initializes \"mousemove\" event handler\r\n       */\r\n      initMouseMoveHandler: function() {\r\n        this.canvas.on('mouse:move', this.mouseMoveHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      mouseMoveHandler: function(options) {\r\n        if (!this.__isMousedown || !this.isEditing) {\r\n          return;\r\n        }\r\n\r\n        var newSelectionStart = this.getSelectionStartFromPointer(options.e),\r\n            currentStart = this.selectionStart,\r\n            currentEnd = this.selectionEnd;\r\n        if (\r\n          (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\r\n          &&\r\n          (currentStart === newSelectionStart || currentEnd === newSelectionStart)\r\n        ) {\r\n          return;\r\n        }\r\n        if (newSelectionStart > this.__selectionStartOnMouseDown) {\r\n          this.selectionStart = this.__selectionStartOnMouseDown;\r\n          this.selectionEnd = newSelectionStart;\r\n        }\r\n        else {\r\n          this.selectionStart = newSelectionStart;\r\n          this.selectionEnd = this.__selectionStartOnMouseDown;\r\n        }\r\n        if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\r\n          this.restartCursorIfNeeded();\r\n          this._fireSelectionChanged();\r\n          this._updateTextarea();\r\n          this.renderCursorOrSelection();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setEditingProps: function() {\r\n        this.hoverCursor = 'text';\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\r\n        }\r\n\r\n        this.borderColor = this.editingBorderColor;\r\n        this.hasControls = this.selectable = false;\r\n        this.lockMovementX = this.lockMovementY = true;\r\n      },\r\n\r\n      /**\r\n       * convert from textarea to grapheme indexes\r\n       */\r\n      fromStringToGraphemeSelection: function(start, end, text) {\r\n        var smallerTextStart = text.slice(0, start),\r\n            graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = text.slice(start, end),\r\n            graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * convert from fabric to textarea values\r\n       */\r\n      fromGraphemeToStringSelection: function(start, end, _text) {\r\n        var smallerTextStart = _text.slice(0, start),\r\n            graphemeStart = smallerTextStart.join('').length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = _text.slice(start, end),\r\n            graphemeEnd = smallerTextEnd.join('').length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateTextarea: function() {\r\n        this.cursorOffsetCache = { };\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        if (!this.inCompositionMode) {\r\n          var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\r\n          this.hiddenTextarea.selectionStart = newSelection.selectionStart;\r\n          this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateFromTextArea: function() {\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        this.cursorOffsetCache = { };\r\n        this.text = this.hiddenTextarea.value;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        var newSelection = this.fromStringToGraphemeSelection(\r\n          this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\r\n        this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\r\n        if (!this.inCompositionMode) {\r\n          this.selectionStart = newSelection.selectionStart;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateTextareaPosition: function() {\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          var style = this._calcTextareaPosition();\r\n          this.hiddenTextarea.style.left = style.left;\r\n          this.hiddenTextarea.style.top = style.top;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Object} style contains style for hiddenTextarea\r\n       */\r\n      _calcTextareaPosition: function() {\r\n        if (!this.canvas) {\r\n          return { x: 1, y: 1 };\r\n        }\r\n        var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart,\r\n            boundaries = this._getCursorBoundaries(desiredPosition),\r\n            cursorLocation = this.get2DCursorLocation(desiredPosition),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\r\n            leftOffset = boundaries.leftOffset,\r\n            m = this.calcTransformMatrix(),\r\n            p = {\r\n              x: boundaries.left + leftOffset,\r\n              y: boundaries.top + boundaries.topOffset + charHeight\r\n            },\r\n            retinaScaling = this.canvas.getRetinaScaling(),\r\n            upperCanvas = this.canvas.upperCanvasEl,\r\n            upperCanvasWidth = upperCanvas.width / retinaScaling,\r\n            upperCanvasHeight = upperCanvas.height / retinaScaling,\r\n            maxWidth = upperCanvasWidth - charHeight,\r\n            maxHeight = upperCanvasHeight - charHeight,\r\n            scaleX = upperCanvas.clientWidth / upperCanvasWidth,\r\n            scaleY = upperCanvas.clientHeight / upperCanvasHeight;\r\n\r\n        p = fabric.util.transformPoint(p, m);\r\n        p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\r\n        p.x *= scaleX;\r\n        p.y *= scaleY;\r\n        if (p.x < 0) {\r\n          p.x = 0;\r\n        }\r\n        if (p.x > maxWidth) {\r\n          p.x = maxWidth;\r\n        }\r\n        if (p.y < 0) {\r\n          p.y = 0;\r\n        }\r\n        if (p.y > maxHeight) {\r\n          p.y = maxHeight;\r\n        }\r\n\r\n        // add canvas offset on document\r\n        p.x += this.canvas._offset.left;\r\n        p.y += this.canvas._offset.top;\r\n\r\n        return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _saveEditingProps: function() {\r\n        this._savedProps = {\r\n          hasControls: this.hasControls,\r\n          borderColor: this.borderColor,\r\n          lockMovementX: this.lockMovementX,\r\n          lockMovementY: this.lockMovementY,\r\n          hoverCursor: this.hoverCursor,\r\n          selectable: this.selectable,\r\n          defaultCursor: this.canvas && this.canvas.defaultCursor,\r\n          moveCursor: this.canvas && this.canvas.moveCursor\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _restoreEditingProps: function() {\r\n        if (!this._savedProps) {\r\n          return;\r\n        }\r\n\r\n        this.hoverCursor = this._savedProps.hoverCursor;\r\n        this.hasControls = this._savedProps.hasControls;\r\n        this.borderColor = this._savedProps.borderColor;\r\n        this.selectable = this._savedProps.selectable;\r\n        this.lockMovementX = this._savedProps.lockMovementX;\r\n        this.lockMovementY = this._savedProps.lockMovementY;\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this._savedProps.defaultCursor;\r\n          this.canvas.moveCursor = this._savedProps.moveCursor;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Exits from editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      exitEditing: function() {\r\n        var isTextChanged = (this._textBeforeEdit !== this.text);\r\n        this.selected = false;\r\n        this.isEditing = false;\r\n\r\n        this.selectionEnd = this.selectionStart;\r\n\r\n        if (this.hiddenTextarea) {\r\n          this.hiddenTextarea.blur && this.hiddenTextarea.blur();\r\n          this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\r\n          this.hiddenTextarea = null;\r\n        }\r\n\r\n        this.abortCursorAnimation();\r\n        this._restoreEditingProps();\r\n        this._currentCursorOpacity = 0;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        this.fire('editing:exited');\r\n        isTextChanged && this.fire('modified');\r\n        if (this.canvas) {\r\n          this.canvas.off('mouse:move', this.mouseMoveHandler);\r\n          this.canvas.fire('text:editing:exited', { target: this });\r\n          isTextChanged && this.canvas.fire('object:modified', { target: this });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _removeExtraneousStyles: function() {\r\n        for (var prop in this.styles) {\r\n          if (!this._textLines[prop]) {\r\n            delete this.styles[prop];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * remove and reflow a style block from start to end.\r\n       * @param {Number} start linear start position for removal (included in removal)\r\n       * @param {Number} end linear end position for removal ( excluded from removal )\r\n       */\r\n      removeStyleFromTo: function(start, end) {\r\n        var cursorStart = this.get2DCursorLocation(start, true),\r\n            cursorEnd = this.get2DCursorLocation(end, true),\r\n            lineStart = cursorStart.lineIndex,\r\n            charStart = cursorStart.charIndex,\r\n            lineEnd = cursorEnd.lineIndex,\r\n            charEnd = cursorEnd.charIndex,\r\n            i, styleObj;\r\n        if (lineStart !== lineEnd) {\r\n          // step1 remove the trailing of lineStart\r\n          if (this.styles[lineStart]) {\r\n            for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\r\n              delete this.styles[lineStart][i];\r\n            }\r\n          }\r\n          // step2 move the trailing of lineEnd to lineStart if needed\r\n          if (this.styles[lineEnd]) {\r\n            for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\r\n              styleObj = this.styles[lineEnd][i];\r\n              if (styleObj) {\r\n                this.styles[lineStart] || (this.styles[lineStart] = { });\r\n                this.styles[lineStart][charStart + i - charEnd] = styleObj;\r\n              }\r\n            }\r\n          }\r\n          // step3 detects lines will be completely removed.\r\n          for (i = lineStart + 1; i <= lineEnd; i++) {\r\n            delete this.styles[i];\r\n          }\r\n          // step4 shift remaining lines.\r\n          this.shiftLineStyles(lineEnd, lineStart - lineEnd);\r\n        }\r\n        else {\r\n          // remove and shift left on the same line\r\n          if (this.styles[lineStart]) {\r\n            styleObj = this.styles[lineStart];\r\n            var diff = charEnd - charStart, numericChar, _char;\r\n            for (i = charStart; i < charEnd; i++) {\r\n              delete styleObj[i];\r\n            }\r\n            for (_char in this.styles[lineStart]) {\r\n              numericChar = parseInt(_char, 10);\r\n              if (numericChar >= charEnd) {\r\n                styleObj[numericChar - diff] = styleObj[_char];\r\n                delete styleObj[_char];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Shifts line styles up or down\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} offset Can any number?\r\n       */\r\n      shiftLineStyles: function(lineIndex, offset) {\r\n        // shift all line styles by offset upward or downward\r\n        // do not clone deep. we need new array, not new style objects\r\n        var clonedStyles = clone(this.styles);\r\n        for (var line in this.styles) {\r\n          var numericLine = parseInt(line, 10);\r\n          if (numericLine > lineIndex) {\r\n            this.styles[numericLine + offset] = clonedStyles[numericLine];\r\n            if (!clonedStyles[numericLine - offset]) {\r\n              delete this.styles[numericLine];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      restartCursorIfNeeded: function() {\r\n        if (!this._currentTickState || this._currentTickState.isAborted\r\n          || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\r\n        ) {\r\n          this.initDelayedCursor();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts new style object\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} qty number of lines to add\r\n       * @param {Array} copiedStyle Array of objects styles\r\n       */\r\n      insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\r\n        var currentCharStyle,\r\n            newLineStyles = {},\r\n            somethingAdded = false;\r\n\r\n        qty || (qty = 1);\r\n        this.shiftLineStyles(lineIndex, qty);\r\n        if (this.styles[lineIndex]) {\r\n          currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\r\n        }\r\n\r\n        // we clone styles of all chars\r\n        // after cursor onto the current line\r\n        for (var index in this.styles[lineIndex]) {\r\n          var numIndex = parseInt(index, 10);\r\n          if (numIndex >= charIndex) {\r\n            somethingAdded = true;\r\n            newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\r\n            // remove lines from the previous line since they're on a new line now\r\n            delete this.styles[lineIndex][index];\r\n          }\r\n        }\r\n        if (somethingAdded) {\r\n          this.styles[lineIndex + qty] = newLineStyles;\r\n        }\r\n        else {\r\n          delete this.styles[lineIndex + qty];\r\n        }\r\n        // for the other lines\r\n        // we clone current char style onto the next (otherwise empty) line\r\n        while (qty > 1) {\r\n          qty--;\r\n          if (copiedStyle && copiedStyle[qty]) {\r\n            this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\r\n          }\r\n          else if (currentCharStyle) {\r\n            this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\r\n          }\r\n          else {\r\n            delete this.styles[lineIndex + qty];\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n      },\r\n\r\n      /**\r\n       * Inserts style object for a given line/char index\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} quantity number Style object to insert, if given\r\n       * @param {Array} copiedStyle array of style objects\r\n       */\r\n      insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\r\n        if (!this.styles) {\r\n          this.styles = {};\r\n        }\r\n        var currentLineStyles       = this.styles[lineIndex],\r\n            currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\r\n\r\n        quantity || (quantity = 1);\r\n        // shift all char styles by quantity forward\r\n        // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\r\n        for (var index in currentLineStylesCloned) {\r\n          var numericIndex = parseInt(index, 10);\r\n          if (numericIndex >= charIndex) {\r\n            currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\r\n            // only delete the style if there was nothing moved there\r\n            if (!currentLineStylesCloned[numericIndex - quantity]) {\r\n              delete currentLineStyles[numericIndex];\r\n            }\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n        if (copiedStyle) {\r\n          while (quantity--) {\r\n            if (!Object.keys(copiedStyle[quantity]).length) {\r\n              continue;\r\n            }\r\n            if (!this.styles[lineIndex]) {\r\n              this.styles[lineIndex] = {};\r\n            }\r\n            this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\r\n          }\r\n          return;\r\n        }\r\n        if (!currentLineStyles) {\r\n          return;\r\n        }\r\n        var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\r\n        while (newStyle && quantity--) {\r\n          this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts style object(s)\r\n       * @param {Array} insertedText Characters at the location where style is inserted\r\n       * @param {Number} start cursor index for inserting style\r\n       * @param {Array} [copiedStyle] array of style objects to insert.\r\n       */\r\n      insertNewStyleBlock: function(insertedText, start, copiedStyle) {\r\n        var cursorLoc = this.get2DCursorLocation(start, true),\r\n            addedLines = [0], linesLength = 0;\r\n        for (var i = 0; i < insertedText.length; i++) {\r\n          if (insertedText[i] === '\\n') {\r\n            linesLength++;\r\n            addedLines[linesLength] = 0;\r\n          }\r\n          else {\r\n            addedLines[linesLength]++;\r\n          }\r\n        }\r\n        if (addedLines[0] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\r\n        }\r\n        linesLength && this.insertNewlineStyleObject(\r\n          cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);\r\n        for (var i = 1; i < linesLength; i++) {\r\n          if (addedLines[i] > 0) {\r\n            this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n          }\r\n          else if (copiedStyle) {\r\n            this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\r\n          }\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\r\n        }\r\n        // we use i outside the loop to get it like linesLength\r\n        if (addedLines[i] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the selectionStart and selectionEnd according to the new position of cursor\r\n       * mimic the key - mouse navigation when shift is pressed.\r\n       */\r\n      setSelectionStartEndWithShift: function(start, end, newSelection) {\r\n        if (newSelection <= start) {\r\n          if (end === start) {\r\n            this._selectionDirection = 'left';\r\n          }\r\n          else if (this._selectionDirection === 'right') {\r\n            this._selectionDirection = 'left';\r\n            this.selectionEnd = start;\r\n          }\r\n          this.selectionStart = newSelection;\r\n        }\r\n        else if (newSelection > start && newSelection < end) {\r\n          if (this._selectionDirection === 'right') {\r\n            this.selectionEnd = newSelection;\r\n          }\r\n          else {\r\n            this.selectionStart = newSelection;\r\n          }\r\n        }\r\n        else {\r\n          // newSelection is > selection start and end\r\n          if (end === start) {\r\n            this._selectionDirection = 'right';\r\n          }\r\n          else if (this._selectionDirection === 'left') {\r\n            this._selectionDirection = 'right';\r\n            this.selectionStart = end;\r\n          }\r\n          this.selectionEnd = newSelection;\r\n        }\r\n      },\r\n\r\n      setSelectionInBoundaries: function() {\r\n        var length = this.text.length;\r\n        if (this.selectionStart > length) {\r\n          this.selectionStart = length;\r\n        }\r\n        else if (this.selectionStart < 0) {\r\n          this.selectionStart = 0;\r\n        }\r\n        if (this.selectionEnd > length) {\r\n          this.selectionEnd = length;\r\n        }\r\n        else if (this.selectionEnd < 0) {\r\n          this.selectionEnd = 0;\r\n        }\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n    /**\r\n     * Initializes \"dbclick\" event handler\r\n     */\r\n    initDoubleClickSimulation: function() {\r\n\r\n      // for double click\r\n      this.__lastClickTime = +new Date();\r\n\r\n      // for triple click\r\n      this.__lastLastClickTime = +new Date();\r\n\r\n      this.__lastPointer = { };\r\n\r\n      this.on('mousedown', this.onMouseDown);\r\n    },\r\n\r\n    /**\r\n     * Default event handler to simulate triple click\r\n     * @private\r\n     */\r\n    onMouseDown: function(options) {\r\n      if (!this.canvas) {\r\n        return;\r\n      }\r\n      this.__newClickTime = +new Date();\r\n      var newPointer = options.pointer;\r\n      if (this.isTripleClick(newPointer)) {\r\n        this.fire('tripleclick', options);\r\n        this._stopEvent(options.e);\r\n      }\r\n      this.__lastLastClickTime = this.__lastClickTime;\r\n      this.__lastClickTime = this.__newClickTime;\r\n      this.__lastPointer = newPointer;\r\n      this.__lastIsEditing = this.isEditing;\r\n      this.__lastSelected = this.selected;\r\n    },\r\n\r\n    isTripleClick: function(newPointer) {\r\n      return this.__newClickTime - this.__lastClickTime < 500 &&\r\n          this.__lastClickTime - this.__lastLastClickTime < 500 &&\r\n          this.__lastPointer.x === newPointer.x &&\r\n          this.__lastPointer.y === newPointer.y;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _stopEvent: function(e) {\r\n      e.preventDefault && e.preventDefault();\r\n      e.stopPropagation && e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Initializes event handlers related to cursor or selection\r\n     */\r\n    initCursorSelectionHandlers: function() {\r\n      this.initMousedownHandler();\r\n      this.initMouseupHandler();\r\n      this.initClicks();\r\n    },\r\n\r\n    /**\r\n     * Default handler for double click, select a word\r\n     */\r\n    doubleClickHandler: function(options) {\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\r\n    },\r\n\r\n    /**\r\n     * Default handler for triple click, select a line\r\n     */\r\n    tripleClickHandler: function(options) {\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\r\n    },\r\n\r\n    /**\r\n     * Initializes double and triple click event handlers\r\n     */\r\n    initClicks: function() {\r\n      this.on('mousedblclick', this.doubleClickHandler);\r\n      this.on('tripleclick', this.tripleClickHandler);\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on _mouseDown\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: find the click position, set selectionStart\r\n     * find selectionEnd, initialize the drawing of either cursor or selection area\r\n     */\r\n    _mouseDownHandler: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      this.__isMousedown = true;\r\n\r\n      if (this.selected) {\r\n        this.setCursorByClick(options.e);\r\n      }\r\n\r\n      if (this.isEditing) {\r\n        this.__selectionStartOnMouseDown = this.selectionStart;\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.abortCursorAnimation();\r\n        }\r\n        this.renderCursorOrSelection();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on mousedown:before\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: verify the object is already selected when mousing down\r\n     */\r\n    _mouseDownHandlerBefore: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n      // we want to avoid that an object that was selected and then becomes unselectable,\r\n      // may trigger editing mode in some way.\r\n      this.selected = this === this.canvas._activeObject;\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mousedown\" event handler\r\n     */\r\n    initMousedownHandler: function() {\r\n      this.on('mousedown', this._mouseDownHandler);\r\n      this.on('mousedown:before', this._mouseDownHandlerBefore);\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mouseup\" event handler\r\n     */\r\n    initMouseupHandler: function() {\r\n      this.on('mouseup', this.mouseUpHandler);\r\n    },\r\n\r\n    /**\r\n     * standard hander for mouse up, overridable\r\n     * @private\r\n     */\r\n    mouseUpHandler: function(options) {\r\n      this.__isMousedown = false;\r\n      if (!this.editable || this.group ||\r\n        (options.transform && options.transform.actionPerformed) ||\r\n        (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      if (this.canvas) {\r\n        var currentActive = this.canvas._activeObject;\r\n        if (currentActive && currentActive !== this) {\r\n          // avoid running this logic when there is an active object\r\n          // this because is possible with shift click and fast clicks,\r\n          // to rapidly deselect and reselect this object and trigger an enterEdit\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (this.__lastSelected && !this.__corner) {\r\n        this.selected = false;\r\n        this.__lastSelected = false;\r\n        this.enterEditing(options.e);\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.initDelayedCursor(true);\r\n        }\r\n        else {\r\n          this.renderCursorOrSelection();\r\n        }\r\n      }\r\n      else {\r\n        this.selected = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Changes cursor location in a text depending on passed pointer (x/y) object\r\n     * @param {Event} e Event object\r\n     */\r\n    setCursorByClick: function(e) {\r\n      var newSelection = this.getSelectionStartFromPointer(e),\r\n          start = this.selectionStart, end = this.selectionEnd;\r\n      if (e.shiftKey) {\r\n        this.setSelectionStartEndWithShift(start, end, newSelection);\r\n      }\r\n      else {\r\n        this.selectionStart = newSelection;\r\n        this.selectionEnd = newSelection;\r\n      }\r\n      if (this.isEditing) {\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns index of a character corresponding to where an object was clicked\r\n     * @param {Event} e Event object\r\n     * @return {Number} Index of a character\r\n     */\r\n    getSelectionStartFromPointer: function(e) {\r\n      var mouseOffset = this.getLocalPointer(e),\r\n          prevWidth = 0,\r\n          width = 0,\r\n          height = 0,\r\n          charIndex = 0,\r\n          lineIndex = 0,\r\n          lineLeftOffset,\r\n          line;\r\n\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        if (height <= mouseOffset.y) {\r\n          height += this.getHeightOfLine(i) * this.scaleY;\r\n          lineIndex = i;\r\n          if (i > 0) {\r\n            charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\r\n          }\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n      width = lineLeftOffset * this.scaleX;\r\n      line = this._textLines[lineIndex];\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        prevWidth = width;\r\n        // i removed something about flipX here, check.\r\n        width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\r\n        if (width <= mouseOffset.x) {\r\n          charIndex++;\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\r\n      // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\r\n      var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\r\n          distanceBtwNextCharAndCursor = width - mouseOffset.x,\r\n          offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\r\n            distanceBtwNextCharAndCursor < 0 ? 0 : 1,\r\n          newSelectionStart = index + offset;\r\n      // if object is horizontally flipped, mirror cursor location from the end\r\n      if (this.flipX) {\r\n        newSelectionStart = jlen - newSelectionStart;\r\n      }\r\n\r\n      if (newSelectionStart > this._text.length) {\r\n        newSelectionStart = this._text.length;\r\n      }\r\n\r\n      return newSelectionStart;\r\n    }\r\n  });\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n    /**\r\n     * Initializes hidden textarea (needed to bring up keyboard in iOS)\r\n     */\r\n    initHiddenTextarea: function() {\r\n      this.hiddenTextarea = fabric.document.createElement('textarea');\r\n      this.hiddenTextarea.setAttribute('autocapitalize', 'off');\r\n      this.hiddenTextarea.setAttribute('autocorrect', 'off');\r\n      this.hiddenTextarea.setAttribute('autocomplete', 'off');\r\n      this.hiddenTextarea.setAttribute('spellcheck', 'false');\r\n      this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\r\n      this.hiddenTextarea.setAttribute('wrap', 'off');\r\n      var style = this._calcTextareaPosition();\r\n      // line-height: 1px; was removed from the style to fix this:\r\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\r\n      this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\r\n      '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\r\n      ' paddingｰtop: ' + style.fontSize + ';';\r\n      fabric.document.body.appendChild(this.hiddenTextarea);\r\n\r\n      fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\r\n\r\n      if (!this._clickHandlerInitialized && this.canvas) {\r\n        fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\r\n        this._clickHandlerInitialized = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown\r\n     * Map a special key to a function of the instance/prototype\r\n     * If you need different behaviour for ESC or TAB or arrows, you have to change\r\n     * this map setting the name of a function that you build on the fabric.Itext or\r\n     * your prototype.\r\n     * the map change will affect all Instances unless you need for only some text Instances\r\n     * in that case you have to clone this object and assign your Instance.\r\n     * this.keysMap = fabric.util.object.clone(this.keysMap);\r\n     * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\r\n     */\r\n    keysMap: {\r\n      9:  'exitEditing',\r\n      27: 'exitEditing',\r\n      33: 'moveCursorUp',\r\n      34: 'moveCursorDown',\r\n      35: 'moveCursorRight',\r\n      36: 'moveCursorLeft',\r\n      37: 'moveCursorLeft',\r\n      38: 'moveCursorUp',\r\n      39: 'moveCursorRight',\r\n      40: 'moveCursorDown',\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyUp + ctrl || cmd\r\n     */\r\n    ctrlKeysMapUp: {\r\n      67: 'copy',\r\n      88: 'cut'\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown + ctrl || cmd\r\n     */\r\n    ctrlKeysMapDown: {\r\n      65: 'selectAll'\r\n    },\r\n\r\n    onClick: function() {\r\n      // No need to trigger click event here, focus is enough to have the keyboard appear on Android\r\n      this.hiddenTextarea && this.hiddenTextarea.focus();\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyDown: function(e) {\r\n      if (!this.isEditing || this.inCompositionMode) {\r\n        return;\r\n      }\r\n      if (e.keyCode in this.keysMap) {\r\n        this[this.keysMap[e.keyCode]](e);\r\n      }\r\n      else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapDown[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      if (e.keyCode >= 33 && e.keyCode <= 40) {\r\n        // if i press an arrow key just update selection\r\n        this.clearContextTop();\r\n        this.renderCursorOrSelection();\r\n      }\r\n      else {\r\n        this.canvas && this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * We handle KeyUp because ie11 and edge have difficulties copy/pasting\r\n     * if a copy/cut event fired, keyup is dismissed\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyUp: function(e) {\r\n      if (!this.isEditing || this._copyDone || this.inCompositionMode) {\r\n        this._copyDone = false;\r\n        return;\r\n      }\r\n      if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapUp[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.canvas && this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * Handles onInput event\r\n     * @param {Event} e Event object\r\n     */\r\n    onInput: function(e) {\r\n      var fromPaste = this.fromPaste;\r\n      this.fromPaste = false;\r\n      e && e.stopPropagation();\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      // decisions about style changes.\r\n      var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\r\n          charCount = this._text.length,\r\n          nextCharCount = nextText.length,\r\n          removedText, insertedText,\r\n          charDiff = nextCharCount - charCount;\r\n      if (this.hiddenTextarea.value === '') {\r\n        this.styles = { };\r\n        this.updateFromTextArea();\r\n        this.fire('changed');\r\n        if (this.canvas) {\r\n          this.canvas.fire('text:changed', { target: this });\r\n          this.canvas.requestRenderAll();\r\n        }\r\n        return;\r\n      }\r\n\r\n      var textareaSelection = this.fromStringToGraphemeSelection(\r\n        this.hiddenTextarea.selectionStart,\r\n        this.hiddenTextarea.selectionEnd,\r\n        this.hiddenTextarea.value\r\n      );\r\n      var backDelete = this.selectionStart > textareaSelection.selectionStart;\r\n\r\n      if (this.selectionStart !== this.selectionEnd) {\r\n        removedText = this._text.slice(this.selectionStart, this.selectionEnd);\r\n        charDiff += this.selectionEnd - this.selectionStart;\r\n      }\r\n      else if (nextCharCount < charCount) {\r\n        if (backDelete) {\r\n          removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\r\n        }\r\n        else {\r\n          removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\r\n        }\r\n      }\r\n      insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\r\n      if (removedText && removedText.length) {\r\n        if (this.selectionStart !== this.selectionEnd) {\r\n          this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\r\n        }\r\n        else if (backDelete) {\r\n          // detect differencies between forwardDelete and backDelete\r\n          this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\r\n        }\r\n        else {\r\n          this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\r\n        }\r\n      }\r\n      if (insertedText.length) {\r\n        if (fromPaste && insertedText.join('') === fabric.copiedText && !fabric.disableStyleCopyPaste) {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\r\n        }\r\n        else {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart);\r\n        }\r\n      }\r\n      this.updateFromTextArea();\r\n      this.fire('changed');\r\n      if (this.canvas) {\r\n        this.canvas.fire('text:changed', { target: this });\r\n        this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n    /**\r\n     * Composition start\r\n     */\r\n    onCompositionStart: function() {\r\n      this.inCompositionMode = true;\r\n    },\r\n\r\n    /**\r\n     * Composition end\r\n     */\r\n    onCompositionEnd: function() {\r\n      this.inCompositionMode = false;\r\n    },\r\n\r\n    // /**\r\n    //  * Composition update\r\n    //  */\r\n    onCompositionUpdate: function(e) {\r\n      this.compositionStart = e.target.selectionStart;\r\n      this.compositionEnd = e.target.selectionEnd;\r\n      this.updateTextareaPosition();\r\n    },\r\n\r\n    /**\r\n     * Copies selected text\r\n     * @param {Event} e Event object\r\n     */\r\n    copy: function() {\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        //do not cut-copy if no selection\r\n        return;\r\n      }\r\n\r\n      fabric.copiedText = this.getSelectedText();\r\n      if (!fabric.disableStyleCopyPaste) {\r\n        fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\r\n      }\r\n      else {\r\n        fabric.copiedTextStyle = null;\r\n      }\r\n      this._copyDone = true;\r\n    },\r\n\r\n    /**\r\n     * Pastes text\r\n     * @param {Event} e Event object\r\n     */\r\n    paste: function() {\r\n      this.fromPaste = true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @return {Object} Clipboard data object\r\n     */\r\n    _getClipboardData: function(e) {\r\n      return (e && e.clipboardData) || fabric.window.clipboardData;\r\n    },\r\n\r\n    /**\r\n     * Finds the width in pixels before the cursor on the same line\r\n     * @private\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @return {Number} widthBeforeCursor width before cursor\r\n     */\r\n    _getWidthBeforeCursor: function(lineIndex, charIndex) {\r\n      var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\r\n\r\n      if (charIndex > 0) {\r\n        bound = this.__charBounds[lineIndex][charIndex - 1];\r\n        widthBeforeCursor += bound.left + bound.width;\r\n      }\r\n      return widthBeforeCursor;\r\n    },\r\n\r\n    /**\r\n     * Gets start offset of a selection\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getDownCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      // if on last line, down cursor goes to end of line\r\n      if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\r\n        // move to the end of a text\r\n        return this._text.length - selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\r\n          textAfterCursor = this._textLines[lineIndex].slice(charIndex);\r\n      return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);\r\n    },\r\n\r\n    /**\r\n     * private\r\n     * Helps finding if the offset should be counted from Start or End\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    _getSelectionForOffset: function(e, isRight) {\r\n      if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\r\n        return this.selectionEnd;\r\n      }\r\n      else {\r\n        return this.selectionStart;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getUpCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\r\n        // if on first line, up cursor goes to start of line\r\n        return -selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\r\n          textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\r\n          missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\r\n      // return a negative offset\r\n      return -this._textLines[lineIndex - 1].length\r\n       + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);\r\n    },\r\n\r\n    /**\r\n     * for a given width it founds the matching character.\r\n     * @private\r\n     */\r\n    _getIndexOnLine: function(lineIndex, width) {\r\n\r\n      var line = this._textLines[lineIndex],\r\n          lineLeftOffset = this._getLineLeftOffset(lineIndex),\r\n          widthOfCharsOnLine = lineLeftOffset,\r\n          indexOnLine = 0, charWidth, foundMatch;\r\n\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        charWidth = this.__charBounds[lineIndex][j].width;\r\n        widthOfCharsOnLine += charWidth;\r\n        if (widthOfCharsOnLine > width) {\r\n          foundMatch = true;\r\n          var leftEdge = widthOfCharsOnLine - charWidth,\r\n              rightEdge = widthOfCharsOnLine,\r\n              offsetFromLeftEdge = Math.abs(leftEdge - width),\r\n              offsetFromRightEdge = Math.abs(rightEdge - width);\r\n\r\n          indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // reached end\r\n      if (!foundMatch) {\r\n        indexOnLine = line.length - 1;\r\n      }\r\n\r\n      return indexOnLine;\r\n    },\r\n\r\n\r\n    /**\r\n     * Moves cursor down\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorDown: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Down', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorUp: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Up', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up or down, fires the events\r\n     * @param {String} direction 'Up' or 'Down'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorUpOrDown: function(direction, e) {\r\n      // getUpCursorOffset\r\n      // getDownCursorOffset\r\n      var action = 'get' + direction + 'CursorOffset',\r\n          offset = this[action](e, this._selectionDirection === 'right');\r\n      if (e.shiftKey) {\r\n        this.moveCursorWithShift(offset);\r\n      }\r\n      else {\r\n        this.moveCursorWithoutShift(offset);\r\n      }\r\n      if (offset !== 0) {\r\n        this.setSelectionInBoundaries();\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor with shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithShift: function(offset) {\r\n      var newSelection = this._selectionDirection === 'left'\r\n        ? this.selectionStart + offset\r\n        : this.selectionEnd + offset;\r\n      this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up without shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithoutShift: function(offset) {\r\n      if (offset < 0) {\r\n        this.selectionStart += offset;\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionEnd += offset;\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorLeft: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Left', e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Boolean} true if a change happened\r\n     */\r\n    _move: function(e, prop, direction) {\r\n      var newValue;\r\n      if (e.altKey) {\r\n        newValue = this['findWordBoundary' + direction](this[prop]);\r\n      }\r\n      else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\r\n        newValue = this['findLineBoundary' + direction](this[prop]);\r\n      }\r\n      else {\r\n        this[prop] += direction === 'Left' ? -1 : 1;\r\n        return true;\r\n      }\r\n      if (typeof newValue !== undefined && this[prop] !== newValue) {\r\n        this[prop] = newValue;\r\n        return true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveLeft: function(e, prop) {\r\n      return this._move(e, prop, 'Left');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveRight: function(e, prop) {\r\n      return this._move(e, prop, 'Right');\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left without keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithoutShift: function(e) {\r\n      var change = true;\r\n      this._selectionDirection = 'left';\r\n\r\n      // only move cursor when there is no selection,\r\n      // otherwise we discard it, and leave cursor on same place\r\n      if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\r\n        change = this._moveLeft(e, 'selectionStart');\r\n\r\n      }\r\n      this.selectionEnd = this.selectionStart;\r\n      return change;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithShift: function(e) {\r\n      if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveLeft(e, 'selectionEnd');\r\n      }\r\n      else if (this.selectionStart !== 0){\r\n        this._selectionDirection = 'left';\r\n        return this._moveLeft(e, 'selectionStart');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRight: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Right', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right or Left, fires event\r\n     * @param {String} direction 'Left', 'Right'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorLeftOrRight: function(direction, e) {\r\n      var actionName = 'moveCursor' + direction + 'With';\r\n      this._currentCursorOpacity = 1;\r\n\r\n      if (e.shiftKey) {\r\n        actionName += 'Shift';\r\n      }\r\n      else {\r\n        actionName += 'outShift';\r\n      }\r\n      if (this[actionName](e)) {\r\n        this.abortCursorAnimation();\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorRightWithShift: function(e) {\r\n      if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveRight(e, 'selectionStart');\r\n      }\r\n      else if (this.selectionEnd !== this._text.length) {\r\n        this._selectionDirection = 'right';\r\n        return this._moveRight(e, 'selectionEnd');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right without keeping selection\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRightWithoutShift: function(e) {\r\n      var changed = true;\r\n      this._selectionDirection = 'right';\r\n\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        changed = this._moveRight(e, 'selectionStart');\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return changed;\r\n    },\r\n\r\n    /**\r\n     * Removes characters from start/end\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    removeChars: function(start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start + 1;\r\n      }\r\n      this.removeStyleFromTo(start, end);\r\n      this._text.splice(start, end - start);\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n    /**\r\n     * insert characters at start position, before start position.\r\n     * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\r\n     * if style array is provided, it must be as the same length of text in graphemes\r\n     * if end is provided and is bigger than start, old text is replaced.\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {String} text text to insert\r\n     * @param {Array} style array of style objects\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    insertChars: function(text, style, start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start;\r\n      }\r\n      if (end > start) {\r\n        this.removeStyleFromTo(start, end);\r\n      }\r\n      var graphemes = fabric.util.string.graphemeSplit(text);\r\n      this.insertNewStyleBlock(graphemes, start, style);\r\n      this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    var toFixed = fabric.util.toFixed,\r\n        multipleSpacesRegex = /  +/g;\r\n\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      _toSVG: function() {\r\n        var offsets = this._getSVGLeftTopOffsets(),\r\n            textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\r\n        return this._wrapSVGTextAndBg(textAndBg);\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        return this._createBaseSVGMarkup(\r\n          this._toSVG(),\r\n          { reviver: reviver, noStyle: true, withShadow: true }\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLeftTopOffsets: function() {\r\n        return {\r\n          textLeft: -this.width / 2,\r\n          textTop: -this.height / 2,\r\n          lineTop: this.getHeightOfLine(0)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _wrapSVGTextAndBg: function(textAndBg) {\r\n        var noShadow = true,\r\n            textDecoration = this.getSvgTextDecoration(this);\r\n        return [\r\n          textAndBg.textBgRects.join(''),\r\n          '\\t\\t<text xml:space=\"preserve\" ',\r\n          (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\r\n          (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\r\n          (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\r\n          (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\r\n          (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\r\n          'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\r\n          textAndBg.textSpans.join(''),\r\n          '</text>\\n'\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} textTopOffset Text top offset\r\n       * @param {Number} textLeftOffset Text left offset\r\n       * @return {Object}\r\n       */\r\n      _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\r\n        var textSpans = [],\r\n            textBgRects = [],\r\n            height = textTopOffset, lineOffset;\r\n        // bounding-box background\r\n        this._setSVGBg(textBgRects);\r\n\r\n        // text and text-background\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineOffset = this._getLineLeftOffset(i);\r\n          if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\r\n            this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\r\n          }\r\n          this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\r\n          height += this.getHeightOfLine(i);\r\n        }\r\n\r\n        return {\r\n          textSpans: textSpans,\r\n          textBgRects: textBgRects\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createTextCharSpan: function(_char, styleDecl, left, top) {\r\n        var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\r\n            styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\r\n            fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\r\n            dy = styleDecl.deltaY, dySpan = '',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        if (dy) {\r\n          dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\r\n        }\r\n        return [\r\n          '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\r\n          fillStyles, '>',\r\n          fabric.util.string.escapeXml(_char),\r\n          '</tspan>'\r\n        ].join('');\r\n      },\r\n\r\n      _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox, style,\r\n            boxWidth = 0,\r\n            line = this._textLines[lineIndex],\r\n            timeToRender;\r\n\r\n        textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            textLeftOffset += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            style = this._getStyleDeclaration(lineIndex, i) || { };\r\n            textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            textLeftOffset += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        textBgRects.push(\r\n          '\\t\\t<rect ',\r\n          this._getFillAttributes(color),\r\n          ' x=\"',\r\n          toFixed(left, NUM_FRACTION_DIGITS),\r\n          '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS),\r\n          '\" width=\"',\r\n          toFixed(width, NUM_FRACTION_DIGITS),\r\n          '\" height=\"',\r\n          toFixed(height, NUM_FRACTION_DIGITS),\r\n          '\"></rect>\\n');\r\n      },\r\n\r\n      _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\r\n        var line = this._textLines[i],\r\n            heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\r\n            boxWidth = 0,\r\n            boxStart = 0,\r\n            charBox, currentColor,\r\n            lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n          charBox = this.__charBounds[i][j];\r\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n          if (currentColor !== lastColor) {\r\n            lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\r\n              textTopOffset, boxWidth, heightOfLine);\r\n            boxStart = charBox.left;\r\n            boxWidth = charBox.width;\r\n            lastColor = currentColor;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n        }\r\n        currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\r\n          textTopOffset, boxWidth, heightOfLine);\r\n      },\r\n\r\n      /**\r\n       * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\r\n       * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\r\n       *\r\n       * @private\r\n       * @param {*} value\r\n       * @return {String}\r\n       */\r\n      _getFillAttributes: function(value) {\r\n        var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\r\n        if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\r\n          return 'fill=\"' + value + '\"';\r\n        }\r\n        return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLineTopOffset: function(lineIndex) {\r\n        var lineTopOffset = 0, lastHeight = 0;\r\n        for (var j = 0; j < lineIndex; j++) {\r\n          lineTopOffset += this.getHeightOfLine(j);\r\n        }\r\n        lastHeight = this.getHeightOfLine(j);\r\n        return {\r\n          lineTop: lineTopOffset,\r\n          offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n        var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\r\n        return svgStyle + ' white-space: pre;';\r\n      },\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n    /**\r\n     * Textbox class, based on IText, allows the user to resize the text rectangle\r\n     * and wraps lines automatically. Textboxes have their Y scaling locked, the\r\n     * user can only change width. Height is adjusted automatically based on the\r\n     * wrapping of lines.\r\n     * @class fabric.Textbox\r\n     * @extends fabric.IText\r\n     * @mixes fabric.Observable\r\n     * @return {fabric.Textbox} thisArg\r\n     * @see {@link fabric.Textbox#initialize} for constructor definition\r\n     */\r\n    fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'textbox',\r\n\r\n      /**\r\n       * Minimum width of textbox, in pixels.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minWidth: 20,\r\n\r\n      /**\r\n       * Minimum calculated width of a textbox, in pixels.\r\n       * fixed to 2 so that an empty textbox cannot go to 0\r\n       * and is still selectable without text.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      dynamicMinWidth: 2,\r\n\r\n      /**\r\n       * Cached array of text wrapping.\r\n       * @type Array\r\n       */\r\n      __cachedLines: null,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       */\r\n      lockScalingFlip: true,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       * Textbox needs this on false\r\n       */\r\n      noScaleCache: false,\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Object\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\r\n\r\n      /**\r\n       * Use this regular expression to split strings in breakable lines\r\n       * @private\r\n       */\r\n      _wordJoiners: /[ \\t\\r]/,\r\n\r\n      /**\r\n       * Use this boolean property in order to split strings that have no white space concept.\r\n       * this is a cheap way to help with chinese/japaense\r\n       * @type Boolean\r\n       * @since 2.6.0\r\n       */\r\n      splitByGrapheme: false,\r\n\r\n      /**\r\n       * Unlike superclass's version of this function, Textbox does not update\r\n       * its width.\r\n       * @private\r\n       * @override\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this._clearCache();\r\n        // clear dynamicMinWidth as it will be different after we re-wrap line\r\n        this.dynamicMinWidth = 0;\r\n        // wrap lines\r\n        this._styleMap = this._generateStyleMap(this._splitText());\r\n        // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\r\n        if (this.dynamicMinWidth > this.width) {\r\n          this._set('width', this.dynamicMinWidth);\r\n        }\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        // clear cache and re-calculate height\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Generate an object that translates the style object so that it is\r\n       * broken up by visual lines (new lines and automatic wrapping).\r\n       * The original text styles object is broken up by actual lines (new lines only),\r\n       * which is only sufficient for Text / IText\r\n       * @private\r\n       */\r\n      _generateStyleMap: function(textInfo) {\r\n        var realLineCount     = 0,\r\n            realLineCharCount = 0,\r\n            charCount         = 0,\r\n            map               = {};\r\n\r\n        for (var i = 0; i < textInfo.graphemeLines.length; i++) {\r\n          if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\r\n            realLineCharCount = 0;\r\n            charCount++;\r\n            realLineCount++;\r\n          }\r\n          else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\r\n            // this case deals with space's that are removed from end of lines when wrapping\r\n            realLineCharCount++;\r\n            charCount++;\r\n          }\r\n\r\n          map[i] = { line: realLineCount, offset: realLineCharCount };\r\n\r\n          charCount += textInfo.graphemeLines[i].length;\r\n          realLineCharCount += textInfo.graphemeLines[i].length;\r\n        }\r\n\r\n        return map;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it on a specified line\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (map) {\r\n            lineIndex = map.line;\r\n          }\r\n        }\r\n        return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        if (!this.styles) {\r\n          return true;\r\n        }\r\n        var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false,\r\n            map = this._styleMap[lineIndex], mapNextLine = this._styleMap[lineIndex + 1];\r\n        if (map) {\r\n          lineIndex = map.line;\r\n          offset = map.offset;\r\n        }\r\n        if (mapNextLine) {\r\n          nextLineIndex = mapNextLine.line;\r\n          shouldLimit = nextLineIndex === lineIndex;\r\n          nextOffset = mapNextLine.offset;\r\n        }\r\n        obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\r\n              // eslint-disable-next-line no-unused-vars\r\n              for (var p3 in obj[p1][p2]) {\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (!map) {\r\n            return null;\r\n          }\r\n          lineIndex = map.line;\r\n          charIndex = map.offset + charIndex;\r\n        }\r\n        return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n       * probably broken need a fix\r\n       * Returns the real style line that correspond to the wrapped lineIndex line\r\n       * Used just to verify if the line does exist or not.\r\n       * @param {Number} lineIndex\r\n       * @returns {Boolean} if the line exists or not\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        return !!this.styles[map.line];\r\n      },\r\n\r\n      /**\r\n       * Set the line style to an empty object so that is initialized\r\n       * @param {Number} lineIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        this.styles[map.line] = {};\r\n      },\r\n\r\n      /**\r\n       * Wraps text using the 'width' property of Textbox. First this function\r\n       * splits text on newlines, so we preserve newlines entered by the user.\r\n       * Then it wraps each line using the width of the Textbox by calling\r\n       * _wrapLine().\r\n       * @param {Array} lines The string array of text that is split into lines\r\n       * @param {Number} desiredWidth width you want to wrap to\r\n       * @returns {Array} Array of lines\r\n       */\r\n      _wrapText: function(lines, desiredWidth) {\r\n        var wrapped = [], i;\r\n        this.isWrapping = true;\r\n        for (i = 0; i < lines.length; i++) {\r\n          wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\r\n        }\r\n        this.isWrapping = false;\r\n        return wrapped;\r\n      },\r\n\r\n      /**\r\n       * Helper function to measure a string of text, given its lineIndex and charIndex offset\r\n       * it gets called when charBounds are not available yet.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {String} text\r\n       * @param {number} lineIndex\r\n       * @param {number} charOffset\r\n       * @returns {number}\r\n       * @private\r\n       */\r\n      _measureWord: function(word, lineIndex, charOffset) {\r\n        var width = 0, prevGrapheme, skipLeft = true;\r\n        charOffset = charOffset || 0;\r\n        for (var i = 0, len = word.length; i < len; i++) {\r\n          var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\r\n          width += box.kernedWidth;\r\n          prevGrapheme = word[i];\r\n        }\r\n        return width;\r\n      },\r\n\r\n      /**\r\n       * Wraps a line of text using the width of the Textbox and a context.\r\n       * @param {Array} line The grapheme array that represent the line\r\n       * @param {Number} lineIndex\r\n       * @param {Number} desiredWidth width you want to wrap the line to\r\n       * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\r\n       * @returns {Array} Array of line(s) into which the given text is wrapped\r\n       * to.\r\n       */\r\n      _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\r\n        var lineWidth = 0,\r\n            splitByGrapheme = this.splitByGrapheme,\r\n            graphemeLines = [],\r\n            line = [],\r\n            // spaces in different languges?\r\n            words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),\r\n            word = '',\r\n            offset = 0,\r\n            infix = splitByGrapheme ? '' : ' ',\r\n            wordWidth = 0,\r\n            infixWidth = 0,\r\n            largestWordWidth = 0,\r\n            lineJustStarted = true,\r\n            additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing(),\r\n            reservedSpace = reservedSpace || 0;\r\n        // fix a difference between split and graphemeSplit\r\n        if (words.length === 0) {\r\n          words.push([]);\r\n        }\r\n        desiredWidth -= reservedSpace;\r\n        for (var i = 0; i < words.length; i++) {\r\n          // if using splitByGrapheme words are already in graphemes.\r\n          word = splitByGrapheme ? words[i] : fabric.util.string.graphemeSplit(words[i]);\r\n          wordWidth = this._measureWord(word, lineIndex, offset);\r\n          offset += word.length;\r\n\r\n          lineWidth += infixWidth + wordWidth - additionalSpace;\r\n\r\n          if (lineWidth >= desiredWidth && !lineJustStarted) {\r\n            graphemeLines.push(line);\r\n            line = [];\r\n            lineWidth = wordWidth;\r\n            lineJustStarted = true;\r\n          }\r\n          else {\r\n            lineWidth += additionalSpace;\r\n          }\r\n\r\n          if (!lineJustStarted && !splitByGrapheme) {\r\n            line.push(infix);\r\n          }\r\n          line = line.concat(word);\r\n\r\n          infixWidth = this._measureWord([infix], lineIndex, offset);\r\n          offset++;\r\n          lineJustStarted = false;\r\n          // keep track of largest word\r\n          if (wordWidth > largestWordWidth) {\r\n            largestWordWidth = wordWidth;\r\n          }\r\n        }\r\n\r\n        i && graphemeLines.push(line);\r\n\r\n        if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\r\n          this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\r\n        }\r\n\r\n        return graphemeLines;\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @param {Number} lineIndex text to split\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        if (!this._styleMap[lineIndex + 1]) {\r\n          // is last line, return true;\r\n          return true;\r\n        }\r\n        if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\r\n          // this is last line before a line break, return true;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Detect if a line has a linebreak and so we need to account for it when moving\r\n       * and counting style.\r\n       * @return Number\r\n       */\r\n      missingNewlineOffset: function(lineIndex) {\r\n        if (this.splitByGrapheme) {\r\n          return this.isEndOfWrapping(lineIndex) ? 1 : 0;\r\n        }\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n      * Gets lines of text to render in the Textbox. This function calculates\r\n      * text wrapping on the fly every time it is called.\r\n      * @param {String} text text to split\r\n      * @returns {Array} Array of lines in the Textbox.\r\n      * @override\r\n      */\r\n      _splitTextIntoLines: function(text) {\r\n        var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\r\n            graphemeLines = this._wrapText(newText.lines, this.width),\r\n            lines = new Array(graphemeLines.length);\r\n        for (var i = 0; i < graphemeLines.length; i++) {\r\n          lines[i] = graphemeLines[i].join('');\r\n        }\r\n        newText.lines = lines;\r\n        newText.graphemeLines = graphemeLines;\r\n        return newText;\r\n      },\r\n\r\n      getMinWidth: function() {\r\n        return Math.max(this.minWidth, this.dynamicMinWidth);\r\n      },\r\n\r\n      _removeExtraneousStyles: function() {\r\n        var linesToKeep = {};\r\n        for (var prop in this._styleMap) {\r\n          if (this._textLines[prop]) {\r\n            linesToKeep[this._styleMap[prop].line] = 1;\r\n          }\r\n        }\r\n        for (var prop in this.styles) {\r\n          if (!linesToKeep[prop]) {\r\n            delete this.styles[prop];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @method toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.Textbox instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Textbox\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\r\n     */\r\n    fabric.Textbox.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Textbox', object, callback, 'text');\r\n    };\r\n  })();\r\n  return fabric;\r\n});\ndefine('skylark-fabric/Canvas',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Canvas = fabric.Canvas;\r\n});\ndefine('skylark-fabric/Circle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Circle = fabric.Circle;\r\n});\ndefine('skylark-fabric/Color',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Color = fabric.Color;\r\n});\ndefine('skylark-fabric/Ellipse',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Ellipse = fabric.Ellipse;\r\n});\ndefine('skylark-fabric/Group',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Group = fabric.Group;\r\n});\ndefine('skylark-fabric/Image',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Image = fabric.Image;\r\n});\ndefine('skylark-fabric/Line',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Line = fabric.Line;\r\n});\ndefine('skylark-fabric/Object',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n\tfabric.Object.remove = function() {\r\n        return this.canvas.remove(this);\r\n    };\r\n    \r\n    return canvas2d.Object = fabric.Object;\r\n});\ndefine('skylark-fabric/Path',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Path = fabric.Path;\r\n});\ndefine('skylark-fabric/Point',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Point = fabric.Point;\r\n});\ndefine('skylark-fabric/Polygon',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polygon = fabric.Polygon;\r\n});\ndefine('skylark-fabric/Polyline',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polyline = fabric.Polyline;\r\n});\ndefine('skylark-fabric/Rect',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Rect = fabric.Rect;\r\n});\ndefine('skylark-fabric/Text',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Text = fabric.Text;\r\n});\ndefine('skylark-fabric/Triangle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Triangle = fabric.Triangle;\r\n});\ndefine('skylark-fabric/util',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.util = fabric.util;\r\n});\ndefine('skylark-fabric/main',[\r\n    \"./canvas2d\",\r\n    \"./Canvas\",\r\n    \"./Circle\",\r\n    \"./Color\",\r\n    \"./Ellipse\",\r\n    \"./Group\",\r\n    \"./Image\",\r\n    \"./Line\",\r\n    \"./Object\",\r\n    \"./Path\",\r\n    \"./Point\",\r\n    \"./Polygon\",\r\n    \"./Polyline\",\r\n    \"./Rect\",\r\n    \"./Text\",\r\n    \"./Triangle\",\r\n    \"./util\"\r\n], function(canvas2d) {\r\n    return canvas2d;\r\n});\r\n\ndefine('skylark-fabric', ['skylark-fabric/main'], function (main) { return main; });\n\n"]}