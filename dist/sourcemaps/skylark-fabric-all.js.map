{"version":3,"sources":["skylark-fabric-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","global","sqrt","atan2","pow","PiBy180","PiBy2","proto","min","max","degreesToRadians","originXOffset","originYOffset","clone","toFixed","multipleSpacesRegex","fabric","version","document","window","jsdom","require","virtualWindow","JSDOM","decodeURIComponent","features","FetchExternalResources","resources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","DOMParser","copyGLTo2DDrawImage","gl","pipelineState","glCanvas","canvas","targetCanvas","ctx","getContext","translate","height","scale","sourceY","drawImage","width","copyGLTo2DPutImageData","dWidth","destinationWidth","dHeight","destinationHeight","numBytes","u8","Uint8Array","this","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","isTouchSupported","navigator","maxTouchPoints","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","rePathCommand","reNonWord","fontPaths","iMatrix","svgNS","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","disableStyleCopyPaste","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","forceGLPutImageData","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","prop","on","push","stopObserving","call","fire","options","listenersForEvent","len","filter","value","Observable","off","trigger","Collection","_objects","add","apply","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","_set","key","get","toggle","exports","Math","PI","cos","angle","angleSlice","sin","sign","removeFromArray","idx","getRandomInt","floor","random","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","rx","ry","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","transform","xPoints","minX","maxX","yPoints","minY","maxY","left","top","invertTransform","a","r","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","parts","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","enlivenedObjects","numLoadedObjects","numTotalObjects","onLoaded","forEach","klass","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","x2","y2","da","dx","dy","rot","dc","di","draw","save","moveTo","rotate","restore","createCanvasElement","copyCanvasElement","newCanvas","toDataURL","canvasEl","format","quality","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","calcRotateMatrix","theta","calcDimensionsMatrix","scaleMatrix","flipX","flipY","multiply","tan","composeMatrix","matrix","customTransformMatrix","resetObjectTransform","target","saveObjectTransform","fn","String","match","isTransparent","tolerance","temp","_isTransparent","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","matrixToSVG","map","NUM_FRACTION_DIGITS","join","_join","Array","arcToSegments","toX","toY","large","sweep","rotateX","argsString","th","sinTh","cosTh","fromX","fromY","abs","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","result","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","find","byProperty","condition","k","invoke","method","args","value1","value2","extend","deep","Element","hasOwnProperty","getWholeChar","str","code","charCodeAt","isNaN","next","prev","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","emptyFunction","IS_DONTENUM_BUGGY","addMethods","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","createClass","shift","initialize","subclasses","couldUseAttachEvent","attachEvent","addListener","element","addEventListener","removeListener","removeEventListener","getPointer","event","scroll","getScrollLeftTop","_evt","touchProp","changedTouches","getTouchInfo","clientX","clientY","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","setOpacity","es","currentStyle","hasLayout","zoom","test","setStyle","styles","elementStyle","cssText","normalizedProperty","styleFloat","_slice","sliceCanConvertNodelists","getElementStyle","toArray","arrayLike","childNodes","err","makeElement","tagName","el","className","htmlFor","setAttribute","docElement","documentElement","body","scrollLeft","scrollTop","host","nodeType","arr","defaultView","getComputedStyle","attr","undefined","selectProp","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","e","readyState","getById","id","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","parseInt","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","emptyFn","request","onComplete","xhr","XMLHttpRequest","parameters","param","addParamToUrl","open","setRequestHeader","send","warn","noop","defaultEasing","d","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","_cancelAnimFrame","cancelAnimationFrame","clearTimeout","requestAnimFrame","animate","timestamp","time","start","Date","duration","finish","onChange","abort","easing","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","cancelAnimFrame","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","begin","end","pos","color","posValue","colorEasing","normalize","asin","elastic","opts","easeInBounce","easeOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInOutBounce","attributesMap","display","visibility","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","letter-spacing","paint-order","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","clip-path","clip-rule","vector-effect","colorAttributes","stroke","normalizeAttr","normalizeValue","parentAttributes","parsed","isArray","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","getSvgRegex","RegExp","_getMultipleNodes","nodeNames","nodeName","nodeList","nodeArray","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","selector","doesSomeParentMatch","matcher","classNames","getAttribute","elementById","node","nodelist","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","cssRules","gradientDefs","clipPaths","skewMatrix","commaWsp","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","translateMatrix","rotateMatrix","multiplierX","multiplierY","combinedMatrix","reViewBoxAttrValue","applyViewboxTransform","viewBoxWidth","viewBoxHeight","viewBoxAttr","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","missingDimAttr","toBeParsed","parsedDim","widthDiff","heightDiff","viewboxTransform","createElementNS","firstChild","recursivelyParseGradientsXlink","gradient","xLink","substr","referencedGradient","hasAttribute","children","referenceClone","cloneNode","removeAttribute","parseSVGDocument","parsingOptions","attrs","xlink","el2","currentTrans","oldLength","el3","setAttributeNS","nodeValue","parseUseDirectives","svgUid","__uid","descendants","selectNodes","hasAncestorWithNodeName","getGradientDefs","getCSSRules","parseElements","instances","reFontDeclaration","parseFontDeclaration","oStyle","fontStyle","fontWeight","lineHeight","elList","parseAttributes","parentFontSize","ownAttributes","cssAttrs","rule","getGlobalStylesForElement","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","setAlpha","getAlpha","toRgba","_setStrokeFillOpacity","ElementsParser","parse","chunk","pair","trim","parseStyleString","parseStyleObject","parsePointsAttribute","parsedPoints","allRules","styleContents","textContent","text","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","ActiveXObject","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","numElements","createObjects","createObject","findTag","fromElement","createCallback","checkIfDone","resolveGradient","Image","_originalElement","_removeTransformMatrix","resolveClipPath","extractPropertyDefinition","storage","regex","lastIndex","gradientDef","opacityAttr","createClipPathCallback","container","_newObj","fillRule","clipRule","usingElement","objTransformInv","gTransform","clipPath","calcTransformMatrix","clipPathTag","clipPathOwner","setPositionByOrigin","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","multiplier","colorAlpha","keyValuePairs","__convertPercentUnitsToValues","instance","svgOptions","gradientUnits","propValue","finalValue","keys","offsetX","offsetY","gradientTransform","option","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","withViewport","additionalTransform","sort","pathOffset","reverse","minRadius","maxRadius","percentageShift","colorStop","toLive","stops","createLinearGradient","createRadialGradient","colorStopEls","getLinearCoords","getRadialCoords","forObject","repeat","patternTransform","setOptions","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","nonScaling","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","Error","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","scaleRatio","__initRetinaScaling","lowerCanvasEl","contextContainer","upperCanvasEl","contextTop","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getElement","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","needsVpt","lineTo","closePath","fillStyle","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","_toObject","__serializeBgOverlay","excludeFromExport","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","shouldTransform","row","rowIndex","_char","charIndex","fontList","_setSVGObject","finalWidth","finalHeight","shouldInvert","sendToBack","objs","activeSelection","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","needsFullRender","_resetShadow","PencilBrush","decimate","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","pointer","_isMainEvent","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","decimatePoints","distance","adjustedDistance","lastPoint","newPoints","CircleBrush","drawDot","addPoint","dot","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","originX","originY","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","fillRect","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","targets","_hoveredTarget","_hoveredTargets","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","getActiveObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","ex","ey","lastX","lastY","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","0","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByOrigin","constraintPosition","actualMouseByCenter","toLocalPoint","lastMouseByCenter","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","changeX","changeY","newScaleX","newScaleY","Textbox","w","getMinWidth","_scaleObjectEqually","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","_searchPossibleTargets","_checkTarget","globalPointer","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","bottom","right","retinaScaling","lowerCanvasClass","_copyCanvasStyle","class","touch-action","-ms-touch-action","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","realizeTransform","clearContextTop","cursorOffset","mr","mb","ml","addEventOptions","passive","checkClick","button","cursorMap","mainTouchId","_bindEvents","addOrRemove","_getEventPrefix","enablePointerEvents","functor","eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","_onTouchEnd","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","_target","hiddenTextarea","focus","currentTransform","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","getPointerId","evt","identifier","pointerId","isPrimary","touches","__onMouseDown","__onMouseUp","_willAddMouseDown","__onMouseMove","_shouldRender","shouldRender","isClick","_onMouseUpInDrawingMode","_finalizeCurrentTransform","actionPerformed","_maybeGroupObjects","isMoving","_setCursorFromEvent","__corner","eventType","subTargets","absolutePointer","_scaling","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","_transformObject","_fireOverOutEvents","fireSyntheticInOutEvents","oldTarget","evtOut","canvasEvtOut","evtIn","canvasEvtIn","_draggedoverTarget","config","inOpt","outOpt","inFires","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","n","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","newVp","originalRetina","originalContextTop","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","enlivenedCanvasClip","__setupCanvas","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","strokeUniform","dirty","paintFirst","stateProperties","cacheProperties","inverted","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","sizeShrinking","setTransform","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","hasStroke","hasFill","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_setStrokeStyles","_setFillStyles","_drawClipPath","skipCanvas","_getNonTransformedDimensions","_removeShadow","decl","lineDashOffset","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_applyPatternForTransformedGradient","pCtx","pCanvas","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalGroup","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","enlivedProps","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","getCoords","absolute","calculate","calcCoords","pointTL","pointBR","intersection","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","skipAbsolute","_setCornerCoords","transformMatrixKey","prefix","cache","tMatrix","_calcDimensionsTransformMatrix","flipping","dimX","dimY","noSkew","_finalizeDimensions","bbox","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgCommons","getSvgTransform","full","svgTransform","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","_toSVG","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","clipPathMarkup","noStyle","styleInfo","shadowInfo","withShadow","vectorEffect","absoluteClipPath","addPaintOrder","saveProps","props","tmpObj","dashedPropertySet","_isEqual","origValue","currentValue","firstPass","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","from","valueProgress","timeProgress","coordProps","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","pi","startAngle","endAngle","setRadius","svgString","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","_setPositionDimensions","correctLeftTop","calcDim","_calcDimensions","fromSVG","diffX","diffY","commonRender","fromElementGenerator","_class","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_renderPathCommands","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","_getOffsetTransform","digits","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","pathUrl","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","enlivedClipPath","toGroup","newGroup","childrenOverride","srcFromAttribute","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","setElement","removeTexture","_initConfig","applyFilters","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","strokeSvg","imageMarkup","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","sW","sH","sX","sY","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","testPrecision","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","webGlPrecision","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","copyGLTo2D","startTime","drawImageTime","putImageDataTime","testContext","now","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","resizeCanvasIfNeeded","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","mainParameter","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","lineTopOffset","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","lineBounds","_getGraphemeBox","numOfSpaces","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","isJustify","charsToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","lineHeightDiff","scaledDiff","textHeight","offX","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","lineOffset","realLineHeight","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPosition","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","styleObj","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","doubleClickHandler","tripleClickHandler","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","currentActive","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","9","27","33","34","35","36","37","38","39","40","ctrlKeysMapUp","67","88","ctrlKeysMapDown","65","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","removedText","nextText","charCount","nextCharCount","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","textAfterCursor","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","svgStyle","minWidth","dynamicMinWidth","__cachedLines","_wordJoiners","splitByGrapheme","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","infix","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","linesToKeep","canvas2d"],"mappings":"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","file":"../skylark-fabric-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-fabric/canvas2d',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.attach(\"intg.fabric\", {});\r\n});\ndefine('skylark-fabric/primitives/fabric',[],function(){\r\n\r\n  /* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */\r\n  /*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\r\n\r\n  var fabric =  { version: '3.6.2' };\r\n\r\n\r\n  /* _AMD_END_ */\r\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n    fabric.document = document;\r\n    fabric.window = window;\r\n  }\r\n  else {\r\n    // assume we're running under node.js when document/window are not present\r\n    var jsdom = require('jsdom');\r\n    var virtualWindow = new jsdom.JSDOM(\r\n      decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\r\n      {\r\n        features: {\r\n          FetchExternalResources: ['img']\r\n        },\r\n        resources: 'usable'\r\n      }).window;\r\n    fabric.document = virtualWindow.document;\r\n    fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\r\n    fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\r\n    fabric.window = virtualWindow;\r\n    DOMParser = fabric.window.DOMParser;\r\n  }\r\n\r\n  /**\r\n   * True when in environment that supports touch events\r\n   * @type boolean\r\n   */\r\n  fabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\r\n    (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\r\n\r\n  /**\r\n   * True when in environment that's probably Node.js\r\n   * @type boolean\r\n   */\r\n  fabric.isLikelyNode = typeof Buffer !== 'undefined' &&\r\n                        typeof window === 'undefined';\r\n\r\n  /* _FROM_SVG_START_ */\r\n  /**\r\n   * Attributes parsed from all SVG elements\r\n   * @type array\r\n   */\r\n  fabric.SHARED_ATTRIBUTES = [\r\n    'display',\r\n    'transform',\r\n    'fill', 'fill-opacity', 'fill-rule',\r\n    'opacity',\r\n    'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset',\r\n    'stroke-linejoin', 'stroke-miterlimit',\r\n    'stroke-opacity', 'stroke-width',\r\n    'id', 'paint-order', 'vector-effect',\r\n    'instantiated_by_use', 'clip-path'\r\n  ];\r\n  /* _FROM_SVG_END_ */\r\n\r\n  /**\r\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\r\n   */\r\n  fabric.DPI = 96;\r\n  fabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)';\r\n  fabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\r\n  fabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\r\n  fabric.fontPaths = { };\r\n  fabric.iMatrix = [1, 0, 0, 1, 0, 0];\r\n  fabric.svgNS = 'http://www.w3.org/2000/svg';\r\n\r\n  /**\r\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.perfLimitSizeTotal = 2097152;\r\n\r\n  /**\r\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.maxCacheSideLimit = 4096;\r\n\r\n  /**\r\n   * Lowest pixel limit for cache canvases, set at 256PX\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.minCacheSideLimit = 256;\r\n\r\n  /**\r\n   * Cache Object for widths of chars in text rendering.\r\n   */\r\n  fabric.charWidthsCache = { };\r\n\r\n  /**\r\n   * if webgl is enabled and available, textureSize will determine the size\r\n   * of the canvas backend\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.textureSize = 2048;\r\n\r\n  /**\r\n   * When 'true', style information is not retained when copy/pasting text, making\r\n   * pasted text use destination style.\r\n   * Defaults to 'false'.\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  fabric.disableStyleCopyPaste = false;\r\n\r\n  /**\r\n   * Enable webgl for filtering picture is available\r\n   * A filtering backend will be initialized, this will both take memory and\r\n   * time since a default 2048x2048 canvas will be created for the gl context\r\n   * @since 2.0.0\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  fabric.enableGLFiltering = true;\r\n\r\n  /**\r\n   * Device Pixel Ratio\r\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\r\n   */\r\n  fabric.devicePixelRatio = fabric.window.devicePixelRatio ||\r\n                            fabric.window.webkitDevicePixelRatio ||\r\n                            fabric.window.mozDevicePixelRatio ||\r\n                            1;\r\n  /**\r\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\r\n   * which is unitless and not rendered equally across browsers.\r\n   *\r\n   * Values that work quite well (as of October 2017) are:\r\n   * - Chrome: 1.5\r\n   * - Edge: 1.75\r\n   * - Firefox: 0.9\r\n   * - Safari: 0.95\r\n   *\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default 1\r\n   */\r\n  fabric.browserShadowBlurConstant = 1;\r\n\r\n  /**\r\n   * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.arcToSegmentsCache = { };\r\n\r\n  /**\r\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\r\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\r\n   * you do not get any speed benefit and you get a big object in memory.\r\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\r\n   * can eventually clear it.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.boundsOfCurveCache = { };\r\n\r\n  /**\r\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\r\n   * @default true\r\n   */\r\n  fabric.cachesBoundsOfCurve = true;\r\n\r\n  /**\r\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\r\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\r\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\r\n   * @type Boolean\r\n   * @default false\r\n   */\r\n  fabric.forceGLPutImageData = false;\r\n\r\n  fabric.initFilterBackend = function() {\r\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\r\n      console.log('max texture size: ' + fabric.maxTextureSize);\r\n      return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\r\n    }\r\n    else if (fabric.Canvas2dFilterBackend) {\r\n      return (new fabric.Canvas2dFilterBackend());\r\n    }\r\n  };\r\n\r\n\r\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n    // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\r\n    window.fabric = fabric;\r\n  }\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    function _removeEventListener(eventName, handler) {\r\n      if (!this.__eventListeners[eventName]) {\r\n        return;\r\n      }\r\n      var eventListener = this.__eventListeners[eventName];\r\n      if (handler) {\r\n        eventListener[eventListener.indexOf(handler)] = false;\r\n      }\r\n      else {\r\n        fabric.util.array.fill(eventListener, false);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Observes specified event\r\n     * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias on\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function that receives a notification when an event of the specified type occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function observe(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        this.__eventListeners = { };\r\n      }\r\n      // one object with key/value pairs was passed\r\n      if (arguments.length === 1) {\r\n        for (var prop in eventName) {\r\n          this.on(prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        if (!this.__eventListeners[eventName]) {\r\n          this.__eventListeners[eventName] = [];\r\n        }\r\n        this.__eventListeners[eventName].push(handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Stops event observing for a particular event handler. Calling this method\r\n     * without arguments removes all handlers for all events\r\n     * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias off\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function to be deleted from EventListeners\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function stopObserving(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        return this;\r\n      }\r\n\r\n      // remove all key/value pairs (event name -> event handler)\r\n      if (arguments.length === 0) {\r\n        for (eventName in this.__eventListeners) {\r\n          _removeEventListener.call(this, eventName);\r\n        }\r\n      }\r\n      // one object with key/value pairs was passed\r\n      else if (arguments.length === 1 && typeof arguments[0] === 'object') {\r\n        for (var prop in eventName) {\r\n          _removeEventListener.call(this, prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        _removeEventListener.call(this, eventName, handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Fires event with an optional options object\r\n     * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias trigger\r\n     * @param {String} eventName Event name to fire\r\n     * @param {Object} [options] Options object\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function fire(eventName, options) {\r\n      if (!this.__eventListeners) {\r\n        return this;\r\n      }\r\n\r\n      var listenersForEvent = this.__eventListeners[eventName];\r\n      if (!listenersForEvent) {\r\n        return this;\r\n      }\r\n\r\n      for (var i = 0, len = listenersForEvent.length; i < len; i++) {\r\n        listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\r\n      }\r\n      this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\r\n        return value !== false;\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.Observable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\r\n     * @see {@link http://fabricjs.com/events|Events demo}\r\n     */\r\n    fabric.Observable = {\r\n      observe: observe,\r\n      stopObserving: stopObserving,\r\n      fire: fire,\r\n\r\n      on: observe,\r\n      off: stopObserving,\r\n      trigger: fire\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Collection\r\n   */\r\n  fabric.Collection = {\r\n\r\n    _objects: [],\r\n\r\n    /**\r\n     * Adds objects to collection, Canvas or Group, then renders canvas\r\n     * (if `renderOnAddRemove` is not `false`).\r\n     * in case of Group no changes to bounding box are made.\r\n     * Objects should be instances of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the add method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    add: function () {\r\n      this._objects.push.apply(this._objects, arguments);\r\n      if (this._onObjectAdded) {\r\n        for (var i = 0, length = arguments.length; i < length; i++) {\r\n          this._onObjectAdded(arguments[i]);\r\n        }\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * An object should be an instance of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the insertAt method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {Object} object Object to insert\r\n     * @param {Number} index Index to insert object at\r\n     * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    insertAt: function (object, index, nonSplicing) {\r\n      var objects = this._objects;\r\n      if (nonSplicing) {\r\n        objects[index] = object;\r\n      }\r\n      else {\r\n        objects.splice(index, 0, object);\r\n      }\r\n      this._onObjectAdded && this._onObjectAdded(object);\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    remove: function() {\r\n      var objects = this._objects,\r\n          index, somethingRemoved = false;\r\n\r\n      for (var i = 0, length = arguments.length; i < length; i++) {\r\n        index = objects.indexOf(arguments[i]);\r\n\r\n        // only call onObjectRemoved if an object was actually removed\r\n        if (index !== -1) {\r\n          somethingRemoved = true;\r\n          objects.splice(index, 1);\r\n          this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\r\n        }\r\n      }\r\n\r\n      this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Executes given function for each object in this group\r\n     * @param {Function} callback\r\n     *                   Callback invoked with current object as first argument,\r\n     *                   index - as second and an array of all objects - as third.\r\n     *                   Callback is invoked in a context of Global Object (e.g. `window`)\r\n     *                   when no `context` argument is given\r\n     *\r\n     * @param {Object} context Context (aka thisObject)\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    forEachObject: function(callback, context) {\r\n      var objects = this.getObjects();\r\n      for (var i = 0, len = objects.length; i < len; i++) {\r\n        callback.call(context, objects[i], i, objects);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of children objects of this instance\r\n     * Type parameter introduced in 1.3.10\r\n     * since 2.3.5 this method return always a COPY of the array;\r\n     * @param {String} [type] When specified, only objects of this type are returned\r\n     * @return {Array}\r\n     */\r\n    getObjects: function(type) {\r\n      if (typeof type === 'undefined') {\r\n        return this._objects.concat();\r\n      }\r\n      return this._objects.filter(function(o) {\r\n        return o.type === type;\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Returns object at specified index\r\n     * @param {Number} index\r\n     * @return {Self} thisArg\r\n     */\r\n    item: function (index) {\r\n      return this._objects[index];\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains no objects\r\n     * @return {Boolean} true if collection is empty\r\n     */\r\n    isEmpty: function () {\r\n      return this._objects.length === 0;\r\n    },\r\n\r\n    /**\r\n     * Returns a size of a collection (i.e: length of an array containing its objects)\r\n     * @return {Number} Collection size\r\n     */\r\n    size: function() {\r\n      return this._objects.length;\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains an object\r\n     * @param {Object} object Object to check against\r\n     * @return {Boolean} `true` if collection contains an object\r\n     */\r\n    contains: function(object) {\r\n      return this._objects.indexOf(object) > -1;\r\n    },\r\n\r\n    /**\r\n     * Returns number representation of a collection complexity\r\n     * @return {Number} complexity\r\n     */\r\n    complexity: function () {\r\n      return this._objects.reduce(function (memo, current) {\r\n        memo += current.complexity ? current.complexity() : 0;\r\n        return memo;\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @namespace fabric.CommonMethods\r\n   */\r\n  fabric.CommonMethods = {\r\n\r\n    /**\r\n     * Sets object's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this.set(prop, options[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Gradient to\r\n     */\r\n    _initGradient: function(filler, property) {\r\n      if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\r\n        this.set(property, new fabric.Gradient(filler));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Pattern to\r\n     * @param {Function} [callback] callback to invoke after pattern load\r\n     */\r\n    _initPattern: function(filler, property, callback) {\r\n      if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\r\n        this.set(property, new fabric.Pattern(filler, callback));\r\n      }\r\n      else {\r\n        callback && callback();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initClipping: function(options) {\r\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\r\n        return;\r\n      }\r\n\r\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\r\n      if (typeof functionBody !== 'undefined') {\r\n        this.clipTo = new Function('ctx', functionBody);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _setObject: function(obj) {\r\n      for (var prop in obj) {\r\n        this._set(prop, obj[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    set: function(key, value) {\r\n      if (typeof key === 'object') {\r\n        this._setObject(key);\r\n      }\r\n      else {\r\n        if (typeof value === 'function' && key !== 'clipTo') {\r\n          this._set(key, value(this.get(key)));\r\n        }\r\n        else {\r\n          this._set(key, value);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    _set: function(key, value) {\r\n      this[key] = value;\r\n    },\r\n\r\n    /**\r\n     * Toggles specified property from `true` to `false` or from `false` to `true`\r\n     * @param {String} property Property to toggle\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    toggle: function(property) {\r\n      var value = this.get(property);\r\n      if (typeof value === 'boolean') {\r\n        this.set(property, !value);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Basic getter\r\n     * @param {String} property Property name\r\n     * @return {*} value of a property\r\n     */\r\n    get: function(property) {\r\n      return this[property];\r\n    }\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    var sqrt = Math.sqrt,\r\n        atan2 = Math.atan2,\r\n        pow = Math.pow,\r\n        PiBy180 = Math.PI / 180,\r\n        PiBy2 = Math.PI / 2;\r\n\r\n    /**\r\n     * @namespace fabric.util\r\n     */\r\n    fabric.util = {\r\n\r\n      /**\r\n       * Calculate the cos of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      cos: function(angle) {\r\n        if (angle === 0) { return 1; }\r\n        if (angle < 0) {\r\n          // cos(a) = cos(-a)\r\n          angle = -angle;\r\n        }\r\n        var angleSlice = angle / PiBy2;\r\n        switch (angleSlice) {\r\n          case 1: case 3: return 0;\r\n          case 2: return -1;\r\n        }\r\n        return Math.cos(angle);\r\n      },\r\n\r\n      /**\r\n       * Calculate the sin of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      sin: function(angle) {\r\n        if (angle === 0) { return 0; }\r\n        var angleSlice = angle / PiBy2, sign = 1;\r\n        if (angle < 0) {\r\n          // sin(-a) = -sin(a)\r\n          sign = -1;\r\n        }\r\n        switch (angleSlice) {\r\n          case 1: return sign;\r\n          case 2: return 0;\r\n          case 3: return -sign;\r\n        }\r\n        return Math.sin(angle);\r\n      },\r\n\r\n      /**\r\n       * Removes value from an array.\r\n       * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} array\r\n       * @param {*} value\r\n       * @return {Array} original array\r\n       */\r\n      removeFromArray: function(array, value) {\r\n        var idx = array.indexOf(value);\r\n        if (idx !== -1) {\r\n          array.splice(idx, 1);\r\n        }\r\n        return array;\r\n      },\r\n\r\n      /**\r\n       * Returns random number between 2 specified ones.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} min lower limit\r\n       * @param {Number} max upper limit\r\n       * @return {Number} random value (between min and max)\r\n       */\r\n      getRandomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      },\r\n\r\n      /**\r\n       * Transforms degrees to radians.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} degrees value in degrees\r\n       * @return {Number} value in radians\r\n       */\r\n      degreesToRadians: function(degrees) {\r\n        return degrees * PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Transforms radians to degrees.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} radians value in radians\r\n       * @return {Number} value in degrees\r\n       */\r\n      radiansToDegrees: function(radians) {\r\n        return radians / PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Rotates `point` around `origin` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {fabric.Point} point The point to rotate\r\n       * @param {fabric.Point} origin The origin of the rotation\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {fabric.Point} The new rotated point\r\n       */\r\n      rotatePoint: function(point, origin, radians) {\r\n        point.subtractEquals(origin);\r\n        var v = fabric.util.rotateVector(point, radians);\r\n        return new fabric.Point(v.x, v.y).addEquals(origin);\r\n      },\r\n\r\n      /**\r\n       * Rotates `vector` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} vector The vector to rotate (x and y)\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {Object} The new rotated point\r\n       */\r\n      rotateVector: function(vector, radians) {\r\n        var sin = fabric.util.sin(radians),\r\n            cos = fabric.util.cos(radians),\r\n            rx = vector.x * cos - vector.y * sin,\r\n            ry = vector.x * sin + vector.y * cos;\r\n        return {\r\n          x: rx,\r\n          y: ry\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Apply transform t to point p\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Point} p The point to transform\r\n       * @param  {Array} t The transform\r\n       * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\r\n       * @return {fabric.Point} The transformed point\r\n       */\r\n      transformPoint: function(p, t, ignoreOffset) {\r\n        if (ignoreOffset) {\r\n          return new fabric.Point(\r\n            t[0] * p.x + t[2] * p.y,\r\n            t[1] * p.x + t[3] * p.y\r\n          );\r\n        }\r\n        return new fabric.Point(\r\n          t[0] * p.x + t[2] * p.y + t[4],\r\n          t[1] * p.x + t[3] * p.y + t[5]\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of points's bounding rectangle (left, top, width, height)\r\n       * @param {Array} points 4 points array\r\n       * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      makeBoundingBoxFromPoints: function(points, transform) {\r\n        if (transform) {\r\n          for (var i = 0; i < points.length; i++) {\r\n            points[i] = fabric.util.transformPoint(points[i], transform);\r\n          }\r\n        }\r\n        var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\r\n            minX = fabric.util.array.min(xPoints),\r\n            maxX = fabric.util.array.max(xPoints),\r\n            width = maxX - minX,\r\n            yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\r\n            minY = fabric.util.array.min(yPoints),\r\n            maxY = fabric.util.array.max(yPoints),\r\n            height = maxY - minY;\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Invert transformation t\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} t The transform\r\n       * @return {Array} The inverted transform\r\n       */\r\n      invertTransform: function(t) {\r\n        var a = 1 / (t[0] * t[3] - t[1] * t[2]),\r\n            r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\r\n            o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\r\n        r[4] = -o.x;\r\n        r[5] = -o.y;\r\n        return r;\r\n      },\r\n\r\n      /**\r\n       * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number|String} number number to operate on\r\n       * @param {Number} fractionDigits number of fraction digits to \"leave\"\r\n       * @return {Number}\r\n       */\r\n      toFixed: function(number, fractionDigits) {\r\n        return parseFloat(Number(number).toFixed(fractionDigits));\r\n      },\r\n\r\n      /**\r\n       * Converts from attribute value to pixel value if applicable.\r\n       * Returns converted pixels or original value not converted.\r\n       * @param {Number|String} value number to operate on\r\n       * @param {Number} fontSize\r\n       * @return {Number|String}\r\n       */\r\n      parseUnit: function(value, fontSize) {\r\n        var unit = /\\D{0,2}$/.exec(value),\r\n            number = parseFloat(value);\r\n        if (!fontSize) {\r\n          fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n        }\r\n        switch (unit[0]) {\r\n          case 'mm':\r\n            return number * fabric.DPI / 25.4;\r\n\r\n          case 'cm':\r\n            return number * fabric.DPI / 2.54;\r\n\r\n          case 'in':\r\n            return number * fabric.DPI;\r\n\r\n          case 'pt':\r\n            return number * fabric.DPI / 72; // or * 4 / 3\r\n\r\n          case 'pc':\r\n            return number * fabric.DPI / 72 * 12; // or * 16\r\n\r\n          case 'em':\r\n            return number * fontSize;\r\n\r\n          default:\r\n            return number;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Function which always returns `false`.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {Boolean}\r\n       */\r\n      falseFunction: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns klass \"Class\" object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of object (eg. 'circle')\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @return {Object} klass \"Class\"\r\n       */\r\n      getKlass: function(type, namespace) {\r\n        // capitalize first letter only\r\n        type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\r\n        return fabric.util.resolveNamespace(namespace)[type];\r\n      },\r\n\r\n      /**\r\n       * Returns array of attributes for given svg that fabric parses\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of svg element (eg. 'circle')\r\n       * @return {Array} string names of supported attributes\r\n       */\r\n      getSvgAttributes: function(type) {\r\n        var attributes = [\r\n          'instantiated_by_use',\r\n          'style',\r\n          'id',\r\n          'class'\r\n        ];\r\n        switch (type) {\r\n          case 'linearGradient':\r\n            attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\r\n            break;\r\n          case 'radialGradient':\r\n            attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\r\n            break;\r\n          case 'stop':\r\n            attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\r\n            break;\r\n        }\r\n        return attributes;\r\n      },\r\n\r\n      /**\r\n       * Returns object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\r\n       * @return {Object} Object for given namespace (default fabric)\r\n       */\r\n      resolveNamespace: function(namespace) {\r\n        if (!namespace) {\r\n          return fabric;\r\n        }\r\n\r\n        var parts = namespace.split('.'),\r\n            len = parts.length, i,\r\n            obj = global || fabric.window;\r\n\r\n        for (i = 0; i < len; ++i) {\r\n          obj = obj[parts[i]];\r\n        }\r\n\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Loads image element from given url and passes it to a callback\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL representing an image\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @param {*} [context] Context to invoke callback in\r\n       * @param {Object} [crossOrigin] crossOrigin value to set image element to\r\n       */\r\n      loadImage: function(url, callback, context, crossOrigin) {\r\n        if (!url) {\r\n          callback && callback.call(context, url);\r\n          return;\r\n        }\r\n\r\n        var img = fabric.util.createImage();\r\n\r\n        /** @ignore */\r\n        var onLoadCallback = function () {\r\n          callback && callback.call(context, img);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        img.onload = onLoadCallback;\r\n        /** @ignore */\r\n        img.onerror = function() {\r\n          fabric.log('Error loading ' + img.src);\r\n          callback && callback.call(context, null, true);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        // data-urls appear to be buggy with crossOrigin\r\n        // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\r\n        // see https://code.google.com/p/chromium/issues/detail?id=315152\r\n        //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\r\n        if (url.indexOf('data') !== 0 && crossOrigin) {\r\n          img.crossOrigin = crossOrigin;\r\n        }\r\n\r\n        // IE10 / IE11-Fix: SVG contents from data: URI\r\n        // will only be available if the IMG is present\r\n        // in the DOM (and visible)\r\n        if (url.substring(0,14) === 'data:image/svg') {\r\n          img.onload = null;\r\n          fabric.util.loadImageInDom(img, onLoadCallback);\r\n        }\r\n\r\n        img.src = url;\r\n      },\r\n\r\n      /**\r\n       * Attaches SVG image with data: URL to the dom\r\n       * @memberOf fabric.util\r\n       * @param {Object} img Image object with data:image/svg src\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @return {Object} DOM element (div containing the SVG image)\r\n       */\r\n      loadImageInDom: function(img, onLoadCallback) {\r\n        var div = fabric.document.createElement('div');\r\n        div.style.width = div.style.height = '1px';\r\n        div.style.left = div.style.top = '-100%';\r\n        div.style.position = 'absolute';\r\n        div.appendChild(img);\r\n        fabric.document.querySelector('body').appendChild(div);\r\n        /**\r\n         * Wrap in function to:\r\n         *   1. Call existing callback\r\n         *   2. Cleanup DOM\r\n         */\r\n        img.onload = function () {\r\n          onLoadCallback();\r\n          div.parentNode.removeChild(div);\r\n          div = null;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Creates corresponding fabric instances from their object representations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} objects Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @param {Function} reviver Method for further parsing of object elements,\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenObjects: function(objects, callback, namespace, reviver) {\r\n        objects = objects || [];\r\n\r\n        var enlivenedObjects = [],\r\n            numLoadedObjects = 0,\r\n            numTotalObjects = objects.length;\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedObjects === numTotalObjects) {\r\n            callback && callback(enlivenedObjects.filter(function(obj) {\r\n              // filter out undefined objects (objects that gave error)\r\n              return obj;\r\n            }));\r\n          }\r\n        }\r\n\r\n        if (!numTotalObjects) {\r\n          callback && callback(enlivenedObjects);\r\n          return;\r\n        }\r\n\r\n        objects.forEach(function (o, index) {\r\n          // if sparse array\r\n          if (!o || !o.type) {\r\n            onLoaded();\r\n            return;\r\n          }\r\n          var klass = fabric.util.getKlass(o.type, namespace);\r\n          klass.fromObject(o, function (obj, error) {\r\n            error || (enlivenedObjects[index] = obj);\r\n            reviver && reviver(o, obj, error);\r\n            onLoaded();\r\n          });\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Create and wait for loading of patterns\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} patterns Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenPatterns: function(patterns, callback) {\r\n        patterns = patterns || [];\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedPatterns === numPatterns) {\r\n            callback && callback(enlivenedPatterns);\r\n          }\r\n        }\r\n\r\n        var enlivenedPatterns = [],\r\n            numLoadedPatterns = 0,\r\n            numPatterns = patterns.length;\r\n\r\n        if (!numPatterns) {\r\n          callback && callback(enlivenedPatterns);\r\n          return;\r\n        }\r\n\r\n        patterns.forEach(function (p, index) {\r\n          if (p && p.source) {\r\n            new fabric.Pattern(p, function(pattern) {\r\n              enlivenedPatterns[index] = pattern;\r\n              onLoaded();\r\n            });\r\n          }\r\n          else {\r\n            enlivenedPatterns[index] = p;\r\n            onLoaded();\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Groups SVG elements (usually those retrieved from SVG document)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} elements SVG elements to group\r\n       * @param {Object} [options] Options object\r\n       * @param {String} path Value to set sourcePath to\r\n       * @return {fabric.Object|fabric.Group}\r\n       */\r\n      groupSVGElements: function(elements, options, path) {\r\n        var object;\r\n        if (elements && elements.length === 1) {\r\n          return elements[0];\r\n        }\r\n        if (options) {\r\n          if (options.width && options.height) {\r\n            options.centerPoint = {\r\n              x: options.width / 2,\r\n              y: options.height / 2\r\n            };\r\n          }\r\n          else {\r\n            delete options.width;\r\n            delete options.height;\r\n          }\r\n        }\r\n        object = new fabric.Group(elements, options);\r\n        if (typeof path !== 'undefined') {\r\n          object.sourcePath = path;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Populates an object with properties of another object\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} source Source object\r\n       * @param {Object} destination Destination object\r\n       * @return {Array} properties Properties names to include\r\n       */\r\n      populateWithProperties: function(source, destination, properties) {\r\n        if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\r\n          for (var i = 0, len = properties.length; i < len; i++) {\r\n            if (properties[i] in source) {\r\n              destination[properties[i]] = source[properties[i]];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a dashed line between two points\r\n       *\r\n       * This method is used to draw dashed line around selection area.\r\n       * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\r\n       *\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x  start x coordinate\r\n       * @param {Number} y start y coordinate\r\n       * @param {Number} x2 end x coordinate\r\n       * @param {Number} y2 end y coordinate\r\n       * @param {Array} da dash array pattern\r\n       */\r\n      drawDashedLine: function(ctx, x, y, x2, y2, da) {\r\n        var dx = x2 - x,\r\n            dy = y2 - y,\r\n            len = sqrt(dx * dx + dy * dy),\r\n            rot = atan2(dy, dx),\r\n            dc = da.length,\r\n            di = 0,\r\n            draw = true;\r\n\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.moveTo(0, 0);\r\n        ctx.rotate(rot);\r\n\r\n        x = 0;\r\n        while (len > x) {\r\n          x += da[di++ % dc];\r\n          if (x > len) {\r\n            x = len;\r\n          }\r\n          ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\r\n          draw = !draw;\r\n        }\r\n\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Creates canvas element\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {CanvasElement} initialized canvas element\r\n       */\r\n      createCanvasElement: function() {\r\n        return fabric.document.createElement('canvas');\r\n      },\r\n\r\n      /**\r\n       * Creates a canvas element that is a copy of another and is also painted\r\n       * @param {CanvasElement} canvas to copy size and content of\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {CanvasElement} initialized canvas element\r\n       */\r\n      copyCanvasElement: function(canvas) {\r\n        var newCanvas = fabric.util.createCanvasElement();\r\n        newCanvas.width = canvas.width;\r\n        newCanvas.height = canvas.height;\r\n        newCanvas.getContext('2d').drawImage(canvas, 0, 0);\r\n        return newCanvas;\r\n      },\r\n\r\n      /**\r\n       * since 2.6.0 moved from canvas instance to utility.\r\n       * @param {CanvasElement} canvasEl to copy size and content of\r\n       * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\r\n       * @param {Number} quality <= 1 and > 0\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {String} data url\r\n       */\r\n      toDataURL: function(canvasEl, format, quality) {\r\n        return canvasEl.toDataURL('image/' + format, quality);\r\n      },\r\n\r\n      /**\r\n       * Creates image element (works on client and node)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {HTMLImageElement} HTML image element\r\n       */\r\n      createImage: function() {\r\n        return fabric.document.createElement('img');\r\n      },\r\n\r\n      /**\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @deprecated since 2.0.0\r\n       * @param {fabric.Object} receiver Object implementing `clipTo` method\r\n       * @param {CanvasRenderingContext2D} ctx Context to clip\r\n       */\r\n      clipContext: function(receiver, ctx) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        receiver.clipTo(ctx);\r\n        ctx.clip();\r\n      },\r\n\r\n      /**\r\n       * Multiply matrix A by matrix B to nest transformations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a First transformMatrix\r\n       * @param  {Array} b Second transformMatrix\r\n       * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\r\n       * @return {Array} The product of the two transform matrices\r\n       */\r\n      multiplyTransformMatrices: function(a, b, is2x2) {\r\n        // Matrix multiply a * b\r\n        return [\r\n          a[0] * b[0] + a[2] * b[1],\r\n          a[1] * b[0] + a[3] * b[1],\r\n          a[0] * b[2] + a[2] * b[3],\r\n          a[1] * b[2] + a[3] * b[3],\r\n          is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\r\n          is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Decomposes standard 2x3 matrix into transform components\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a transformMatrix\r\n       * @return {Object} Components of transform\r\n       */\r\n      qrDecompose: function(a) {\r\n        var angle = atan2(a[1], a[0]),\r\n            denom = pow(a[0], 2) + pow(a[1], 2),\r\n            scaleX = sqrt(denom),\r\n            scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\r\n            skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\r\n        return {\r\n          angle: angle  / PiBy180,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          skewX: skewX / PiBy180,\r\n          skewY: 0,\r\n          translateX: a[4],\r\n          translateY: a[5]\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.angle] angle in degrees\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      calcRotateMatrix: function(options) {\r\n        if (!options.angle) {\r\n          return fabric.iMatrix.concat();\r\n        }\r\n        var theta = fabric.util.degreesToRadians(options.angle),\r\n            cos = fabric.util.cos(theta),\r\n            sin = fabric.util.sin(theta);\r\n        return [cos, sin, -sin, cos, 0, 0];\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet.\r\n       * is called DimensionsTransformMatrix because those properties are the one that influence\r\n       * the size of the resulting box of the object.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.scaleX]\r\n       * @param  {Number} [options.scaleY]\r\n       * @param  {Boolean} [options.flipX]\r\n       * @param  {Boolean} [options.flipY]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.skewX]\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      calcDimensionsMatrix: function(options) {\r\n        var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,\r\n            scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,\r\n            scaleMatrix = [\r\n              options.flipX ? -scaleX : scaleX,\r\n              0,\r\n              0,\r\n              options.flipY ? -scaleY : scaleY,\r\n              0,\r\n              0],\r\n            multiply = fabric.util.multiplyTransformMatrices,\r\n            degreesToRadians = fabric.util.degreesToRadians;\r\n        if (options.skewX) {\r\n          scaleMatrix = multiply(\r\n            scaleMatrix,\r\n            [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],\r\n            true);\r\n        }\r\n        if (options.skewY) {\r\n          scaleMatrix = multiply(\r\n            scaleMatrix,\r\n            [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],\r\n            true);\r\n        }\r\n        return scaleMatrix;\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix starting from an object of the same kind of\r\n       * the one returned from qrDecompose, useful also if you want to calculate some\r\n       * transformations from an object that is not enlived yet\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Object} options\r\n       * @param  {Number} [options.angle]\r\n       * @param  {Number} [options.scaleX]\r\n       * @param  {Number} [options.scaleY]\r\n       * @param  {Boolean} [options.flipX]\r\n       * @param  {Boolean} [options.flipY]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.skewX]\r\n       * @param  {Number} [options.translateX]\r\n       * @param  {Number} [options.translateY]\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      composeMatrix: function(options) {\r\n        var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],\r\n            multiply = fabric.util.multiplyTransformMatrices;\r\n        if (options.angle) {\r\n          matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\r\n        }\r\n        if (options.scaleX || options.scaleY || options.skewX || options.skewY || options.flipX || options.flipY) {\r\n          matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\r\n        }\r\n        return matrix;\r\n      },\r\n\r\n      /**\r\n       * Returns a transform matrix that has the same effect of scaleX, scaleY and skewX.\r\n       * Is deprecated for composeMatrix. Please do not use it.\r\n       * @static\r\n       * @deprecated since 3.4.0\r\n       * @memberOf fabric.util\r\n       * @param  {Number} scaleX\r\n       * @param  {Number} scaleY\r\n       * @param  {Number} skewX\r\n       * @return {Number[]} transform matrix\r\n       */\r\n      customTransformMatrix: function(scaleX, scaleY, skewX) {\r\n        return fabric.util.composeMatrix({ scaleX: scaleX, scaleY: scaleY, skewX: skewX });\r\n      },\r\n\r\n      /**\r\n       * reset an object transform state to neutral. Top and left are not accounted for\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to transform\r\n       */\r\n      resetObjectTransform: function (target) {\r\n        target.scaleX = 1;\r\n        target.scaleY = 1;\r\n        target.skewX = 0;\r\n        target.skewY = 0;\r\n        target.flipX = false;\r\n        target.flipY = false;\r\n        target.rotate(0);\r\n      },\r\n\r\n      /**\r\n       * Extract Object transform values\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to read from\r\n       * @return {Object} Components of transform\r\n       */\r\n      saveObjectTransform: function (target) {\r\n        return {\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          angle: target.angle,\r\n          left: target.left,\r\n          flipX: target.flipX,\r\n          flipY: target.flipY,\r\n          top: target.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of function body\r\n       * @param {Function} fn Function to get body of\r\n       * @return {String} Function body\r\n       */\r\n      getFunctionBody: function(fn) {\r\n        return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\r\n      },\r\n\r\n      /**\r\n       * Returns true if context has transparent pixel\r\n       * at specified location (taking tolerance into account)\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x x coordinate\r\n       * @param {Number} y y coordinate\r\n       * @param {Number} tolerance Tolerance\r\n       */\r\n      isTransparent: function(ctx, x, y, tolerance) {\r\n\r\n        // If tolerance is > 0 adjust start coords to take into account.\r\n        // If moves off Canvas fix to 0\r\n        if (tolerance > 0) {\r\n          if (x > tolerance) {\r\n            x -= tolerance;\r\n          }\r\n          else {\r\n            x = 0;\r\n          }\r\n          if (y > tolerance) {\r\n            y -= tolerance;\r\n          }\r\n          else {\r\n            y = 0;\r\n          }\r\n        }\r\n\r\n        var _isTransparent = true, i, temp,\r\n            imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\r\n            l = imageData.data.length;\r\n\r\n        // Split image data - for tolerance > 1, pixelDataSize = 4;\r\n        for (i = 3; i < l; i += 4) {\r\n          temp = imageData.data[i];\r\n          _isTransparent = temp <= 0;\r\n          if (_isTransparent === false) {\r\n            break; // Stop if colour found\r\n          }\r\n        }\r\n\r\n        imageData = null;\r\n\r\n        return _isTransparent;\r\n      },\r\n\r\n      /**\r\n       * Parse preserveAspectRatio attribute from element\r\n       * @param {string} attribute to be parsed\r\n       * @return {Object} an object containing align and meetOrSlice attribute\r\n       */\r\n      parsePreserveAspectRatioAttribute: function(attribute) {\r\n        var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\r\n            aspectRatioAttrs = attribute.split(' '), align;\r\n\r\n        if (aspectRatioAttrs && aspectRatioAttrs.length) {\r\n          meetOrSlice = aspectRatioAttrs.pop();\r\n          if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\r\n            align = meetOrSlice;\r\n            meetOrSlice = 'meet';\r\n          }\r\n          else if (aspectRatioAttrs.length) {\r\n            align = aspectRatioAttrs.pop();\r\n          }\r\n        }\r\n        //divide align in alignX and alignY\r\n        alignX = align !== 'none' ? align.slice(1, 4) : 'none';\r\n        alignY = align !== 'none' ? align.slice(5, 8) : 'none';\r\n        return {\r\n          meetOrSlice: meetOrSlice,\r\n          alignX: alignX,\r\n          alignY: alignY\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Clear char widths cache for the given font family or all the cache if no\r\n       * fontFamily is specified.\r\n       * Use it if you know you are loading fonts in a lazy way and you are not waiting\r\n       * for custom fonts to load properly when adding text objects to the canvas.\r\n       * If a text object is added when its own font is not loaded yet, you will get wrong\r\n       * measurement and so wrong bounding boxes.\r\n       * After the font cache is cleared, either change the textObject text content or call\r\n       * initDimensions() to trigger a recalculation\r\n       * @memberOf fabric.util\r\n       * @param {String} [fontFamily] font family to clear\r\n       */\r\n      clearFabricFontCache: function(fontFamily) {\r\n        fontFamily = (fontFamily || '').toLowerCase();\r\n        if (!fontFamily) {\r\n          fabric.charWidthsCache = { };\r\n        }\r\n        else if (fabric.charWidthsCache[fontFamily]) {\r\n          delete fabric.charWidthsCache[fontFamily];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Given current aspect ratio, determines the max width and height that can\r\n       * respect the total allowed area for the cache.\r\n       * @memberOf fabric.util\r\n       * @param {Number} ar aspect ratio\r\n       * @param {Number} maximumArea Maximum area you want to achieve\r\n       * @return {Object.x} Limited dimensions by X\r\n       * @return {Object.y} Limited dimensions by Y\r\n       */\r\n      limitDimsByArea: function(ar, maximumArea) {\r\n        var roughWidth = Math.sqrt(maximumArea * ar),\r\n            perfLimitSizeY = Math.floor(maximumArea / roughWidth);\r\n        return { x: Math.floor(roughWidth), y: perfLimitSizeY };\r\n      },\r\n\r\n      capValue: function(min, value, max) {\r\n        return Math.max(min, Math.min(value, max));\r\n      },\r\n\r\n      findScaleToFit: function(source, destination) {\r\n        return Math.min(destination.width / source.width, destination.height / source.height);\r\n      },\r\n\r\n      findScaleToCover: function(source, destination) {\r\n        return Math.max(destination.width / source.width, destination.height / source.height);\r\n      },\r\n\r\n      /**\r\n       * given an array of 6 number returns something like `\"matrix(...numbers)\"`\r\n       * @memberOf fabric.util\r\n       * @param {Array} trasnform an array with 6 numbers\r\n       * @return {String} transform matrix for svg\r\n       * @return {Object.y} Limited dimensions by Y\r\n       */\r\n      matrixToSVG: function(transform) {\r\n        return 'matrix(' + transform.map(function(value) {\r\n          return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\r\n        }).join(' ') + ')';\r\n      }\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var _join = Array.prototype.join;\r\n\r\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\r\n     * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\r\n     * http://mozilla.org/MPL/2.0/\r\n     */\r\n    function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\r\n      var argsString = _join.call(arguments);\r\n      if (fabric.arcToSegmentsCache[argsString]) {\r\n        return fabric.arcToSegmentsCache[argsString];\r\n      }\r\n\r\n      var PI = Math.PI, th = rotateX * PI / 180,\r\n          sinTh = fabric.util.sin(th),\r\n          cosTh = fabric.util.cos(th),\r\n          fromX = 0, fromY = 0;\r\n\r\n      rx = Math.abs(rx);\r\n      ry = Math.abs(ry);\r\n\r\n      var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\r\n          py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\r\n          rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\r\n          pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\r\n          root = 0;\r\n\r\n      if (pl < 0) {\r\n        var s = Math.sqrt(1 - pl / (rx2 * ry2));\r\n        rx *= s;\r\n        ry *= s;\r\n      }\r\n      else {\r\n        root = (large === sweep ? -1.0 : 1.0) *\r\n                Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\r\n      }\r\n\r\n      var cx = root * rx * py / ry,\r\n          cy = -root * ry * px / rx,\r\n          cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\r\n          cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\r\n          mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\r\n          dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\r\n\r\n      if (sweep === 0 && dtheta > 0) {\r\n        dtheta -= 2 * PI;\r\n      }\r\n      else if (sweep === 1 && dtheta < 0) {\r\n        dtheta += 2 * PI;\r\n      }\r\n\r\n      // Convert into cubic bezier segments <= 90deg\r\n      var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\r\n          result = [], mDelta = dtheta / segments,\r\n          mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\r\n          th3 = mTheta + mDelta;\r\n\r\n      for (var i = 0; i < segments; i++) {\r\n        result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\r\n        fromX = result[i][4];\r\n        fromY = result[i][5];\r\n        mTheta = th3;\r\n        th3 += mDelta;\r\n      }\r\n      fabric.arcToSegmentsCache[argsString] = result;\r\n      return result;\r\n    }\r\n\r\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\r\n      var costh2 = fabric.util.cos(th2),\r\n          sinth2 = fabric.util.sin(th2),\r\n          costh3 = fabric.util.cos(th3),\r\n          sinth3 = fabric.util.sin(th3),\r\n          toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\r\n          toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\r\n          cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\r\n          cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\r\n          cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\r\n          cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\r\n\r\n      return [\r\n        cp1X, cp1Y,\r\n        cp2X, cp2Y,\r\n        toX, toY\r\n      ];\r\n    }\r\n\r\n    /*\r\n     * Private\r\n     */\r\n    function calcVectorAngle(ux, uy, vx, vy) {\r\n      var ta = Math.atan2(uy, ux),\r\n          tb = Math.atan2(vy, vx);\r\n      if (tb >= ta) {\r\n        return tb - ta;\r\n      }\r\n      else {\r\n        return 2 * Math.PI - (ta - tb);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Draws arc\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {Number} fx\r\n     * @param {Number} fy\r\n     * @param {Array} coords\r\n     */\r\n    fabric.util.drawArc = function(ctx, fx, fy, coords) {\r\n      var rx = coords[0],\r\n          ry = coords[1],\r\n          rot = coords[2],\r\n          large = coords[3],\r\n          sweep = coords[4],\r\n          tx = coords[5],\r\n          ty = coords[6],\r\n          segs = [[], [], [], []],\r\n          segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segsNorm.length; i < len; i++) {\r\n        segs[i][0] = segsNorm[i][0] + fx;\r\n        segs[i][1] = segsNorm[i][1] + fy;\r\n        segs[i][2] = segsNorm[i][2] + fx;\r\n        segs[i][3] = segsNorm[i][3] + fy;\r\n        segs[i][4] = segsNorm[i][4] + fx;\r\n        segs[i][5] = segsNorm[i][5] + fy;\r\n        ctx.bezierCurveTo.apply(ctx, segs[i]);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a elliptic-arc\r\n     * @param {Number} fx start point of arc\r\n     * @param {Number} fy\r\n     * @param {Number} rx horizontal radius\r\n     * @param {Number} ry vertical radius\r\n     * @param {Number} rot angle of horizontal axe\r\n     * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\r\n     * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\r\n     * @param {Number} tx end point of arc\r\n     * @param {Number} ty\r\n     */\r\n    fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\r\n\r\n      var fromX = 0, fromY = 0, bound, bounds = [],\r\n          segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segs.length; i < len; i++) {\r\n        bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\r\n        bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\r\n        bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\r\n        fromX = segs[i][4];\r\n        fromY = segs[i][5];\r\n      }\r\n      return bounds;\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a beziercurve\r\n     * @param {Number} x0 starting point\r\n     * @param {Number} y0\r\n     * @param {Number} x1 first control point\r\n     * @param {Number} y1\r\n     * @param {Number} x2 secondo control point\r\n     * @param {Number} y2\r\n     * @param {Number} x3 end of beizer\r\n     * @param {Number} y3\r\n     */\r\n    // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\r\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n      var argsString;\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        argsString = _join.call(arguments);\r\n        if (fabric.boundsOfCurveCache[argsString]) {\r\n          return fabric.boundsOfCurveCache[argsString];\r\n        }\r\n      }\r\n\r\n      var sqrt = Math.sqrt,\r\n          min = Math.min, max = Math.max,\r\n          abs = Math.abs, tvalues = [],\r\n          bounds = [[], []],\r\n          a, b, c, t, t1, t2, b2ac, sqrtb2ac;\r\n\r\n      b = 6 * x0 - 12 * x1 + 6 * x2;\r\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\r\n      c = 3 * x1 - 3 * x0;\r\n\r\n      for (var i = 0; i < 2; ++i) {\r\n        if (i > 0) {\r\n          b = 6 * y0 - 12 * y1 + 6 * y2;\r\n          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\r\n          c = 3 * y1 - 3 * y0;\r\n        }\r\n\r\n        if (abs(a) < 1e-12) {\r\n          if (abs(b) < 1e-12) {\r\n            continue;\r\n          }\r\n          t = -c / b;\r\n          if (0 < t && t < 1) {\r\n            tvalues.push(t);\r\n          }\r\n          continue;\r\n        }\r\n        b2ac = b * b - 4 * c * a;\r\n        if (b2ac < 0) {\r\n          continue;\r\n        }\r\n        sqrtb2ac = sqrt(b2ac);\r\n        t1 = (-b + sqrtb2ac) / (2 * a);\r\n        if (0 < t1 && t1 < 1) {\r\n          tvalues.push(t1);\r\n        }\r\n        t2 = (-b - sqrtb2ac) / (2 * a);\r\n        if (0 < t2 && t2 < 1) {\r\n          tvalues.push(t2);\r\n        }\r\n      }\r\n\r\n      var x, y, j = tvalues.length, jlen = j, mt;\r\n      while (j--) {\r\n        t = tvalues[j];\r\n        mt = 1 - t;\r\n        x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\r\n        bounds[0][j] = x;\r\n\r\n        y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\r\n        bounds[1][j] = y;\r\n      }\r\n\r\n      bounds[0][jlen] = x0;\r\n      bounds[1][jlen] = y0;\r\n      bounds[0][jlen + 1] = x3;\r\n      bounds[1][jlen + 1] = y3;\r\n      var result = [\r\n        {\r\n          x: min.apply(null, bounds[0]),\r\n          y: min.apply(null, bounds[1])\r\n        },\r\n        {\r\n          x: max.apply(null, bounds[0]),\r\n          y: max.apply(null, bounds[1])\r\n        }\r\n      ];\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        fabric.boundsOfCurveCache[argsString] = result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Invokes method on all items in a given array\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} method Name of a method to invoke\r\n     * @return {Array}\r\n     */\r\n    function invoke(array, method) {\r\n      var args = slice.call(arguments, 2), result = [];\r\n      for (var i = 0, len = array.length; i < len; i++) {\r\n        result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Finds maximum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function max(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 >= value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Finds minimum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function min(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 < value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function fill(array, value) {\r\n      var k = array.length;\r\n      while (k--) {\r\n        array[k] = value;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function find(array, byProperty, condition) {\r\n      if (!array || array.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var i = array.length - 1,\r\n          result = byProperty ? array[i][byProperty] : array[i];\r\n      if (byProperty) {\r\n        while (i--) {\r\n          if (condition(array[i][byProperty], result)) {\r\n            result = array[i][byProperty];\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        while (i--) {\r\n          if (condition(array[i], result)) {\r\n            result = array[i];\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.util.array\r\n     */\r\n    fabric.util.array = {\r\n      fill: fill,\r\n      invoke: invoke,\r\n      min: min,\r\n      max: max\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n    /**\r\n     * Copies all enumerable properties of one js object to another\r\n     * this does not and cannot compete with generic utils.\r\n     * Does not clone or extend fabric.Object subclasses.\r\n     * This is mostly for internal use and has extra handling for fabricJS objects\r\n     * it skips the canvas property in deep cloning.\r\n     * @memberOf fabric.util.object\r\n     * @param {Object} destination Where to copy to\r\n     * @param {Object} source Where to copy from\r\n     * @return {Object}\r\n     */\r\n\r\n    function extend(destination, source, deep) {\r\n      // JScript DontEnum bug is not taken care of\r\n      // the deep clone is for internal use, is not meant to avoid\r\n      // javascript traps or cloning html element or self referenced objects.\r\n      if (deep) {\r\n        if (!fabric.isLikelyNode && source instanceof Element) {\r\n          // avoid cloning deep images, canvases,\r\n          destination = source;\r\n        }\r\n        else if (source instanceof Array) {\r\n          destination = [];\r\n          for (var i = 0, len = source.length; i < len; i++) {\r\n            destination[i] = extend({ }, source[i], deep);\r\n          }\r\n        }\r\n        else if (source && typeof source === 'object') {\r\n          for (var property in source) {\r\n            if (property === 'canvas') {\r\n              destination[property] = extend({ }, source[property]);\r\n            }\r\n            else if (source.hasOwnProperty(property)) {\r\n              destination[property] = extend({ }, source[property], deep);\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          // this sounds odd for an extend but is ok for recursive use\r\n          destination = source;\r\n        }\r\n      }\r\n      else {\r\n        for (var property in source) {\r\n          destination[property] = source[property];\r\n        }\r\n      }\r\n      return destination;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty object and copies all enumerable properties of another object to it\r\n     * @memberOf fabric.util.object\r\n     * TODO: this function return an empty object if you try to clone null\r\n     * @param {Object} object Object to clone\r\n     * @return {Object}\r\n     */\r\n    function clone(object, deep) {\r\n      return extend({ }, object, deep);\r\n    }\r\n\r\n    /** @namespace fabric.util.object */\r\n    fabric.util.object = {\r\n      extend: extend,\r\n      clone: clone\r\n    };\r\n    fabric.util.object.extend(fabric.util, fabric.Observable);\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * Camelizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to camelize\r\n     * @return {String} Camelized version of a string\r\n     */\r\n    function camelize(string) {\r\n      return string.replace(/-+(.)?/g, function(match, character) {\r\n        return character ? character.toUpperCase() : '';\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Capitalizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to capitalize\r\n     * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\r\n     * and other letters stay untouched, if false first letter is capitalized\r\n     * and other letters are converted to lowercase.\r\n     * @return {String} Capitalized version of a string\r\n     */\r\n    function capitalize(string, firstLetterOnly) {\r\n      return string.charAt(0).toUpperCase() +\r\n        (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Escapes XML in a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to escape\r\n     * @return {String} Escaped version of a string\r\n     */\r\n    function escapeXml(string) {\r\n      return string.replace(/&/g, '&amp;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&apos;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n    }\r\n\r\n    /**\r\n     * Divide a string in the user perceived single units\r\n     * @memberOf fabric.util.string\r\n     * @param {String} textstring String to escape\r\n     * @return {Array} array containing the graphemes\r\n     */\r\n    function graphemeSplit(textstring) {\r\n      var i = 0, chr, graphemes = [];\r\n      for (i = 0, chr; i < textstring.length; i++) {\r\n        if ((chr = getWholeChar(textstring, i)) === false) {\r\n          continue;\r\n        }\r\n        graphemes.push(chr);\r\n      }\r\n      return graphemes;\r\n    }\r\n\r\n    // taken from mdn in the charAt doc page.\r\n    function getWholeChar(str, i) {\r\n      var code = str.charCodeAt(i);\r\n\r\n      if (isNaN(code)) {\r\n        return ''; // Position not found\r\n      }\r\n      if (code < 0xD800 || code > 0xDFFF) {\r\n        return str.charAt(i);\r\n      }\r\n\r\n      // High surrogate (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        if (str.length <= (i + 1)) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        var next = str.charCodeAt(i + 1);\r\n        if (0xDC00 > next || next > 0xDFFF) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        return str.charAt(i) + str.charAt(i + 1);\r\n      }\r\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\r\n      if (i === 0) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      var prev = str.charCodeAt(i - 1);\r\n\r\n      // (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 > prev || prev > 0xDBFF) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      // We can pass over low surrogates now as the second component\r\n      // in a pair which we have already processed\r\n      return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * String utilities\r\n     * @namespace fabric.util.string\r\n     */\r\n    fabric.util.string = {\r\n      camelize: camelize,\r\n      capitalize: capitalize,\r\n      escapeXml: escapeXml,\r\n      graphemeSplit: graphemeSplit\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice, emptyFunction = function() { },\r\n\r\n        IS_DONTENUM_BUGGY = (function() {\r\n          for (var p in { toString: 1 }) {\r\n            if (p === 'toString') {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        })(),\r\n\r\n        /** @ignore */\r\n        addMethods = function(klass, source, parent) {\r\n          for (var property in source) {\r\n\r\n            if (property in klass.prototype &&\r\n                typeof klass.prototype[property] === 'function' &&\r\n                (source[property] + '').indexOf('callSuper') > -1) {\r\n\r\n              klass.prototype[property] = (function(property) {\r\n                return function() {\r\n\r\n                  var superclass = this.constructor.superclass;\r\n                  this.constructor.superclass = parent;\r\n                  var returnValue = source[property].apply(this, arguments);\r\n                  this.constructor.superclass = superclass;\r\n\r\n                  if (property !== 'initialize') {\r\n                    return returnValue;\r\n                  }\r\n                };\r\n              })(property);\r\n            }\r\n            else {\r\n              klass.prototype[property] = source[property];\r\n            }\r\n\r\n            if (IS_DONTENUM_BUGGY) {\r\n              if (source.toString !== Object.prototype.toString) {\r\n                klass.prototype.toString = source.toString;\r\n              }\r\n              if (source.valueOf !== Object.prototype.valueOf) {\r\n                klass.prototype.valueOf = source.valueOf;\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n    function Subclass() { }\r\n\r\n    function callSuper(methodName) {\r\n      var parentMethod = null,\r\n          _this = this;\r\n\r\n      // climb prototype chain to find method not equal to callee's method\r\n      while (_this.constructor.superclass) {\r\n        var superClassMethod = _this.constructor.superclass.prototype[methodName];\r\n        if (_this[methodName] !== superClassMethod) {\r\n          parentMethod = superClassMethod;\r\n          break;\r\n        }\r\n        // eslint-disable-next-line\r\n        _this = _this.constructor.superclass.prototype;\r\n      }\r\n\r\n      if (!parentMethod) {\r\n        return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\r\n      }\r\n\r\n      return (arguments.length > 1)\r\n        ? parentMethod.apply(this, slice.call(arguments, 1))\r\n        : parentMethod.call(this);\r\n    }\r\n\r\n    /**\r\n     * Helper for creation of \"classes\".\r\n     * @memberOf fabric.util\r\n     * @param {Function} [parent] optional \"Class\" to inherit from\r\n     * @param {Object} [properties] Properties shared by all instances of this class\r\n     *                  (be careful modifying objects defined here as this would affect all instances)\r\n     */\r\n    function createClass() {\r\n      var parent = null,\r\n          properties = slice.call(arguments, 0);\r\n\r\n      if (typeof properties[0] === 'function') {\r\n        parent = properties.shift();\r\n      }\r\n      function klass() {\r\n        this.initialize.apply(this, arguments);\r\n      }\r\n\r\n      klass.superclass = parent;\r\n      klass.subclasses = [];\r\n\r\n      if (parent) {\r\n        Subclass.prototype = parent.prototype;\r\n        klass.prototype = new Subclass();\r\n        parent.subclasses.push(klass);\r\n      }\r\n      for (var i = 0, length = properties.length; i < length; i++) {\r\n        addMethods(klass, properties[i], parent);\r\n      }\r\n      if (!klass.prototype.initialize) {\r\n        klass.prototype.initialize = emptyFunction;\r\n      }\r\n      klass.prototype.constructor = klass;\r\n      klass.prototype.callSuper = callSuper;\r\n      return klass;\r\n    }\r\n\r\n    fabric.util.createClass = createClass;\r\n  })();\r\n\r\n\r\n  (function () {\r\n    // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\r\n    var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent;\r\n    /**\r\n     * Adds an event listener to an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.addListener = function(element, eventName, handler, options) {\r\n      element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener from an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.removeListener = function(element, eventName, handler, options) {\r\n      element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n    };\r\n\r\n    function getTouchInfo(event) {\r\n      var touchProp = event.changedTouches;\r\n      if (touchProp && touchProp[0]) {\r\n        return touchProp[0];\r\n      }\r\n      return event;\r\n    }\r\n\r\n    fabric.util.getPointer = function(event) {\r\n      var element = event.target,\r\n          scroll = fabric.util.getScrollLeftTop(element),\r\n          _evt = getTouchInfo(event);\r\n      return {\r\n        x: _evt.clientX + scroll.left,\r\n        y: _evt.clientY + scroll.top\r\n      };\r\n    };\r\n  })();\r\n\r\n\r\n  (function () {\r\n\r\n    /**\r\n     * Cross-browser wrapper for setting element's style\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {Object} styles\r\n     * @return {HTMLElement} Element that was passed as a first argument\r\n     */\r\n    function setStyle(element, styles) {\r\n      var elementStyle = element.style;\r\n      if (!elementStyle) {\r\n        return element;\r\n      }\r\n      if (typeof styles === 'string') {\r\n        element.style.cssText += ';' + styles;\r\n        return styles.indexOf('opacity') > -1\r\n          ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\r\n          : element;\r\n      }\r\n      for (var property in styles) {\r\n        if (property === 'opacity') {\r\n          setOpacity(element, styles[property]);\r\n        }\r\n        else {\r\n          var normalizedProperty = (property === 'float' || property === 'cssFloat')\r\n            ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\r\n            : property;\r\n          elementStyle[normalizedProperty] = styles[property];\r\n        }\r\n      }\r\n      return element;\r\n    }\r\n\r\n    var parseEl = fabric.document.createElement('div'),\r\n        supportsOpacity = typeof parseEl.style.opacity === 'string',\r\n        supportsFilters = typeof parseEl.style.filter === 'string',\r\n        reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\r\n\r\n        /** @ignore */\r\n        setOpacity = function (element) { return element; };\r\n\r\n    if (supportsOpacity) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        element.style.opacity = value;\r\n        return element;\r\n      };\r\n    }\r\n    else if (supportsFilters) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        var es = element.style;\r\n        if (element.currentStyle && !element.currentStyle.hasLayout) {\r\n          es.zoom = 1;\r\n        }\r\n        if (reOpacity.test(es.filter)) {\r\n          value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\r\n          es.filter = es.filter.replace(reOpacity, value);\r\n        }\r\n        else {\r\n          es.filter += ' alpha(opacity=' + (value * 100) + ')';\r\n        }\r\n        return element;\r\n      };\r\n    }\r\n\r\n    fabric.util.setStyle = setStyle;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var _slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Takes id and returns an element with that id (if one exists in a document)\r\n     * @memberOf fabric.util\r\n     * @param {String|HTMLElement} id\r\n     * @return {HTMLElement|null}\r\n     */\r\n    function getById(id) {\r\n      return typeof id === 'string' ? fabric.document.getElementById(id) : id;\r\n    }\r\n\r\n    var sliceCanConvertNodelists,\r\n        /**\r\n         * Converts an array-like object (e.g. arguments or NodeList) to an array\r\n         * @memberOf fabric.util\r\n         * @param {Object} arrayLike\r\n         * @return {Array}\r\n         */\r\n        toArray = function(arrayLike) {\r\n          return _slice.call(arrayLike, 0);\r\n        };\r\n\r\n    try {\r\n      sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\r\n    }\r\n    catch (err) { }\r\n\r\n    if (!sliceCanConvertNodelists) {\r\n      toArray = function(arrayLike) {\r\n        var arr = new Array(arrayLike.length), i = arrayLike.length;\r\n        while (i--) {\r\n          arr[i] = arrayLike[i];\r\n        }\r\n        return arr;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates specified element with specified attributes\r\n     * @memberOf fabric.util\r\n     * @param {String} tagName Type of an element to create\r\n     * @param {Object} [attributes] Attributes to set on an element\r\n     * @return {HTMLElement} Newly created element\r\n     */\r\n    function makeElement(tagName, attributes) {\r\n      var el = fabric.document.createElement(tagName);\r\n      for (var prop in attributes) {\r\n        if (prop === 'class') {\r\n          el.className = attributes[prop];\r\n        }\r\n        else if (prop === 'for') {\r\n          el.htmlFor = attributes[prop];\r\n        }\r\n        else {\r\n          el.setAttribute(prop, attributes[prop]);\r\n        }\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Adds class to an element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to add class to\r\n     * @param {String} className Class to add to an element\r\n     */\r\n    function addClass(element, className) {\r\n      if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\r\n        element.className += (element.className ? ' ' : '') + className;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Wraps element with another element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to wrap\r\n     * @param {HTMLElement|String} wrapper Element to wrap with\r\n     * @param {Object} [attributes] Attributes to set on a wrapper\r\n     * @return {HTMLElement} wrapper\r\n     */\r\n    function wrapElement(element, wrapper, attributes) {\r\n      if (typeof wrapper === 'string') {\r\n        wrapper = makeElement(wrapper, attributes);\r\n      }\r\n      if (element.parentNode) {\r\n        element.parentNode.replaceChild(wrapper, element);\r\n      }\r\n      wrapper.appendChild(element);\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Returns element scroll offsets\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to operate on\r\n     * @return {Object} Object with left/top values\r\n     */\r\n    function getScrollLeftTop(element) {\r\n\r\n      var left = 0,\r\n          top = 0,\r\n          docElement = fabric.document.documentElement,\r\n          body = fabric.document.body || {\r\n            scrollLeft: 0, scrollTop: 0\r\n          };\r\n\r\n      // While loop checks (and then sets element to) .parentNode OR .host\r\n      //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\r\n      //  but the .parentNode of a root ShadowDOM node will always be null, instead\r\n      //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\r\n      while (element && (element.parentNode || element.host)) {\r\n\r\n        // Set element to element parent, or 'host' in case of ShadowDOM\r\n        element = element.parentNode || element.host;\r\n\r\n        if (element === fabric.document) {\r\n          left = body.scrollLeft || docElement.scrollLeft || 0;\r\n          top = body.scrollTop ||  docElement.scrollTop || 0;\r\n        }\r\n        else {\r\n          left += element.scrollLeft || 0;\r\n          top += element.scrollTop || 0;\r\n        }\r\n\r\n        if (element.nodeType === 1 && element.style.position === 'fixed') {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return { left: left, top: top };\r\n    }\r\n\r\n    /**\r\n     * Returns offset for a given element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get offset for\r\n     * @return {Object} Object with \"left\" and \"top\" properties\r\n     */\r\n    function getElementOffset(element) {\r\n      var docElem,\r\n          doc = element && element.ownerDocument,\r\n          box = { left: 0, top: 0 },\r\n          offset = { left: 0, top: 0 },\r\n          scrollLeftTop,\r\n          offsetAttributes = {\r\n            borderLeftWidth: 'left',\r\n            borderTopWidth:  'top',\r\n            paddingLeft:     'left',\r\n            paddingTop:      'top'\r\n          };\r\n\r\n      if (!doc) {\r\n        return offset;\r\n      }\r\n\r\n      for (var attr in offsetAttributes) {\r\n        offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\r\n      }\r\n\r\n      docElem = doc.documentElement;\r\n      if ( typeof element.getBoundingClientRect !== 'undefined' ) {\r\n        box = element.getBoundingClientRect();\r\n      }\r\n\r\n      scrollLeftTop = getScrollLeftTop(element);\r\n\r\n      return {\r\n        left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\r\n        top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Returns style attribute value of a given element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get style attribute for\r\n     * @param {String} attr Style attribute to get for element\r\n     * @return {String} Style attribute value of the given element.\r\n     */\r\n    var getElementStyle;\r\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\r\n      getElementStyle = function(element, attr) {\r\n        var style = fabric.document.defaultView.getComputedStyle(element, null);\r\n        return style ? style[attr] : undefined;\r\n      };\r\n    }\r\n    else {\r\n      getElementStyle = function(element, attr) {\r\n        var value = element.style[attr];\r\n        if (!value && element.currentStyle) {\r\n          value = element.currentStyle[attr];\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n\r\n    (function () {\r\n      var style = fabric.document.documentElement.style,\r\n          selectProp = 'userSelect' in style\r\n            ? 'userSelect'\r\n            : 'MozUserSelect' in style\r\n              ? 'MozUserSelect'\r\n              : 'WebkitUserSelect' in style\r\n                ? 'WebkitUserSelect'\r\n                : 'KhtmlUserSelect' in style\r\n                  ? 'KhtmlUserSelect'\r\n                  : '';\r\n\r\n      /**\r\n       * Makes element unselectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make unselectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementUnselectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = fabric.util.falseFunction;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = 'none';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = 'on';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      /**\r\n       * Makes element selectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make selectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementSelectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = null;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = '';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = '';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      fabric.util.makeElementUnselectable = makeElementUnselectable;\r\n      fabric.util.makeElementSelectable = makeElementSelectable;\r\n    })();\r\n\r\n    (function() {\r\n\r\n      /**\r\n       * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL of a script to load\r\n       * @param {Function} callback Callback to execute when script is finished loading\r\n       */\r\n      function getScript(url, callback) {\r\n        var headEl = fabric.document.getElementsByTagName('head')[0],\r\n            scriptEl = fabric.document.createElement('script'),\r\n            loading = true;\r\n\r\n        /** @ignore */\r\n        scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\r\n          if (loading) {\r\n            if (typeof this.readyState === 'string' &&\r\n                this.readyState !== 'loaded' &&\r\n                this.readyState !== 'complete') {\r\n              return;\r\n            }\r\n            loading = false;\r\n            callback(e || fabric.window.event);\r\n            scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\r\n          }\r\n        };\r\n        scriptEl.src = url;\r\n        headEl.appendChild(scriptEl);\r\n        // causes issue in Opera\r\n        // headEl.removeChild(scriptEl);\r\n      }\r\n\r\n      fabric.util.getScript = getScript;\r\n    })();\r\n\r\n    function getNodeCanvas(element) {\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      return impl._canvas || impl._image;\r\n    };\r\n\r\n    function cleanUpJsdomNode(element) {\r\n      if (!fabric.isLikelyNode) {\r\n        return;\r\n      }\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      if (impl) {\r\n        impl._image = null;\r\n        impl._canvas = null;\r\n        // unsure if necessary\r\n        impl._currentSrc = null;\r\n        impl._attributes = null;\r\n        impl._classList = null;\r\n      }\r\n    }\r\n\r\n    fabric.util.getById = getById;\r\n    fabric.util.toArray = toArray;\r\n    fabric.util.makeElement = makeElement;\r\n    fabric.util.addClass = addClass;\r\n    fabric.util.wrapElement = wrapElement;\r\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\r\n    fabric.util.getElementOffset = getElementOffset;\r\n    fabric.util.getElementStyle = getElementStyle;\r\n    fabric.util.getNodeCanvas = getNodeCanvas;\r\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function addParamToUrl(url, param) {\r\n      return url + (/\\?/.test(url) ? '&' : '?') + param;\r\n    }\r\n\r\n    function emptyFn() { }\r\n\r\n    /**\r\n     * Cross-browser abstraction for sending XMLHttpRequest\r\n     * @memberOf fabric.util\r\n     * @param {String} url URL to send XMLHttpRequest to\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.method=\"GET\"]\r\n     * @param {String} [options.parameters] parameters to append to url in GET or in body\r\n     * @param {String} [options.body] body to send with POST or PUT request\r\n     * @param {Function} options.onComplete Callback to invoke when request is completed\r\n     * @return {XMLHttpRequest} request\r\n     */\r\n    function request(url, options) {\r\n      options || (options = { });\r\n\r\n      var method = options.method ? options.method.toUpperCase() : 'GET',\r\n          onComplete = options.onComplete || function() { },\r\n          xhr = new fabric.window.XMLHttpRequest(),\r\n          body = options.body || options.parameters;\r\n\r\n      /** @ignore */\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          onComplete(xhr);\r\n          xhr.onreadystatechange = emptyFn;\r\n        }\r\n      };\r\n\r\n      if (method === 'GET') {\r\n        body = null;\r\n        if (typeof options.parameters === 'string') {\r\n          url = addParamToUrl(url, options.parameters);\r\n        }\r\n      }\r\n\r\n      xhr.open(method, url, true);\r\n\r\n      if (method === 'POST' || method === 'PUT') {\r\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n      }\r\n\r\n      xhr.send(body);\r\n      return xhr;\r\n    }\r\n\r\n    fabric.util.request = request;\r\n  })();\r\n\r\n\r\n  /**\r\n   * Wrapper around `console.log` (when available)\r\n   * @param {*} [values] Values to log\r\n   */\r\n  fabric.log = console.log;\r\n\r\n  /**\r\n   * Wrapper around `console.warn` (when available)\r\n   * @param {*} [values] Values to log as a warning\r\n   */\r\n  fabric.warn = console.warn;\r\n\r\n\r\n  (function() {\r\n\r\n    function noop() {\r\n      return false;\r\n    }\r\n\r\n    function defaultEasing(t, b, c, d) {\r\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n    }\r\n\r\n    /**\r\n     * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Number} [options.startValue=0] Starting value\r\n     * @param {Number} [options.endValue=100] Ending value\r\n     * @param {Number} [options.byValue=100] Value to modify the property by\r\n     * @param {Function} [options.easing] Easing function\r\n     * @param {Number} [options.duration=500] Duration of change (in ms)\r\n     * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n     */\r\n    function animate(options) {\r\n\r\n      requestAnimFrame(function(timestamp) {\r\n        options || (options = { });\r\n\r\n        var start = timestamp || +new Date(),\r\n            duration = options.duration || 500,\r\n            finish = start + duration, time,\r\n            onChange = options.onChange || noop,\r\n            abort = options.abort || noop,\r\n            onComplete = options.onComplete || noop,\r\n            easing = options.easing || defaultEasing,\r\n            startValue = 'startValue' in options ? options.startValue : 0,\r\n            endValue = 'endValue' in options ? options.endValue : 100,\r\n            byValue = options.byValue || endValue - startValue;\r\n\r\n        options.onStart && options.onStart();\r\n\r\n        (function tick(ticktime) {\r\n          // TODO: move abort call after calculation\r\n          // and pass (current,valuePerc, timePerc) as arguments\r\n          time = ticktime || +new Date();\r\n          var currentTime = time > finish ? duration : (time - start),\r\n              timePerc = currentTime / duration,\r\n              current = easing(currentTime, startValue, byValue, duration),\r\n              valuePerc = Math.abs((current - startValue) / byValue);\r\n          if (abort()) {\r\n            onComplete(endValue, 1, 1);\r\n            return;\r\n          }\r\n          if (time > finish) {\r\n            onChange(endValue, 1, 1);\r\n            onComplete(endValue, 1, 1);\r\n            return;\r\n          }\r\n          else {\r\n            onChange(current, valuePerc, timePerc);\r\n            requestAnimFrame(tick);\r\n          }\r\n        })(start);\r\n      });\r\n    }\r\n\r\n    var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\r\n                            fabric.window.webkitRequestAnimationFrame ||\r\n                            fabric.window.mozRequestAnimationFrame    ||\r\n                            fabric.window.oRequestAnimationFrame      ||\r\n                            fabric.window.msRequestAnimationFrame     ||\r\n                            function(callback) {\r\n                              return fabric.window.setTimeout(callback, 1000 / 60);\r\n                            };\r\n\r\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\r\n\r\n    /**\r\n     * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n     * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\r\n     * @memberOf fabric.util\r\n     * @param {Function} callback Callback to invoke\r\n     * @param {DOMElement} element optional Element to associate with animation\r\n     */\r\n    function requestAnimFrame() {\r\n      return _requestAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    function cancelAnimFrame() {\r\n      return _cancelAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    fabric.util.animate = animate;\r\n    fabric.util.requestAnimFrame = requestAnimFrame;\r\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\r\n  })();\r\n\r\n\r\n  (function() {\r\n    // Calculate an in-between color. Returns a \"rgba()\" string.\r\n    // Credit: Edwin Martin <edwin@bitstorm.org>\r\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\r\n    function calculateColor(begin, end, pos) {\r\n      var color = 'rgba('\r\n          + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\r\n          + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\r\n          + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\r\n\r\n      color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\r\n      color += ')';\r\n      return color;\r\n    }\r\n\r\n    /**\r\n     * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {String} fromColor The starting color in hex or rgb(a) format.\r\n     * @param {String} toColor The starting color in hex or rgb(a) format.\r\n     * @param {Number} [duration] Duration of change (in ms).\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\r\n     * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n     */\r\n    function animateColor(fromColor, toColor, duration, options) {\r\n      var startColor = new fabric.Color(fromColor).getSource(),\r\n          endColor = new fabric.Color(toColor).getSource();\r\n\r\n      options = options || {};\r\n\r\n      fabric.util.animate(fabric.util.object.extend(options, {\r\n        duration: duration || 500,\r\n        startValue: startColor,\r\n        endValue: endColor,\r\n        byValue: endColor,\r\n        easing: function (currentTime, startValue, byValue, duration) {\r\n          var posValue = options.colorEasing\r\n            ? options.colorEasing(currentTime, duration)\r\n            : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\r\n          return calculateColor(startValue, byValue, posValue);\r\n        }\r\n      }));\r\n    }\r\n\r\n    fabric.util.animateColor = animateColor;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function normalize(a, c, p, s) {\r\n      if (a < Math.abs(c)) {\r\n        a = c;\r\n        s = p / 4;\r\n      }\r\n      else {\r\n        //handle the 0/0 case:\r\n        if (c === 0 && a === 0) {\r\n          s = p / (2 * Math.PI) * Math.asin(1);\r\n        }\r\n        else {\r\n          s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n      }\r\n      return { a: a, c: c, p: p, s: s };\r\n    }\r\n\r\n    function elastic(opts, t, d) {\r\n      return opts.a *\r\n        Math.pow(2, 10 * (t -= 1)) *\r\n        Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\r\n    }\r\n\r\n    /**\r\n     * Cubic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCubic(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Cubic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCubic(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuart(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuart(t, b, c, d) {\r\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuart(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t + b;\r\n      }\r\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuint(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuint(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuint(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInSine(t, b, c, d) {\r\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutSine(t, b, c, d) {\r\n      return c * Math.sin(t / d * (Math.PI / 2)) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutSine(t, b, c, d) {\r\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInExpo(t, b, c, d) {\r\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutExpo(t, b, c, d) {\r\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutExpo(t, b, c, d) {\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      if (t === d) {\r\n        return b + c;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\r\n      }\r\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInCirc(t, b, c, d) {\r\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCirc(t, b, c, d) {\r\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCirc(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\r\n      }\r\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return -elastic(opts, t, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d / 2;\r\n      if (t === 2) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * (0.3 * 1.5);\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      if (t < 1) {\r\n        return -0.5 * elastic(opts, t, d) + b;\r\n      }\r\n      return opts.a * Math.pow(2, -10 * (t -= 1)) *\r\n        Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBounce(t, b, c, d) {\r\n      return c - easeOutBounce (d - t, 0, c, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBounce(t, b, c, d) {\r\n      if ((t /= d) < (1 / 2.75)) {\r\n        return c * (7.5625 * t * t) + b;\r\n      }\r\n      else if (t < (2 / 2.75)) {\r\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\r\n      }\r\n      else if (t < (2.5 / 2.75)) {\r\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\r\n      }\r\n      else {\r\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBounce(t, b, c, d) {\r\n      if (t < d / 2) {\r\n        return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\r\n      }\r\n      return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\r\n    }\r\n\r\n    /**\r\n     * Easing functions\r\n     * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\r\n     * @namespace fabric.util.ease\r\n     */\r\n    fabric.util.ease = {\r\n\r\n      /**\r\n       * Quadratic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInQuad: function(t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeOutQuad: function(t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing in and out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInOutQuad: function(t, b, c, d) {\r\n        t /= (d / 2);\r\n        if (t < 1) {\r\n          return c / 2 * t * t + b;\r\n        }\r\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n      },\r\n\r\n      /**\r\n       * Cubic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInCubic: function(t, b, c, d) {\r\n        return c * (t /= d) * t * t + b;\r\n      },\r\n\r\n      easeOutCubic: easeOutCubic,\r\n      easeInOutCubic: easeInOutCubic,\r\n      easeInQuart: easeInQuart,\r\n      easeOutQuart: easeOutQuart,\r\n      easeInOutQuart: easeInOutQuart,\r\n      easeInQuint: easeInQuint,\r\n      easeOutQuint: easeOutQuint,\r\n      easeInOutQuint: easeInOutQuint,\r\n      easeInSine: easeInSine,\r\n      easeOutSine: easeOutSine,\r\n      easeInOutSine: easeInOutSine,\r\n      easeInExpo: easeInExpo,\r\n      easeOutExpo: easeOutExpo,\r\n      easeInOutExpo: easeInOutExpo,\r\n      easeInCirc: easeInCirc,\r\n      easeOutCirc: easeOutCirc,\r\n      easeInOutCirc: easeInOutCirc,\r\n      easeInElastic: easeInElastic,\r\n      easeOutElastic: easeOutElastic,\r\n      easeInOutElastic: easeInOutElastic,\r\n      easeInBack: easeInBack,\r\n      easeOutBack: easeOutBack,\r\n      easeInOutBack: easeInOutBack,\r\n      easeInBounce: easeInBounce,\r\n      easeOutBounce: easeOutBounce,\r\n      easeInOutBounce: easeInOutBounce\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * @name fabric\r\n     * @namespace\r\n     */\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        parseUnit = fabric.util.parseUnit,\r\n        multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\r\n\r\n        svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\r\n          'image', 'text'],\r\n        svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\r\n        svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\r\n        svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\r\n\r\n        attributesMap = {\r\n          cx:                   'left',\r\n          x:                    'left',\r\n          r:                    'radius',\r\n          cy:                   'top',\r\n          y:                    'top',\r\n          display:              'visible',\r\n          visibility:           'visible',\r\n          transform:            'transformMatrix',\r\n          'fill-opacity':       'fillOpacity',\r\n          'fill-rule':          'fillRule',\r\n          'font-family':        'fontFamily',\r\n          'font-size':          'fontSize',\r\n          'font-style':         'fontStyle',\r\n          'font-weight':        'fontWeight',\r\n          'letter-spacing':     'charSpacing',\r\n          'paint-order':        'paintFirst',\r\n          'stroke-dasharray':   'strokeDashArray',\r\n          'stroke-dashoffset':  'strokeDashOffset',\r\n          'stroke-linecap':     'strokeLineCap',\r\n          'stroke-linejoin':    'strokeLineJoin',\r\n          'stroke-miterlimit':  'strokeMiterLimit',\r\n          'stroke-opacity':     'strokeOpacity',\r\n          'stroke-width':       'strokeWidth',\r\n          'text-decoration':    'textDecoration',\r\n          'text-anchor':        'textAnchor',\r\n          opacity:              'opacity',\r\n          'clip-path':          'clipPath',\r\n          'clip-rule':          'clipRule',\r\n          'vector-effect':      'strokeUniform'\r\n        },\r\n\r\n        colorAttributes = {\r\n          stroke: 'strokeOpacity',\r\n          fill:   'fillOpacity'\r\n        },\r\n\r\n        fSize = 'font-size', cPath = 'clip-path';\r\n\r\n    fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\r\n    fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\r\n    fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\r\n    fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\r\n\r\n    fabric.cssRules = { };\r\n    fabric.gradientDefs = { };\r\n    fabric.clipPaths = { };\r\n\r\n    function normalizeAttr(attr) {\r\n      // transform attribute names\r\n      if (attr in attributesMap) {\r\n        return attributesMap[attr];\r\n      }\r\n      return attr;\r\n    }\r\n\r\n    function normalizeValue(attr, value, parentAttributes, fontSize) {\r\n      var isArray = Object.prototype.toString.call(value) === '[object Array]',\r\n          parsed;\r\n\r\n      if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\r\n        value = '';\r\n      }\r\n      else if (attr === 'vector-effect') {\r\n        value = value === 'non-scaling-stroke';\r\n      }\r\n      else if (attr === 'strokeDashArray') {\r\n        if (value === 'none') {\r\n          value = null;\r\n        }\r\n        else {\r\n          value = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\r\n        }\r\n      }\r\n      else if (attr === 'transformMatrix') {\r\n        if (parentAttributes && parentAttributes.transformMatrix) {\r\n          value = multiplyTransformMatrices(\r\n            parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\r\n        }\r\n        else {\r\n          value = fabric.parseTransformAttribute(value);\r\n        }\r\n      }\r\n      else if (attr === 'visible') {\r\n        value = value !== 'none' && value !== 'hidden';\r\n        // display=none on parent element always takes precedence over child element\r\n        if (parentAttributes && parentAttributes.visible === false) {\r\n          value = false;\r\n        }\r\n      }\r\n      else if (attr === 'opacity') {\r\n        value = parseFloat(value);\r\n        if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\r\n          value *= parentAttributes.opacity;\r\n        }\r\n      }\r\n      else if (attr === 'textAnchor' /* text-anchor */) {\r\n        value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\r\n      }\r\n      else if (attr === 'charSpacing') {\r\n        // parseUnit returns px and we convert it to em\r\n        parsed = parseUnit(value, fontSize) / fontSize * 1000;\r\n      }\r\n      else if (attr === 'paintFirst') {\r\n        var fillIndex = value.indexOf('fill');\r\n        var strokeIndex = value.indexOf('stroke');\r\n        var value = 'fill';\r\n        if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\r\n          value = 'stroke';\r\n        }\r\n        else if (fillIndex === -1 && strokeIndex > -1) {\r\n          value = 'stroke';\r\n        }\r\n      }\r\n      else if (attr === 'href' || attr === 'xlink:href') {\r\n        return value;\r\n      }\r\n      else {\r\n        parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\r\n      }\r\n\r\n      return (!isArray && isNaN(parsed) ? value : parsed);\r\n    }\r\n\r\n    /**\r\n      * @private\r\n      */\r\n    function getSvgRegex(arr) {\r\n      return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} attributes Array of attributes to parse\r\n     */\r\n    function _setStrokeFillOpacity(attributes) {\r\n      for (var attr in colorAttributes) {\r\n\r\n        if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\r\n          continue;\r\n        }\r\n\r\n        if (typeof attributes[attr] === 'undefined') {\r\n          if (!fabric.Object.prototype[attr]) {\r\n            continue;\r\n          }\r\n          attributes[attr] = fabric.Object.prototype[attr];\r\n        }\r\n\r\n        if (attributes[attr].indexOf('url(') === 0) {\r\n          continue;\r\n        }\r\n\r\n        var color = new fabric.Color(attributes[attr]);\r\n        attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\r\n      }\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _getMultipleNodes(doc, nodeNames) {\r\n      var nodeName, nodeArray = [], nodeList, i, len;\r\n      for (i = 0, len = nodeNames.length; i < len; i++) {\r\n        nodeName = nodeNames[i];\r\n        nodeList = doc.getElementsByTagName(nodeName);\r\n        nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\r\n      }\r\n      return nodeArray;\r\n    }\r\n\r\n    /**\r\n     * Parses \"transform\" attribute, returning an array of values\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {String} attributeValue String containing attribute value\r\n     * @return {Array} Array of 6 elements representing transformation matrix\r\n     */\r\n    fabric.parseTransformAttribute = (function() {\r\n      function rotateMatrix(matrix, args) {\r\n        var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\r\n            x = 0, y = 0;\r\n        if (args.length === 3) {\r\n          x = args[1];\r\n          y = args[2];\r\n        }\r\n\r\n        matrix[0] = cos;\r\n        matrix[1] = sin;\r\n        matrix[2] = -sin;\r\n        matrix[3] = cos;\r\n        matrix[4] = x - (cos * x - sin * y);\r\n        matrix[5] = y - (sin * x + cos * y);\r\n      }\r\n\r\n      function scaleMatrix(matrix, args) {\r\n        var multiplierX = args[0],\r\n            multiplierY = (args.length === 2) ? args[1] : args[0];\r\n\r\n        matrix[0] = multiplierX;\r\n        matrix[3] = multiplierY;\r\n      }\r\n\r\n      function skewMatrix(matrix, args, pos) {\r\n        matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\r\n      }\r\n\r\n      function translateMatrix(matrix, args) {\r\n        matrix[4] = args[0];\r\n        if (args.length === 2) {\r\n          matrix[5] = args[1];\r\n        }\r\n      }\r\n\r\n      // identity matrix\r\n      var iMatrix = fabric.iMatrix,\r\n\r\n          // == begin transform regexp\r\n          number = fabric.reNum,\r\n\r\n          commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\r\n\r\n          skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + ')' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' +\r\n                    '\\\\s*\\\\))',\r\n\r\n          transform = '(?:' +\r\n                      matrix + '|' +\r\n                      translate + '|' +\r\n                      scale + '|' +\r\n                      rotate + '|' +\r\n                      skewX + '|' +\r\n                      skewY +\r\n                      ')',\r\n\r\n          transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\r\n\r\n          transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\r\n\r\n          // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\r\n          reTransformList = new RegExp(transformList),\r\n          // == end transform regexp\r\n\r\n          reTransform = new RegExp(transform, 'g');\r\n\r\n      return function(attributeValue) {\r\n\r\n        // start with identity matrix\r\n        var matrix = iMatrix.concat(),\r\n            matrices = [];\r\n\r\n        // return if no argument was given or\r\n        // an argument does not match transform attribute regexp\r\n        if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\r\n          return matrix;\r\n        }\r\n\r\n        attributeValue.replace(reTransform, function(match) {\r\n\r\n          var m = new RegExp(transform).exec(match).filter(function (match) {\r\n                // match !== '' && match != null\r\n                return (!!match);\r\n              }),\r\n              operation = m[1],\r\n              args = m.slice(2).map(parseFloat);\r\n\r\n          switch (operation) {\r\n            case 'translate':\r\n              translateMatrix(matrix, args);\r\n              break;\r\n            case 'rotate':\r\n              args[0] = fabric.util.degreesToRadians(args[0]);\r\n              rotateMatrix(matrix, args);\r\n              break;\r\n            case 'scale':\r\n              scaleMatrix(matrix, args);\r\n              break;\r\n            case 'skewX':\r\n              skewMatrix(matrix, args, 2);\r\n              break;\r\n            case 'skewY':\r\n              skewMatrix(matrix, args, 1);\r\n              break;\r\n            case 'matrix':\r\n              matrix = args;\r\n              break;\r\n          }\r\n\r\n          // snapshot current matrix into matrices array\r\n          matrices.push(matrix.concat());\r\n          // reset\r\n          matrix = iMatrix.concat();\r\n        });\r\n\r\n        var combinedMatrix = matrices[0];\r\n        while (matrices.length > 1) {\r\n          matrices.shift();\r\n          combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\r\n        }\r\n        return combinedMatrix;\r\n      };\r\n    })();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleString(style, oStyle) {\r\n      var attr, value;\r\n      style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\r\n        var pair = chunk.split(':');\r\n\r\n        attr = pair[0].trim().toLowerCase();\r\n        value =  pair[1].trim();\r\n\r\n        oStyle[attr] = value;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleObject(style, oStyle) {\r\n      var attr, value;\r\n      for (var prop in style) {\r\n        if (typeof style[prop] === 'undefined') {\r\n          continue;\r\n        }\r\n\r\n        attr = prop.toLowerCase();\r\n        value = style[prop];\r\n\r\n        oStyle[attr] = value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function getGlobalStylesForElement(element, svgUid) {\r\n      var styles = { };\r\n      for (var rule in fabric.cssRules[svgUid]) {\r\n        if (elementMatchesRule(element, rule.split(' '))) {\r\n          for (var property in fabric.cssRules[svgUid][rule]) {\r\n            styles[property] = fabric.cssRules[svgUid][rule][property];\r\n          }\r\n        }\r\n      }\r\n      return styles;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function elementMatchesRule(element, selectors) {\r\n      var firstMatching, parentMatching = true;\r\n      //start from rightmost selector.\r\n      firstMatching = selectorMatches(element, selectors.pop());\r\n      if (firstMatching && selectors.length) {\r\n        parentMatching = doesSomeParentMatch(element, selectors);\r\n      }\r\n      return firstMatching && parentMatching && (selectors.length === 0);\r\n    }\r\n\r\n    function doesSomeParentMatch(element, selectors) {\r\n      var selector, parentMatching = true;\r\n      while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\r\n        if (parentMatching) {\r\n          selector = selectors.pop();\r\n        }\r\n        element = element.parentNode;\r\n        parentMatching = selectorMatches(element, selector);\r\n      }\r\n      return selectors.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function selectorMatches(element, selector) {\r\n      var nodeName = element.nodeName,\r\n          classNames = element.getAttribute('class'),\r\n          id = element.getAttribute('id'), matcher, i;\r\n      // i check if a selector matches slicing away part from it.\r\n      // if i get empty string i should match\r\n      matcher = new RegExp('^' + nodeName, 'i');\r\n      selector = selector.replace(matcher, '');\r\n      if (id && selector.length) {\r\n        matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\r\n        selector = selector.replace(matcher, '');\r\n      }\r\n      if (classNames && selector.length) {\r\n        classNames = classNames.split(' ');\r\n        for (i = classNames.length; i--;) {\r\n          matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\r\n          selector = selector.replace(matcher, '');\r\n        }\r\n      }\r\n      return selector.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * to support IE8 missing getElementById on SVGdocument and on node xmlDOM\r\n     */\r\n    function elementById(doc, id) {\r\n      var el;\r\n      doc.getElementById && (el = doc.getElementById(id));\r\n      if (el) {\r\n        return el;\r\n      }\r\n      var node, i, len, nodelist = doc.getElementsByTagName('*');\r\n      for (i = 0, len = nodelist.length; i < len; i++) {\r\n        node = nodelist[i];\r\n        if (id === node.getAttribute('id')) {\r\n          return node;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseUseDirectives(doc) {\r\n      var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\r\n      while (nodelist.length && i < nodelist.length) {\r\n        var el = nodelist[i],\r\n            xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\r\n            x = el.getAttribute('x') || 0,\r\n            y = el.getAttribute('y') || 0,\r\n            el2 = elementById(doc, xlink).cloneNode(true),\r\n            currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\r\n            parentNode, oldLength = nodelist.length, attr, j, attrs, len, namespace = fabric.svgNS;\r\n\r\n        applyViewboxTransform(el2);\r\n        if (/^svg$/i.test(el2.nodeName)) {\r\n          var el3 = el2.ownerDocument.createElementNS(namespace, 'g');\r\n          for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\r\n            attr = attrs.item(j);\r\n            el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);\r\n          }\r\n          // el2.firstChild != null\r\n          while (el2.firstChild) {\r\n            el3.appendChild(el2.firstChild);\r\n          }\r\n          el2 = el3;\r\n        }\r\n\r\n        for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\r\n          attr = attrs.item(j);\r\n          if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\r\n            attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\r\n            continue;\r\n          }\r\n\r\n          if (attr.nodeName === 'transform') {\r\n            currentTrans = attr.nodeValue + ' ' + currentTrans;\r\n          }\r\n          else {\r\n            el2.setAttribute(attr.nodeName, attr.nodeValue);\r\n          }\r\n        }\r\n\r\n        el2.setAttribute('transform', currentTrans);\r\n        el2.setAttribute('instantiated_by_use', '1');\r\n        el2.removeAttribute('id');\r\n        parentNode = el.parentNode;\r\n        parentNode.replaceChild(el2, el);\r\n        // some browsers do not shorten nodelist after replaceChild (IE8)\r\n        if (nodelist.length === oldLength) {\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\r\n    // matches, e.g.: +14.56e-12, etc.\r\n    var reViewBoxAttrValue = new RegExp(\r\n      '^' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\r\n      '$'\r\n    );\r\n\r\n    /**\r\n     * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\r\n     */\r\n    function applyViewboxTransform(element) {\r\n\r\n      var viewBoxAttr = element.getAttribute('viewBox'),\r\n          scaleX = 1,\r\n          scaleY = 1,\r\n          minX = 0,\r\n          minY = 0,\r\n          viewBoxWidth, viewBoxHeight, matrix, el,\r\n          widthAttr = element.getAttribute('width'),\r\n          heightAttr = element.getAttribute('height'),\r\n          x = element.getAttribute('x') || 0,\r\n          y = element.getAttribute('y') || 0,\r\n          preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\r\n          missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\r\n                             || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\r\n          missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\r\n          toBeParsed = missingViewBox && missingDimAttr,\r\n          parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\r\n\r\n      parsedDim.width = 0;\r\n      parsedDim.height = 0;\r\n      parsedDim.toBeParsed = toBeParsed;\r\n\r\n      if (toBeParsed) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (missingViewBox) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        return parsedDim;\r\n      }\r\n      minX = -parseFloat(viewBoxAttr[1]);\r\n      minY = -parseFloat(viewBoxAttr[2]);\r\n      viewBoxWidth = parseFloat(viewBoxAttr[3]);\r\n      viewBoxHeight = parseFloat(viewBoxAttr[4]);\r\n      parsedDim.minX = minX;\r\n      parsedDim.minY = minY;\r\n      parsedDim.viewBoxWidth = viewBoxWidth;\r\n      parsedDim.viewBoxHeight = viewBoxHeight;\r\n      if (!missingDimAttr) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        scaleX = parsedDim.width / viewBoxWidth;\r\n        scaleY = parsedDim.height / viewBoxHeight;\r\n      }\r\n      else {\r\n        parsedDim.width = viewBoxWidth;\r\n        parsedDim.height = viewBoxHeight;\r\n      }\r\n\r\n      // default is to preserve aspect ratio\r\n      preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\r\n      if (preserveAspectRatio.alignX !== 'none') {\r\n        //translate all container for the effect of Mid, Min, Max\r\n        if (preserveAspectRatio.meetOrSlice === 'meet') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        if (preserveAspectRatio.meetOrSlice === 'slice') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        widthDiff = parsedDim.width - viewBoxWidth * scaleX;\r\n        heightDiff = parsedDim.height - viewBoxHeight * scaleX;\r\n        if (preserveAspectRatio.alignX === 'Mid') {\r\n          widthDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Mid') {\r\n          heightDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignX === 'Min') {\r\n          widthDiff = 0;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Min') {\r\n          heightDiff = 0;\r\n        }\r\n      }\r\n\r\n      if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (x || y) {\r\n        translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\r\n      }\r\n\r\n      matrix = translateMatrix + ' matrix(' + scaleX +\r\n                    ' 0' +\r\n                    ' 0 ' +\r\n                    scaleY + ' ' +\r\n                    (minX * scaleX + widthDiff) + ' ' +\r\n                    (minY * scaleY + heightDiff) + ') ';\r\n      parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);\r\n      if (element.nodeName === 'svg') {\r\n        el = element.ownerDocument.createElementNS(fabric.svgNS, 'g');\r\n        // element.firstChild != null\r\n        while (element.firstChild) {\r\n          el.appendChild(element.firstChild);\r\n        }\r\n        element.appendChild(el);\r\n      }\r\n      else {\r\n        el = element;\r\n        matrix = el.getAttribute('transform') + matrix;\r\n      }\r\n      el.setAttribute('transform', matrix);\r\n      return parsedDim;\r\n    }\r\n\r\n    function hasAncestorWithNodeName(element, nodeName) {\r\n      while (element && (element = element.parentNode)) {\r\n        if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\r\n          && !element.getAttribute('instantiated_by_use')) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {SVGDocument} doc SVG document to parse\r\n     * @param {Function} callback Callback to call when parsing is finished;\r\n     * It's being passed an array of elements (parsed from a document).\r\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n     * @param {Object} [parsingOptions] options for parsing document\r\n     * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\r\n     */\r\n    fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\r\n      if (!doc) {\r\n        return;\r\n      }\r\n\r\n      parseUseDirectives(doc);\r\n\r\n      var svgUid =  fabric.Object.__uid++, i, len,\r\n          options = applyViewboxTransform(doc),\r\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\r\n      options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\r\n      options.svgUid = svgUid;\r\n\r\n      if (descendants.length === 0 && fabric.isLikelyNode) {\r\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\r\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\r\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\r\n        var arr = [];\r\n        for (i = 0, len = descendants.length; i < len; i++) {\r\n          arr[i] = descendants[i];\r\n        }\r\n        descendants = arr;\r\n      }\r\n\r\n      var elements = descendants.filter(function(el) {\r\n        applyViewboxTransform(el);\r\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\r\n              !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\r\n      });\r\n\r\n      if (!elements || (elements && !elements.length)) {\r\n        callback && callback([], {});\r\n        return;\r\n      }\r\n      var clipPaths = { };\r\n      descendants.filter(function(el) {\r\n        return el.nodeName.replace('svg:', '') === 'clipPath';\r\n      }).forEach(function(el) {\r\n        var id = el.getAttribute('id');\r\n        clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function(el) {\r\n          return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));\r\n        });\r\n      });\r\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\r\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\r\n      fabric.clipPaths[svgUid] = clipPaths;\r\n      // Precedence of rules:   style > class > attribute\r\n      fabric.parseElements(elements, function(instances, elements) {\r\n        if (callback) {\r\n          callback(instances, options, elements, descendants);\r\n          delete fabric.gradientDefs[svgUid];\r\n          delete fabric.cssRules[svgUid];\r\n          delete fabric.clipPaths[svgUid];\r\n        }\r\n      }, clone(options), reviver, parsingOptions);\r\n    };\r\n\r\n    function recursivelyParseGradientsXlink(doc, gradient) {\r\n      var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],\r\n          xlinkAttr = 'xlink:href',\r\n          xLink = gradient.getAttribute(xlinkAttr).substr(1),\r\n          referencedGradient = elementById(doc, xLink);\r\n      if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\r\n        recursivelyParseGradientsXlink(doc, referencedGradient);\r\n      }\r\n      gradientsAttrs.forEach(function(attr) {\r\n        if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {\r\n          gradient.setAttribute(attr, referencedGradient.getAttribute(attr));\r\n        }\r\n      });\r\n      if (!gradient.children.length) {\r\n        var referenceClone = referencedGradient.cloneNode(true);\r\n        while (referenceClone.firstChild) {\r\n          gradient.appendChild(referenceClone.firstChild);\r\n        }\r\n      }\r\n      gradient.removeAttribute(xlinkAttr);\r\n    }\r\n\r\n    var reFontDeclaration = new RegExp(\r\n      '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\r\n      '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\r\n        fabric.reNum +\r\n      '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\r\n\r\n    extend(fabric, {\r\n      /**\r\n       * Parses a short font declaration, building adding its properties to a style object\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {String} value font declaration\r\n       * @param {Object} oStyle definition\r\n       */\r\n      parseFontDeclaration: function(value, oStyle) {\r\n        var match = value.match(reFontDeclaration);\r\n\r\n        if (!match) {\r\n          return;\r\n        }\r\n        var fontStyle = match[1],\r\n            // font variant is not used\r\n            // fontVariant = match[2],\r\n            fontWeight = match[3],\r\n            fontSize = match[4],\r\n            lineHeight = match[5],\r\n            fontFamily = match[6];\r\n\r\n        if (fontStyle) {\r\n          oStyle.fontStyle = fontStyle;\r\n        }\r\n        if (fontWeight) {\r\n          oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\r\n        }\r\n        if (fontSize) {\r\n          oStyle.fontSize = parseUnit(fontSize);\r\n        }\r\n        if (fontFamily) {\r\n          oStyle.fontFamily = fontFamily;\r\n        }\r\n        if (lineHeight) {\r\n          oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Parses an SVG document, returning all of the gradient declarations found in it\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\r\n       */\r\n      getGradientDefs: function(doc) {\r\n        var tagArray = [\r\n              'linearGradient',\r\n              'radialGradient',\r\n              'svg:linearGradient',\r\n              'svg:radialGradient'],\r\n            elList = _getMultipleNodes(doc, tagArray),\r\n            el, j = 0, gradientDefs = { };\r\n        j = elList.length;\r\n        while (j--) {\r\n          el = elList[j];\r\n          if (el.getAttribute('xlink:href')) {\r\n            recursivelyParseGradientsXlink(doc, el);\r\n          }\r\n          gradientDefs[el.getAttribute('id')] = el;\r\n        }\r\n        return gradientDefs;\r\n      },\r\n\r\n      /**\r\n       * Returns an object of attributes' name/value, given element and an array of attribute names;\r\n       * Parses parent \"g\" nodes recursively upwards.\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {DOMElement} element Element to parse\r\n       * @param {Array} attributes Array of attributes to parse\r\n       * @return {Object} object containing parsed attributes' names/values\r\n       */\r\n      parseAttributes: function(element, attributes, svgUid) {\r\n\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        var value,\r\n            parentAttributes = { },\r\n            fontSize, parentFontSize;\r\n\r\n        if (typeof svgUid === 'undefined') {\r\n          svgUid = element.getAttribute('svgUid');\r\n        }\r\n        // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\r\n        if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\r\n          parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\r\n        }\r\n\r\n        var ownAttributes = attributes.reduce(function(memo, attr) {\r\n          value = element.getAttribute(attr);\r\n          if (value) { // eslint-disable-line\r\n            memo[attr] = value;\r\n          }\r\n          return memo;\r\n        }, { });\r\n        // add values parsed from style, which take precedence over attributes\r\n        // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\r\n        var cssAttrs = extend(\r\n          getGlobalStylesForElement(element, svgUid),\r\n          fabric.parseStyleAttribute(element)\r\n        );\r\n        ownAttributes = extend(\r\n          ownAttributes,\r\n          cssAttrs\r\n        );\r\n        if (cssAttrs[cPath]) {\r\n          element.setAttribute(cPath, cssAttrs[cPath]);\r\n        }\r\n        fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n        if (ownAttributes[fSize]) {\r\n          // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\r\n          ownAttributes[fSize] = fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\r\n        }\r\n\r\n        var normalizedAttr, normalizedValue, normalizedStyle = {};\r\n        for (var attr in ownAttributes) {\r\n          normalizedAttr = normalizeAttr(attr);\r\n          normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\r\n          normalizedStyle[normalizedAttr] = normalizedValue;\r\n        }\r\n        if (normalizedStyle && normalizedStyle.font) {\r\n          fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\r\n        }\r\n        var mergedAttrs = extend(parentAttributes, normalizedStyle);\r\n        return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\r\n      },\r\n\r\n      /**\r\n       * Transforms an array of svg elements to corresponding fabric.* instances\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {Array} elements Array of elements to parse\r\n       * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       */\r\n      parseElements: function(elements, callback, options, reviver, parsingOptions) {\r\n        new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\r\n      },\r\n\r\n      /**\r\n       * Parses \"style\" attribute, retuning an object with values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {SVGElement} element Element to parse\r\n       * @return {Object} Objects with values parsed from style attribute of an element\r\n       */\r\n      parseStyleAttribute: function(element) {\r\n        var oStyle = { },\r\n            style = element.getAttribute('style');\r\n\r\n        if (!style) {\r\n          return oStyle;\r\n        }\r\n\r\n        if (typeof style === 'string') {\r\n          parseStyleString(style, oStyle);\r\n        }\r\n        else {\r\n          parseStyleObject(style, oStyle);\r\n        }\r\n\r\n        return oStyle;\r\n      },\r\n\r\n      /**\r\n       * Parses \"points\" attribute, returning an array of values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {String} points points attribute string\r\n       * @return {Array} array of points\r\n       */\r\n      parsePointsAttribute: function(points) {\r\n\r\n        // points attribute is required and must not be empty\r\n        if (!points) {\r\n          return null;\r\n        }\r\n\r\n        // replace commas with whitespace and remove bookending whitespace\r\n        points = points.replace(/,/g, ' ').trim();\r\n\r\n        points = points.split(/\\s+/);\r\n        var parsedPoints = [], i, len;\r\n\r\n        for (i = 0, len = points.length; i < len; i += 2) {\r\n          parsedPoints.push({\r\n            x: parseFloat(points[i]),\r\n            y: parseFloat(points[i + 1])\r\n          });\r\n        }\r\n\r\n        // odd number of points is an error\r\n        // if (parsedPoints.length % 2 !== 0) {\r\n        //   return null;\r\n        // }\r\n\r\n        return parsedPoints;\r\n      },\r\n\r\n      /**\r\n       * Returns CSS rules for a given SVG document\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} CSS rules of this document\r\n       */\r\n      getCSSRules: function(doc) {\r\n        var styles = doc.getElementsByTagName('style'), i, len,\r\n            allRules = { }, rules;\r\n\r\n        // very crude parsing of style contents\r\n        for (i = 0, len = styles.length; i < len; i++) {\r\n          // IE9 doesn't support textContent, but provides text instead.\r\n          var styleContents = styles[i].textContent || styles[i].text;\r\n\r\n          // remove comments\r\n          styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\r\n          if (styleContents.trim() === '') {\r\n            continue;\r\n          }\r\n          rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\r\n          rules = rules.map(function(rule) { return rule.trim(); });\r\n          // eslint-disable-next-line no-loop-func\r\n          rules.forEach(function(rule) {\r\n\r\n            var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\r\n                ruleObj = { }, declaration = match[2].trim(),\r\n                propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\r\n\r\n            for (i = 0, len = propertyValuePairs.length; i < len; i++) {\r\n              var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\r\n                  property = pair[0],\r\n                  value = pair[1];\r\n              ruleObj[property] = value;\r\n            }\r\n            rule = match[1];\r\n            rule.split(',').forEach(function(_rule) {\r\n              _rule = _rule.replace(/^svg/i, '').trim();\r\n              if (_rule === '') {\r\n                return;\r\n              }\r\n              if (allRules[_rule]) {\r\n                fabric.util.object.extend(allRules[_rule], ruleObj);\r\n              }\r\n              else {\r\n                allRules[_rule] = fabric.util.object.clone(ruleObj);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        return allRules;\r\n      },\r\n\r\n      /**\r\n       * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\r\n       * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\r\n       * @memberOf fabric\r\n       * @param {String} url\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromURL: function(url, callback, reviver, options) {\r\n\r\n        url = url.replace(/^\\n\\s*/, '').trim();\r\n        new fabric.util.request(url, {\r\n          method: 'get',\r\n          onComplete: onComplete\r\n        });\r\n\r\n        function onComplete(r) {\r\n\r\n          var xml = r.responseXML;\r\n          if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\r\n            xml = new ActiveXObject('Microsoft.XMLDOM');\r\n            xml.async = 'false';\r\n            //IE chokes on DOCTYPE\r\n            xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n          }\r\n          if (!xml || !xml.documentElement) {\r\n            callback && callback(null);\r\n            return false;\r\n          }\r\n\r\n          fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\r\n            callback && callback(results, _options, elements, allElements);\r\n          }, reviver, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\r\n       * @memberOf fabric\r\n       * @param {String} string\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromString: function(string, callback, reviver, options) {\r\n        string = string.trim();\r\n        var doc;\r\n        if (typeof fabric.window.DOMParser !== 'undefined') {\r\n          var parser = new fabric.window.DOMParser();\r\n          if (parser && parser.parseFromString) {\r\n            doc = parser.parseFromString(string, 'text/xml');\r\n          }\r\n        }\r\n        else if (fabric.window.ActiveXObject) {\r\n          doc = new ActiveXObject('Microsoft.XMLDOM');\r\n          doc.async = 'false';\r\n          // IE chokes on DOCTYPE\r\n          doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n        }\r\n\r\n        fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\r\n          callback(results, _options, elements, allElements);\r\n        }, reviver, options);\r\n      }\r\n    });\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions, doc) {\r\n    this.elements = elements;\r\n    this.callback = callback;\r\n    this.options = options;\r\n    this.reviver = reviver;\r\n    this.svgUid = (options && options.svgUid) || 0;\r\n    this.parsingOptions = parsingOptions;\r\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\r\n    this.doc = doc;\r\n  };\r\n\r\n  (function(proto) {\r\n    proto.parse = function() {\r\n      this.instances = new Array(this.elements.length);\r\n      this.numElements = this.elements.length;\r\n      this.createObjects();\r\n    };\r\n\r\n    proto.createObjects = function() {\r\n      var _this = this;\r\n      this.elements.forEach(function(element, i) {\r\n        element.setAttribute('svgUid', _this.svgUid);\r\n        _this.createObject(element, i);\r\n      });\r\n    };\r\n\r\n    proto.findTag = function(el) {\r\n      return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\r\n    };\r\n\r\n    proto.createObject = function(el, index) {\r\n      var klass = this.findTag(el);\r\n      if (klass && klass.fromElement) {\r\n        try {\r\n          klass.fromElement(el, this.createCallback(index, el), this.options);\r\n        }\r\n        catch (err) {\r\n          fabric.log(err);\r\n        }\r\n      }\r\n      else {\r\n        this.checkIfDone();\r\n      }\r\n    };\r\n\r\n    proto.createCallback = function(index, el) {\r\n      var _this = this;\r\n      return function(obj) {\r\n        var _options;\r\n        _this.resolveGradient(obj, el, 'fill');\r\n        _this.resolveGradient(obj, el, 'stroke');\r\n        if (obj instanceof fabric.Image && obj._originalElement) {\r\n          _options = obj.parsePreserveAspectRatioAttribute(el);\r\n        }\r\n        obj._removeTransformMatrix(_options);\r\n        _this.resolveClipPath(obj, el);\r\n        _this.reviver && _this.reviver(el, obj);\r\n        _this.instances[index] = obj;\r\n        _this.checkIfDone();\r\n      };\r\n    };\r\n\r\n    proto.extractPropertyDefinition = function(obj, property, storage) {\r\n      var value = obj[property], regex = this.regexUrl;\r\n      if (!regex.test(value)) {\r\n        return;\r\n      }\r\n      regex.lastIndex = 0;\r\n      var id = regex.exec(value)[1];\r\n      regex.lastIndex = 0;\r\n      return fabric[storage][this.svgUid][id];\r\n    };\r\n\r\n    proto.resolveGradient = function(obj, el, property) {\r\n      var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');\r\n      if (gradientDef) {\r\n        var opacityAttr = el.getAttribute(property + '-opacity');\r\n        var gradient = fabric.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);\r\n        obj.set(property, gradient);\r\n      }\r\n    };\r\n\r\n    proto.createClipPathCallback = function(obj, container) {\r\n      return function(_newObj) {\r\n        _newObj._removeTransformMatrix();\r\n        _newObj.fillRule = _newObj.clipRule;\r\n        container.push(_newObj);\r\n      };\r\n    };\r\n\r\n    proto.resolveClipPath = function(obj, usingElement) {\r\n      var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),\r\n          element, klass, objTransformInv, container, gTransform, options;\r\n      if (clipPath) {\r\n        container = [];\r\n        objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());\r\n        // move the clipPath tag as sibling to the real element that is using it\r\n        var clipPathTag = clipPath[0].parentNode;\r\n        var clipPathOwner = usingElement;\r\n        while (clipPathOwner.parentNode && clipPathOwner.getAttribute('clip-path') !== obj.clipPath) {\r\n          clipPathOwner = clipPathOwner.parentNode;\r\n        }\r\n        clipPathOwner.parentNode.appendChild(clipPathTag);\r\n        for (var i = 0; i < clipPath.length; i++) {\r\n          element = clipPath[i];\r\n          klass = this.findTag(element);\r\n          klass.fromElement(\r\n            element,\r\n            this.createClipPathCallback(obj, container),\r\n            this.options\r\n          );\r\n        }\r\n        if (container.length === 1) {\r\n          clipPath = container[0];\r\n        }\r\n        else {\r\n          clipPath = new fabric.Group(container);\r\n        }\r\n        gTransform = fabric.util.multiplyTransformMatrices(\r\n          objTransformInv,\r\n          clipPath.calcTransformMatrix()\r\n        );\r\n        if (clipPath.clipPath) {\r\n          this.resolveClipPath(clipPath, clipPathOwner);\r\n        }\r\n        var options = fabric.util.qrDecompose(gTransform);\r\n        clipPath.flipX = false;\r\n        clipPath.flipY = false;\r\n        clipPath.set('scaleX', options.scaleX);\r\n        clipPath.set('scaleY', options.scaleY);\r\n        clipPath.angle = options.angle;\r\n        clipPath.skewX = options.skewX;\r\n        clipPath.skewY = 0;\r\n        clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, 'center', 'center');\r\n        obj.clipPath = clipPath;\r\n      }\r\n    };\r\n\r\n    proto.checkIfDone = function() {\r\n      if (--this.numElements === 0) {\r\n        this.instances = this.instances.filter(function(el) {\r\n          // eslint-disable-next-line no-eq-null, eqeqeq\r\n          return el != null;\r\n        });\r\n        this.callback(this.instances, this.elements);\r\n      }\r\n    };\r\n  })(fabric.ElementsParser.prototype);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Point) {\r\n      fabric.warn('fabric.Point is already defined');\r\n      return;\r\n    }\r\n\r\n    fabric.Point = Point;\r\n\r\n    /**\r\n     * Point class\r\n     * @class fabric.Point\r\n     * @memberOf fabric\r\n     * @constructor\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @return {fabric.Point} thisArg\r\n     */\r\n    function Point(x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n\r\n    Point.prototype = /** @lends fabric.Point.prototype */ {\r\n\r\n      type: 'point',\r\n\r\n      constructor: Point,\r\n\r\n      /**\r\n       * Adds another point to this one and returns another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point instance with added values\r\n       */\r\n      add: function (that) {\r\n        return new Point(this.x + that.x, this.y + that.y);\r\n      },\r\n\r\n      /**\r\n       * Adds another point to this one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      addEquals: function (that) {\r\n        this.x += that.x;\r\n        this.y += that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} new Point with added value\r\n       */\r\n      scalarAdd: function (scalar) {\r\n        return new Point(this.x + scalar, this.y + scalar);\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarAddEquals: function (scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point and returns a new one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point object with subtracted values\r\n       */\r\n      subtract: function (that) {\r\n        return new Point(this.x - that.x, this.y - that.y);\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      subtractEquals: function (that) {\r\n        this.x -= that.x;\r\n        this.y -= that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      scalarSubtract: function (scalar) {\r\n        return new Point(this.x - scalar, this.y - scalar);\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarSubtractEquals: function (scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value and returns a new one\r\n       * TODO: rename in scalarMultiply in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      multiply: function (scalar) {\r\n        return new Point(this.x * scalar, this.y * scalar);\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value\r\n       * TODO: rename in scalarMultiplyEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      multiplyEquals: function (scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value and returns a new one\r\n       * TODO: rename in scalarDivide in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      divide: function (scalar) {\r\n        return new Point(this.x / scalar, this.y / scalar);\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value\r\n       * TODO: rename in scalarDivideEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      divideEquals: function (scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      eq: function (that) {\r\n        return (this.x === that.x && this.y === that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lt: function (that) {\r\n        return (this.x < that.x && this.y < that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lte: function (that) {\r\n        return (this.x <= that.x && this.y <= that.y);\r\n      },\r\n\r\n      /**\r\n\r\n       * Returns true if this point is greater another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gt: function (that) {\r\n        return (this.x > that.x && this.y > that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is greater than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gte: function (that) {\r\n        return (this.x >= that.x && this.y >= that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns new point which is the result of linear interpolation with this one and another one\r\n       * @param {fabric.Point} that\r\n       * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\r\n       * @return {fabric.Point}\r\n       */\r\n      lerp: function (that, t) {\r\n        if (typeof t === 'undefined') {\r\n          t = 0.5;\r\n        }\r\n        t = Math.max(Math.min(1, t), 0);\r\n        return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\r\n      },\r\n\r\n      /**\r\n       * Returns distance from this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {Number}\r\n       */\r\n      distanceFrom: function (that) {\r\n        var dx = this.x - that.x,\r\n            dy = this.y - that.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n      },\r\n\r\n      /**\r\n       * Returns the point between this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      midPointFrom: function (that) {\r\n        return this.lerp(that);\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the min of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      min: function (that) {\r\n        return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the max of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      max: function (that) {\r\n        return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of this point\r\n       * @return {String}\r\n       */\r\n      toString: function () {\r\n        return this.x + ',' + this.y;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point\r\n       * @param {Number} x\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setXY: function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x of this point\r\n       * @param {Number} x\r\n       * @chainable\r\n       */\r\n      setX: function (x) {\r\n        this.x = x;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets y of this point\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setY: function (y) {\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point from another point\r\n       * @param {fabric.Point} that\r\n       * @chainable\r\n       */\r\n      setFromPoint: function (that) {\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Swaps x/y of this point and another point\r\n       * @param {fabric.Point} that\r\n       */\r\n      swap: function (that) {\r\n        var x = this.x,\r\n            y = this.y;\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        that.x = x;\r\n        that.y = y;\r\n      },\r\n\r\n      /**\r\n       * return a cloned instance of the point\r\n       * @return {fabric.Point}\r\n       */\r\n      clone: function () {\r\n        return new Point(this.x, this.y);\r\n      }\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Intersection) {\r\n      fabric.warn('fabric.Intersection is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Intersection class\r\n     * @class fabric.Intersection\r\n     * @memberOf fabric\r\n     * @constructor\r\n     */\r\n    function Intersection(status) {\r\n      this.status = status;\r\n      this.points = [];\r\n    }\r\n\r\n    fabric.Intersection = Intersection;\r\n\r\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\r\n\r\n      constructor: Intersection,\r\n\r\n      /**\r\n       * Appends a point to intersection\r\n       * @param {fabric.Point} point\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoint: function (point) {\r\n        this.points.push(point);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Appends points to intersection\r\n       * @param {Array} points\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoints: function (points) {\r\n        this.points = this.points.concat(points);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Checks if one line intersects another\r\n     * TODO: rename in intersectSegmentSegment\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {fabric.Point} b1\r\n     * @param {fabric.Point} b2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\r\n      var result,\r\n          uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\r\n          ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\r\n          uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n      if (uB !== 0) {\r\n        var ua = uaT / uB,\r\n            ub = ubT / uB;\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n          result = new Intersection('Intersection');\r\n          result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\r\n        }\r\n        else {\r\n          result = new Intersection();\r\n        }\r\n      }\r\n      else {\r\n        if (uaT === 0 || ubT === 0) {\r\n          result = new Intersection('Coincident');\r\n        }\r\n        else {\r\n          result = new Intersection('Parallel');\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if line intersects polygon\r\n     * TODO: rename in intersectSegmentPolygon\r\n     * fix detection of coincident\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {Array} points\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\r\n      var result = new Intersection(),\r\n          length = points.length,\r\n          b1, b2, inter, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        b1 = points[i];\r\n        b2 = points[(i + 1) % length];\r\n        inter = Intersection.intersectLineLine(a1, a2, b1, b2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects another polygon\r\n     * @static\r\n     * @param {Array} points1\r\n     * @param {Array} points2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\r\n      var result = new Intersection(),\r\n          length = points1.length, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        var a1 = points1[i],\r\n            a2 = points1[(i + 1) % length],\r\n            inter = Intersection.intersectLinePolygon(a1, a2, points2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects rectangle\r\n     * @static\r\n     * @param {Array} points\r\n     * @param {fabric.Point} r1\r\n     * @param {fabric.Point} r2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\r\n      var min = r1.min(r2),\r\n          max = r1.max(r2),\r\n          topRight = new fabric.Point(max.x, min.y),\r\n          bottomLeft = new fabric.Point(min.x, max.y),\r\n          inter1 = Intersection.intersectLinePolygon(min, topRight, points),\r\n          inter2 = Intersection.intersectLinePolygon(topRight, max, points),\r\n          inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\r\n          inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\r\n          result = new Intersection();\r\n\r\n      result.appendPoints(inter1.points);\r\n      result.appendPoints(inter2.points);\r\n      result.appendPoints(inter3.points);\r\n      result.appendPoints(inter4.points);\r\n\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Color) {\r\n      fabric.warn('fabric.Color is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Color class\r\n     * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\r\n     * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\r\n     *\r\n     * @class fabric.Color\r\n     * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\r\n     * @return {fabric.Color} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\r\n     */\r\n    function Color(color) {\r\n      if (!color) {\r\n        this.setSource([0, 0, 0, 1]);\r\n      }\r\n      else {\r\n        this._tryParsingColor(color);\r\n      }\r\n    }\r\n\r\n    fabric.Color = Color;\r\n\r\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {String|Array} color Color value to parse\r\n       */\r\n      _tryParsingColor: function(color) {\r\n        var source;\r\n\r\n        if (color in Color.colorNameMap) {\r\n          color = Color.colorNameMap[color];\r\n        }\r\n\r\n        if (color === 'transparent') {\r\n          source = [255, 255, 255, 0];\r\n        }\r\n\r\n        if (!source) {\r\n          source = Color.sourceFromHex(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromRgb(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromHsl(color);\r\n        }\r\n        if (!source) {\r\n          //if color is not recognize let's make black as canvas does\r\n          source = [0, 0, 0, 1];\r\n        }\r\n        if (source) {\r\n          this.setSource(source);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n       * @private\r\n       * @param {Number} r Red color value\r\n       * @param {Number} g Green color value\r\n       * @param {Number} b Blue color value\r\n       * @return {Array} Hsl color\r\n       */\r\n      _rgbToHsl: function(r, g, b) {\r\n        r /= 255; g /= 255; b /= 255;\r\n\r\n        var h, s, l,\r\n            max = fabric.util.array.max([r, g, b]),\r\n            min = fabric.util.array.min([r, g, b]);\r\n\r\n        l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n          h = s = 0; // achromatic\r\n        }\r\n        else {\r\n          var d = max - min;\r\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n          switch (max) {\r\n            case r:\r\n              h = (g - b) / d + (g < b ? 6 : 0);\r\n              break;\r\n            case g:\r\n              h = (b - r) / d + 2;\r\n              break;\r\n            case b:\r\n              h = (r - g) / d + 4;\r\n              break;\r\n          }\r\n          h /= 6;\r\n        }\r\n\r\n        return [\r\n          Math.round(h * 360),\r\n          Math.round(s * 100),\r\n          Math.round(l * 100)\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @return {Array}\r\n       */\r\n      getSource: function() {\r\n        return this._source;\r\n      },\r\n\r\n      /**\r\n       * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @param {Array} source\r\n       */\r\n      setSource: function(source) {\r\n        this._source = source;\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGB format\r\n       * @return {String} ex: rgb(0-255,0-255,0-255)\r\n       */\r\n      toRgb: function() {\r\n        var source = this.getSource();\r\n        return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGBA format\r\n       * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\r\n       */\r\n      toRgba: function() {\r\n        var source = this.getSource();\r\n        return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSL format\r\n       * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\r\n       */\r\n      toHsl: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSLA format\r\n       * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\r\n       */\r\n      toHsla: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEX format\r\n       * @return {String} ex: FF5555\r\n       */\r\n      toHex: function() {\r\n        var source = this.getSource(), r, g, b;\r\n\r\n        r = source[0].toString(16);\r\n        r = (r.length === 1) ? ('0' + r) : r;\r\n\r\n        g = source[1].toString(16);\r\n        g = (g.length === 1) ? ('0' + g) : g;\r\n\r\n        b = source[2].toString(16);\r\n        b = (b.length === 1) ? ('0' + b) : b;\r\n\r\n        return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEXA format\r\n       * @return {String} ex: FF5555CC\r\n       */\r\n      toHexa: function() {\r\n        var source = this.getSource(), a;\r\n\r\n        a = Math.round(source[3] * 255);\r\n        a = a.toString(16);\r\n        a = (a.length === 1) ? ('0' + a) : a;\r\n\r\n        return this.toHex() + a.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Gets value of alpha channel for this color\r\n       * @return {Number} 0-1\r\n       */\r\n      getAlpha: function() {\r\n        return this.getSource()[3];\r\n      },\r\n\r\n      /**\r\n       * Sets value of alpha channel for this color\r\n       * @param {Number} alpha Alpha value 0-1\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      setAlpha: function(alpha) {\r\n        var source = this.getSource();\r\n        source[3] = alpha;\r\n        this.setSource(source);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its grayscale representation\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toGrayscale: function() {\r\n        var source = this.getSource(),\r\n            average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\r\n            currentAlpha = source[3];\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its black and white representation\r\n       * @param {Number} threshold\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toBlackWhite: function(threshold) {\r\n        var source = this.getSource(),\r\n            average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\r\n            currentAlpha = source[3];\r\n\r\n        threshold = threshold || 127;\r\n\r\n        average = (Number(average) < Number(threshold)) ? 0 : 255;\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Overlays color with another color\r\n       * @param {String|fabric.Color} otherColor\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      overlayWith: function(otherColor) {\r\n        if (!(otherColor instanceof Color)) {\r\n          otherColor = new Color(otherColor);\r\n        }\r\n\r\n        var result = [],\r\n            alpha = this.getAlpha(),\r\n            otherAlpha = 0.5,\r\n            source = this.getSource(),\r\n            otherSource = otherColor.getSource(), i;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\r\n        }\r\n\r\n        result[3] = alpha;\r\n        this.setSource(result);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\r\n\r\n    /**\r\n     * Map of the 148 color names with HEX code\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     * @see: https://www.w3.org/TR/css3-color/#svg-color\r\n     */\r\n    fabric.Color.colorNameMap = {\r\n      aliceblue:            '#F0F8FF',\r\n      antiquewhite:         '#FAEBD7',\r\n      aqua:                 '#00FFFF',\r\n      aquamarine:           '#7FFFD4',\r\n      azure:                '#F0FFFF',\r\n      beige:                '#F5F5DC',\r\n      bisque:               '#FFE4C4',\r\n      black:                '#000000',\r\n      blanchedalmond:       '#FFEBCD',\r\n      blue:                 '#0000FF',\r\n      blueviolet:           '#8A2BE2',\r\n      brown:                '#A52A2A',\r\n      burlywood:            '#DEB887',\r\n      cadetblue:            '#5F9EA0',\r\n      chartreuse:           '#7FFF00',\r\n      chocolate:            '#D2691E',\r\n      coral:                '#FF7F50',\r\n      cornflowerblue:       '#6495ED',\r\n      cornsilk:             '#FFF8DC',\r\n      crimson:              '#DC143C',\r\n      cyan:                 '#00FFFF',\r\n      darkblue:             '#00008B',\r\n      darkcyan:             '#008B8B',\r\n      darkgoldenrod:        '#B8860B',\r\n      darkgray:             '#A9A9A9',\r\n      darkgrey:             '#A9A9A9',\r\n      darkgreen:            '#006400',\r\n      darkkhaki:            '#BDB76B',\r\n      darkmagenta:          '#8B008B',\r\n      darkolivegreen:       '#556B2F',\r\n      darkorange:           '#FF8C00',\r\n      darkorchid:           '#9932CC',\r\n      darkred:              '#8B0000',\r\n      darksalmon:           '#E9967A',\r\n      darkseagreen:         '#8FBC8F',\r\n      darkslateblue:        '#483D8B',\r\n      darkslategray:        '#2F4F4F',\r\n      darkslategrey:        '#2F4F4F',\r\n      darkturquoise:        '#00CED1',\r\n      darkviolet:           '#9400D3',\r\n      deeppink:             '#FF1493',\r\n      deepskyblue:          '#00BFFF',\r\n      dimgray:              '#696969',\r\n      dimgrey:              '#696969',\r\n      dodgerblue:           '#1E90FF',\r\n      firebrick:            '#B22222',\r\n      floralwhite:          '#FFFAF0',\r\n      forestgreen:          '#228B22',\r\n      fuchsia:              '#FF00FF',\r\n      gainsboro:            '#DCDCDC',\r\n      ghostwhite:           '#F8F8FF',\r\n      gold:                 '#FFD700',\r\n      goldenrod:            '#DAA520',\r\n      gray:                 '#808080',\r\n      grey:                 '#808080',\r\n      green:                '#008000',\r\n      greenyellow:          '#ADFF2F',\r\n      honeydew:             '#F0FFF0',\r\n      hotpink:              '#FF69B4',\r\n      indianred:            '#CD5C5C',\r\n      indigo:               '#4B0082',\r\n      ivory:                '#FFFFF0',\r\n      khaki:                '#F0E68C',\r\n      lavender:             '#E6E6FA',\r\n      lavenderblush:        '#FFF0F5',\r\n      lawngreen:            '#7CFC00',\r\n      lemonchiffon:         '#FFFACD',\r\n      lightblue:            '#ADD8E6',\r\n      lightcoral:           '#F08080',\r\n      lightcyan:            '#E0FFFF',\r\n      lightgoldenrodyellow: '#FAFAD2',\r\n      lightgray:            '#D3D3D3',\r\n      lightgrey:            '#D3D3D3',\r\n      lightgreen:           '#90EE90',\r\n      lightpink:            '#FFB6C1',\r\n      lightsalmon:          '#FFA07A',\r\n      lightseagreen:        '#20B2AA',\r\n      lightskyblue:         '#87CEFA',\r\n      lightslategray:       '#778899',\r\n      lightslategrey:       '#778899',\r\n      lightsteelblue:       '#B0C4DE',\r\n      lightyellow:          '#FFFFE0',\r\n      lime:                 '#00FF00',\r\n      limegreen:            '#32CD32',\r\n      linen:                '#FAF0E6',\r\n      magenta:              '#FF00FF',\r\n      maroon:               '#800000',\r\n      mediumaquamarine:     '#66CDAA',\r\n      mediumblue:           '#0000CD',\r\n      mediumorchid:         '#BA55D3',\r\n      mediumpurple:         '#9370DB',\r\n      mediumseagreen:       '#3CB371',\r\n      mediumslateblue:      '#7B68EE',\r\n      mediumspringgreen:    '#00FA9A',\r\n      mediumturquoise:      '#48D1CC',\r\n      mediumvioletred:      '#C71585',\r\n      midnightblue:         '#191970',\r\n      mintcream:            '#F5FFFA',\r\n      mistyrose:            '#FFE4E1',\r\n      moccasin:             '#FFE4B5',\r\n      navajowhite:          '#FFDEAD',\r\n      navy:                 '#000080',\r\n      oldlace:              '#FDF5E6',\r\n      olive:                '#808000',\r\n      olivedrab:            '#6B8E23',\r\n      orange:               '#FFA500',\r\n      orangered:            '#FF4500',\r\n      orchid:               '#DA70D6',\r\n      palegoldenrod:        '#EEE8AA',\r\n      palegreen:            '#98FB98',\r\n      paleturquoise:        '#AFEEEE',\r\n      palevioletred:        '#DB7093',\r\n      papayawhip:           '#FFEFD5',\r\n      peachpuff:            '#FFDAB9',\r\n      peru:                 '#CD853F',\r\n      pink:                 '#FFC0CB',\r\n      plum:                 '#DDA0DD',\r\n      powderblue:           '#B0E0E6',\r\n      purple:               '#800080',\r\n      rebeccapurple:        '#663399',\r\n      red:                  '#FF0000',\r\n      rosybrown:            '#BC8F8F',\r\n      royalblue:            '#4169E1',\r\n      saddlebrown:          '#8B4513',\r\n      salmon:               '#FA8072',\r\n      sandybrown:           '#F4A460',\r\n      seagreen:             '#2E8B57',\r\n      seashell:             '#FFF5EE',\r\n      sienna:               '#A0522D',\r\n      silver:               '#C0C0C0',\r\n      skyblue:              '#87CEEB',\r\n      slateblue:            '#6A5ACD',\r\n      slategray:            '#708090',\r\n      slategrey:            '#708090',\r\n      snow:                 '#FFFAFA',\r\n      springgreen:          '#00FF7F',\r\n      steelblue:            '#4682B4',\r\n      tan:                  '#D2B48C',\r\n      teal:                 '#008080',\r\n      thistle:              '#D8BFD8',\r\n      tomato:               '#FF6347',\r\n      turquoise:            '#40E0D0',\r\n      violet:               '#EE82EE',\r\n      wheat:                '#F5DEB3',\r\n      white:                '#FFFFFF',\r\n      whitesmoke:           '#F5F5F5',\r\n      yellow:               '#FFFF00',\r\n      yellowgreen:          '#9ACD32'\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @param {Number} p\r\n     * @param {Number} q\r\n     * @param {Number} t\r\n     * @return {Number}\r\n     */\r\n    function hue2rgb(p, q, t) {\r\n      if (t < 0) {\r\n        t += 1;\r\n      }\r\n      if (t > 1) {\r\n        t -= 1;\r\n      }\r\n      if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n      }\r\n      if (t < 1 / 2) {\r\n        return q;\r\n      }\r\n      if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n      }\r\n      return p;\r\n    }\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGB format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgb = function(color) {\r\n      return Color.fromSource(Color.sourceFromRgb(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromRgb = function(color) {\r\n      var match = color.match(Color.reRGBa);\r\n      if (match) {\r\n        var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\r\n            g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\r\n            b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\r\n\r\n        return [\r\n          parseInt(r, 10),\r\n          parseInt(g, 10),\r\n          parseInt(b, 10),\r\n          match[4] ? parseFloat(match[4]) : 1\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGBA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgba = Color.fromRgb;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSL format\r\n     * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\r\n     * @memberOf fabric.Color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsl = function(color) {\r\n      return Color.fromSource(Color.sourceFromHsl(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\r\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\r\n     * @return {Array} source\r\n     * @see http://http://www.w3.org/TR/css3-color/#hsl-color\r\n     */\r\n    fabric.Color.sourceFromHsl = function(color) {\r\n      var match = color.match(Color.reHSLa);\r\n      if (!match) {\r\n        return;\r\n      }\r\n\r\n      var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\r\n          s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\r\n          l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\r\n          r, g, b;\r\n\r\n      if (s === 0) {\r\n        r = g = b = l;\r\n      }\r\n      else {\r\n        var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n            p = l * 2 - q;\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n      }\r\n\r\n      return [\r\n        Math.round(r * 255),\r\n        Math.round(g * 255),\r\n        Math.round(b * 255),\r\n        match[4] ? parseFloat(match[4]) : 1\r\n      ];\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSLA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsla = Color.fromHsl;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: FF5555\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHex = function(color) {\r\n      return Color.fromSource(Color.sourceFromHex(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color ex: FF5555 or FF5544CC (RGBa)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromHex = function(color) {\r\n      if (color.match(Color.reHex)) {\r\n        var value = color.slice(color.indexOf('#') + 1),\r\n            isShortNotation = (value.length === 3 || value.length === 4),\r\n            isRGBa = (value.length === 8 || value.length === 4),\r\n            r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\r\n            g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\r\n            b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\r\n            a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\r\n\r\n        return [\r\n          parseInt(r, 16),\r\n          parseInt(g, 16),\r\n          parseInt(b, 16),\r\n          parseFloat((parseInt(a, 16) / 255).toFixed(2))\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {Array} source\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromSource = function(source) {\r\n      var oColor = new Color();\r\n      oColor.setSource(source);\r\n      return oColor;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    /* _FROM_SVG_START_ */\r\n    function getColorStop(el, multiplier) {\r\n      var style = el.getAttribute('style'),\r\n          offset = el.getAttribute('offset') || 0,\r\n          color, colorAlpha, opacity, i;\r\n\r\n      // convert percents to absolute values\r\n      offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\r\n      offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\r\n      if (style) {\r\n        var keyValuePairs = style.split(/\\s*;\\s*/);\r\n\r\n        if (keyValuePairs[keyValuePairs.length - 1] === '') {\r\n          keyValuePairs.pop();\r\n        }\r\n\r\n        for (i = keyValuePairs.length; i--; ) {\r\n\r\n          var split = keyValuePairs[i].split(/\\s*:\\s*/),\r\n              key = split[0].trim(),\r\n              value = split[1].trim();\r\n\r\n          if (key === 'stop-color') {\r\n            color = value;\r\n          }\r\n          else if (key === 'stop-opacity') {\r\n            opacity = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!color) {\r\n        color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\r\n      }\r\n      if (!opacity) {\r\n        opacity = el.getAttribute('stop-opacity');\r\n      }\r\n\r\n      color = new fabric.Color(color);\r\n      colorAlpha = color.getAlpha();\r\n      opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\r\n      opacity *= colorAlpha * multiplier;\r\n\r\n      return {\r\n        offset: offset,\r\n        color: color.toRgb(),\r\n        opacity: opacity\r\n      };\r\n    }\r\n\r\n    function getLinearCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('x1') || 0,\r\n        y1: el.getAttribute('y1') || 0,\r\n        x2: el.getAttribute('x2') || '100%',\r\n        y2: el.getAttribute('y2') || 0\r\n      };\r\n    }\r\n\r\n    function getRadialCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\r\n        y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\r\n        r1: 0,\r\n        x2: el.getAttribute('cx') || '50%',\r\n        y2: el.getAttribute('cy') || '50%',\r\n        r2: el.getAttribute('r') || '50%'\r\n      };\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    /**\r\n     * Gradient class\r\n     * @class fabric.Gradient\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\r\n     * @see {@link fabric.Gradient#initialize} for constructor definition\r\n     */\r\n    fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\r\n\r\n      /**\r\n       * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Vertical offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * A transform matrix to apply to the gradient before painting.\r\n       * Imported from svg gradients, is not applied with the current transform in the center.\r\n       * Before this transform is applied, the origin point is at the top left corner of the object\r\n       * plus the addition of offsetY and offsetX.\r\n       * @type Number[]\r\n       * @default null\r\n       */\r\n      gradientTransform: null,\r\n\r\n      /**\r\n       * coordinates units for coords.\r\n       * If `pixels`, the number of coords are in the same unit of width / height.\r\n       * If set as `percentage` the coords are still a number, but 1 means 100% of width\r\n       * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\r\n       * allowed values pixels or percentage.\r\n       * @type String\r\n       * @default 'pixels'\r\n       */\r\n      gradientUnits: 'pixels',\r\n\r\n      /**\r\n       * Gradient type linear or radial\r\n       * @type String\r\n       * @default 'pixels'\r\n       */\r\n      type: 'linear',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} options Options object with type, coords, gradientUnits and colorStops\r\n       * @param {Object} [options.type] gradient type linear or radial\r\n       * @param {Object} [options.gradientUnits] gradient units\r\n       * @param {Object} [options.offsetX] SVG import compatibility\r\n       * @param {Object} [options.offsetY] SVG import compatibility\r\n       * @param {Object[]} options.colorStops contains the colorstops.\r\n       * @param {Object} options.coords contains the coords of the gradient\r\n       * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial\r\n       * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial\r\n       * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial\r\n       * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial\r\n       * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle\r\n       * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        options || (options = { });\r\n        options.coords || (options.coords = { });\r\n\r\n        var coords, _this = this;\r\n\r\n        // sets everything, then coords and colorstops get sets again\r\n        Object.keys(options).forEach(function(option) {\r\n          _this[option] = options[option];\r\n        });\r\n\r\n        if (this.id) {\r\n          this.id += '_' + fabric.Object.__uid++;\r\n        }\r\n        else {\r\n          this.id = fabric.Object.__uid++;\r\n        }\r\n\r\n        coords = {\r\n          x1: options.coords.x1 || 0,\r\n          y1: options.coords.y1 || 0,\r\n          x2: options.coords.x2 || 0,\r\n          y2: options.coords.y2 || 0\r\n        };\r\n\r\n        if (this.type === 'radial') {\r\n          coords.r1 = options.coords.r1 || 0;\r\n          coords.r2 = options.coords.r2 || 0;\r\n        }\r\n\r\n        this.coords = coords;\r\n        this.colorStops = options.colorStops.slice();\r\n      },\r\n\r\n      /**\r\n       * Adds another colorStop\r\n       * @param {Object} colorStop Object with offset and color\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      addColorStop: function(colorStops) {\r\n        for (var position in colorStops) {\r\n          var color = new fabric.Color(colorStops[position]);\r\n          this.colorStops.push({\r\n            offset: parseFloat(position),\r\n            color: color.toRgb(),\r\n            opacity: color.getAlpha()\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a gradient\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object}\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var object = {\r\n          type: this.type,\r\n          coords: this.coords,\r\n          colorStops: this.colorStops,\r\n          offsetX: this.offsetX,\r\n          offsetY: this.offsetY,\r\n          gradientUnits: this.gradientUnits,\r\n          gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an gradient\r\n       * @param {Object} object Object to create a gradient for\r\n       * @return {String} SVG representation of an gradient (linear/radial)\r\n       */\r\n      toSVG: function(object, options) {\r\n        var coords = clone(this.coords, true), i, len, options = options || {},\r\n            markup, commonAttributes, colorStops = clone(this.colorStops, true),\r\n            needsSwap = coords.r1 > coords.r2,\r\n            transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),\r\n            offsetX = -this.offsetX, offsetY = -this.offsetY,\r\n            withViewport = !!options.additionalTransform,\r\n            gradientUnits = this.gradientUnits === 'pixels' ? 'userSpaceOnUse' : 'objectBoundingBox';\r\n        // colorStops must be sorted ascending\r\n        colorStops.sort(function(a, b) {\r\n          return a.offset - b.offset;\r\n        });\r\n\r\n        if (gradientUnits === 'objectBoundingBox') {\r\n          offsetX /= object.width;\r\n          offsetY /= object.height;\r\n        }\r\n        else {\r\n          offsetX += object.width / 2;\r\n          offsetY += object.height / 2;\r\n        }\r\n        if (object.type === 'path') {\r\n          offsetX -= object.pathOffset.x;\r\n          offsetY -= object.pathOffset.y;\r\n        }\r\n\r\n\r\n        transform[4] -= offsetX;\r\n        transform[5] -= offsetY;\r\n\r\n        commonAttributes = 'id=\"SVGID_' + this.id +\r\n                       '\" gradientUnits=\"' + gradientUnits + '\"';\r\n        commonAttributes += ' gradientTransform=\"' + (withViewport ?\r\n          options.additionalTransform + ' ' : '') + fabric.util.matrixToSVG(transform) + '\" ';\r\n\r\n        if (this.type === 'linear') {\r\n          markup = [\r\n            '<linearGradient ',\r\n            commonAttributes,\r\n            ' x1=\"', coords.x1,\r\n            '\" y1=\"', coords.y1,\r\n            '\" x2=\"', coords.x2,\r\n            '\" y2=\"', coords.y2,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n        else if (this.type === 'radial') {\r\n          // svg radial gradient has just 1 radius. the biggest.\r\n          markup = [\r\n            '<radialGradient ',\r\n            commonAttributes,\r\n            ' cx=\"', needsSwap ? coords.x1 : coords.x2,\r\n            '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\r\n            '\" r=\"', needsSwap ? coords.r1 : coords.r2,\r\n            '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\r\n            '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n\r\n        if (this.type === 'radial') {\r\n          if (needsSwap) {\r\n            // svg goes from internal to external radius. if radius are inverted, swap color stops.\r\n            colorStops = colorStops.concat();\r\n            colorStops.reverse();\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset = 1 - colorStops[i].offset;\r\n            }\r\n          }\r\n          var minRadius = Math.min(coords.r1, coords.r2);\r\n          if (minRadius > 0) {\r\n            // i have to shift all colorStops and add new one in 0.\r\n            var maxRadius = Math.max(coords.r1, coords.r2),\r\n                percentageShift = minRadius / maxRadius;\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\r\n            }\r\n          }\r\n        }\r\n\r\n        for (i = 0, len = colorStops.length; i < len; i++) {\r\n          var colorStop = colorStops[i];\r\n          markup.push(\r\n            '<stop ',\r\n            'offset=\"', (colorStop.offset * 100) + '%',\r\n            '\" style=\"stop-color:', colorStop.color,\r\n            (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\r\n            '\"/>\\n'\r\n          );\r\n        }\r\n\r\n        markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\r\n\r\n        return markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns an instance of CanvasGradient\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {fabric.Object} object the fabric.Object for which the gradient is\r\n       * @return {CanvasGradient}\r\n       */\r\n      toLive: function(ctx, object) {\r\n        var gradient, coords = fabric.util.object.clone(this.coords), i, len,\r\n            x1 = coords.x1, y1 = coords.y1, x2 = coords.x2, y2 = coords.y2,\r\n            stops = this.colorStops;\r\n\r\n        if (!this.type) {\r\n          return;\r\n        }\r\n\r\n        if (object instanceof fabric.Text && this.gradientUnits === 'percentage') {\r\n          x1 *= object.width;\r\n          y1 *= object.height;\r\n          x2 *= object.width;\r\n          y2 *= object.height;\r\n        }\r\n        if (this.type === 'linear') {\r\n          gradient = ctx.createLinearGradient(x1, y1, x2, y2);\r\n        }\r\n        else if (this.type === 'radial') {\r\n          gradient = ctx.createRadialGradient(x1, y1, coords.r1, x2, y2, coords.r2);\r\n        }\r\n        for (i = 0, len = stops.length; i < len; i++) {\r\n          var color = stops[i].color,\r\n              opacity = stops[i].opacity,\r\n              offset = stops[i].offset;\r\n\r\n          if (typeof opacity !== 'undefined') {\r\n            color = new fabric.Color(color).setAlpha(opacity).toRgba();\r\n          }\r\n          gradient.addColorStop(offset, color);\r\n        }\r\n\r\n        return gradient;\r\n      }\r\n    });\r\n\r\n    fabric.util.object.extend(fabric.Gradient, {\r\n\r\n      /* _FROM_SVG_START_ */\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from an SVG element\r\n       * @static\r\n       * @memberOf fabric.Gradient\r\n       * @param {SVGGradientElement} el SVG gradient element\r\n       * @param {fabric.Object} instance\r\n       * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\r\n       * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly graidents\r\n       * that uses gradientUnits as 'userSpaceOnUse' and percentages.\r\n       * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg\r\n       * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg\r\n       * @param {Object.number} width width part of the svg tag if viewBox is not specified\r\n       * @param {Object.number} height height part of the svg tag if viewBox is not specified\r\n       * @return {fabric.Gradient} Gradient instance\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\r\n       */\r\n      fromElement: function(el, instance, opacityAttr, svgOptions) {\r\n        /**\r\n         *  @example:\r\n         *\r\n         *  <linearGradient id=\"linearGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\"/>\r\n         *    <stop offset=\"100%\" stop-color=\"black\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <linearGradient id=\"linearGrad2\">\r\n         *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\r\n         *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\r\n         *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *  </radialGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad2\">\r\n         *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\r\n         *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\r\n         *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\r\n         *  </radialGradient>\r\n         *\r\n         */\r\n\r\n        var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);\r\n        multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;\r\n        if (isNaN(multiplier)) {\r\n          multiplier = 1;\r\n        }\r\n\r\n        var colorStopEls = el.getElementsByTagName('stop'),\r\n            type,\r\n            gradientUnits = el.getAttribute('gradientUnits') === 'userSpaceOnUse' ?\r\n              'pixels' : 'percentage',\r\n            gradientTransform = el.getAttribute('gradientTransform') || '',\r\n            colorStops = [],\r\n            coords, i, offsetX = 0, offsetY = 0,\r\n            transformMatrix;\r\n        if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\r\n          type = 'linear';\r\n          coords = getLinearCoords(el);\r\n        }\r\n        else {\r\n          type = 'radial';\r\n          coords = getRadialCoords(el);\r\n        }\r\n\r\n        for (i = colorStopEls.length; i--; ) {\r\n          colorStops.push(getColorStop(colorStopEls[i], multiplier));\r\n        }\r\n\r\n        transformMatrix = fabric.parseTransformAttribute(gradientTransform);\r\n\r\n        __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);\r\n\r\n        if (gradientUnits === 'pixels') {\r\n          offsetX = -instance.left;\r\n          offsetY = -instance.top;\r\n        }\r\n\r\n        var gradient = new fabric.Gradient({\r\n          id: el.getAttribute('id'),\r\n          type: type,\r\n          coords: coords,\r\n          colorStops: colorStops,\r\n          gradientUnits: gradientUnits,\r\n          gradientTransform: transformMatrix,\r\n          offsetX: offsetX,\r\n          offsetY: offsetY,\r\n        });\r\n\r\n        return gradient;\r\n      },\r\n      /* _FROM_SVG_END_ */\r\n\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from its object representation\r\n       * this function is uniquely used by Object.setGradient and is deprecated with it.\r\n       * @static\r\n       * @deprecated since 3.4.0\r\n       * @memberOf fabric.Gradient\r\n       * @param {Object} obj\r\n       * @param {Object} [options] Options object\r\n       */\r\n      forObject: function(obj, options) {\r\n        options || (options = { });\r\n        __convertPercentUnitsToValues(obj, options.coords, options.gradientUnits, {\r\n          // those values are to avoid errors. this function is uniquely used by\r\n          viewBoxWidth: 100,\r\n          viewBoxHeight: 100,\r\n        });\r\n        return new fabric.Gradient(options);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {\r\n      var propValue, finalValue;\r\n      Object.keys(options).forEach(function(prop) {\r\n        propValue = options[prop];\r\n        if (propValue === 'Infinity') {\r\n          finalValue = 1;\r\n        }\r\n        else if (propValue === '-Infinity') {\r\n          finalValue = 0;\r\n        }\r\n        else {\r\n          finalValue = parseFloat(options[prop], 10);\r\n          if (typeof propValue === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(propValue)) {\r\n            finalValue *= 0.01;\r\n            if (gradientUnits === 'pixels') {\r\n              // then we need to fix those percentages here in svg parsing\r\n              if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\r\n                finalValue *= svgOptions.viewBoxWidth || svgOptions.width;\r\n              }\r\n              if (prop === 'y1' || prop === 'y2') {\r\n                finalValue *= svgOptions.viewBoxHeight || svgOptions.height;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        options[prop] = finalValue;\r\n      });\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    /**\r\n     * Pattern class\r\n     * @class fabric.Pattern\r\n     * @see {@link http://fabricjs.com/patterns|Pattern demo}\r\n     * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\r\n     * @see {@link fabric.Pattern#initialize} for constructor definition\r\n     */\r\n\r\n\r\n    fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\r\n\r\n      /**\r\n       * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @type String\r\n       * @default\r\n       */\r\n      repeat: 'repeat',\r\n\r\n      /**\r\n       * Pattern horizontal offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Pattern vertical offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * transform matrix to change the pattern, imported from svgs.\r\n       * @type Array\r\n       * @default\r\n       */\r\n      patternTransform: null,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [callback] function to invoke after callback init.\r\n       * @return {fabric.Pattern} thisArg\r\n       */\r\n      initialize: function(options, callback) {\r\n        options || (options = { });\r\n\r\n        this.id = fabric.Object.__uid++;\r\n        this.setOptions(options);\r\n        if (!options.source || (options.source && typeof options.source !== 'string')) {\r\n          callback && callback(this);\r\n          return;\r\n        }\r\n        // function string\r\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\r\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\r\n          callback && callback(this);\r\n        }\r\n        else {\r\n          // img src string\r\n          var _this = this;\r\n          this.source = fabric.util.createImage();\r\n          fabric.util.loadImage(options.source, function(img) {\r\n            _this.source = img;\r\n            callback && callback(_this);\r\n          }, null, this.crossOrigin);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a pattern\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of a pattern instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            source, object;\r\n\r\n        // callback\r\n        if (typeof this.source === 'function') {\r\n          source = String(this.source);\r\n        }\r\n        // <img> element\r\n        else if (typeof this.source.src === 'string') {\r\n          source = this.source.src;\r\n        }\r\n        // <canvas> element\r\n        else if (typeof this.source === 'object' && this.source.toDataURL) {\r\n          source = this.source.toDataURL();\r\n        }\r\n\r\n        object = {\r\n          type: 'pattern',\r\n          source: source,\r\n          repeat: this.repeat,\r\n          crossOrigin: this.crossOrigin,\r\n          offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\r\n          offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\r\n          patternTransform: this.patternTransform ? this.patternTransform.concat() : null\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a pattern\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a pattern\r\n       */\r\n      toSVG: function(object) {\r\n        var patternSource = typeof this.source === 'function' ? this.source() : this.source,\r\n            patternWidth = patternSource.width / object.width,\r\n            patternHeight = patternSource.height / object.height,\r\n            patternOffsetX = this.offsetX / object.width,\r\n            patternOffsetY = this.offsetY / object.height,\r\n            patternImgSrc = '';\r\n        if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\r\n          patternHeight = 1;\r\n          if (patternOffsetY) {\r\n            patternHeight += Math.abs(patternOffsetY);\r\n          }\r\n        }\r\n        if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\r\n          patternWidth = 1;\r\n          if (patternOffsetX) {\r\n            patternWidth += Math.abs(patternOffsetX);\r\n          }\r\n\r\n        }\r\n        if (patternSource.src) {\r\n          patternImgSrc = patternSource.src;\r\n        }\r\n        else if (patternSource.toDataURL) {\r\n          patternImgSrc = patternSource.toDataURL();\r\n        }\r\n\r\n        return '<pattern id=\"SVGID_' + this.id +\r\n                      '\" x=\"' + patternOffsetX +\r\n                      '\" y=\"' + patternOffsetY +\r\n                      '\" width=\"' + patternWidth +\r\n                      '\" height=\"' + patternHeight + '\">\\n' +\r\n                 '<image x=\"0\" y=\"0\"' +\r\n                        ' width=\"' + patternSource.width +\r\n                        '\" height=\"' + patternSource.height +\r\n                        '\" xlink:href=\"' + patternImgSrc +\r\n                 '\"></image>\\n' +\r\n               '</pattern>\\n';\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      setOptions: function(options) {\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns an instance of CanvasPattern\r\n       * @param {CanvasRenderingContext2D} ctx Context to create pattern\r\n       * @return {CanvasPattern}\r\n       */\r\n      toLive: function(ctx) {\r\n        var source = typeof this.source === 'function' ? this.source() : this.source;\r\n\r\n        // if the image failed to load, return, and allow rest to continue loading\r\n        if (!source) {\r\n          return '';\r\n        }\r\n\r\n        // if an image\r\n        if (typeof source.src !== 'undefined') {\r\n          if (!source.complete) {\r\n            return '';\r\n          }\r\n          if (source.naturalWidth === 0 || source.naturalHeight === 0) {\r\n            return '';\r\n          }\r\n        }\r\n        return ctx.createPattern(source, this.repeat);\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Shadow) {\r\n      fabric.warn('fabric.Shadow is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Shadow class\r\n     * @class fabric.Shadow\r\n     * @see {@link http://fabricjs.com/shadows|Shadow demo}\r\n     * @see {@link fabric.Shadow#initialize} for constructor definition\r\n     */\r\n    fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\r\n\r\n      /**\r\n       * Shadow color\r\n       * @type String\r\n       * @default\r\n       */\r\n      color: 'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Shadow blur\r\n       * @type Number\r\n       */\r\n      blur: 0,\r\n\r\n      /**\r\n       * Shadow horizontal offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Shadow vertical offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * Whether the shadow should affect stroke operations\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      affectStroke: false,\r\n\r\n      /**\r\n       * Indicates whether toObject should include default values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * When `false`, the shadow will scale with the object.\r\n       * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\r\n       * default to false\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      nonScaling: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\r\n       * @return {fabric.Shadow} thisArg\r\n       */\r\n      initialize: function(options) {\r\n\r\n        if (typeof options === 'string') {\r\n          options = this._parseShadow(options);\r\n        }\r\n\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n\r\n        this.id = fabric.Object.__uid++;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} shadow Shadow value to parse\r\n       * @return {Object} Shadow object with color, offsetX, offsetY and blur\r\n       */\r\n      _parseShadow: function(shadow) {\r\n        var shadowStr = shadow.trim(),\r\n            offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\r\n            color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\r\n\r\n        return {\r\n          color: color.trim(),\r\n          offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\r\n          offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\r\n          blur: parseInt(offsetsAndBlur[3], 10) || 0\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\r\n       * @return {String} Returns CSS3 text-shadow declaration\r\n       */\r\n      toString: function() {\r\n        return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a shadow\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a shadow\r\n       */\r\n      toSVG: function(object) {\r\n        var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            offset = fabric.util.rotateVector(\r\n              { x: this.offsetX, y: this.offsetY },\r\n              fabric.util.degreesToRadians(-object.angle)),\r\n            BLUR_BOX = 20, color = new fabric.Color(this.color);\r\n\r\n        if (object.width && object.height) {\r\n          //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\r\n          // we add some extra space to filter box to contain the blur ( 20 )\r\n          fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n          fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n        }\r\n        if (object.flipX) {\r\n          offset.x *= -1;\r\n        }\r\n        if (object.flipY) {\r\n          offset.y *= -1;\r\n        }\r\n\r\n        return (\r\n          '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\r\n            'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\r\n            '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\r\n              toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\r\n            '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\r\n            '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\r\n            '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\r\n            '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\r\n            '\\t<feMerge>\\n' +\r\n              '\\t\\t<feMergeNode></feMergeNode>\\n' +\r\n              '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\r\n            '\\t</feMerge>\\n' +\r\n          '</filter>\\n');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns object representation of a shadow\r\n       * @return {Object} Object representation of a shadow instance\r\n       */\r\n      toObject: function() {\r\n        if (this.includeDefaultValues) {\r\n          return {\r\n            color: this.color,\r\n            blur: this.blur,\r\n            offsetX: this.offsetX,\r\n            offsetY: this.offsetY,\r\n            affectStroke: this.affectStroke,\r\n            nonScaling: this.nonScaling\r\n          };\r\n        }\r\n        var obj = { }, proto = fabric.Shadow.prototype;\r\n\r\n        ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke', 'nonScaling'].forEach(function(prop) {\r\n          if (this[prop] !== proto[prop]) {\r\n            obj[prop] = this[prop];\r\n          }\r\n        }, this);\r\n\r\n        return obj;\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Shadow\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function () {\r\n\r\n    'use strict';\r\n\r\n    if (fabric.StaticCanvas) {\r\n      fabric.warn('fabric.StaticCanvas is already defined.');\r\n      return;\r\n    }\r\n\r\n    // aliases for faster resolution\r\n    var extend = fabric.util.object.extend,\r\n        getElementOffset = fabric.util.getElementOffset,\r\n        removeFromArray = fabric.util.removeFromArray,\r\n        toFixed = fabric.util.toFixed,\r\n        transformPoint = fabric.util.transformPoint,\r\n        invertTransform = fabric.util.invertTransform,\r\n        getNodeCanvas = fabric.util.getNodeCanvas,\r\n        createCanvasElement = fabric.util.createCanvasElement,\r\n\r\n        CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\r\n\r\n    /**\r\n     * Static canvas class\r\n     * @class fabric.StaticCanvas\r\n     * @mixes fabric.Collection\r\n     * @mixes fabric.Observable\r\n     * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\r\n     * @see {@link fabric.StaticCanvas#initialize} for constructor definition\r\n     * @fires before:render\r\n     * @fires after:render\r\n     * @fires canvas:cleared\r\n     * @fires object:added\r\n     * @fires object:removed\r\n     */\r\n    fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n      },\r\n\r\n      /**\r\n       * Background color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      backgroundColor: '',\r\n\r\n      /**\r\n       * Background image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\r\n       * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\r\n       * since 2.4.0 image caching is active, please when putting an image as background, add to the\r\n       * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n       * vale. As an alternative you can disable image objectCaching\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      backgroundImage: null,\r\n\r\n      /**\r\n       * Overlay color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\r\n       * @since 1.3.9\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      overlayColor: '',\r\n\r\n      /**\r\n       * Overlay image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\r\n       * and \"overlayImageTop\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\r\n       * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\r\n       * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n       * vale. As an alternative you can disable image objectCaching\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      overlayImage: null,\r\n\r\n      /**\r\n       * Indicates whether toObject/toDatalessObject should include default values\r\n       * if set to false, takes precedence over the object value.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * Indicates whether objects' state should be saved\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      stateful: false,\r\n\r\n      /**\r\n       * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\r\n       * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\r\n       * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\r\n       * since the renders are quequed and executed one per frame.\r\n       * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\r\n       * Left default to true to do not break documentation and old app, fiddles.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      renderOnAddRemove: true,\r\n\r\n      /**\r\n       * Function that determines clipping of entire canvas area\r\n       * Being passed context as first argument.\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       * @default\r\n       */\r\n      clipTo: null,\r\n\r\n      /**\r\n       * Indicates whether object controls (borders/controls) are rendered above overlay image\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      controlsAboveOverlay: false,\r\n\r\n      /**\r\n       * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      allowTouchScrolling: false,\r\n\r\n      /**\r\n       * Indicates whether this canvas will use image smoothing, this is on by default in browsers\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      imageSmoothingEnabled: true,\r\n\r\n      /**\r\n       * The transformation (in the format of Canvas transform) which focuses the viewport\r\n       * @type Array\r\n       * @default\r\n       */\r\n      viewportTransform: fabric.iMatrix.concat(),\r\n\r\n      /**\r\n       * if set to false background image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      backgroundVpt: true,\r\n\r\n      /**\r\n       * if set to false overlya image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overlayVpt: true,\r\n\r\n      /**\r\n       * Callback; invoked right before object is about to be scaled/rotated\r\n       * @deprecated since 2.3.0\r\n       * Use before:transform event\r\n       */\r\n      onBeforeScaleRotate: function () {\r\n        /* NOOP */\r\n      },\r\n\r\n      /**\r\n       * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      enableRetinaScaling: true,\r\n\r\n      /**\r\n       * Describe canvas element extension over design\r\n       * properties are tl,tr,bl,br.\r\n       * if canvas is not zoomed/panned those points are the four corner of canvas\r\n       * if canvas is viewportTransformed you those points indicate the extension\r\n       * of canvas element in plain untrasformed coordinates\r\n       * The coordinates get updated with @method calcViewportBoundaries.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       */\r\n      vptCoords: { },\r\n\r\n      /**\r\n       * Based on vptCoords and object.aCoords, skip rendering of objects that\r\n       * are not included in current viewport.\r\n       * May greatly help in applications with crowded canvas and use of zoom/pan\r\n       * If One of the corner of the bounding box of the object is on the canvas\r\n       * the objects get rendered.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipOffscreen: true,\r\n\r\n      /**\r\n       * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n       * the clipPath object gets used when the canvas has rendered, and the context is placed in the\r\n       * top left corner of the canvas.\r\n       * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\r\n       * @type fabric.Object\r\n       */\r\n      clipPath: undefined,\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initStatic: function(el, options) {\r\n        var cb = this.requestRenderAllBound;\r\n        this._objects = [];\r\n        this._createLowerCanvas(el);\r\n        this._initOptions(options);\r\n        this._setImageSmoothing();\r\n        // only initialize retina scaling once\r\n        if (!this.interactive) {\r\n          this._initRetinaScaling();\r\n        }\r\n\r\n        if (options.overlayImage) {\r\n          this.setOverlayImage(options.overlayImage, cb);\r\n        }\r\n        if (options.backgroundImage) {\r\n          this.setBackgroundImage(options.backgroundImage, cb);\r\n        }\r\n        if (options.backgroundColor) {\r\n          this.setBackgroundColor(options.backgroundColor, cb);\r\n        }\r\n        if (options.overlayColor) {\r\n          this.setOverlayColor(options.overlayColor, cb);\r\n        }\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _isRetinaScaling: function() {\r\n        return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} retinaScaling if applied, otherwise 1;\r\n       */\r\n      getRetinaScaling: function() {\r\n        return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initRetinaScaling: function() {\r\n        if (!this._isRetinaScaling()) {\r\n          return;\r\n        }\r\n        var scaleRatio = fabric.devicePixelRatio;\r\n        this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\r\n        if (this.upperCanvasEl) {\r\n          this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\r\n        }\r\n      },\r\n\r\n      __initRetinaScaling: function(scaleRatio, canvas, context) {\r\n        canvas.setAttribute('width', this.width * scaleRatio);\r\n        canvas.setAttribute('height', this.height * scaleRatio);\r\n        context.scale(scaleRatio, scaleRatio);\r\n      },\r\n\r\n\r\n      /**\r\n       * Calculates canvas element offset relative to the document\r\n       * This method is also attached as \"resize\" event handler of window\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      calcOffset: function () {\r\n        this._offset = getElementOffset(this.lowerCanvasEl);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\r\n       * @param {Function} callback callback to invoke when image is loaded and set as an overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\r\n       * @example <caption>Normal overlayImage with left/top = 0</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage with different properties</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage loaded from cross-origin</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      setOverlayImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('overlayImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundImage with left/top = 0</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage with different properties</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage loaded from cross-origin</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      // TODO: fix stretched examples\r\n      setBackgroundImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('backgroundImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\r\n       * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\r\n       * @param {Function} callback Callback to invoke when foreground color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\r\n       * @example <caption>Normal overlayColor - color value</caption>\r\n       * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setOverlayColor: function(overlayColor, callback) {\r\n        return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\r\n       * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\r\n       * @param {Function} callback Callback to invoke when background color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundColor - color value</caption>\r\n       * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setBackgroundColor: function(backgroundColor, callback) {\r\n        return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\r\n       */\r\n      _setImageSmoothing: function() {\r\n        var ctx = this.getContext();\r\n\r\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\r\n          || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\r\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\r\n       * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\r\n       * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\r\n       */\r\n      __setBgOverlayImage: function(property, image, callback, options) {\r\n        if (typeof image === 'string') {\r\n          fabric.util.loadImage(image, function(img) {\r\n            if (img) {\r\n              var instance = new fabric.Image(img, options);\r\n              this[property] = instance;\r\n              instance.canvas = this;\r\n            }\r\n            callback && callback(img);\r\n          }, this, options && options.crossOrigin);\r\n        }\r\n        else {\r\n          options && image.setOptions(options);\r\n          this[property] = image;\r\n          image && (image.canvas = this);\r\n          callback && callback(image);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\r\n       * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\r\n       * @param {(Object|String|null)} color Object with pattern information, color value or null\r\n       * @param {Function} [callback] Callback is invoked when color is set\r\n       */\r\n      __setBgOverlayColor: function(property, color, callback) {\r\n        this[property] = color;\r\n        this._initGradient(color, property);\r\n        this._initPattern(color, property, callback);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCanvasElement: function() {\r\n        var element = createCanvasElement();\r\n        if (!element) {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        if (!element.style) {\r\n          element.style = { };\r\n        }\r\n        if (typeof element.getContext === 'undefined') {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        return element;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initOptions: function (options) {\r\n        var lowerCanvasEl = this.lowerCanvasEl;\r\n        this._setOptions(options);\r\n\r\n        this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\r\n        this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\r\n\r\n        if (!this.lowerCanvasEl.style) {\r\n          return;\r\n        }\r\n\r\n        lowerCanvasEl.width = this.width;\r\n        lowerCanvasEl.height = this.height;\r\n\r\n        lowerCanvasEl.style.width = this.width + 'px';\r\n        lowerCanvasEl.style.height = this.height + 'px';\r\n\r\n        this.viewportTransform = this.viewportTransform.slice();\r\n      },\r\n\r\n      /**\r\n       * Creates a bottom canvas\r\n       * @private\r\n       * @param {HTMLElement} [canvasEl]\r\n       */\r\n      _createLowerCanvas: function (canvasEl) {\r\n        // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\r\n        if (canvasEl && canvasEl.getContext) {\r\n          this.lowerCanvasEl = canvasEl;\r\n        }\r\n        else {\r\n          this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\r\n        }\r\n\r\n        fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\r\n\r\n        if (this.interactive) {\r\n          this._applyCanvasStyle(this.lowerCanvasEl);\r\n        }\r\n\r\n        this.contextContainer = this.lowerCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * Returns canvas width (in px)\r\n       * @return {Number}\r\n       */\r\n      getWidth: function () {\r\n        return this.width;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas height (in px)\r\n       * @return {Number}\r\n       */\r\n      getHeight: function () {\r\n        return this.height;\r\n      },\r\n\r\n      /**\r\n       * Sets width of this canvas instance\r\n       * @param {Number|String} value                         Value to set width to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setWidth: function (value, options) {\r\n        return this.setDimensions({ width: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets height of this canvas instance\r\n       * @param {Number|String} value                         Value to set height to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setHeight: function (value, options) {\r\n        return this.setDimensions({ height: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\r\n       * @param {Object}        dimensions                    Object with width/height properties\r\n       * @param {Number|String} [dimensions.width]            Width of canvas element\r\n       * @param {Number|String} [dimensions.height]           Height of canvas element\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setDimensions: function (dimensions, options) {\r\n        var cssValue;\r\n\r\n        options = options || {};\r\n\r\n        for (var prop in dimensions) {\r\n          cssValue = dimensions[prop];\r\n\r\n          if (!options.cssOnly) {\r\n            this._setBackstoreDimension(prop, dimensions[prop]);\r\n            cssValue += 'px';\r\n            this.hasLostContext = true;\r\n          }\r\n\r\n          if (!options.backstoreOnly) {\r\n            this._setCssDimension(prop, cssValue);\r\n          }\r\n        }\r\n        if (this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\r\n        }\r\n        this._initRetinaScaling();\r\n        this._setImageSmoothing();\r\n        this.calcOffset();\r\n\r\n        if (!options.cssOnly) {\r\n          this.requestRenderAll();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {Number} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setBackstoreDimension: function (prop, value) {\r\n        this.lowerCanvasEl[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl[prop] = value;\r\n        }\r\n\r\n        if (this.cacheCanvasEl) {\r\n          this.cacheCanvasEl[prop] = value;\r\n        }\r\n\r\n        this[prop] = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting css width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {String} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setCssDimension: function (prop, value) {\r\n        this.lowerCanvasEl.style[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl.style[prop] = value;\r\n        }\r\n\r\n        if (this.wrapperEl) {\r\n          this.wrapperEl.style[prop] = value;\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas zoom level\r\n       * @return {Number}\r\n       */\r\n      getZoom: function () {\r\n        return this.viewportTransform[0];\r\n      },\r\n\r\n      /**\r\n       * Sets viewport transform of this canvas instance\r\n       * @param {Array} vpt the transform in the form of context.transform\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setViewportTransform: function (vpt) {\r\n        var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\r\n        this.viewportTransform = vpt;\r\n        for (i = 0, len = this._objects.length; i < len; i++) {\r\n          object = this._objects[i];\r\n          object.group || object.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          activeObject.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        this.calcViewportBoundaries();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance, zoom centered around point\r\n       * @param {fabric.Point} point to zoom with respect to\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      zoomToPoint: function (point, value) {\r\n        // TODO: just change the scale, preserve other transformations\r\n        var before = point, vpt = this.viewportTransform.slice(0);\r\n        point = transformPoint(point, invertTransform(this.viewportTransform));\r\n        vpt[0] = value;\r\n        vpt[3] = value;\r\n        var after = transformPoint(point, vpt);\r\n        vpt[4] += before.x - after.x;\r\n        vpt[5] += before.y - after.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setZoom: function (value) {\r\n        this.zoomToPoint(new fabric.Point(0, 0), value);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Pan viewport so as to place point at top left corner of canvas\r\n       * @param {fabric.Point} point to move to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      absolutePan: function (point) {\r\n        var vpt = this.viewportTransform.slice(0);\r\n        vpt[4] = -point.x;\r\n        vpt[5] = -point.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Pans viewpoint relatively\r\n       * @param {fabric.Point} point (position vector) to move by\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      relativePan: function (point) {\r\n        return this.absolutePan(new fabric.Point(\r\n          -point.x - this.viewportTransform[4],\r\n          -point.y - this.viewportTransform[5]\r\n        ));\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element corresponding to this instance\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getElement: function () {\r\n        return this.lowerCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was added\r\n       */\r\n      _onObjectAdded: function(obj) {\r\n        this.stateful && obj.setupState();\r\n        obj._set('canvas', this);\r\n        obj.setCoords();\r\n        this.fire('object:added', { target: obj });\r\n        obj.fire('added');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        this.fire('object:removed', { target: obj });\r\n        obj.fire('removed');\r\n        delete obj.canvas;\r\n      },\r\n\r\n      /**\r\n       * Clears specified context of canvas element\r\n       * @param {CanvasRenderingContext2D} ctx Context to clear\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clearContext: function(ctx) {\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where objects are drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getContext: function () {\r\n        return this.contextContainer;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        this._objects.length = 0;\r\n        this.backgroundImage = null;\r\n        this.overlayImage = null;\r\n        this.backgroundColor = '';\r\n        this.overlayColor = '';\r\n        if (this._hasITextHandlers) {\r\n          this.off('mouse:up', this._mouseUpITextHandler);\r\n          this._iTextInstances = null;\r\n          this._hasITextHandlers = false;\r\n        }\r\n        this.clearContext(this.contextContainer);\r\n        this.fire('canvas:cleared');\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Renders the canvas\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._objects);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Function created to be instance bound at initialization\r\n       * used in requestAnimationFrame rendering\r\n       * Let the fabricJS call it. If you call it manually you could have more\r\n       * animationFrame stacking on to of each other\r\n       * for an imperative rendering, use canvas.renderAll\r\n       * @private\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAndReset: function() {\r\n        this.isRendering = 0;\r\n        this.renderAll();\r\n      },\r\n\r\n      /**\r\n       * Append a renderAll request to next animation frame.\r\n       * unless one is already in progress, in that case nothing is done\r\n       * a boolean flag will avoid appending more.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      requestRenderAll: function () {\r\n        if (!this.isRendering) {\r\n          this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Calculate the position of the 4 corner of canvas with current viewportTransform.\r\n       * helps to determinate when an object is in the current rendering viewport using\r\n       * object absolute coordinates ( aCoords )\r\n       * @return {Object} points.tl\r\n       * @chainable\r\n       */\r\n      calcViewportBoundaries: function() {\r\n        var points = { }, width = this.width, height = this.height,\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\r\n        points.br = transformPoint({ x: width, y: height }, iVpt);\r\n        points.tr = new fabric.Point(points.br.x, points.tl.y);\r\n        points.bl = new fabric.Point(points.tl.x, points.br.y);\r\n        this.vptCoords = points;\r\n        return points;\r\n      },\r\n\r\n      cancelRequestedRender: function() {\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders background, objects, overlay and controls.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {Array} objects to render\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderCanvas: function(ctx, objects) {\r\n        var v = this.viewportTransform, path = this.clipPath;\r\n        this.cancelRequestedRender();\r\n        this.calcViewportBoundaries();\r\n        this.clearContext(ctx);\r\n        this.fire('before:render', { ctx: ctx, });\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, ctx);\r\n        }\r\n        this._renderBackground(ctx);\r\n\r\n        ctx.save();\r\n        //apply viewport transform once for all rendering process\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        this._renderObjects(ctx, objects);\r\n        ctx.restore();\r\n        if (!this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        if (this.clipTo) {\r\n          ctx.restore();\r\n        }\r\n        if (path) {\r\n          path.canvas = this;\r\n          // needed to setup a couple of variables\r\n          path.shouldCache();\r\n          path._transformDone = true;\r\n          path.renderCache({ forClipping: true });\r\n          this.drawClipPathOnCanvas(ctx);\r\n        }\r\n        this._renderOverlay(ctx);\r\n        if (this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        this.fire('after:render', { ctx: ctx, });\r\n      },\r\n\r\n      /**\r\n       * Paint the cached clipPath on the lowerCanvasEl\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawClipPathOnCanvas: function(ctx) {\r\n        var v = this.viewportTransform, path = this.clipPath;\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        // DEBUG: uncomment this line, comment the following\r\n        // ctx.globalAlpha = 0.4;\r\n        ctx.globalCompositeOperation = 'destination-in';\r\n        path.transform(ctx);\r\n        ctx.scale(1 / path.zoomX, 1 / path.zoomY);\r\n        ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Array} objects to render\r\n       */\r\n      _renderObjects: function(ctx, objects) {\r\n        var i, len;\r\n        for (i = 0, len = objects.length; i < len; ++i) {\r\n          objects[i] && objects[i].render(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {string} property 'background' or 'overlay'\r\n       */\r\n      _renderBackgroundOrOverlay: function(ctx, property) {\r\n        var fill = this[property + 'Color'], object = this[property + 'Image'],\r\n            v = this.viewportTransform, needsVpt = this[property + 'Vpt'];\r\n        if (!fill && !object) {\r\n          return;\r\n        }\r\n        if (fill) {\r\n          ctx.save();\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, 0);\r\n          ctx.lineTo(this.width, 0);\r\n          ctx.lineTo(this.width, this.height);\r\n          ctx.lineTo(0, this.height);\r\n          ctx.closePath();\r\n          ctx.fillStyle = fill.toLive\r\n            ? fill.toLive(ctx, this)\r\n            : fill;\r\n          if (needsVpt) {\r\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          }\r\n          ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\r\n          var m = fill.gradientTransform || fill.patternTransform;\r\n          m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n          ctx.fill();\r\n          ctx.restore();\r\n        }\r\n        if (object) {\r\n          ctx.save();\r\n          if (needsVpt) {\r\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          }\r\n          object.render(ctx);\r\n          ctx.restore();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'background');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderOverlay: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'overlay');\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a center of canvas.\r\n       * Returned value is an object with top and left properties\r\n       * @return {Object} object with \"top\" and \"left\" number values\r\n       */\r\n      getCenter: function () {\r\n        return {\r\n          top: this.height / 2,\r\n          left: this.width / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       */\r\n      centerObjectH: function (object) {\r\n        return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically in the canvas\r\n       * @param {fabric.Object} object Object to center vertically\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObjectV: function (object) {\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObject: function(object) {\r\n        var center = this.getCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(center.left, center.top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the viewport\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObject: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, vpCenter);\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectH: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n        this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object Vertically in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectV: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\r\n      },\r\n\r\n      /**\r\n       * Calculate the point in canvas that correspond to the center of actual viewport.\r\n       * @return {fabric.Point} vpCenter, viewport center\r\n       * @chainable\r\n       */\r\n      getVpCenter: function() {\r\n        var center = this.getCenter(),\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        return transformPoint({ x: center.left, y: center.top }, iVpt);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} object Object to center\r\n       * @param {fabric.Point} center Center point\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      _centerObject: function(object, center) {\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        object.setCoords();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returs dataless JSON representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {String} json string\r\n       */\r\n      toDatalessJSON: function (propertiesToInclude) {\r\n        return this.toDatalessObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toDatalessObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjectMethod: function (methodName, propertiesToInclude) {\r\n\r\n        var clipPath = this.clipPath, data = {\r\n          version: fabric.version,\r\n          objects: this._toObjects(methodName, propertiesToInclude),\r\n        };\r\n        if (clipPath) {\r\n          data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\r\n        }\r\n        extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\r\n\r\n        fabric.util.populateWithProperties(this, data, propertiesToInclude);\r\n\r\n        return data;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjects: function(methodName, propertiesToInclude) {\r\n        return this._objects.filter(function(object) {\r\n          return !object.excludeFromExport;\r\n        }).map(function(instance) {\r\n          return this._toObject(instance, methodName, propertiesToInclude);\r\n        }, this);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        var originalValue;\r\n\r\n        if (!this.includeDefaultValues) {\r\n          originalValue = instance.includeDefaultValues;\r\n          instance.includeDefaultValues = false;\r\n        }\r\n\r\n        var object = instance[methodName](propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          instance.includeDefaultValues = originalValue;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __serializeBgOverlay: function(methodName, propertiesToInclude) {\r\n        var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\r\n\r\n        if (this.backgroundColor) {\r\n          data.background = this.backgroundColor.toObject\r\n            ? this.backgroundColor.toObject(propertiesToInclude)\r\n            : this.backgroundColor;\r\n        }\r\n\r\n        if (this.overlayColor) {\r\n          data.overlay = this.overlayColor.toObject\r\n            ? this.overlayColor.toObject(propertiesToInclude)\r\n            : this.overlayColor;\r\n        }\r\n        if (bgImage && !bgImage.excludeFromExport) {\r\n          data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\r\n        }\r\n        if (overlay && !overlay.excludeFromExport) {\r\n          data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\r\n        }\r\n\r\n        return data;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\r\n       * a zoomed canvas will then produce zoomed SVG output.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      svgViewportTransformation: true,\r\n\r\n      /**\r\n       * Returns SVG representation of canvas\r\n       * @function\r\n       * @param {Object} [options] Options object for SVG output\r\n       * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\r\n       * @param {Object} [options.viewBox] SVG viewbox object\r\n       * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\r\n       * @param {Number} [options.viewBox.y] y-coordinate of viewbox\r\n       * @param {Number} [options.viewBox.width] Width of viewbox\r\n       * @param {Number} [options.viewBox.height] Height of viewbox\r\n       * @param {String} [options.encoding=UTF-8] Encoding of SVG output\r\n       * @param {String} [options.width] desired width of svg with or without units\r\n       * @param {String} [options.height] desired height of svg with or without units\r\n       * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\r\n       * @return {String} SVG string\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n       * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\r\n       * @example <caption>Normal SVG output</caption>\r\n       * var svg = canvas.toSVG();\r\n       * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\r\n       * var svg = canvas.toSVG({suppressPreamble: true});\r\n       * @example <caption>SVG output with viewBox attribute</caption>\r\n       * var svg = canvas.toSVG({\r\n       *   viewBox: {\r\n       *     x: 100,\r\n       *     y: 100,\r\n       *     width: 200,\r\n       *     height: 300\r\n       *   }\r\n       * });\r\n       * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\r\n       * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\r\n       * @example <caption>Modify SVG output with reviver function</caption>\r\n       * var svg = canvas.toSVG(null, function(svg) {\r\n       *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\r\n       * });\r\n       */\r\n      toSVG: function(options, reviver) {\r\n        options || (options = { });\r\n        options.reviver = reviver;\r\n        var markup = [];\r\n\r\n        this._setSVGPreamble(markup, options);\r\n        this._setSVGHeader(markup, options);\r\n        if (this.clipPath) {\r\n          markup.push('<g clip-path=\"url(#' + this.clipPath.clipPathId + ')\" >\\n');\r\n        }\r\n        this._setSVGBgOverlayColor(markup, 'background');\r\n        this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\r\n        this._setSVGObjects(markup, reviver);\r\n        if (this.clipPath) {\r\n          markup.push('</g>\\n');\r\n        }\r\n        this._setSVGBgOverlayColor(markup, 'overlay');\r\n        this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\r\n\r\n        markup.push('</svg>');\r\n\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGPreamble: function(markup, options) {\r\n        if (options.suppressPreamble) {\r\n          return;\r\n        }\r\n        markup.push(\r\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\r\n          '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\r\n          '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGHeader: function(markup, options) {\r\n        var width = options.width || this.width,\r\n            height = options.height || this.height,\r\n            vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        if (options.viewBox) {\r\n          viewBox = 'viewBox=\"' +\r\n                  options.viewBox.x + ' ' +\r\n                  options.viewBox.y + ' ' +\r\n                  options.viewBox.width + ' ' +\r\n                  options.viewBox.height + '\" ';\r\n        }\r\n        else {\r\n          if (this.svgViewportTransformation) {\r\n            vpt = this.viewportTransform;\r\n            viewBox = 'viewBox=\"' +\r\n                    toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\r\n          }\r\n        }\r\n\r\n        markup.push(\r\n          '<svg ',\r\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\r\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\r\n          'version=\"1.1\" ',\r\n          'width=\"', width, '\" ',\r\n          'height=\"', height, '\" ',\r\n          viewBox,\r\n          'xml:space=\"preserve\">\\n',\r\n          '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\r\n          '<defs>\\n',\r\n          this.createSVGFontFacesMarkup(),\r\n          this.createSVGRefElementsMarkup(),\r\n          this.createSVGClipPathMarkup(options),\r\n          '</defs>\\n'\r\n        );\r\n      },\r\n\r\n      createSVGClipPathMarkup: function(options) {\r\n        var clipPath = this.clipPath;\r\n        if (clipPath) {\r\n          clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\r\n          return  '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\r\n            this.clipPath.toClipPathSVG(options.reviver) +\r\n            '</clipPath>\\n';\r\n        }\r\n        return '';\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG referenced elements like patterns, gradients etc.\r\n       * @return {String}\r\n       */\r\n      createSVGRefElementsMarkup: function() {\r\n        var _this = this,\r\n            markup = ['background', 'overlay'].map(function(prop) {\r\n              var fill = _this[prop + 'Color'];\r\n              if (fill && fill.toLive) {\r\n                var shouldTransform = _this[prop + 'Vpt'], vpt = _this.viewportTransform,\r\n                    object = {\r\n                      width: _this.width / (shouldTransform ? vpt[0] : 1),\r\n                      height: _this.height / (shouldTransform ? vpt[3] : 1)\r\n                    };\r\n                return fill.toSVG(\r\n                  object,\r\n                  { additionalTransform: shouldTransform ? fabric.util.matrixToSVG(vpt) : '' }\r\n                );\r\n              }\r\n            });\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG font faces,\r\n       * font URLs for font faces must be collected by developers\r\n       * and are not extracted from the DOM by fabricjs\r\n       * @param {Array} objects Array of fabric objects\r\n       * @return {String}\r\n       */\r\n      createSVGFontFacesMarkup: function() {\r\n        var markup = '', fontList = { }, obj, fontFamily,\r\n            style, row, rowIndex, _char, charIndex, i, len,\r\n            fontPaths = fabric.fontPaths, objects = this._objects;\r\n\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          obj = objects[i];\r\n          fontFamily = obj.fontFamily;\r\n          if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\r\n            continue;\r\n          }\r\n          fontList[fontFamily] = true;\r\n          if (!obj.styles) {\r\n            continue;\r\n          }\r\n          style = obj.styles;\r\n          for (rowIndex in style) {\r\n            row = style[rowIndex];\r\n            for (charIndex in row) {\r\n              _char = row[charIndex];\r\n              fontFamily = _char.fontFamily;\r\n              if (!fontList[fontFamily] && fontPaths[fontFamily]) {\r\n                fontList[fontFamily] = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var j in fontList) {\r\n          markup += [\r\n            '\\t\\t@font-face {\\n',\r\n            '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\r\n            '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\r\n            '\\t\\t}\\n'\r\n          ].join('');\r\n        }\r\n\r\n        if (markup) {\r\n          markup = [\r\n            '\\t<style type=\"text/css\">',\r\n            '<![CDATA[\\n',\r\n            markup,\r\n            ']]>',\r\n            '</style>\\n'\r\n          ].join('');\r\n        }\r\n\r\n        return markup;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObjects: function(markup, reviver) {\r\n        var instance, i, len, objects = this._objects;\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          instance = objects[i];\r\n          if (instance.excludeFromExport) {\r\n            continue;\r\n          }\r\n          this._setSVGObject(markup, instance, reviver);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        markup.push(instance.toSVG(reviver));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayImage: function(markup, property, reviver) {\r\n        if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\r\n          markup.push(this[property].toSVG(reviver));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayColor: function(markup, property) {\r\n        var filler = this[property + 'Color'], vpt = this.viewportTransform, finalWidth = this.width,\r\n            finalHeight = this.height;\r\n        if (!filler) {\r\n          return;\r\n        }\r\n        if (filler.toLive) {\r\n          var repeat = filler.repeat, iVpt = fabric.util.invertTransform(vpt), shouldInvert = this[property + 'Vpt'],\r\n              additionalTransform = shouldInvert ? fabric.util.matrixToSVG(iVpt) : '';\r\n          markup.push(\r\n            '<rect transform=\"' + additionalTransform + ' translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\r\n            ' x=\"', filler.offsetX - finalWidth / 2,\r\n            '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\r\n            'width=\"',\r\n            (repeat === 'repeat-y' || repeat === 'no-repeat'\r\n              ? filler.source.width\r\n              : finalWidth ),\r\n            '\" height=\"',\r\n            (repeat === 'repeat-x' || repeat === 'no-repeat'\r\n              ? filler.source.height\r\n              : finalHeight),\r\n            '\" fill=\"url(#SVGID_' + filler.id + ')\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n        else {\r\n          markup.push(\r\n            '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\r\n            'fill=\"', filler, '\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the bottom of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send to back\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendToBack: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.unshift(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.unshift(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the top of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringToFront: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.push(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.push(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection down in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in behind\r\n       * the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendBackwards: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx > 0 + objsMoved) {\r\n              newIdx = idx - 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== 0) {\r\n            // if object is not on the bottom of stack\r\n            newIdx = this._findNewLowerIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewLowerIndex: function(object, idx, intersecting) {\r\n        var newIdx, i;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse down the stack looking for the nearest intersecting object\r\n          for (i = idx - 1; i >= 0; --i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx - 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection up in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in front\r\n       * of the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringForward: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx < this._objects.length - 1 - objsMoved) {\r\n              newIdx = idx + 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== this._objects.length - 1) {\r\n            // if object is not on top of stack (last item in an array)\r\n            newIdx = this._findNewUpperIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewUpperIndex: function(object, idx, intersecting) {\r\n        var newIdx, i, len;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse up the stack looking for the nearest intersecting object\r\n          for (i = idx + 1, len = this._objects.length; i < len; ++i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx + 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object to specified level in stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Number} index Position to move to\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      moveTo: function (object, index) {\r\n        removeFromArray(this._objects, object);\r\n        this._objects.splice(index, 0, object);\r\n        return this.renderOnAddRemove && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and dispose objects\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        // cancel eventually ongoing renders\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n        this.forEachObject(function(object) {\r\n          object.dispose && object.dispose();\r\n        });\r\n        this._objects = [];\r\n        if (this.backgroundImage && this.backgroundImage.dispose) {\r\n          this.backgroundImage.dispose();\r\n        }\r\n        this.backgroundImage = null;\r\n        if (this.overlayImage && this.overlayImage.dispose) {\r\n          this.overlayImage.dispose();\r\n        }\r\n        this.overlayImage = null;\r\n        this._iTextInstances = null;\r\n        this.contextContainer = null;\r\n        fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\r\n        this.lowerCanvasEl = undefined;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function () {\r\n        return '#<fabric.Canvas (' + this.complexity() + '): ' +\r\n                 '{ objects: ' + this._objects.length + ' }>';\r\n      }\r\n    });\r\n\r\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\r\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\r\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\r\n\r\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\r\n\r\n      /**\r\n       * @static\r\n       * @type String\r\n       * @default\r\n       */\r\n      EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\r\n\r\n      /**\r\n       * Provides a way to check support of some of the canvas methods\r\n       * (either those of HTMLCanvasElement itself, or rendering context)\r\n       *\r\n       * @param {String} methodName Method to check support for;\r\n       *                            Could be one of \"setLineDash\"\r\n       * @return {Boolean | null} `true` if method is supported (or at least exists),\r\n       *                          `null` if canvas element or context can not be initialized\r\n       */\r\n      supports: function (methodName) {\r\n        var el = createCanvasElement();\r\n\r\n        if (!el || !el.getContext) {\r\n          return null;\r\n        }\r\n\r\n        var ctx = el.getContext('2d');\r\n        if (!ctx) {\r\n          return null;\r\n        }\r\n\r\n        switch (methodName) {\r\n\r\n          case 'setLineDash':\r\n            return typeof ctx.setLineDash !== 'undefined';\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns JSON representation of canvas\r\n     * @function\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {String} JSON string\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\r\n     * @example <caption>JSON without additional properties</caption>\r\n     * var json = canvas.toJSON();\r\n     * @example <caption>JSON with additional properties included</caption>\r\n     * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\r\n     * @example <caption>JSON without default values</caption>\r\n     * canvas.includeDefaultValues = false;\r\n     * var json = canvas.toJSON();\r\n     */\r\n    fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\r\n\r\n    if (fabric.isLikelyNode) {\r\n      fabric.StaticCanvas.prototype.createPNGStream = function() {\r\n        var impl = getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createPNGStream();\r\n      };\r\n      fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\r\n        var impl = getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createJPEGStream(opts);\r\n      };\r\n    }\r\n  })();\r\n\r\n\r\n  /**\r\n   * BaseBrush class\r\n   * @class fabric.BaseBrush\r\n   * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\r\n   */\r\n  fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\r\n\r\n    /**\r\n     * Color of a brush\r\n     * @type String\r\n     * @default\r\n     */\r\n    color: 'rgb(0, 0, 0)',\r\n\r\n    /**\r\n     * Width of a brush, has to be a Number, no string literals\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 1,\r\n\r\n    /**\r\n     * Shadow object representing shadow of this shape.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\r\n     * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */\r\n    shadow: null,\r\n\r\n    /**\r\n     * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineCap: 'round',\r\n\r\n    /**\r\n     * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineJoin: 'round',\r\n\r\n    /**\r\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeMiterLimit:         10,\r\n\r\n    /**\r\n     * Stroke Dash Array.\r\n     * @type Array\r\n     * @default\r\n     */\r\n    strokeDashArray: null,\r\n\r\n    /**\r\n     * Sets shadow of an object\r\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setShadow: function(options) {\r\n      this.shadow = new fabric.Shadow(options);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     * @private\r\n     */\r\n    _setBrushStyles: function() {\r\n      var ctx = this.canvas.contextTop;\r\n      ctx.strokeStyle = this.color;\r\n      ctx.lineWidth = this.width;\r\n      ctx.lineCap = this.strokeLineCap;\r\n      ctx.miterLimit = this.strokeMiterLimit;\r\n      ctx.lineJoin = this.strokeLineJoin;\r\n      if (fabric.StaticCanvas.supports('setLineDash')) {\r\n        ctx.setLineDash(this.strokeDashArray || []);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the transformation on given context\r\n     * @param {RenderingContext2d} ctx context to render on\r\n     * @private\r\n     */\r\n    _saveAndTransform: function(ctx) {\r\n      var v = this.canvas.viewportTransform;\r\n      ctx.save();\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n    },\r\n\r\n    /**\r\n     * Sets brush shadow styles\r\n     * @private\r\n     */\r\n    _setShadow: function() {\r\n      if (!this.shadow) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.canvas,\r\n          shadow = this.shadow,\r\n          ctx = canvas.contextTop,\r\n          zoom = canvas.getZoom();\r\n      if (canvas && canvas._isRetinaScaling()) {\r\n        zoom *= fabric.devicePixelRatio;\r\n      }\r\n\r\n      ctx.shadowColor = shadow.color;\r\n      ctx.shadowBlur = shadow.blur * zoom;\r\n      ctx.shadowOffsetX = shadow.offsetX * zoom;\r\n      ctx.shadowOffsetY = shadow.offsetY * zoom;\r\n    },\r\n\r\n    needsFullRender: function() {\r\n      var color = new fabric.Color(this.color);\r\n      return color.getAlpha() < 1 || !!this.shadow;\r\n    },\r\n\r\n    /**\r\n     * Removes brush shadow styles\r\n     * @private\r\n     */\r\n    _resetShadow: function() {\r\n      var ctx = this.canvas.contextTop;\r\n\r\n      ctx.shadowColor = '';\r\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n    /**\r\n     * PencilBrush class\r\n     * @class fabric.PencilBrush\r\n     * @extends fabric.BaseBrush\r\n     */\r\n    fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\r\n\r\n      /**\r\n       * Discard points that are less than `decimate` pixel distant from each other\r\n       * @type Number\r\n       * @default 0.4\r\n       */\r\n      decimate: 0.4,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {fabric.Canvas} canvas\r\n       * @return {fabric.PencilBrush} Instance of a pencil brush\r\n       */\r\n      initialize: function(canvas) {\r\n        this.canvas = canvas;\r\n        this._points = [];\r\n      },\r\n\r\n      /**\r\n       * Invoked inside on mouse down and mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      _drawSegment: function (ctx, p1, p2) {\r\n        var midPoint = p1.midPointFrom(p2);\r\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\r\n        return midPoint;\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse down\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseDown: function(pointer, options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return;\r\n        }\r\n        this._prepareForDrawing(pointer);\r\n        // capture coordinates immediately\r\n        // this allows to draw dots (when movement never occurs)\r\n        this._captureDrawingPath(pointer);\r\n        this._render();\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseMove: function(pointer, options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return;\r\n        }\r\n        if (this._captureDrawingPath(pointer) && this._points.length > 1) {\r\n          if (this.needsFullRender()) {\r\n            // redraw curve\r\n            // clear top canvas\r\n            this.canvas.clearContext(this.canvas.contextTop);\r\n            this._render();\r\n          }\r\n          else {\r\n            var points = this._points, length = points.length, ctx = this.canvas.contextTop;\r\n            // draw the curve update\r\n            this._saveAndTransform(ctx);\r\n            if (this.oldEnd) {\r\n              ctx.beginPath();\r\n              ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\r\n            }\r\n            this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invoked on mouse up\r\n       */\r\n      onMouseUp: function(options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return true;\r\n        }\r\n        this.oldEnd = undefined;\r\n        this._finalizeAndAddPath();\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _prepareForDrawing: function(pointer) {\r\n\r\n        var p = new fabric.Point(pointer.x, pointer.y);\r\n\r\n        this._reset();\r\n        this._addPoint(p);\r\n        this.canvas.contextTop.moveTo(p.x, p.y);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Point} point Point to be added to points array\r\n       */\r\n      _addPoint: function(point) {\r\n        if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\r\n          return false;\r\n        }\r\n        this._points.push(point);\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Clear points array and set contextTop canvas style.\r\n       * @private\r\n       */\r\n      _reset: function() {\r\n        this._points = [];\r\n        this._setBrushStyles();\r\n        this._setShadow();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _captureDrawingPath: function(pointer) {\r\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y);\r\n        return this._addPoint(pointerPoint);\r\n      },\r\n\r\n      /**\r\n       * Draw a smooth path on the topCanvas using quadraticCurveTo\r\n       * @private\r\n       */\r\n      _render: function() {\r\n        var ctx  = this.canvas.contextTop, i, len,\r\n            p1 = this._points[0],\r\n            p2 = this._points[1];\r\n\r\n        this._saveAndTransform(ctx);\r\n        ctx.beginPath();\r\n        //if we only have 2 points in the path and they are the same\r\n        //it means that the user only clicked the canvas without moving the mouse\r\n        //then we should be drawing a dot. A path isn't drawn between two identical dots\r\n        //that's why we set them apart a bit\r\n        if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\r\n          var width = this.width / 1000;\r\n          p1 = new fabric.Point(p1.x, p1.y);\r\n          p2 = new fabric.Point(p2.x, p2.y);\r\n          p1.x -= width;\r\n          p2.x += width;\r\n        }\r\n        ctx.moveTo(p1.x, p1.y);\r\n\r\n        for (i = 1, len = this._points.length; i < len; i++) {\r\n          // we pick the point between pi + 1 & pi + 2 as the\r\n          // end point and p1 as our control point.\r\n          this._drawSegment(ctx, p1, p2);\r\n          p1 = this._points[i];\r\n          p2 = this._points[i + 1];\r\n        }\r\n        // Draw last line as a straight line while\r\n        // we wait for the next point to be able to calculate\r\n        // the bezier control point\r\n        ctx.lineTo(p1.x, p1.y);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Converts points to SVG path\r\n       * @param {Array} points Array of points\r\n       * @return {String} SVG path\r\n       */\r\n      convertPointsToSVGPath: function(points) {\r\n        var path = [], i, width = this.width / 1000,\r\n            p1 = new fabric.Point(points[0].x, points[0].y),\r\n            p2 = new fabric.Point(points[1].x, points[1].y),\r\n            len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\r\n\r\n        if (manyPoints) {\r\n          multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\r\n          multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\r\n        }\r\n        path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\r\n        for (i = 1; i < len; i++) {\r\n          if (!p1.eq(p2)) {\r\n            var midPoint = p1.midPointFrom(p2);\r\n            // p1 is our bezier control point\r\n            // midpoint is our endpoint\r\n            // start point is p(i-1) value.\r\n            path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\r\n          }\r\n          p1 = points[i];\r\n          if ((i + 1) < points.length) {\r\n            p2 = points[i + 1];\r\n          }\r\n        }\r\n        if (manyPoints) {\r\n          multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\r\n          multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\r\n        }\r\n        path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Creates fabric.Path object to add on canvas\r\n       * @param {String} pathData Path data\r\n       * @return {fabric.Path} Path to add on canvas\r\n       */\r\n      createPath: function(pathData) {\r\n        var path = new fabric.Path(pathData, {\r\n          fill: null,\r\n          stroke: this.color,\r\n          strokeWidth: this.width,\r\n          strokeLineCap: this.strokeLineCap,\r\n          strokeMiterLimit: this.strokeMiterLimit,\r\n          strokeLineJoin: this.strokeLineJoin,\r\n          strokeDashArray: this.strokeDashArray,\r\n        });\r\n        if (this.shadow) {\r\n          this.shadow.affectStroke = true;\r\n          path.setShadow(this.shadow);\r\n        }\r\n\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Decimate poins array with the decimate value\r\n       */\r\n      decimatePoints: function(points, distance) {\r\n        if (points.length <= 2) {\r\n          return points;\r\n        }\r\n        var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2),\r\n            i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint],\r\n            cDistance;\r\n        for (i = 1; i < l; i++) {\r\n          cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\r\n          if (cDistance >= adjustedDistance) {\r\n            lastPoint = points[i];\r\n            newPoints.push(lastPoint);\r\n          }\r\n        }\r\n        if (newPoints.length === 1) {\r\n          newPoints.push(new fabric.Point(newPoints[0].x, newPoints[0].y));\r\n        }\r\n        return newPoints;\r\n      },\r\n\r\n      /**\r\n       * On mouseup after drawing the path on contextTop canvas\r\n       * we use the points captured to create an new fabric path object\r\n       * and add it to the fabric canvas.\r\n       */\r\n      _finalizeAndAddPath: function() {\r\n        var ctx = this.canvas.contextTop;\r\n        ctx.closePath();\r\n        if (this.decimate) {\r\n          this._points = this.decimatePoints(this._points, this.decimate);\r\n        }\r\n        var pathData = this.convertPointsToSVGPath(this._points).join('');\r\n        if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\r\n          // do not create 0 width/height paths, as they are\r\n          // rendered inconsistently across browsers\r\n          // Firefox 4, for example, renders a dot,\r\n          // whereas Chrome 10 renders nothing\r\n          this.canvas.requestRenderAll();\r\n          return;\r\n        }\r\n\r\n        var path = this.createPath(pathData);\r\n        this.canvas.clearContext(this.canvas.contextTop);\r\n        this.canvas.add(path);\r\n        this.canvas.requestRenderAll();\r\n        path.setCoords();\r\n        this._resetShadow();\r\n\r\n\r\n        // fire event 'path' created\r\n        this.canvas.fire('path:created', { path: path });\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  /**\r\n   * CircleBrush class\r\n   * @class fabric.CircleBrush\r\n   */\r\n  fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a brush\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 10,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.CircleBrush} Instance of a circle brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.points = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked inside on mouse down and mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    drawDot: function(pointer) {\r\n      var point = this.addPoint(pointer),\r\n          ctx = this.canvas.contextTop;\r\n      this._saveAndTransform(ctx);\r\n      this.dot(ctx, point);\r\n      ctx.restore();\r\n    },\r\n\r\n    dot: function(ctx, point) {\r\n      ctx.fillStyle = point.fill;\r\n      ctx.beginPath();\r\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.points.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n      this.drawDot(pointer);\r\n    },\r\n\r\n    /**\r\n     * Render the full state of the brush\r\n     * @private\r\n     */\r\n    _render: function() {\r\n      var ctx  = this.canvas.contextTop, i, len,\r\n          points = this.points;\r\n      this._saveAndTransform(ctx);\r\n      for (i = 0, len = points.length; i < len; i++) {\r\n        this.dot(ctx, points[i]);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      if (this.needsFullRender()) {\r\n        this.canvas.clearContext(this.canvas.contextTop);\r\n        this.addPoint(pointer);\r\n        this._render();\r\n      }\r\n      else {\r\n        this.drawDot(pointer);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var circles = [];\r\n\r\n      for (i = 0, len = this.points.length; i < len; i++) {\r\n        var point = this.points[i],\r\n            circle = new fabric.Circle({\r\n              radius: point.radius,\r\n              left: point.x,\r\n              top: point.y,\r\n              originX: 'center',\r\n              originY: 'center',\r\n              fill: point.fill\r\n            });\r\n\r\n        this.shadow && circle.setShadow(this.shadow);\r\n\r\n        circles.push(circle);\r\n      }\r\n      var group = new fabric.Group(circles);\r\n      group.canvas = this.canvas;\r\n\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     * @return {fabric.Point} Just added pointer point\r\n     */\r\n    addPoint: function(pointer) {\r\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y),\r\n\r\n          circleRadius = fabric.util.getRandomInt(\r\n            Math.max(0, this.width - 20), this.width + 20) / 2,\r\n\r\n          circleColor = new fabric.Color(this.color)\r\n            .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\r\n            .toRgba();\r\n\r\n      pointerPoint.radius = circleRadius;\r\n      pointerPoint.fill = circleColor;\r\n\r\n      this.points.push(pointerPoint);\r\n\r\n      return pointerPoint;\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * SprayBrush class\r\n   * @class fabric.SprayBrush\r\n   */\r\n  fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a spray\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width:              10,\r\n\r\n    /**\r\n     * Density of a spray (number of dots per chunk)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    density:            20,\r\n\r\n    /**\r\n     * Width of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidth:           1,\r\n\r\n    /**\r\n     * Width variance of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidthVariance:   1,\r\n\r\n    /**\r\n     * Whether opacity of a dot should be random\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    randomOpacity:        false,\r\n\r\n    /**\r\n     * Whether overlapping dots (rectangles) should be removed (for performance reasons)\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    optimizeOverlapping:  true,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.SprayBrush} Instance of a spray brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.sprayChunks = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.sprayChunks.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var rects = [];\r\n\r\n      for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        var sprayChunk = this.sprayChunks[i];\r\n\r\n        for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\r\n\r\n          var rect = new fabric.Rect({\r\n            width: sprayChunk[j].width,\r\n            height: sprayChunk[j].width,\r\n            left: sprayChunk[j].x + 1,\r\n            top: sprayChunk[j].y + 1,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            fill: this.color\r\n          });\r\n          rects.push(rect);\r\n        }\r\n      }\r\n\r\n      if (this.optimizeOverlapping) {\r\n        rects = this._getOptimizedRects(rects);\r\n      }\r\n\r\n      var group = new fabric.Group(rects);\r\n      this.shadow && group.setShadow(this.shadow);\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} rects\r\n     */\r\n    _getOptimizedRects: function(rects) {\r\n\r\n      // avoid creating duplicate rects at the same coordinates\r\n      var uniqueRects = { }, key, i, len;\r\n\r\n      for (i = 0, len = rects.length; i < len; i++) {\r\n        key = rects[i].left + '' + rects[i].top;\r\n        if (!uniqueRects[key]) {\r\n          uniqueRects[key] = rects[i];\r\n        }\r\n      }\r\n      var uniqueRectsArray = [];\r\n      for (key in uniqueRects) {\r\n        uniqueRectsArray.push(uniqueRects[key]);\r\n      }\r\n\r\n      return uniqueRectsArray;\r\n    },\r\n\r\n    /**\r\n     * Render new chunk of spray brush\r\n     */\r\n    render: function(sprayChunk) {\r\n      var ctx = this.canvas.contextTop, i, len;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, len = sprayChunk.length; i < len; i++) {\r\n        var point = sprayChunk[i];\r\n        if (typeof point.opacity !== 'undefined') {\r\n          ctx.globalAlpha = point.opacity;\r\n        }\r\n        ctx.fillRect(point.x, point.y, point.width, point.width);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Render all spray chunks\r\n     */\r\n    _render: function() {\r\n      var ctx = this.canvas.contextTop, i, ilen;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        this.render(this.sprayChunks[i]);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     */\r\n    addSprayChunk: function(pointer) {\r\n      this.sprayChunkPoints = [];\r\n\r\n      var x, y, width, radius = this.width / 2, i;\r\n\r\n      for (i = 0; i < this.density; i++) {\r\n\r\n        x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\r\n        y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\r\n\r\n        if (this.dotWidthVariance) {\r\n          width = fabric.util.getRandomInt(\r\n            // bottom clamp width to 1\r\n            Math.max(1, this.dotWidth - this.dotWidthVariance),\r\n            this.dotWidth + this.dotWidthVariance);\r\n        }\r\n        else {\r\n          width = this.dotWidth;\r\n        }\r\n\r\n        var point = new fabric.Point(x, y);\r\n        point.width = width;\r\n\r\n        if (this.randomOpacity) {\r\n          point.opacity = fabric.util.getRandomInt(0, 100) / 100;\r\n        }\r\n\r\n        this.sprayChunkPoints.push(point);\r\n      }\r\n\r\n      this.sprayChunks.push(this.sprayChunkPoints);\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * PatternBrush class\r\n   * @class fabric.PatternBrush\r\n   * @extends fabric.BaseBrush\r\n   */\r\n  fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\r\n\r\n    getPatternSrc: function() {\r\n\r\n      var dotWidth = 20,\r\n          dotDistance = 5,\r\n          patternCanvas = fabric.util.createCanvasElement(),\r\n          patternCtx = patternCanvas.getContext('2d');\r\n\r\n      patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\r\n\r\n      patternCtx.fillStyle = this.color;\r\n      patternCtx.beginPath();\r\n      patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\r\n      patternCtx.closePath();\r\n      patternCtx.fill();\r\n\r\n      return patternCanvas;\r\n    },\r\n\r\n    getPatternSrcFunction: function() {\r\n      return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\r\n    },\r\n\r\n    /**\r\n     * Creates \"pattern\" instance property\r\n     */\r\n    getPattern: function() {\r\n      return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     */\r\n    _setBrushStyles: function() {\r\n      this.callSuper('_setBrushStyles');\r\n      this.canvas.contextTop.strokeStyle = this.getPattern();\r\n    },\r\n\r\n    /**\r\n     * Creates path\r\n     */\r\n    createPath: function(pathData) {\r\n      var path = this.callSuper('createPath', pathData),\r\n          topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\r\n\r\n      path.stroke = new fabric.Pattern({\r\n        source: this.source || this.getPatternSrcFunction(),\r\n        offsetX: -topLeft.x,\r\n        offsetY: -topLeft.y\r\n      });\r\n      return path;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    var getPointer = fabric.util.getPointer,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        radiansToDegrees = fabric.util.radiansToDegrees,\r\n        atan2 = Math.atan2,\r\n        abs = Math.abs,\r\n        supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n\r\n        STROKE_OFFSET = 0.5;\r\n\r\n    /**\r\n     * Canvas class\r\n     * @class fabric.Canvas\r\n     * @extends fabric.StaticCanvas\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\r\n     * @see {@link fabric.Canvas#initialize} for constructor definition\r\n     *\r\n     * @fires object:modified at the end of a transform or any change when statefull is true\r\n     * @fires object:rotated at the end of a rotation transform\r\n     * @fires object:scaled at the end of a scale transform\r\n     * @fires object:moved at the end of translation transform\r\n     * @fires object:skewed at the end of a skew transform\r\n     * @fires object:rotating while an object is being rotated from the control\r\n     * @fires object:scaling while an object is being scaled by controls\r\n     * @fires object:moving while an object is being dragged\r\n     * @fires object:skewing while an object is being skewed from the controls\r\n     * @fires object:selected this event is deprecated. use selection:created\r\n     *\r\n     * @fires before:transform before a transform is is started\r\n     * @fires before:selection:cleared\r\n     * @fires selection:cleared\r\n     * @fires selection:updated\r\n     * @fires selection:created\r\n     *\r\n     * @fires path:created after a drawing operation ends and the path is added\r\n     * @fires mouse:down\r\n     * @fires mouse:move\r\n     * @fires mouse:up\r\n     * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\r\n     * @fires mouse:move:before on mouse move, before the inner fabric logic runs\r\n     * @fires mouse:up:before on mouse up, before the inner fabric logic runs\r\n     * @fires mouse:over\r\n     * @fires mouse:out\r\n     * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     * @fires after:render at the end of the render process, receives the context in the callback\r\n     * @fires before:render at start the render process, receives the context in the callback\r\n     *\r\n     */\r\n    fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n        this._initInteractive();\r\n        this._createCacheCanvas();\r\n      },\r\n\r\n      /**\r\n       * When true, objects can be transformed by one side (unproportionally)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      uniScaleTransform:      false,\r\n\r\n      /**\r\n       * Indicates which key enable unproportional scaling\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      uniScaleKey:           'shiftKey',\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of scale transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:        false,\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of rotate transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:       false,\r\n\r\n      /**\r\n       * Indicates which key enable centered Transform\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      centeredKey:           'altKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternate action on corner\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      altActionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates that canvas is interactive. This property should not be changed.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      interactive:            true,\r\n\r\n      /**\r\n       * Indicates whether group selection should be enabled\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selection:              true,\r\n\r\n      /**\r\n       * Indicates which key or keys enable multiple click selection\r\n       * Pass value as a string or array of strings\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or empty or containing any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.2\r\n       * @type String|Array\r\n       * @default\r\n       */\r\n      selectionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternative selection\r\n       * in case of target overlapping with active object\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * For a series of reason that come from the general expectations on how\r\n       * things should work, this feature works only for preserveObjectStacking true.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.5\r\n       * @type null|String\r\n       * @default\r\n       */\r\n      altSelectionKey:           null,\r\n\r\n      /**\r\n       * Color of selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\r\n\r\n      /**\r\n       * Default dash array pattern\r\n       * If not empty the selection border is dashed\r\n       * @type Array\r\n       */\r\n      selectionDashArray:     [],\r\n\r\n      /**\r\n       * Color of the border of selection (usually slightly darker than color of selection itself)\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\r\n\r\n      /**\r\n       * Width of a line used in object/group selection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionLineWidth:     1,\r\n\r\n      /**\r\n       * Select only shapes that are fully contained in the dragged selection rectangle.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectionFullyContained: false,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:            'move',\r\n\r\n      /**\r\n       * Default cursor value used when moving an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:             'move',\r\n\r\n      /**\r\n       * Default cursor value used for the entire canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      defaultCursor:          'default',\r\n\r\n      /**\r\n       * Cursor value used during free drawing\r\n       * @type String\r\n       * @default\r\n       */\r\n      freeDrawingCursor:      'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for rotation point\r\n       * @type String\r\n       * @default\r\n       */\r\n      rotationCursor:         'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for disabled elements ( corners with disabled action )\r\n       * @type String\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      notAllowedCursor:         'not-allowed',\r\n\r\n      /**\r\n       * Default element class that's given to wrapper (div) element of canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      containerClass:         'canvas-container',\r\n\r\n      /**\r\n       * When true, object detection happens on per-pixel basis rather than on per-bounding-box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:     false,\r\n\r\n      /**\r\n       * Number of pixels around target pixel to tolerate (consider active) during object detection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      targetFindTolerance:    0,\r\n\r\n      /**\r\n       * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipTargetFind:         false,\r\n\r\n      /**\r\n       * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\r\n       * After mousedown, mousemove creates a shape,\r\n       * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isDrawingMode:          false,\r\n\r\n      /**\r\n       * Indicates whether objects should remain in current stack position when selected.\r\n       * When false objects are brought to top and rendered as part of the selection group\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      preserveObjectStacking: false,\r\n\r\n      /**\r\n       * Indicates the angle that an object will lock to while rotating.\r\n       * @type Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapAngle: 0,\r\n\r\n      /**\r\n       * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\r\n       * When `null`, the snapThreshold will default to the snapAngle.\r\n       * @type null|Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapThreshold: null,\r\n\r\n      /**\r\n       * Indicates if the right click on canvas can output the context menu or not\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      stopContextMenu: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire right click events\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      fireRightClick: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire middle click events\r\n       * @type Boolean\r\n       * @since 1.7.8\r\n       * @default\r\n       */\r\n      fireMiddleClick: false,\r\n\r\n      /**\r\n       * Keep track of the subTargets for Mouse Events\r\n       * @type fabric.Object[]\r\n       */\r\n      targets: [],\r\n\r\n      /**\r\n       * Keep track of the hovered target\r\n       * @type fabric.Object\r\n       * @private\r\n       */\r\n      _hoveredTarget: null,\r\n\r\n      /**\r\n       * hold the list of nested targets hovered\r\n       * @type fabric.Object[]\r\n       * @private\r\n       */\r\n      _hoveredTargets: [],\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initInteractive: function() {\r\n        this._currentTransform = null;\r\n        this._groupSelector = null;\r\n        this._initWrapperElement();\r\n        this._createUpperCanvas();\r\n        this._initEventListeners();\r\n\r\n        this._initRetinaScaling();\r\n\r\n        this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\r\n\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Divides objects in two groups, one to render immediately\r\n       * and one to render as activeGroup.\r\n       * @return {Array} objects to render immediately and pushes the other in the activeGroup.\r\n       */\r\n      _chooseObjectsToRender: function() {\r\n        var activeObjects = this.getActiveObjects(),\r\n            object, objsToRender, activeGroupObjects;\r\n\r\n        if (activeObjects.length > 0 && !this.preserveObjectStacking) {\r\n          objsToRender = [];\r\n          activeGroupObjects = [];\r\n          for (var i = 0, length = this._objects.length; i < length; i++) {\r\n            object = this._objects[i];\r\n            if (activeObjects.indexOf(object) === -1 ) {\r\n              objsToRender.push(object);\r\n            }\r\n            else {\r\n              activeGroupObjects.push(object);\r\n            }\r\n          }\r\n          if (activeObjects.length > 1) {\r\n            this._activeObject._objects = activeGroupObjects;\r\n          }\r\n          objsToRender.push.apply(objsToRender, activeGroupObjects);\r\n        }\r\n        else {\r\n          objsToRender = this._objects;\r\n        }\r\n        return objsToRender;\r\n      },\r\n\r\n      /**\r\n       * Renders both the top canvas and the secondary container canvas.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\r\n          this.clearContext(this.contextTop);\r\n          this.contextTopDirty = false;\r\n        }\r\n        if (this.hasLostContext) {\r\n          this.renderTopLayer(this.contextTop);\r\n        }\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\r\n        return this;\r\n      },\r\n\r\n      renderTopLayer: function(ctx) {\r\n        ctx.save();\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._render();\r\n          this.contextTopDirty = true;\r\n        }\r\n        // we render the top context - last object\r\n        if (this.selection && this._groupSelector) {\r\n          this._drawSelection(ctx);\r\n          this.contextTopDirty = true;\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Method to render only the top canvas.\r\n       * Also used to render the group selection box.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      renderTop: function () {\r\n        var ctx = this.contextTop;\r\n        this.clearContext(ctx);\r\n        this.renderTopLayer(ctx);\r\n        this.fire('after:render');\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Resets the current transform to its original values and chooses the type of resizing based on the event\r\n       * @private\r\n       */\r\n      _resetCurrentTransform: function() {\r\n        var t = this._currentTransform;\r\n\r\n        t.target.set({\r\n          scaleX: t.original.scaleX,\r\n          scaleY: t.original.scaleY,\r\n          skewX: t.original.skewX,\r\n          skewY: t.original.skewY,\r\n          left: t.original.left,\r\n          top: t.original.top\r\n        });\r\n\r\n        if (this._shouldCenterTransform(t.target)) {\r\n          if (t.originX !== 'center') {\r\n            if (t.originX === 'right') {\r\n              t.mouseXSign = -1;\r\n            }\r\n            else {\r\n              t.mouseXSign = 1;\r\n            }\r\n          }\r\n          if (t.originY !== 'center') {\r\n            if (t.originY === 'bottom') {\r\n              t.mouseYSign = -1;\r\n            }\r\n            else {\r\n              t.mouseYSign = 1;\r\n            }\r\n          }\r\n\r\n          t.originX = 'center';\r\n          t.originY = 'center';\r\n        }\r\n        else {\r\n          t.originX = t.original.originX;\r\n          t.originY = t.original.originY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Checks if point is contained within an area of given object\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target Object to test against\r\n       * @param {Object} [point] x,y object of point coordinates we want to check.\r\n       * @return {Boolean} true if point is contained within an area of given object\r\n       */\r\n      containsPoint: function (e, target, point) {\r\n        var ignoreZoom = true,\r\n            pointer = point || this.getPointer(e, ignoreZoom),\r\n            xy;\r\n\r\n        if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\r\n          xy = this._normalizePointer(target.group, pointer);\r\n        }\r\n        else {\r\n          xy = { x: pointer.x, y: pointer.y };\r\n        }\r\n        // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\r\n        // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\r\n        return (target.containsPoint(xy) || target._findTargetCorner(pointer));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _normalizePointer: function (object, pointer) {\r\n        var m = object.calcTransformMatrix(),\r\n            invertedM = fabric.util.invertTransform(m),\r\n            vptPointer = this.restorePointerVpt(pointer);\r\n        return fabric.util.transformPoint(vptPointer, invertedM);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object is transparent at a certain location\r\n       * @param {fabric.Object} target Object to check\r\n       * @param {Number} x Left coordinate\r\n       * @param {Number} y Top coordinate\r\n       * @return {Boolean}\r\n       */\r\n      isTargetTransparent: function (target, x, y) {\r\n        // in case the target is the activeObject, we cannot execute this optimization\r\n        // because we need to draw controls too.\r\n        if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\r\n          var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\r\n              targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\r\n              targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\r\n\r\n          var isTransparent = fabric.util.isTransparent(\r\n            target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\r\n\r\n          return isTransparent;\r\n        }\r\n\r\n        var ctx = this.contextCache,\r\n            originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\r\n\r\n        target.selectionBackgroundColor = '';\r\n\r\n        this.clearContext(ctx);\r\n\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        target.render(ctx);\r\n        ctx.restore();\r\n\r\n        target === this._activeObject && target._renderControls(ctx, {\r\n          hasBorders: false,\r\n          transparentCorners: false\r\n        }, {\r\n          hasBorders: false,\r\n        });\r\n\r\n        target.selectionBackgroundColor = originalColor;\r\n\r\n        var isTransparent = fabric.util.isTransparent(\r\n          ctx, x, y, this.targetFindTolerance);\r\n\r\n        return isTransparent;\r\n      },\r\n\r\n      /**\r\n       * takes an event and determins if selection key has been pressed\r\n       * @private\r\n       * @param {Event} e Event object\r\n       */\r\n      _isSelectionKeyPressed: function(e) {\r\n        var selectionKeyPressed = false;\r\n\r\n        if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\r\n          selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\r\n        }\r\n        else {\r\n          selectionKeyPressed = e[this.selectionKey];\r\n        }\r\n\r\n        return selectionKeyPressed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldClearSelection: function (e, target) {\r\n        var activeObjects = this.getActiveObjects(),\r\n            activeObject = this._activeObject;\r\n\r\n        return (\r\n          !target\r\n          ||\r\n          (target &&\r\n            activeObject &&\r\n            activeObjects.length > 1 &&\r\n            activeObjects.indexOf(target) === -1 &&\r\n            activeObject !== target &&\r\n            !this._isSelectionKeyPressed(e))\r\n          ||\r\n          (target && !target.evented)\r\n          ||\r\n          (target &&\r\n            !target.selectable &&\r\n            activeObject &&\r\n            activeObject !== target)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * centeredScaling from object can't override centeredScaling from canvas.\r\n       * this should be fixed, since object setting should take precedence over canvas.\r\n       * @private\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldCenterTransform: function (target) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var t = this._currentTransform,\r\n            centerTransform;\r\n\r\n        if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\r\n          centerTransform = this.centeredScaling || target.centeredScaling;\r\n        }\r\n        else if (t.action === 'rotate') {\r\n          centerTransform = this.centeredRotation || target.centeredRotation;\r\n        }\r\n\r\n        return centerTransform ? !t.altKey : t.altKey;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getOriginFromCorner: function(target, corner) {\r\n        var origin = {\r\n          x: target.originX,\r\n          y: target.originY\r\n        };\r\n\r\n        if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\r\n          origin.x = 'right';\r\n        }\r\n        else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\r\n          origin.x = 'left';\r\n        }\r\n\r\n        if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\r\n          origin.y = 'bottom';\r\n        }\r\n        else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\r\n          origin.y = 'top';\r\n        }\r\n\r\n        return origin;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} alreadySelected true if target is already selected\r\n       * @param {String} corner a string representing the corner ml, mr, tl ...\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} [target] inserted back to help overriding. Unused\r\n       */\r\n      _getActionFromCorner: function(alreadySelected, corner, e /* target */) {\r\n        if (!corner || !alreadySelected) {\r\n          return 'drag';\r\n        }\r\n\r\n        switch (corner) {\r\n          case 'mtr':\r\n            return 'rotate';\r\n          case 'ml':\r\n          case 'mr':\r\n            return e[this.altActionKey] ? 'skewY' : 'scaleX';\r\n          case 'mt':\r\n          case 'mb':\r\n            return e[this.altActionKey] ? 'skewX' : 'scaleY';\r\n          default:\r\n            return 'scale';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _setupCurrentTransform: function (e, target, alreadySelected) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this.getPointer(e),\r\n            corner = target._findTargetCorner(this.getPointer(e, true)),\r\n            action = this._getActionFromCorner(alreadySelected, corner, e, target),\r\n            origin = this._getOriginFromCorner(target, corner);\r\n\r\n        this._currentTransform = {\r\n          target: target,\r\n          action: action,\r\n          corner: corner,\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          // used by transation\r\n          offsetX: pointer.x - target.left,\r\n          offsetY: pointer.y - target.top,\r\n          originX: origin.x,\r\n          originY: origin.y,\r\n          ex: pointer.x,\r\n          ey: pointer.y,\r\n          lastX: pointer.x,\r\n          lastY: pointer.y,\r\n          // unsure they are usefull anymore.\r\n          // left: target.left,\r\n          // top: target.top,\r\n          theta: degreesToRadians(target.angle),\r\n          // end of unsure\r\n          width: target.width * target.scaleX,\r\n          mouseXSign: 1,\r\n          mouseYSign: 1,\r\n          shiftKey: e.shiftKey,\r\n          altKey: e[this.centeredKey],\r\n          original: fabric.util.saveObjectTransform(target),\r\n        };\r\n\r\n        this._currentTransform.original.originX = origin.x;\r\n        this._currentTransform.original.originY = origin.y;\r\n\r\n        this._resetCurrentTransform();\r\n        this._beforeTransform(e);\r\n      },\r\n\r\n      /**\r\n       * Translates object by \"setting\" its left/top\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the translation occurred\r\n       */\r\n      _translateObject: function (x, y) {\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            newLeft = x - transform.offsetX,\r\n            newTop = y - transform.offsetY,\r\n            moveX = !target.get('lockMovementX') && target.left !== newLeft,\r\n            moveY = !target.get('lockMovementY') && target.top !== newTop;\r\n\r\n        moveX && target.set('left', newLeft);\r\n        moveY && target.set('top', newTop);\r\n        return moveX || moveY;\r\n      },\r\n\r\n      /**\r\n       * Check if we are increasing a positive skew or lower it,\r\n       * checking mouse direction and pressed corner.\r\n       * @private\r\n       */\r\n      _changeSkewTransformOrigin: function(mouseMove, t, by) {\r\n        var property = 'originX', origins = { 0: 'center' },\r\n            skew = t.target.skewX, originA = 'left', originB = 'right',\r\n            corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\r\n            flipSign = 1;\r\n\r\n        mouseMove = mouseMove > 0 ? 1 : -1;\r\n        if (by === 'y') {\r\n          skew = t.target.skewY;\r\n          originA = 'top';\r\n          originB = 'bottom';\r\n          property = 'originY';\r\n        }\r\n        origins[-1] = originA;\r\n        origins[1] = originB;\r\n\r\n        t.target.flipX && (flipSign *= -1);\r\n        t.target.flipY && (flipSign *= -1);\r\n\r\n        if (skew === 0) {\r\n          t.skewSign = -corner * mouseMove * flipSign;\r\n          t[property] = origins[-mouseMove];\r\n        }\r\n        else {\r\n          skew = skew > 0 ? 1 : -1;\r\n          t.skewSign = skew;\r\n          t[property] = origins[skew * corner * flipSign];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Skew object by mouse events\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y'\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _skewObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target, skewed = false,\r\n            lockSkewingX = target.get('lockSkewingX'),\r\n            lockSkewingY = target.get('lockSkewingY');\r\n\r\n        if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var center = target.getCenterPoint(),\r\n            actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\r\n            lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\r\n            actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\r\n\r\n        this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\r\n        actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\r\n        constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\r\n        // Actually skew the object\r\n        skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\r\n        t.lastX = x;\r\n        t.lastY = y;\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Set object skew\r\n       * @private\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _setObjectSkew: function(localMouse, transform, by, _dim) {\r\n        var target = transform.target, newValue, skewed = false,\r\n            skewSign = transform.skewSign, newDim, dimNoSkew,\r\n            otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\r\n\r\n        if (by === 'x') {\r\n          otherBy = 'y';\r\n          _otherBy = 'Y';\r\n          _by = 'X';\r\n          skewX = 0;\r\n          skewY = target.skewY;\r\n        }\r\n        else {\r\n          otherBy = 'x';\r\n          _otherBy = 'X';\r\n          _by = 'Y';\r\n          skewX = target.skewX;\r\n          skewY = 0;\r\n        }\r\n\r\n        dimNoSkew = target._getTransformedDimensions(skewX, skewY);\r\n        newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\r\n        if (newDimMouse <= 2) {\r\n          newValue = 0;\r\n        }\r\n        else {\r\n          newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\r\n                                          (dimNoSkew[otherBy] / target['scale' + _otherBy]));\r\n          newValue = fabric.util.radiansToDegrees(newValue);\r\n        }\r\n        skewed = target['skew' + _by] !== newValue;\r\n        target.set('skew' + _by, newValue);\r\n        if (target['skew' + _otherBy] !== 0) {\r\n          newDim = target._getTransformedDimensions();\r\n          newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\r\n          target.set('scale' + _otherBy, newValue);\r\n        }\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Scales object by invoking its scaleX/scaleY methods\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\r\n       *                    When not provided, an object is scaled by both dimensions equally\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target,\r\n            lockScalingX = target.lockScalingX,\r\n            lockScalingY = target.lockScalingY,\r\n            lockScalingFlip = target.lockScalingFlip;\r\n\r\n        if (lockScalingX && lockScalingY) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\r\n            localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\r\n            dim = target._getTransformedDimensions(), scaled = false;\r\n\r\n        this._setLocalMouse(localMouse, t);\r\n\r\n        // Actually scale the object\r\n        scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\r\n\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\r\n        var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\r\n            scaleX = localMouse.x * target.scaleX / _dim.x,\r\n            scaleY = localMouse.y * target.scaleY / _dim.y,\r\n            changeX = target.scaleX !== scaleX,\r\n            changeY = target.scaleY !== scaleY;\r\n\r\n        transform.newScaleX = scaleX;\r\n        transform.newScaleY = scaleY;\r\n        if (fabric.Textbox && by === 'x' && target instanceof fabric.Textbox) {\r\n          var w = target.width * (localMouse.x / _dim.x);\r\n          if (w >= target.getMinWidth()) {\r\n            scaled = w !== target.width;\r\n            target.set('width', w);\r\n            return scaled;\r\n          }\r\n          return false;\r\n        }\r\n\r\n        if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\r\n          forbidScalingX = true;\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\r\n          forbidScalingY = true;\r\n          localMouse.y = 0;\r\n        }\r\n\r\n        if (by === 'equally' && !lockScalingX && !lockScalingY) {\r\n          scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\r\n        }\r\n        else if (!by) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\r\n        }\r\n        else if (by === 'x' && !target.get('lockUniScaling')) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = changeX));\r\n        }\r\n        else if (by === 'y' && !target.get('lockUniScaling')) {\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = changeY));\r\n        }\r\n        forbidScalingX || forbidScalingY || this._flipObject(transform, by);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObjectEqually: function(localMouse, target, transform, _dim) {\r\n\r\n        var dist = localMouse.y + localMouse.x,\r\n            lastDist = _dim.y * transform.original.scaleY / target.scaleY +\r\n                       _dim.x * transform.original.scaleX / target.scaleX,\r\n            scaled, signX = localMouse.x < 0 ? -1 : 1,\r\n            signY = localMouse.y < 0 ? -1 : 1, newScaleX, newScaleY;\r\n\r\n        // We use transform.scaleX/Y instead of target.scaleX/Y\r\n        // because the object may have a min scale and we'll loose the proportions\r\n        newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\r\n        newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\r\n        scaled = newScaleX !== target.scaleX || newScaleY !== target.scaleY;\r\n        target.set('scaleX', newScaleX);\r\n        target.set('scaleY', newScaleY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _flipObject: function(transform, by) {\r\n        if (transform.newScaleX < 0 && by !== 'y') {\r\n          if (transform.originX === 'left') {\r\n            transform.originX = 'right';\r\n          }\r\n          else if (transform.originX === 'right') {\r\n            transform.originX = 'left';\r\n          }\r\n        }\r\n\r\n        if (transform.newScaleY < 0 && by !== 'x') {\r\n          if (transform.originY === 'top') {\r\n            transform.originY = 'bottom';\r\n          }\r\n          else if (transform.originY === 'bottom') {\r\n            transform.originY = 'top';\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setLocalMouse: function(localMouse, t) {\r\n        var target = t.target, zoom = this.getZoom(),\r\n            padding = target.padding / zoom;\r\n\r\n        if (t.originX === 'right') {\r\n          localMouse.x *= -1;\r\n        }\r\n        else if (t.originX === 'center') {\r\n          localMouse.x *= t.mouseXSign * 2;\r\n          if (localMouse.x < 0) {\r\n            t.mouseXSign = -t.mouseXSign;\r\n          }\r\n        }\r\n\r\n        if (t.originY === 'bottom') {\r\n          localMouse.y *= -1;\r\n        }\r\n        else if (t.originY === 'center') {\r\n          localMouse.y *= t.mouseYSign * 2;\r\n          if (localMouse.y < 0) {\r\n            t.mouseYSign = -t.mouseYSign;\r\n          }\r\n        }\r\n\r\n        // adjust the mouse coordinates when dealing with padding\r\n        if (abs(localMouse.x) > padding) {\r\n          if (localMouse.x < 0) {\r\n            localMouse.x += padding;\r\n          }\r\n          else {\r\n            localMouse.x -= padding;\r\n          }\r\n        }\r\n        else { // mouse is within the padding, set to 0\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (abs(localMouse.y) > padding) {\r\n          if (localMouse.y < 0) {\r\n            localMouse.y += padding;\r\n          }\r\n          else {\r\n            localMouse.y -= padding;\r\n          }\r\n        }\r\n        else {\r\n          localMouse.y = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Rotates object by invoking its rotate method\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the rotation occurred\r\n       */\r\n      _rotateObject: function (x, y) {\r\n\r\n        var t = this._currentTransform,\r\n            target = t.target, constraintPosition,\r\n            constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\r\n\r\n        if (target.lockRotation) {\r\n          return false;\r\n        }\r\n\r\n        var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\r\n            curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\r\n            angle = radiansToDegrees(curAngle - lastAngle + t.theta),\r\n            hasRotated = true;\r\n\r\n        if (target.snapAngle > 0) {\r\n          var snapAngle  = target.snapAngle,\r\n              snapThreshold  = target.snapThreshold || snapAngle,\r\n              rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\r\n              leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\r\n\r\n          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\r\n            angle = leftAngleLocked;\r\n          }\r\n          else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\r\n            angle = rightAngleLocked;\r\n          }\r\n        }\r\n\r\n        // normalize angle to positive value\r\n        if (angle < 0) {\r\n          angle = 360 + angle;\r\n        }\r\n        angle %= 360;\r\n\r\n        if (target.angle === angle) {\r\n          hasRotated = false;\r\n        }\r\n        else {\r\n          // rotation only happen here\r\n          target.angle = angle;\r\n          // Make sure the constraints apply\r\n          target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        }\r\n\r\n        return hasRotated;\r\n      },\r\n\r\n      /**\r\n       * Set the cursor type of the canvas element\r\n       * @param {String} value Cursor type of the canvas element.\r\n       * @see http://www.w3.org/TR/css3-ui/#cursor\r\n       */\r\n      setCursor: function (value) {\r\n        this.upperCanvasEl.style.cursor = value;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx to draw the selection on\r\n       */\r\n      _drawSelection: function (ctx) {\r\n        var groupSelector = this._groupSelector,\r\n            left = groupSelector.left,\r\n            top = groupSelector.top,\r\n            aleft = abs(left),\r\n            atop = abs(top);\r\n\r\n        if (this.selectionColor) {\r\n          ctx.fillStyle = this.selectionColor;\r\n\r\n          ctx.fillRect(\r\n            groupSelector.ex - ((left > 0) ? 0 : -left),\r\n            groupSelector.ey - ((top > 0) ? 0 : -top),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n\r\n        if (!this.selectionLineWidth || !this.selectionBorderColor) {\r\n          return;\r\n        }\r\n        ctx.lineWidth = this.selectionLineWidth;\r\n        ctx.strokeStyle = this.selectionBorderColor;\r\n\r\n        // selection border\r\n        if (this.selectionDashArray.length > 1 && !supportLineDash) {\r\n\r\n          var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n              py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\r\n\r\n          ctx.beginPath();\r\n\r\n          fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\r\n\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        }\r\n        else {\r\n          fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\r\n          ctx.strokeRect(\r\n            groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n            groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that determines what object we are clicking on\r\n       * the skipGroup parameter is for internal use, is needed for shift+click action\r\n       * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\r\n       * or the outside part of the corner.\r\n       * @param {Event} e mouse event\r\n       * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\r\n       * @return {fabric.Object} the target found\r\n       */\r\n      findTarget: function (e, skipGroup) {\r\n        if (this.skipTargetFind) {\r\n          return;\r\n        }\r\n\r\n        var ignoreZoom = true,\r\n            pointer = this.getPointer(e, ignoreZoom),\r\n            activeObject = this._activeObject,\r\n            aObjects = this.getActiveObjects(),\r\n            activeTarget, activeTargetSubs;\r\n\r\n        // first check current group (if one exists)\r\n        // active group does not check sub targets like normal groups.\r\n        // if active group just exits.\r\n        this.targets = [];\r\n\r\n        if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          return activeObject;\r\n        }\r\n        // if we hit the corner of an activeObject, let's return that.\r\n        if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\r\n          return activeObject;\r\n        }\r\n        if (aObjects.length === 1 &&\r\n          activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          if (!this.preserveObjectStacking) {\r\n            return activeObject;\r\n          }\r\n          else {\r\n            activeTarget = activeObject;\r\n            activeTargetSubs = this.targets;\r\n            this.targets = [];\r\n          }\r\n        }\r\n        var target = this._searchPossibleTargets(this._objects, pointer);\r\n        if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\r\n          target = activeTarget;\r\n          this.targets = activeTargetSubs;\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * Checks point is inside the object.\r\n       * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n       * @param {fabric.Object} obj Object to test against\r\n       * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\r\n       * @return {Boolean} true if point is contained within an area of given object\r\n       * @private\r\n       */\r\n      _checkTarget: function(pointer, obj, globalPointer) {\r\n        if (obj &&\r\n            obj.visible &&\r\n            obj.evented &&\r\n            this.containsPoint(null, obj, pointer)){\r\n          if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\r\n            var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\r\n            if (!isTransparent) {\r\n              return true;\r\n            }\r\n          }\r\n          else {\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\r\n       * @param {Array} [objects] objects array to look into\r\n       * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n       * @return {fabric.Object} object that contains pointer\r\n       * @private\r\n       */\r\n      _searchPossibleTargets: function(objects, pointer) {\r\n        // Cache all targets where their bounding box contains point.\r\n        var target, i = objects.length, subTarget;\r\n        // Do not check for currently grouped objects, since we check the parent group itself.\r\n        // until we call this function specifically to search inside the activeGroup\r\n        while (i--) {\r\n          var objToCheck = objects[i];\r\n          var pointerToUse = objToCheck.group && objToCheck.group.type !== 'activeSelection' ?\r\n            this._normalizePointer(objToCheck.group, pointer) : pointer;\r\n          if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\r\n            target = objects[i];\r\n            if (target.subTargetCheck && target instanceof fabric.Group) {\r\n              subTarget = this._searchPossibleTargets(target._objects, pointer);\r\n              subTarget && this.targets.push(subTarget);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates without the effect of the viewport\r\n       * @param {Object} pointer with \"x\" and \"y\" number values\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      restorePointerVpt: function(pointer) {\r\n        return fabric.util.transformPoint(\r\n          pointer,\r\n          fabric.util.invertTransform(this.viewportTransform)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates relative to canvas.\r\n       * Can return coordinates with or without viewportTransform.\r\n       * ignoreZoom false gives back coordinates that represent\r\n       * the point clicked on canvas element.\r\n       * ignoreZoom true gives back coordinates after being processed\r\n       * by the viewportTransform ( sort of coordinates of what is displayed\r\n       * on the canvas where you are clicking.\r\n       * ignoreZoom true = HTMLElement coordinates relative to top,left\r\n       * ignoreZoom false, default = fabric space coordinates, the same used for shape position\r\n       * To interact with your shapes top and left you want to use ignoreZoom true\r\n       * most of the time, while ignoreZoom false will give you coordinates\r\n       * compatible with the object.oCoords system.\r\n       * of the time.\r\n       * @param {Event} e\r\n       * @param {Boolean} ignoreZoom\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      getPointer: function (e, ignoreZoom) {\r\n        // return cached values if we are in the event processing chain\r\n        if (this._absolutePointer && !ignoreZoom) {\r\n          return this._absolutePointer;\r\n        }\r\n        if (this._pointer && ignoreZoom) {\r\n          return this._pointer;\r\n        }\r\n\r\n        var pointer = getPointer(e),\r\n            upperCanvasEl = this.upperCanvasEl,\r\n            bounds = upperCanvasEl.getBoundingClientRect(),\r\n            boundsWidth = bounds.width || 0,\r\n            boundsHeight = bounds.height || 0,\r\n            cssScale;\r\n\r\n        if (!boundsWidth || !boundsHeight ) {\r\n          if ('top' in bounds && 'bottom' in bounds) {\r\n            boundsHeight = Math.abs( bounds.top - bounds.bottom );\r\n          }\r\n          if ('right' in bounds && 'left' in bounds) {\r\n            boundsWidth = Math.abs( bounds.right - bounds.left );\r\n          }\r\n        }\r\n\r\n        this.calcOffset();\r\n        pointer.x = pointer.x - this._offset.left;\r\n        pointer.y = pointer.y - this._offset.top;\r\n        if (!ignoreZoom) {\r\n          pointer = this.restorePointerVpt(pointer);\r\n        }\r\n\r\n        var retinaScaling = this.getRetinaScaling();\r\n        if (retinaScaling !== 1) {\r\n          pointer.x /= retinaScaling;\r\n          pointer.y /= retinaScaling;\r\n        }\r\n\r\n        if (boundsWidth === 0 || boundsHeight === 0) {\r\n          // If bounds are not available (i.e. not visible), do not apply scale.\r\n          cssScale = { width: 1, height: 1 };\r\n        }\r\n        else {\r\n          cssScale = {\r\n            width: upperCanvasEl.width / boundsWidth,\r\n            height: upperCanvasEl.height / boundsHeight\r\n          };\r\n        }\r\n\r\n        return {\r\n          x: pointer.x * cssScale.width,\r\n          y: pointer.y * cssScale.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\r\n       */\r\n      _createUpperCanvas: function () {\r\n        var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, ''),\r\n            lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\r\n\r\n        // there is no need to create a new upperCanvas element if we have already one.\r\n        if (upperCanvasEl) {\r\n          upperCanvasEl.className = '';\r\n        }\r\n        else {\r\n          upperCanvasEl = this._createCanvasElement();\r\n          this.upperCanvasEl = upperCanvasEl;\r\n        }\r\n        fabric.util.addClass(upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\r\n\r\n        this.wrapperEl.appendChild(upperCanvasEl);\r\n\r\n        this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\r\n        this._applyCanvasStyle(upperCanvasEl);\r\n        this.contextTop = upperCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function () {\r\n        this.cacheCanvasEl = this._createCanvasElement();\r\n        this.cacheCanvasEl.setAttribute('width', this.width);\r\n        this.cacheCanvasEl.setAttribute('height', this.height);\r\n        this.contextCache = this.cacheCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initWrapperElement: function () {\r\n        this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\r\n          'class': this.containerClass\r\n        });\r\n        fabric.util.setStyle(this.wrapperEl, {\r\n          width: this.width + 'px',\r\n          height: this.height + 'px',\r\n          position: 'relative'\r\n        });\r\n        fabric.util.makeElementUnselectable(this.wrapperEl);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement} element canvas element to apply styles on\r\n       */\r\n      _applyCanvasStyle: function (element) {\r\n        var width = this.width || element.width,\r\n            height = this.height || element.height;\r\n\r\n        fabric.util.setStyle(element, {\r\n          position: 'absolute',\r\n          width: width + 'px',\r\n          height: height + 'px',\r\n          left: 0,\r\n          top: 0,\r\n          'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',\r\n          '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\r\n        });\r\n        element.width = width;\r\n        element.height = height;\r\n        fabric.util.makeElementUnselectable(element);\r\n      },\r\n\r\n      /**\r\n       * Copy the entire inline style from one element (fromEl) to another (toEl)\r\n       * @private\r\n       * @param {Element} fromEl Element style is copied from\r\n       * @param {Element} toEl Element copied style is applied to\r\n       */\r\n      _copyCanvasStyle: function (fromEl, toEl) {\r\n        toEl.style.cssText = fromEl.style.cssText;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where object selection is drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getSelectionContext: function() {\r\n        return this.contextTop;\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element on which object selection is drawn\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getSelectionElement: function () {\r\n        return this.upperCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * Returns currently active object\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObject: function () {\r\n        return this._activeObject;\r\n      },\r\n\r\n      /**\r\n       * Returns an array with the current selected objects\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObjects: function () {\r\n        var active = this._activeObject;\r\n        if (active) {\r\n          if (active.type === 'activeSelection' && active._objects) {\r\n            return active._objects.slice(0);\r\n          }\r\n          else {\r\n            return [active];\r\n          }\r\n        }\r\n        return [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        // removing active object should fire \"selection:cleared\" events\r\n        if (obj === this._activeObject) {\r\n          this.fire('before:selection:cleared', { target: obj });\r\n          this._discardActiveObject();\r\n          this.fire('selection:cleared', { target: obj });\r\n          obj.fire('deselected');\r\n        }\r\n        if (obj === this._hoveredTarget){\r\n          this._hoveredTarget = null;\r\n          this._hoveredTargets = [];\r\n        }\r\n        this.callSuper('_onObjectRemoved', obj);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Compares the old activeObject with the current one and fires correct events\r\n       * @param {fabric.Object} obj old activeObject\r\n       */\r\n      _fireSelectionEvents: function(oldObjects, e) {\r\n        var somethingChanged = false, objects = this.getActiveObjects(),\r\n            added = [], removed = [], opt = { e: e };\r\n        oldObjects.forEach(function(oldObject) {\r\n          if (objects.indexOf(oldObject) === -1) {\r\n            somethingChanged = true;\r\n            oldObject.fire('deselected', opt);\r\n            removed.push(oldObject);\r\n          }\r\n        });\r\n        objects.forEach(function(object) {\r\n          if (oldObjects.indexOf(object) === -1) {\r\n            somethingChanged = true;\r\n            object.fire('selected', opt);\r\n            added.push(object);\r\n          }\r\n        });\r\n        if (oldObjects.length > 0 && objects.length > 0) {\r\n          opt.selected = added;\r\n          opt.deselected = removed;\r\n          // added for backward compatibility\r\n          opt.updated = added[0] || removed[0];\r\n          opt.target = this._activeObject;\r\n          somethingChanged && this.fire('selection:updated', opt);\r\n        }\r\n        else if (objects.length > 0) {\r\n          // deprecated event\r\n          if (objects.length === 1) {\r\n            opt.target = added[0];\r\n            this.fire('object:selected', opt);\r\n          }\r\n          opt.selected = added;\r\n          // added for backward compatibility\r\n          opt.target = this._activeObject;\r\n          this.fire('selection:created', opt);\r\n        }\r\n        else if (oldObjects.length > 0) {\r\n          opt.deselected = removed;\r\n          this.fire('selection:cleared', opt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets given object as the only active object on canvas\r\n       * @param {fabric.Object} object Object to set as an active one\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setActiveObject: function (object, e) {\r\n        var currentActives = this.getActiveObjects();\r\n        this._setActiveObject(object, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object to set as active\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {Boolean} true if the selection happened\r\n       */\r\n      _setActiveObject: function(object, e) {\r\n        if (this._activeObject === object) {\r\n          return false;\r\n        }\r\n        if (!this._discardActiveObject(e, object)) {\r\n          return false;\r\n        }\r\n        if (object.onSelect({ e: e })) {\r\n          return false;\r\n        }\r\n        this._activeObject = object;\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _discardActiveObject: function(e, object) {\r\n        var obj = this._activeObject;\r\n        if (obj) {\r\n          // onDeselect return TRUE to cancel selection;\r\n          if (obj.onDeselect({ e: e, object: object })) {\r\n            return false;\r\n          }\r\n          this._activeObject = null;\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Discards currently active object and fire events. If the function is called by fabric\r\n       * as a consequence of a mouse event, the event is passed as a parameter and\r\n       * sent to the fire function for the custom events. When used as a method the\r\n       * e param does not have any application.\r\n       * @param {event} e\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      discardActiveObject: function (e) {\r\n        var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\r\n        if (currentActives.length) {\r\n          this.fire('before:selection:cleared', { target: activeObject, e: e });\r\n        }\r\n        this._discardActiveObject(e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and removes all event listeners\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        var wrapper = this.wrapperEl;\r\n        this.removeListeners();\r\n        wrapper.removeChild(this.upperCanvasEl);\r\n        wrapper.removeChild(this.lowerCanvasEl);\r\n        this.contextCache = null;\r\n        this.contextTop = null;\r\n        ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n        if (wrapper.parentNode) {\r\n          wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\r\n        }\r\n        delete this.wrapperEl;\r\n        fabric.StaticCanvas.prototype.dispose.call(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        // this.discardActiveGroup();\r\n        this.discardActiveObject();\r\n        this.clearContext(this.contextTop);\r\n        return this.callSuper('clear');\r\n      },\r\n\r\n      /**\r\n       * Draws objects' controls (borders/controls)\r\n       * @param {CanvasRenderingContext2D} ctx Context to render controls on\r\n       */\r\n      drawControls: function(ctx) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (activeObject) {\r\n          activeObject._renderControls(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        //If the object is part of the current selection group, it should\r\n        //be transformed appropriately\r\n        //i.e. it should be serialised as it would appear if the selection group\r\n        //were to be destroyed.\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance),\r\n            object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\r\n        //Undo the damage we did by changing all of its properties\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Realises an object's group transformation on it\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to transform (gets mutated)\r\n       * @returns the original values of instance which were changed\r\n       */\r\n      _realizeGroupTransformOnObject: function(instance) {\r\n        if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\r\n          var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\r\n          //Copy all the positionally relevant properties across now\r\n          var originalValues = {};\r\n          layoutProps.forEach(function(prop) {\r\n            originalValues[prop] = instance[prop];\r\n          });\r\n          this._activeObject.realizeTransform(instance);\r\n          return originalValues;\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Restores the changed properties of instance\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\r\n       * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\r\n       */\r\n      _unwindGroupTransformOnObject: function(instance, originalValues) {\r\n        if (originalValues) {\r\n          instance.set(originalValues);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        //If the object is in a selection group, simulate what would happen to that\r\n        //object when the group is deselected\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance);\r\n        this.callSuper('_setSVGObject', markup, instance, reviver);\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n      },\r\n\r\n      setViewportTransform: function (vpt) {\r\n        if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\r\n          this._activeObject.clearContextTop();\r\n        }\r\n        fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\r\n      }\r\n    });\r\n\r\n    // copying static properties manually to work around Opera's bug,\r\n    // where \"prototype\" property is enumerable and overrides existing prototype\r\n    for (var prop in fabric.StaticCanvas) {\r\n      if (prop !== 'prototype') {\r\n        fabric.Canvas[prop] = fabric.StaticCanvas[prop];\r\n      }\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var cursorOffset = {\r\n          mt: 0, // n\r\n          tr: 1, // ne\r\n          mr: 2, // e\r\n          br: 3, // se\r\n          mb: 4, // s\r\n          bl: 5, // sw\r\n          ml: 6, // w\r\n          tl: 7 // nw\r\n        },\r\n        addListener = fabric.util.addListener,\r\n        removeListener = fabric.util.removeListener,\r\n        RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\r\n        addEventOptions = { passive: false };\r\n\r\n    function checkClick(e, value) {\r\n      return e.button && (e.button === value - 1);\r\n    }\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Map of cursor style values for each of the object controls\r\n       * @private\r\n       */\r\n      cursorMap: [\r\n        'n-resize',\r\n        'ne-resize',\r\n        'e-resize',\r\n        'se-resize',\r\n        's-resize',\r\n        'sw-resize',\r\n        'w-resize',\r\n        'nw-resize'\r\n      ],\r\n\r\n      /**\r\n       * Contains the id of the touch event that owns the fabric transform\r\n       * @type Number\r\n       * @private\r\n       */\r\n      mainTouchId: null,\r\n\r\n      /**\r\n       * Adds mouse listeners to canvas\r\n       * @private\r\n       */\r\n      _initEventListeners: function () {\r\n        // in case we initialized the class twice. This should not happen normally\r\n        // but in some kind of applications where the canvas element may be changed\r\n        // this is a workaround to having double listeners.\r\n        this.removeListeners();\r\n        this._bindEvents();\r\n        this.addOrRemove(addListener, 'add');\r\n      },\r\n\r\n      /**\r\n       * return an event prefix pointer or mouse.\r\n       * @private\r\n       */\r\n      _getEventPrefix: function () {\r\n        return this.enablePointerEvents ? 'pointer' : 'mouse';\r\n      },\r\n\r\n      addOrRemove: function(functor, eventjsFunctor) {\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        functor(fabric.window, 'resize', this._onResize);\r\n        functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n        functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);\r\n        functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);\r\n        functor(canvasElement, 'wheel', this._onMouseWheel);\r\n        functor(canvasElement, 'contextmenu', this._onContextMenu);\r\n        functor(canvasElement, 'dblclick', this._onDoubleClick);\r\n        functor(canvasElement, 'dragover', this._onDragOver);\r\n        functor(canvasElement, 'dragenter', this._onDragEnter);\r\n        functor(canvasElement, 'dragleave', this._onDragLeave);\r\n        functor(canvasElement, 'drop', this._onDrop);\r\n        if (!this.enablePointerEvents) {\r\n          functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\r\n        }\r\n        if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\r\n          eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\r\n          eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\r\n          eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);\r\n          eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\r\n          eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Removes all event listeners\r\n       */\r\n      removeListeners: function() {\r\n        this.addOrRemove(removeListener, 'remove');\r\n        // if you dispose on a mouseDown, before mouse up, you need to clean document to...\r\n        var eventTypePrefix = this._getEventPrefix();\r\n        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n        removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _bindEvents: function() {\r\n        if (this.eventsBound) {\r\n          // for any reason we pass here twice we do not want to bind events twice.\r\n          return;\r\n        }\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onTouchStart = this._onTouchStart.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onTouchEnd = this._onTouchEnd.bind(this);\r\n        this._onResize = this._onResize.bind(this);\r\n        this._onGesture = this._onGesture.bind(this);\r\n        this._onDrag = this._onDrag.bind(this);\r\n        this._onShake = this._onShake.bind(this);\r\n        this._onLongPress = this._onLongPress.bind(this);\r\n        this._onOrientationChange = this._onOrientationChange.bind(this);\r\n        this._onMouseWheel = this._onMouseWheel.bind(this);\r\n        this._onMouseOut = this._onMouseOut.bind(this);\r\n        this._onMouseEnter = this._onMouseEnter.bind(this);\r\n        this._onContextMenu = this._onContextMenu.bind(this);\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onDragOver = this._onDragOver.bind(this);\r\n        this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\r\n        this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\r\n        this._onDrop = this._simpleEventHandler.bind(this, 'drop');\r\n        this.eventsBound = true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js gesture\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onGesture: function(e, self) {\r\n        this.__onTransformGesture && this.__onTransformGesture(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js drag\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onDrag: function(e, self) {\r\n        this.__onDrag && this.__onDrag(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on wheel event\r\n       */\r\n      _onMouseWheel: function(e) {\r\n        this.__onMouseWheel(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseOut: function(e) {\r\n        var target = this._hoveredTarget;\r\n        this.fire('mouse:out', { target: target, e: e });\r\n        this._hoveredTarget = null;\r\n        target && target.fire('mouseout', { e: e });\r\n\r\n        var _this = this;\r\n        this._hoveredTargets.forEach(function(_target){\r\n          _this.fire('mouse:out', { target: target, e: e });\r\n          _target && target.fire('mouseout', { e: e });\r\n        });\r\n        this._hoveredTargets = [];\r\n\r\n        if (this._iTextInstances) {\r\n          this._iTextInstances.forEach(function(obj) {\r\n            if (obj.isEditing) {\r\n              obj.hiddenTextarea.focus();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseenter\r\n       */\r\n      _onMouseEnter: function(e) {\r\n        // This find target and consequent 'mouse:over' is used to\r\n        // clear old instances on hovered target.\r\n        // calling findTarget has the side effect of killing target.__corner.\r\n        // as a short term fix we are not firing this if we are currently transforming.\r\n        // as a long term fix we need to separate the action of finding a target with the\r\n        // side effects we added to it.\r\n        if (!this.currentTransform && !this.findTarget(e)) {\r\n          this.fire('mouse:over', { target: null, e: e });\r\n          this._hoveredTarget = null;\r\n          this._hoveredTargets = [];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js orientation change\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onOrientationChange: function(e, self) {\r\n        this.__onOrientationChange && this.__onOrientationChange(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onShake: function(e, self) {\r\n        this.__onShake && this.__onShake(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onLongPress: function(e, self) {\r\n        this.__onLongPress && this.__onLongPress(e, self);\r\n      },\r\n\r\n      /**\r\n       * prevent default to allow drop event to be fired\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       */\r\n      _onDragOver: function(e) {\r\n        e.preventDefault();\r\n        var target = this._simpleEventHandler('dragover', e);\r\n        this._fireEnterLeaveEvents(target, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onContextMenu: function (e) {\r\n        if (this.stopContextMenu) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onDoubleClick: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'dblclick');\r\n        this._resetTransformEventData(e);\r\n      },\r\n\r\n      /**\r\n       * Return a the id of an event.\r\n       * returns either the pointerId or the identifier or 0 for the mouse event\r\n       * @private\r\n       * @param {Event} evt Event object\r\n       */\r\n      getPointerId: function(evt) {\r\n        var changedTouches = evt.changedTouches;\r\n\r\n        if (changedTouches) {\r\n          return changedTouches[0] && changedTouches[0].identifier;\r\n        }\r\n\r\n        if (this.enablePointerEvents) {\r\n          return evt.pointerId;\r\n        }\r\n\r\n        return -1;\r\n      },\r\n\r\n      /**\r\n       * Determines if an event has the id of the event that is considered main\r\n       * @private\r\n       * @param {evt} event Event object\r\n       */\r\n      _isMainEvent: function(evt) {\r\n        if (evt.isPrimary === true) {\r\n          return true;\r\n        }\r\n        if (evt.isPrimary === false) {\r\n          return false;\r\n        }\r\n        if (evt.type === 'touchend' && evt.touches.length === 0) {\r\n          return true;\r\n        }\r\n        if (evt.changedTouches) {\r\n          return evt.changedTouches[0].identifier === this.mainTouchId;\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onTouchStart: function(e) {\r\n        e.preventDefault();\r\n        if (this.mainTouchId === null) {\r\n          this.mainTouchId = this.getPointerId(e);\r\n        }\r\n        this.__onMouseDown(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n        // Unbind mousedown to prevent double triggers from touch devices\r\n        removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDown: function (e) {\r\n        this.__onMouseDown(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n        addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onTouchEnd: function(e) {\r\n        if (e.touches.length > 0) {\r\n          // if there are still touches stop here\r\n          return;\r\n        }\r\n        this.__onMouseUp(e);\r\n        this._resetTransformEventData();\r\n        this.mainTouchId = null;\r\n        var eventTypePrefix = this._getEventPrefix();\r\n        removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n        var _this = this;\r\n        if (this._willAddMouseDown) {\r\n          clearTimeout(this._willAddMouseDown);\r\n        }\r\n        this._willAddMouseDown = setTimeout(function() {\r\n          // Wait 400ms before rebinding mousedown to prevent double triggers\r\n          // from touch devices\r\n          addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);\r\n          _this._willAddMouseDown = 0;\r\n        }, 400);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUp: function (e) {\r\n        this.__onMouseUp(e);\r\n        this._resetTransformEventData();\r\n        var canvasElement = this.upperCanvasEl,\r\n            eventTypePrefix = this._getEventPrefix();\r\n        if (this._isMainEvent(e)) {\r\n          removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n          removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n          addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMove: function (e) {\r\n        !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\r\n        this.__onMouseMove(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onResize: function () {\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Decides whether the canvas should be redrawn in mouseup and mousedown events.\r\n       * @private\r\n       * @param {Object} target\r\n       */\r\n      _shouldRender: function(target) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (\r\n          !!activeObject !== !!target ||\r\n          (activeObject && target && (activeObject !== target))\r\n        ) {\r\n          // this covers: switch of target, from target to no target, selection of target\r\n          // multiSelection with key and mouse\r\n          return true;\r\n        }\r\n        else if (activeObject && activeObject.isEditing) {\r\n          // if we mouse up/down over a editing textbox a cursor change,\r\n          // there is no need to re render\r\n          return false;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is released on canvas.\r\n       * The method resets the currentTransform parameters, store the image corner\r\n       * position in the image object and render the canvas on top.\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseUp: function (e) {\r\n        var target, transform = this._currentTransform,\r\n            groupSelector = this._groupSelector, shouldRender = false,\r\n            isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\r\n        this._cacheTransformEventData(e);\r\n        target = this._target;\r\n        this._handleEvent(e, 'up:before');\r\n        // if right/middle click just fire events and return\r\n        // target undefined will make the _handleEvent search the target\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\r\n          }\r\n          this._resetTransformEventData();\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this._onMouseUpInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n        if (transform) {\r\n          this._finalizeCurrentTransform(e);\r\n          shouldRender = transform.actionPerformed;\r\n        }\r\n\r\n        if (!isClick) {\r\n          this._maybeGroupObjects(e);\r\n          shouldRender || (shouldRender = this._shouldRender(target));\r\n        }\r\n        if (target) {\r\n          target.isMoving = false;\r\n        }\r\n        this._setCursorFromEvent(e, target);\r\n        this._handleEvent(e, 'up', LEFT_CLICK, isClick);\r\n        this._groupSelector = null;\r\n        this._currentTransform = null;\r\n        // reset the target information about which corner is selected\r\n        target && (target.__corner = 0);\r\n        if (shouldRender) {\r\n          this.requestRenderAll();\r\n        }\r\n        else if (!isClick) {\r\n          this.renderTop();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @return {Fabric.Object} target return the the target found, for internal reasons.\r\n       */\r\n      _simpleEventHandler: function(eventType, e) {\r\n        var target = this.findTarget(e),\r\n            targets = this.targets,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n            };\r\n        this.fire(eventType, options);\r\n        target && target.fire(eventType, options);\r\n        if (!targets) {\r\n          return target;\r\n        }\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire(eventType, options);\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @param {fabric.Object} targetObj receiving event\r\n       * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\r\n       * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\r\n       */\r\n      _handleEvent: function(e, eventType, button, isClick) {\r\n        var target = this._target,\r\n            targets = this.targets || [],\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n              button: button || LEFT_CLICK,\r\n              isClick: isClick || false,\r\n              pointer: this._pointer,\r\n              absolutePointer: this._absolutePointer,\r\n              transform: this._currentTransform\r\n            };\r\n        this.fire('mouse:' + eventType, options);\r\n        target && target.fire('mouse' + eventType, options);\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire('mouse' + eventType, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\r\n       */\r\n      _finalizeCurrentTransform: function(e) {\r\n\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            eventName,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              transform: transform,\r\n            };\r\n\r\n        if (target._scaling) {\r\n          target._scaling = false;\r\n        }\r\n\r\n        target.setCoords();\r\n\r\n        if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\r\n          if (transform.actionPerformed) {\r\n            eventName = this._addEventOptions(options, transform);\r\n            this._fire(eventName, options);\r\n          }\r\n          this._fire('modified', options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Mutate option object in order to add by property and give back the event name.\r\n       * @private\r\n       * @param {Object} options to mutate\r\n       * @param {Object} transform to inspect action from\r\n       */\r\n      _addEventOptions: function(options, transform) {\r\n        // we can probably add more details at low cost\r\n        // scale change, rotation changes, translation changes\r\n        var eventName, by;\r\n        switch (transform.action) {\r\n          case 'scaleX':\r\n            eventName = 'scaled';\r\n            by = 'x';\r\n            break;\r\n          case 'scaleY':\r\n            eventName = 'scaled';\r\n            by = 'y';\r\n            break;\r\n          case 'skewX':\r\n            eventName = 'skewed';\r\n            by = 'x';\r\n            break;\r\n          case 'skewY':\r\n            eventName = 'skewed';\r\n            by = 'y';\r\n            break;\r\n          case 'scale':\r\n            eventName = 'scaled';\r\n            by = 'equally';\r\n            break;\r\n          case 'rotate':\r\n            eventName = 'rotated';\r\n            break;\r\n          case 'drag':\r\n            eventName = 'moved';\r\n            break;\r\n        }\r\n        options.by = by;\r\n        return eventName;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDownInDrawingMode: function(e) {\r\n        this._isCurrentlyDrawing = true;\r\n        if (this.getActiveObject()) {\r\n          this.discardActiveObject(e).requestRenderAll();\r\n        }\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, this.contextTop);\r\n        }\r\n        var pointer = this.getPointer(e);\r\n        this.freeDrawingBrush.onMouseDown(pointer, { e: e, pointer: pointer });\r\n        this._handleEvent(e, 'down');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMoveInDrawingMode: function(e) {\r\n        if (this._isCurrentlyDrawing) {\r\n          var pointer = this.getPointer(e);\r\n          this.freeDrawingBrush.onMouseMove(pointer, { e: e, pointer: pointer });\r\n        }\r\n        this.setCursor(this.freeDrawingCursor);\r\n        this._handleEvent(e, 'move');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUpInDrawingMode: function(e) {\r\n        if (this.clipTo) {\r\n          this.contextTop.restore();\r\n        }\r\n        var pointer = this.getPointer(e);\r\n        this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e, pointer: pointer });\r\n        this._handleEvent(e, 'up');\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is clicked on canvas.\r\n       * The method inits the currentTransform parameters and renders all the\r\n       * canvas so the current image can be placed on the top canvas and the rest\r\n       * in on the container one.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      __onMouseDown: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'down:before');\r\n        var target = this._target;\r\n        // if right click just fire events\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'down', RIGHT_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'down', MIDDLE_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseDownInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n\r\n        // ignore if some object is being transformed at this moment\r\n        if (this._currentTransform) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this._pointer;\r\n        // save pointer for check in __onMouseUp event\r\n        this._previousPointer = pointer;\r\n        var shouldRender = this._shouldRender(target),\r\n            shouldGroup = this._shouldGroup(e, target);\r\n        if (this._shouldClearSelection(e, target)) {\r\n          this.discardActiveObject(e);\r\n        }\r\n        else if (shouldGroup) {\r\n          this._handleGrouping(e, target);\r\n          target = this._activeObject;\r\n        }\r\n\r\n        if (this.selection && (!target ||\r\n          (!target.selectable && !target.isEditing && target !== this._activeObject))) {\r\n          this._groupSelector = {\r\n            ex: pointer.x,\r\n            ey: pointer.y,\r\n            top: 0,\r\n            left: 0\r\n          };\r\n        }\r\n\r\n        if (target) {\r\n          var alreadySelected = target === this._activeObject;\r\n          if (target.selectable) {\r\n            this.setActiveObject(target, e);\r\n          }\r\n          if (target === this._activeObject && (target.__corner || !shouldGroup)) {\r\n            this._setupCurrentTransform(e, target, alreadySelected);\r\n          }\r\n        }\r\n        this._handleEvent(e, 'down');\r\n        // we must renderAll so that we update the visuals\r\n        (shouldRender || shouldGroup) && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * reset cache form common information needed during event processing\r\n       * @private\r\n       */\r\n      _resetTransformEventData: function() {\r\n        this._target = null;\r\n        this._pointer = null;\r\n        this._absolutePointer = null;\r\n      },\r\n\r\n      /**\r\n       * Cache common information needed during event processing\r\n       * @private\r\n       * @param {Event} e Event object fired on event\r\n       */\r\n      _cacheTransformEventData: function(e) {\r\n        // reset in order to avoid stale caching\r\n        this._resetTransformEventData();\r\n        this._pointer = this.getPointer(e, true);\r\n        this._absolutePointer = this.restorePointerVpt(this._pointer);\r\n        this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeTransform: function(e) {\r\n        var t = this._currentTransform;\r\n        this.stateful && t.target.saveState();\r\n        this.fire('before:transform', {\r\n          e: e,\r\n          transform: t,\r\n        });\r\n        // determine if it's a drag or rotate case\r\n        if (t.corner) {\r\n          this.onBeforeScaleRotate(t.target);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is hovering the canvas.\r\n       * The currentTransform parameter will define whether the user is rotating/scaling/translating\r\n       * an image or neither of them (only hovering). A group selection is also possible and would cancel\r\n       * all any other type of action.\r\n       * In case of an image transformation only the top canvas will be rendered.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      __onMouseMove: function (e) {\r\n        this._handleEvent(e, 'move:before');\r\n        this._cacheTransformEventData(e);\r\n        var target, pointer;\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseMoveInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (!this._isMainEvent(e)) {\r\n          return;\r\n        }\r\n\r\n        var groupSelector = this._groupSelector;\r\n\r\n        // We initially clicked in an empty area, so we draw a box for multiple selection\r\n        if (groupSelector) {\r\n          pointer = this._pointer;\r\n\r\n          groupSelector.left = pointer.x - groupSelector.ex;\r\n          groupSelector.top = pointer.y - groupSelector.ey;\r\n\r\n          this.renderTop();\r\n        }\r\n        else if (!this._currentTransform) {\r\n          target = this.findTarget(e) || null;\r\n          this._setCursorFromEvent(e, target);\r\n          this._fireOverOutEvents(target, e);\r\n        }\r\n        else {\r\n          this._transformObject(e);\r\n        }\r\n        this._handleEvent(e, 'move');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * Manage the mouseout, mouseover events for the fabric object on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the mousemove event\r\n       * @param {Event} e Event object fired on mousemove\r\n       * @private\r\n       */\r\n      _fireOverOutEvents: function(target, e) {\r\n        var _hoveredTarget = this._hoveredTarget,\r\n            _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n            length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n        this.fireSyntheticInOutEvents(target, e, {\r\n          oldTarget: _hoveredTarget,\r\n          evtOut: 'mouseout',\r\n          canvasEvtOut: 'mouse:out',\r\n          evtIn: 'mouseover',\r\n          canvasEvtIn: 'mouse:over',\r\n        });\r\n        for (var i = 0; i < length; i++){\r\n          this.fireSyntheticInOutEvents(targets[i], e, {\r\n            oldTarget: _hoveredTargets[i],\r\n            evtOut: 'mouseout',\r\n            evtIn: 'mouseover',\r\n          });\r\n        }\r\n        this._hoveredTarget = target;\r\n        this._hoveredTargets = this.targets.concat();\r\n      },\r\n\r\n      /**\r\n       * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the onDrag event\r\n       * @param {Event} e Event object fired on ondrag\r\n       * @private\r\n       */\r\n      _fireEnterLeaveEvents: function(target, e) {\r\n        var _draggedoverTarget = this._draggedoverTarget,\r\n            _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n            length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n        this.fireSyntheticInOutEvents(target, e, {\r\n          oldTarget: _draggedoverTarget,\r\n          evtOut: 'dragleave',\r\n          evtIn: 'dragenter',\r\n        });\r\n        for (var i = 0; i < length; i++) {\r\n          this.fireSyntheticInOutEvents(targets[i], e, {\r\n            oldTarget: _hoveredTargets[i],\r\n            evtOut: 'dragleave',\r\n            evtIn: 'dragenter',\r\n          });\r\n        }\r\n        this._draggedoverTarget = target;\r\n      },\r\n\r\n      /**\r\n       * Manage the synthetic in/out events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the supported events\r\n       * @param {Event} e Event object fired\r\n       * @param {Object} config configuration for the function to work\r\n       * @param {String} config.targetName property on the canvas where the old target is stored\r\n       * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\r\n       * @param {String} config.evtOut name of the event to fire for out\r\n       * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\r\n       * @param {String} config.evtIn name of the event to fire for in\r\n       * @private\r\n       */\r\n      fireSyntheticInOutEvents: function(target, e, config) {\r\n        var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires,\r\n            targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\r\n        if (targetChanged) {\r\n          inOpt = { e: e, target: target, previousTarget: oldTarget };\r\n          outOpt = { e: e, target: oldTarget, nextTarget: target };\r\n        }\r\n        inFires = target && targetChanged;\r\n        outFires = oldTarget && targetChanged;\r\n        if (outFires) {\r\n          canvasEvtOut && this.fire(canvasEvtOut, outOpt);\r\n          oldTarget.fire(config.evtOut, outOpt);\r\n        }\r\n        if (inFires) {\r\n          canvasEvtIn && this.fire(canvasEvtIn, inOpt);\r\n          target.fire(config.evtIn, inOpt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines actions when an Event Mouse Wheel\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseWheel: function(e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'wheel');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event fired on mousemove\r\n       */\r\n      _transformObject: function(e) {\r\n        var pointer = this.getPointer(e),\r\n            transform = this._currentTransform;\r\n\r\n        transform.reset = false;\r\n        transform.target.isMoving = true;\r\n        transform.shiftKey = e.shiftKey;\r\n        transform.altKey = e[this.centeredKey];\r\n\r\n        this._beforeScaleTransform(e, transform);\r\n        this._performTransformAction(e, transform, pointer);\r\n\r\n        transform.actionPerformed && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _performTransformAction: function(e, transform, pointer) {\r\n        var x = pointer.x,\r\n            y = pointer.y,\r\n            action = transform.action,\r\n            actionPerformed = false,\r\n            options = {\r\n              target: transform.target,\r\n              e: e,\r\n              transform: transform,\r\n              pointer: pointer\r\n            };\r\n\r\n        if (action === 'rotate') {\r\n          (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\r\n        }\r\n        else if (action === 'scale') {\r\n          (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleX') {\r\n          (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleY') {\r\n          (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'skewX') {\r\n          (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\r\n        }\r\n        else if (action === 'skewY') {\r\n          (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\r\n        }\r\n        else {\r\n          actionPerformed = this._translateObject(x, y);\r\n          if (actionPerformed) {\r\n            this._fire('moving', options);\r\n            this.setCursor(options.target.moveCursor || this.moveCursor);\r\n          }\r\n        }\r\n        transform.actionPerformed = transform.actionPerformed || actionPerformed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fire: function(eventName, options) {\r\n        this.fire('object:' + eventName, options);\r\n        options.target.fire(eventName, options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeScaleTransform: function(e, transform) {\r\n        if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\r\n          var centerTransform = this._shouldCenterTransform(transform.target);\r\n\r\n          // Switch from a normal resize to center-based\r\n          if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\r\n             // Switch from center-based resize to normal one\r\n             (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\r\n          ) {\r\n            this._resetCurrentTransform();\r\n            transform.reset = true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {Object} transform current transform\r\n       * @param {Number} x mouse position x from origin\r\n       * @param {Number} y mouse position y from origin\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _onScale: function(e, transform, x, y) {\r\n        if (this._isUniscalePossible(e, transform.target)) {\r\n          transform.currentAction = 'scale';\r\n          return this._scaleObject(x, y);\r\n        }\r\n        else {\r\n          // Switch from a normal resize to proportional\r\n          if (!transform.reset && transform.currentAction === 'scale') {\r\n            this._resetCurrentTransform();\r\n          }\r\n\r\n          transform.currentAction = 'scaleEqually';\r\n          return this._scaleObject(x, y, 'equally');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target current target\r\n       * @return {Boolean} true if unproportional scaling is possible\r\n       */\r\n      _isUniscalePossible: function(e, target) {\r\n        return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\r\n      },\r\n\r\n      /**\r\n       * Sets the cursor depending on where the canvas is being hovered.\r\n       * Note: very buggy in Opera\r\n       * @param {Event} e Event object\r\n       * @param {Object} target Object that the mouse is hovering, if so.\r\n       */\r\n      _setCursorFromEvent: function (e, target) {\r\n        if (!target) {\r\n          this.setCursor(this.defaultCursor);\r\n          return false;\r\n        }\r\n        var hoverCursor = target.hoverCursor || this.hoverCursor,\r\n            activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\r\n              this._activeObject : null,\r\n            // only show proper corner when group selection is not active\r\n            corner = (!activeSelection || !activeSelection.contains(target))\r\n                      && target._findTargetCorner(this.getPointer(e, true));\r\n\r\n        if (!corner) {\r\n          if (target.subTargetCheck){\r\n            // hoverCursor should come from top-most subTarget,\r\n            // so we walk the array backwards\r\n            this.targets.concat().reverse().map(function(_target){\r\n              hoverCursor = _target.hoverCursor || hoverCursor;\r\n            });\r\n          }\r\n          this.setCursor(hoverCursor);\r\n        }\r\n        else {\r\n          this.setCursor(this.getCornerCursor(corner, target, e));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      getCornerCursor: function(corner, target, e) {\r\n        if (this.actionIsDisabled(corner, target, e)) {\r\n          return this.notAllowedCursor;\r\n        }\r\n        else if (corner in cursorOffset) {\r\n          return this._getRotatedCornerCursor(corner, target, e);\r\n        }\r\n        else if (corner === 'mtr' && target.hasRotatingPoint) {\r\n          return this.rotationCursor;\r\n        }\r\n        else {\r\n          return this.defaultCursor;\r\n        }\r\n      },\r\n\r\n      actionIsDisabled: function(corner, target, e) {\r\n        if (corner === 'mt' || corner === 'mb') {\r\n          return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\r\n        }\r\n        else if (corner === 'ml' || corner === 'mr') {\r\n          return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\r\n        }\r\n        else if (corner === 'mtr') {\r\n          return target.lockRotation;\r\n        }\r\n        else {\r\n          return this._isUniscalePossible(e, target) ?\r\n            target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getRotatedCornerCursor: function(corner, target, e) {\r\n        var n = Math.round((target.angle % 360) / 45);\r\n\r\n        if (n < 0) {\r\n          n += 8; // full circle ahead\r\n        }\r\n        n += cursorOffset[corner];\r\n        if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\r\n          //if we are holding shift and we are on a mx corner...\r\n          n += 2;\r\n        }\r\n        // normalize n to be from 0 to 7\r\n        n %= 8;\r\n\r\n        return this.cursorMap[n];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var min = Math.min,\r\n        max = Math.max;\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       * @return {Boolean}\r\n       */\r\n      _shouldGroup: function(e, target) {\r\n        var activeObject = this._activeObject;\r\n        return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\r\n              (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _handleGrouping: function (e, target) {\r\n        var activeObject = this._activeObject;\r\n        // avoid multi select when shift click on a corner\r\n        if (activeObject.__corner) {\r\n          return;\r\n        }\r\n        if (target === activeObject) {\r\n          // if it's a group, find target again, using activeGroup objects\r\n          target = this.findTarget(e, true);\r\n          // if even object is not found or we are on activeObjectCorner, bail out\r\n          if (!target || !target.selectable) {\r\n            return;\r\n          }\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          this._updateActiveSelection(target, e);\r\n        }\r\n        else {\r\n          this._createActiveSelection(target, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateActiveSelection: function(target, e) {\r\n        var activeSelection = this._activeObject,\r\n            currentActiveObjects = activeSelection._objects.slice(0);\r\n        if (activeSelection.contains(target)) {\r\n          activeSelection.removeWithUpdate(target);\r\n          this._hoveredTarget = target;\r\n          this._hoveredTargets = this.targets.concat();\r\n          if (activeSelection.size() === 1) {\r\n            // activate last remaining object\r\n            this._setActiveObject(activeSelection.item(0), e);\r\n          }\r\n        }\r\n        else {\r\n          activeSelection.addWithUpdate(target);\r\n          this._hoveredTarget = activeSelection;\r\n          this._hoveredTargets = this.targets.concat();\r\n        }\r\n        this._fireSelectionEvents(currentActiveObjects, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createActiveSelection: function(target, e) {\r\n        var currentActives = this.getActiveObjects(), group = this._createGroup(target);\r\n        this._hoveredTarget = group;\r\n        // ISSUE 4115: should we consider subTargets here?\r\n        // this._hoveredTargets = [];\r\n        // this._hoveredTargets = this.targets.concat();\r\n        this._setActiveObject(group, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} target\r\n       */\r\n      _createGroup: function(target) {\r\n        var objects = this._objects,\r\n            isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\r\n            groupObjects = isActiveLower\r\n              ? [this._activeObject, target]\r\n              : [target, this._activeObject];\r\n        this._activeObject.isEditing && this._activeObject.exitEditing();\r\n        return new fabric.ActiveSelection(groupObjects, {\r\n          canvas: this\r\n        });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e mouse event\r\n       */\r\n      _groupSelectedObjects: function (e) {\r\n\r\n        var group = this._collectObjects(e),\r\n            aGroup;\r\n\r\n        // do not create group for 1 element only\r\n        if (group.length === 1) {\r\n          this.setActiveObject(group[0], e);\r\n        }\r\n        else if (group.length > 1) {\r\n          aGroup = new fabric.ActiveSelection(group.reverse(), {\r\n            canvas: this\r\n          });\r\n          this.setActiveObject(aGroup, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _collectObjects: function(e) {\r\n        var group = [],\r\n            currentObject,\r\n            x1 = this._groupSelector.ex,\r\n            y1 = this._groupSelector.ey,\r\n            x2 = x1 + this._groupSelector.left,\r\n            y2 = y1 + this._groupSelector.top,\r\n            selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\r\n            selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\r\n            allowIntersect = !this.selectionFullyContained,\r\n            isClick = x1 === x2 && y1 === y2;\r\n        // we iterate reverse order to collect top first in case of click.\r\n        for (var i = this._objects.length; i--; ) {\r\n          currentObject = this._objects[i];\r\n\r\n          if (!currentObject || !currentObject.selectable || !currentObject.visible) {\r\n            continue;\r\n          }\r\n\r\n          if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\r\n              currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX2Y2))\r\n          ) {\r\n            group.push(currentObject);\r\n            // only add one object if it's a click\r\n            if (isClick) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (group.length > 1) {\r\n          group = group.filter(function(object) {\r\n            return !object.onSelect({ e: e });\r\n          });\r\n        }\r\n\r\n        return group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _maybeGroupObjects: function(e) {\r\n        if (this.selection && this._groupSelector) {\r\n          this._groupSelectedObjects(e);\r\n        }\r\n        this.setCursor(this.defaultCursor);\r\n        // clear selection and current transformation\r\n        this._groupSelector = null;\r\n      }\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function () {\r\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\r\n       * @example <caption>Generate jpeg dataURL with lower quality</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'jpeg',\r\n       *   quality: 0.8\r\n       * });\r\n       * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   left: 100,\r\n       *   top: 100,\r\n       *   width: 200,\r\n       *   height: 200\r\n       * });\r\n       * @example <caption>Generate double scaled png dataURL</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   multiplier: 2\r\n       * });\r\n       */\r\n      toDataURL: function (options) {\r\n        options || (options = { });\r\n\r\n        var format = options.format || 'png',\r\n            quality = options.quality || 1,\r\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\r\n            canvasEl = this.toCanvasElement(multiplier, options);\r\n        return fabric.util.toDataURL(canvasEl, format, quality);\r\n      },\r\n\r\n      /**\r\n       * Create a new HTMLCanvas element painted with the current canvas content.\r\n       * No need to resize the actual one or repaint it.\r\n       * Will transfer object ownership to a new canvas, paint it, and set everything back.\r\n       * This is an intermediary step used to get to a dataUrl but also it is useful to\r\n       * create quick image copies of a canvas without passing for the dataUrl string\r\n       * @param {Number} [multiplier] a zoom factor.\r\n       * @param {Object} [cropping] Cropping informations\r\n       * @param {Number} [cropping.left] Cropping left offset.\r\n       * @param {Number} [cropping.top] Cropping top offset.\r\n       * @param {Number} [cropping.width] Cropping width.\r\n       * @param {Number} [cropping.height] Cropping height.\r\n       */\r\n      toCanvasElement: function(multiplier, cropping) {\r\n        multiplier = multiplier || 1;\r\n        cropping = cropping || { };\r\n        var scaledWidth = (cropping.width || this.width) * multiplier,\r\n            scaledHeight = (cropping.height || this.height) * multiplier,\r\n            zoom = this.getZoom(),\r\n            originalWidth = this.width,\r\n            originalHeight = this.height,\r\n            newZoom = zoom * multiplier,\r\n            vp = this.viewportTransform,\r\n            translateX = (vp[4] - (cropping.left || 0)) * multiplier,\r\n            translateY = (vp[5] - (cropping.top || 0)) * multiplier,\r\n            originalInteractive = this.interactive,\r\n            newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\r\n            originalRetina = this.enableRetinaScaling,\r\n            canvasEl = fabric.util.createCanvasElement(),\r\n            originalContextTop = this.contextTop;\r\n        canvasEl.width = scaledWidth;\r\n        canvasEl.height = scaledHeight;\r\n        this.contextTop = null;\r\n        this.enableRetinaScaling = false;\r\n        this.interactive = false;\r\n        this.viewportTransform = newVp;\r\n        this.width = scaledWidth;\r\n        this.height = scaledHeight;\r\n        this.calcViewportBoundaries();\r\n        this.renderCanvas(canvasEl.getContext('2d'), this._objects);\r\n        this.viewportTransform = vp;\r\n        this.width = originalWidth;\r\n        this.height = originalHeight;\r\n        this.calcViewportBoundaries();\r\n        this.interactive = originalInteractive;\r\n        this.enableRetinaScaling = originalRetina;\r\n        this.contextTop = originalContextTop;\r\n        return canvasEl;\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Populates canvas with data from the specified dataless JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\r\n     * @deprecated since 1.2.2\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     */\r\n    loadFromDatalessJSON: function (json, callback, reviver) {\r\n      return this.loadFromJSON(json, callback, reviver);\r\n    },\r\n\r\n    /**\r\n     * Populates canvas with data from the specified JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\r\n     * @example <caption>loadFromJSON</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\r\n     * @example <caption>loadFromJSON with reviver</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\r\n     *   // `o` = json object\r\n     *   // `object` = fabric.Object instance\r\n     *   // ... do some stuff ...\r\n     * });\r\n     */\r\n    loadFromJSON: function (json, callback, reviver) {\r\n      if (!json) {\r\n        return;\r\n      }\r\n\r\n      // serialize if it wasn't already\r\n      var serialized = (typeof json === 'string')\r\n        ? JSON.parse(json)\r\n        : fabric.util.object.clone(json);\r\n\r\n      var _this = this,\r\n          clipPath = serialized.clipPath,\r\n          renderOnAddRemove = this.renderOnAddRemove;\r\n\r\n      this.renderOnAddRemove = false;\r\n\r\n      delete serialized.clipPath;\r\n\r\n      this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\r\n        _this.clear();\r\n        _this._setBgOverlay(serialized, function () {\r\n          if (clipPath) {\r\n            _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {\r\n              _this.clipPath = enlivenedCanvasClip[0];\r\n              _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n            });\r\n          }\r\n          else {\r\n            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n          }\r\n        });\r\n      }, reviver);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} serialized Object with background and overlay information\r\n     * @param {Array} restored canvas objects\r\n     * @param {Function} cached renderOnAddRemove callback\r\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n     */\r\n    __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\r\n      var _this = this;\r\n      enlivenedObjects.forEach(function(obj, index) {\r\n        // we splice the array just in case some custom classes restored from JSON\r\n        // will add more object to canvas at canvas init.\r\n        _this.insertAt(obj, index);\r\n      });\r\n      this.renderOnAddRemove = renderOnAddRemove;\r\n      // remove parts i cannot set as options\r\n      delete serialized.objects;\r\n      delete serialized.backgroundImage;\r\n      delete serialized.overlayImage;\r\n      delete serialized.background;\r\n      delete serialized.overlay;\r\n      // this._initOptions does too many things to just\r\n      // call it. Normally loading an Object from JSON\r\n      // create the Object instance. Here the Canvas is\r\n      // already an instance and we are just loading things over it\r\n      this._setOptions(serialized);\r\n      this.renderAll();\r\n      callback && callback();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} serialized Object with background and overlay information\r\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n     */\r\n    _setBgOverlay: function(serialized, callback) {\r\n      var loaded = {\r\n        backgroundColor: false,\r\n        overlayColor: false,\r\n        backgroundImage: false,\r\n        overlayImage: false\r\n      };\r\n\r\n      if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      var cbIfLoaded = function () {\r\n        if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\r\n          callback && callback();\r\n        }\r\n      };\r\n\r\n      this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\r\n     * @param {(Object|String)} value Value to set\r\n     * @param {Object} loaded Set loaded property to true if property is set\r\n     * @param {Object} callback Callback function to invoke after property is set\r\n     */\r\n    __setBgOverlay: function(property, value, loaded, callback) {\r\n      var _this = this;\r\n\r\n      if (!value) {\r\n        loaded[property] = true;\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      if (property === 'backgroundImage' || property === 'overlayImage') {\r\n        fabric.util.enlivenObjects([value], function(enlivedObject){\r\n          _this[property] = enlivedObject[0];\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n      else {\r\n        this['set' + fabric.util.string.capitalize(property, true)](value, function() {\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} objects\r\n     * @param {Function} callback\r\n     * @param {Function} [reviver]\r\n     */\r\n    _enlivenObjects: function (objects, callback, reviver) {\r\n      if (!objects || objects.length === 0) {\r\n        callback && callback([]);\r\n        return;\r\n      }\r\n\r\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n        callback && callback(enlivenedObjects);\r\n      }, null, reviver);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURL: function (format, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURL(format));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Number} multiplier\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURLWithMultiplier: function (format, multiplier, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURLWithMultiplier(format, multiplier));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     * @param {Array} [properties] Array of properties to include in the cloned canvas and children\r\n     */\r\n    clone: function (callback, properties) {\r\n      var data = JSON.stringify(this.toJSON(properties));\r\n      this.cloneWithoutData(function(clone) {\r\n        clone.loadFromJSON(data, function() {\r\n          callback && callback(clone);\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance without cloning existing data.\r\n     * This essentially copies canvas dimensions, clipping properties, etc.\r\n     * but leaves data empty (so that you can populate it with your own)\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     */\r\n    cloneWithoutData: function(callback) {\r\n      var el = fabric.util.createCanvasElement();\r\n\r\n      el.width = this.width;\r\n      el.height = this.height;\r\n\r\n      var clone = new fabric.Canvas(el);\r\n      clone.clipTo = this.clipTo;\r\n      if (this.backgroundImage) {\r\n        clone.setBackgroundImage(this.backgroundImage.src, function() {\r\n          clone.renderAll();\r\n          callback && callback(clone);\r\n        });\r\n        clone.backgroundImageOpacity = this.backgroundImageOpacity;\r\n        clone.backgroundImageStretch = this.backgroundImageStretch;\r\n      }\r\n      else {\r\n        callback && callback(clone);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        capitalize = fabric.util.string.capitalize,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n        objectCaching = !fabric.isLikelyNode,\r\n        ALIASING_LIMIT = 2;\r\n\r\n    if (fabric.Object) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Root object class from which all 2d shape classes inherit from\r\n     * @class fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\r\n     * @see {@link fabric.Object#initialize} for constructor definition\r\n     *\r\n     * @fires added\r\n     * @fires removed\r\n     *\r\n     * @fires selected\r\n     * @fires deselected\r\n     * @fires modified\r\n     * @fires modified\r\n     * @fires moved\r\n     * @fires scaled\r\n     * @fires rotated\r\n     * @fires skewed\r\n     *\r\n     * @fires rotating\r\n     * @fires scaling\r\n     * @fires moving\r\n     * @fires skewing\r\n     *\r\n     * @fires mousedown\r\n     * @fires mouseup\r\n     * @fires mouseover\r\n     * @fires mouseout\r\n     * @fires mousewheel\r\n     * @fires mousedblclick\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     */\r\n    fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Type of an object (rect, circle, path, etc.).\r\n       * Note that this property is meant to be read-only and not meant to be modified.\r\n       * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                     'object',\r\n\r\n      /**\r\n       * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originX:                  'left',\r\n\r\n      /**\r\n       * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originY:                  'top',\r\n\r\n      /**\r\n       * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      top:                      0,\r\n\r\n      /**\r\n       * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      left:                     0,\r\n\r\n      /**\r\n       * Object width\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width:                    0,\r\n\r\n      /**\r\n       * Object height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height:                   0,\r\n\r\n      /**\r\n       * Object scale factor (horizontal)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleX:                   1,\r\n\r\n      /**\r\n       * Object scale factor (vertical)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleY:                   1,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped horizontally\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipX:                    false,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped vertically\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipY:                    false,\r\n\r\n      /**\r\n       * Opacity of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      opacity:                  1,\r\n\r\n      /**\r\n       * Angle of rotation of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      angle:                    0,\r\n\r\n      /**\r\n       * Angle of skew on x axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewX:                    0,\r\n\r\n      /**\r\n       * Angle of skew on y axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewY:                    0,\r\n\r\n      /**\r\n       * Size of object's controlling corners (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cornerSize:               13,\r\n\r\n      /**\r\n       * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      transparentCorners:       true,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:              null,\r\n\r\n      /**\r\n       * Default cursor value used when moving this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:               null,\r\n\r\n      /**\r\n       * Padding between object and its controlling borders (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      padding:                  0,\r\n\r\n      /**\r\n       * Color of controlling borders of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      borderColor:              'rgba(102,153,255,0.75)',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's borders (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      borderDashArray:          null,\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerColor:              'rgba(102,153,255,0.5)',\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active and transparentCorners false)\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerStrokeColor:        null,\r\n\r\n      /**\r\n       * Specify style of control, 'rect' or 'circle'\r\n       * @since 1.6.2\r\n       * @type String\r\n       */\r\n      cornerStyle:          'rect',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's control (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      cornerDashArray:          null,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being scaled via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:          false,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being rotated via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:         true,\r\n\r\n      /**\r\n       * Color of object's fill\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      fill:                     'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Fill rule used to fill an object\r\n       * accepted values are nonzero, evenodd\r\n       * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\r\n       * @type String\r\n       * @default\r\n       */\r\n      fillRule:                 'nonzero',\r\n\r\n      /**\r\n       * Composite rule used for canvas globalCompositeOperation\r\n       * @type String\r\n       * @default\r\n       */\r\n      globalCompositeOperation: 'source-over',\r\n\r\n      /**\r\n       * Background color of an object.\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      backgroundColor:          '',\r\n\r\n      /**\r\n       * Selection Background color of an object. colored layer behind the object when it is active.\r\n       * does not mix good with globalCompositeOperation methods.\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBackgroundColor:          '',\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:                   null,\r\n\r\n      /**\r\n       * Width of a stroke used to render this object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth:              1,\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's stroke (stroke must be defined)\r\n       * @type Array\r\n       */\r\n      strokeDashArray:          null,\r\n\r\n      /**\r\n       * Line offset of an object's stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeDashOffset: 0,\r\n\r\n      /**\r\n       * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineCap:            'butt',\r\n\r\n      /**\r\n       * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineJoin:           'miter',\r\n\r\n      /**\r\n       * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeMiterLimit:         4,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:                   null,\r\n\r\n      /**\r\n       * Opacity of object's controlling borders when object is active and moving\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderOpacityWhenMoving:  0.4,\r\n\r\n      /**\r\n       * Scale factor of object's controlling borders\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderScaleFactor:        1,\r\n\r\n      /**\r\n       * Transform matrix (similar to SVG's transform matrix)\r\n       * This property has been depreacted. Since caching and and qrDecompose this\r\n       * property can be handled with the standard top,left,scaleX,scaleY,angle and skewX.\r\n       * A documentation example on how to parse and merge a transformMatrix will be provided before\r\n       * completely removing it in fabric 4.0\r\n       * If you are starting a project now, DO NOT use it.\r\n       * @deprecated since 3.2.0\r\n       * @type Array\r\n       */\r\n      transformMatrix:          null,\r\n\r\n      /**\r\n       * Minimum allowed scale value of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minScaleLimit:            0,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\r\n       * But events still fire on it.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectable:               true,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      evented:                  true,\r\n\r\n      /**\r\n       * When set to `false`, an object is not rendered on canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      visible:                  true,\r\n\r\n      /**\r\n       * When set to `false`, object's controls are not displayed and can not be used to manipulate object\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasControls:              true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling borders are not rendered\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasBorders:               true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling rotating point will not be visible or selectable\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasRotatingPoint:         true,\r\n\r\n      /**\r\n       * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rotatingPointOffset:      40,\r\n\r\n      /**\r\n       * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:       false,\r\n\r\n      /**\r\n       * When `false`, default object's values are not included in its serialization\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues:     true,\r\n\r\n      /**\r\n       * Function that determines clipping of an object (context is passed as a first argument).\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * Note that context origin is at the object's center point (not left/top corner)\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       */\r\n      clipTo:                   null,\r\n\r\n      /**\r\n       * When `true`, object horizontal movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementX:            false,\r\n\r\n      /**\r\n       * When `true`, object vertical movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementY:            false,\r\n\r\n      /**\r\n       * When `true`, object rotation is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockRotation:             false,\r\n\r\n      /**\r\n       * When `true`, object horizontal scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingY:             false,\r\n\r\n      /**\r\n       * When `true`, object non-uniform scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockUniScaling:           false,\r\n\r\n      /**\r\n       * When `true`, object horizontal skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingY:             false,\r\n\r\n      /**\r\n       * When `true`, object cannot be flipped by scaling into negative values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingFlip:          false,\r\n\r\n      /**\r\n       * When `true`, object is not exported in OBJECT/JSON\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      excludeFromExport:        false,\r\n\r\n      /**\r\n       * When `true`, object is cached on an additional canvas.\r\n       * When `false`, object is not cached unless necessary ( clipPath )\r\n       * default to true\r\n       * @since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      objectCaching:            objectCaching,\r\n\r\n      /**\r\n       * When `true`, object properties are checked for cache invalidation. In some particular\r\n       * situation you may want this to be disabled ( spray brush, very big, groups)\r\n       * or if your application does not allow you to modify properties for groups child you want\r\n       * to disable it for groups.\r\n       * default to false\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default false\r\n       */\r\n      statefullCache:            false,\r\n\r\n      /**\r\n       * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\r\n       * too much and will be redrawn with correct details at the end of scaling.\r\n       * this setting is performance and application dependant.\r\n       * default to true\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      noScaleCache:              true,\r\n\r\n      /**\r\n       * When `false`, the stoke width will scale with the object.\r\n       * When `true`, the stroke will always match the exact pixel size entered for stroke width.\r\n       * default to false\r\n       * @since 2.6.0\r\n       * @type Boolean\r\n       * @default false\r\n       * @type Boolean\r\n       * @default false\r\n       */\r\n      strokeUniform:              false,\r\n\r\n      /**\r\n       * When set to `true`, object's cache will be rerendered next render call.\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      dirty:                true,\r\n\r\n      /**\r\n       * keeps the value of the last hovered corner during mouse move.\r\n       * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\r\n       * It should be private, but there is no harm in using it as\r\n       * a read-only property.\r\n       * @type number|string|any\r\n       * @default 0\r\n       */\r\n      __corner: 0,\r\n\r\n      /**\r\n       * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      paintFirst:           'fill',\r\n\r\n      /**\r\n       * List of properties to consider when checking if state\r\n       * of an object is changed (fabric.Object#hasStateChanged)\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: (\r\n        'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\r\n        'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\r\n        'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\r\n        'skewX skewY fillRule paintFirst clipPath strokeUniform'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n       * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n       * and refreshed at the next render\r\n       * @type Array\r\n       */\r\n      cacheProperties: (\r\n        'fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' +\r\n        ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n       * the clipPath object gets used when the object has rendered, and the context is placed in the center\r\n       * of the object cacheCanvas.\r\n       * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\r\n       * @type fabric.Object\r\n       */\r\n      clipPath: undefined,\r\n\r\n      /**\r\n       * Meaningful ONLY when the object is used as clipPath.\r\n       * if true, the clipPath will make the object clip to the outside of the clipPath\r\n       * since 2.4.0\r\n       * @type boolean\r\n       * @default false\r\n       */\r\n      inverted: false,\r\n\r\n      /**\r\n       * Meaningful ONLY when the object is used as clipPath.\r\n       * if true, the clipPath will have its top and left relative to canvas, and will\r\n       * not be influenced by the object transform. This will make the clipPath relative\r\n       * to the canvas, but clipping just a particular object.\r\n       * WARNING this is beta, this feature may change or be renamed.\r\n       * since 2.4.0\r\n       * @type boolean\r\n       * @default false\r\n       */\r\n      absolutePositioned: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        if (options) {\r\n          this.setOptions(options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a the canvas used to keep the cached copy of the object\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function() {\r\n        this._cacheProperties = {};\r\n        this._cacheCanvas = fabric.util.createCanvasElement();\r\n        this._cacheContext = this._cacheCanvas.getContext('2d');\r\n        this._updateCacheCanvas();\r\n        // if canvas gets created, is empty, so dirty.\r\n        this.dirty = true;\r\n      },\r\n\r\n      /**\r\n       * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\r\n       * and each side do not cross fabric.cacheSideLimit\r\n       * those numbers are configurable so that you can get as much detail as you want\r\n       * making bargain with performances.\r\n       * @param {Object} dims\r\n       * @param {Object} dims.width width of canvas\r\n       * @param {Object} dims.height height of canvas\r\n       * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _limitCacheSize: function(dims) {\r\n        var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\r\n            width = dims.width, height = dims.height,\r\n            max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\r\n        if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\r\n          if (width < min) {\r\n            dims.width = min;\r\n          }\r\n          if (height < min) {\r\n            dims.height = min;\r\n          }\r\n          return dims;\r\n        }\r\n        var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\r\n            capValue = fabric.util.capValue,\r\n            x = capValue(min, limitedDims.x, max),\r\n            y = capValue(min, limitedDims.y, max);\r\n        if (width > x) {\r\n          dims.zoomX /= width / x;\r\n          dims.width = x;\r\n          dims.capped = true;\r\n        }\r\n        if (height > y) {\r\n          dims.zoomY /= height / y;\r\n          dims.height = y;\r\n          dims.capped = true;\r\n        }\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @return {Object}.x width of object to be cached\r\n       * @return {Object}.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var objectScale = this.getTotalObjectScaling(),\r\n            // caculate dimensions without skewing\r\n            dim = this._getTransformedDimensions(0, 0),\r\n            neededX = dim.x * objectScale.scaleX / this.scaleX,\r\n            neededY = dim.y * objectScale.scaleY / this.scaleY;\r\n        return {\r\n          // for sure this ALIASING_LIMIT is slightly creating problem\r\n          // in situation in which the cache canvas gets an upper limit\r\n          // also objectScale contains already scaleX and scaleY\r\n          width: neededX + ALIASING_LIMIT,\r\n          height: neededY + ALIASING_LIMIT,\r\n          zoomX: objectScale.scaleX,\r\n          zoomY: objectScale.scaleY,\r\n          x: neededX,\r\n          y: neededY\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Update width and height of the canvas for cache\r\n       * returns true or false if canvas needed resize.\r\n       * @private\r\n       * @return {Boolean} true if the canvas has been resized\r\n       */\r\n      _updateCacheCanvas: function() {\r\n        var targetCanvas = this.canvas;\r\n        if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\r\n          var target = targetCanvas._currentTransform.target,\r\n              action = targetCanvas._currentTransform.action;\r\n          if (this === target && action.slice && action.slice(0, 5) === 'scale') {\r\n            return false;\r\n          }\r\n        }\r\n        var canvas = this._cacheCanvas,\r\n            dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n            minCacheSize = fabric.minCacheSideLimit,\r\n            width = dims.width, height = dims.height, drawingWidth, drawingHeight,\r\n            zoomX = dims.zoomX, zoomY = dims.zoomY,\r\n            dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\r\n            zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\r\n            shouldRedraw = dimensionsChanged || zoomChanged,\r\n            additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\r\n        if (dimensionsChanged) {\r\n          var canvasWidth = this._cacheCanvas.width,\r\n              canvasHeight = this._cacheCanvas.height,\r\n              sizeGrowing = width > canvasWidth || height > canvasHeight,\r\n              sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\r\n                canvasWidth > minCacheSize && canvasHeight > minCacheSize;\r\n          shouldResizeCanvas = sizeGrowing || sizeShrinking;\r\n          if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\r\n            additionalWidth = width * 0.1;\r\n            additionalHeight = height * 0.1;\r\n          }\r\n        }\r\n        if (shouldRedraw) {\r\n          if (shouldResizeCanvas) {\r\n            canvas.width = Math.ceil(width + additionalWidth);\r\n            canvas.height = Math.ceil(height + additionalHeight);\r\n          }\r\n          else {\r\n            this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\r\n            this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\r\n          }\r\n          drawingWidth = dims.x / 2;\r\n          drawingHeight = dims.y / 2;\r\n          this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\r\n          this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\r\n          this.cacheWidth = width;\r\n          this.cacheHeight = height;\r\n          this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\r\n          this._cacheContext.scale(zoomX, zoomY);\r\n          this.zoomX = zoomX;\r\n          this.zoomY = zoomY;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets object's properties from options\r\n       * @param {Object} [options] Options object\r\n       */\r\n      setOptions: function(options) {\r\n        this._setOptions(options);\r\n        this._initGradient(options.fill, 'fill');\r\n        this._initGradient(options.stroke, 'stroke');\r\n        this._initClipping(options);\r\n        this._initPattern(options.fill, 'fill');\r\n        this._initPattern(options.stroke, 'stroke');\r\n      },\r\n\r\n      /**\r\n       * Transforms context when rendering an object\r\n       * @param {CanvasRenderingContext2D} ctx Context\r\n       */\r\n      transform: function(ctx) {\r\n        var m;\r\n        if (this.group && !this.group._transformDone) {\r\n          m = this.calcTransformMatrix();\r\n        }\r\n        else {\r\n          m = this.calcOwnMatrix();\r\n        }\r\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n      },\r\n\r\n      /**\r\n       * Returns an object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n\r\n            object = {\r\n              type:                     this.type,\r\n              version:                  fabric.version,\r\n              originX:                  this.originX,\r\n              originY:                  this.originY,\r\n              left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\r\n              top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\r\n              width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\r\n              height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\r\n              fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\r\n              stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\r\n              strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\r\n              strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\r\n              strokeLineCap:            this.strokeLineCap,\r\n              strokeDashOffset:         this.strokeDashOffset,\r\n              strokeLineJoin:           this.strokeLineJoin,\r\n              strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\r\n              scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\r\n              scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\r\n              angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\r\n              flipX:                    this.flipX,\r\n              flipY:                    this.flipY,\r\n              opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\r\n              shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\r\n              visible:                  this.visible,\r\n              clipTo:                   this.clipTo && String(this.clipTo),\r\n              backgroundColor:          this.backgroundColor,\r\n              fillRule:                 this.fillRule,\r\n              paintFirst:               this.paintFirst,\r\n              globalCompositeOperation: this.globalCompositeOperation,\r\n              transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\r\n              skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\r\n              skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\r\n            };\r\n\r\n        if (this.clipPath) {\r\n          object.clipPath = this.clipPath.toObject(propertiesToInclude);\r\n          object.clipPath.inverted = this.clipPath.inverted;\r\n          object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\r\n        }\r\n\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          object = this._removeDefaultValues(object);\r\n        }\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns (dataless) object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        // will be overwritten by subclasses\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       */\r\n      _removeDefaultValues: function(object) {\r\n        var prototype = fabric.util.getKlass(object.type).prototype,\r\n            stateProperties = prototype.stateProperties;\r\n        stateProperties.forEach(function(prop) {\r\n          if (prop === 'left' || prop === 'top') {\r\n            return;\r\n          }\r\n          if (object[prop] === prototype[prop]) {\r\n            delete object[prop];\r\n          }\r\n          var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\r\n                        Object.prototype.toString.call(prototype[prop]) === '[object Array]';\r\n\r\n          // basically a check for [] === []\r\n          if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\r\n            delete object[prop];\r\n          }\r\n        });\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.' + capitalize(this.type) + '>';\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getObjectScaling: function() {\r\n        var scaleX = this.scaleX, scaleY = this.scaleY;\r\n        if (this.group) {\r\n          var scaling = this.group.getObjectScaling();\r\n          scaleX *= scaling.scaleX;\r\n          scaleY *= scaling.scaleY;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling, zoom and retina\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getTotalObjectScaling: function() {\r\n        var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\r\n        if (this.canvas) {\r\n          var zoom = this.canvas.getZoom();\r\n          var retina = this.canvas.getRetinaScaling();\r\n          scaleX *= zoom * retina;\r\n          scaleY *= zoom * retina;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object opacity counting also the group property\r\n       * @return {Number}\r\n       */\r\n      getObjectOpacity: function() {\r\n        var opacity = this.opacity;\r\n        if (this.group) {\r\n          opacity *= this.group.getObjectOpacity();\r\n        }\r\n        return opacity;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\r\n            isChanged = this[key] !== value, groupNeedsUpdate = false;\r\n\r\n        if (shouldConstrainValue) {\r\n          value = this._constrainScale(value);\r\n        }\r\n        if (key === 'scaleX' && value < 0) {\r\n          this.flipX = !this.flipX;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'scaleY' && value < 0) {\r\n          this.flipY = !this.flipY;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\r\n          value = new fabric.Shadow(value);\r\n        }\r\n        else if (key === 'dirty' && this.group) {\r\n          this.group.set('dirty', value);\r\n        }\r\n\r\n        this[key] = value;\r\n\r\n        if (isChanged) {\r\n          groupNeedsUpdate = this.group && this.group.isOnACache();\r\n          if (this.cacheProperties.indexOf(key) > -1) {\r\n            this.dirty = true;\r\n            groupNeedsUpdate && this.group.set('dirty', true);\r\n          }\r\n          else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\r\n            this.group.set('dirty', true);\r\n          }\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called by the parent group of an object every\r\n       * time a non-delegated property changes on the group. It is passed the key\r\n       * and value as parameters. Not adding in this function's signature to avoid\r\n       * Travis build error about unused variables.\r\n       */\r\n      setOnGroup: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n      /**\r\n       * Retrieves viewportTransform from Object's canvas if possible\r\n       * @method getViewportTransform\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Array}\r\n       */\r\n      getViewportTransform: function() {\r\n        if (this.canvas && this.canvas.viewportTransform) {\r\n          return this.canvas.viewportTransform;\r\n        }\r\n        return fabric.iMatrix.concat();\r\n      },\r\n\r\n      /*\r\n       * @private\r\n       * return if the object would be visible in rendering\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Boolean}\r\n       */\r\n      isNotVisible: function() {\r\n        return this.opacity === 0 ||\r\n          (this.width === 0 && this.height === 0 && this.strokeWidth === 0) ||\r\n          !this.visible;\r\n      },\r\n\r\n      /**\r\n       * Renders an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if width/height are zeros or object is not visible\r\n        if (this.isNotVisible()) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        ctx.save();\r\n        this._setupCompositeOperation(ctx);\r\n        this.drawSelectionBackground(ctx);\r\n        this.transform(ctx);\r\n        this._setOpacity(ctx);\r\n        this._setShadow(ctx, this);\r\n        if (this.transformMatrix) {\r\n          ctx.transform.apply(ctx, this.transformMatrix);\r\n        }\r\n        this.clipTo && fabric.util.clipContext(this, ctx);\r\n        if (this.shouldCache()) {\r\n          this.renderCache();\r\n          this.drawCacheOnCanvas(ctx);\r\n        }\r\n        else {\r\n          this._removeCacheCanvas();\r\n          this.dirty = false;\r\n          this.drawObject(ctx);\r\n          if (this.objectCaching && this.statefullCache) {\r\n            this.saveState({ propertySet: 'cacheProperties' });\r\n          }\r\n        }\r\n        this.clipTo && ctx.restore();\r\n        ctx.restore();\r\n      },\r\n\r\n      renderCache: function(options) {\r\n        options = options || {};\r\n        if (!this._cacheCanvas) {\r\n          this._createCacheCanvas();\r\n        }\r\n        if (this.isCacheDirty()) {\r\n          this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\r\n          this.drawObject(this._cacheContext, options.forClipping);\r\n          this.dirty = false;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Remove cacheCanvas and its dimensions from the objects\r\n       */\r\n      _removeCacheCanvas: function() {\r\n        this._cacheCanvas = null;\r\n        this.cacheWidth = 0;\r\n        this.cacheHeight = 0;\r\n      },\r\n\r\n      /**\r\n       * return true if the object will draw a stroke\r\n       * Does not consider text styles. This is just a shortcut used at rendering time\r\n       * We want it to be an aproximation and be fast.\r\n       * wrote to avoid extra caching, it has to return true when stroke happens,\r\n       * can guess when it will not happen at 100% chance, does not matter if it misses\r\n       * some use case where the stroke is invisible.\r\n       * @since 3.0.0\r\n       * @returns Boolean\r\n       */\r\n      hasStroke: function() {\r\n        return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;\r\n      },\r\n\r\n      /**\r\n       * return true if the object will draw a fill\r\n       * Does not consider text styles. This is just a shortcut used at rendering time\r\n       * We want it to be an aproximation and be fast.\r\n       * wrote to avoid extra caching, it has to return true when fill happens,\r\n       * can guess when it will not happen at 100% chance, does not matter if it misses\r\n       * some use case where the fill is invisible.\r\n       * @since 3.0.0\r\n       * @returns Boolean\r\n       */\r\n      hasFill: function() {\r\n        return this.fill && this.fill !== 'transparent';\r\n      },\r\n\r\n      /**\r\n       * When set to `true`, force the object to have its own cache, even if it is inside a group\r\n       * it may be needed when your object behave in a particular way on the cache and always needs\r\n       * its own isolated canvas to render correctly.\r\n       * Created to be overridden\r\n       * since 1.7.12\r\n       * @returns Boolean\r\n       */\r\n      needsItsOwnCache: function() {\r\n        if (this.paintFirst === 'stroke' &&\r\n          this.hasFill() && this.hasStroke() && typeof this.shadow === 'object') {\r\n          return true;\r\n        }\r\n        if (this.clipPath) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        this.ownCaching = this.needsItsOwnCache() || (\r\n          this.objectCaching &&\r\n          (!this.group || !this.group.isOnACache())\r\n        );\r\n        return this.ownCaching;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * used by Group.shouldCache to know if child has a shadow recursively\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object clipPath\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawClipPathOnCache: function(ctx) {\r\n        var path = this.clipPath;\r\n        ctx.save();\r\n        // DEBUG: uncomment this line, comment the following\r\n        // ctx.globalAlpha = 0.4\r\n        if (path.inverted) {\r\n          ctx.globalCompositeOperation = 'destination-out';\r\n        }\r\n        else {\r\n          ctx.globalCompositeOperation = 'destination-in';\r\n        }\r\n        //ctx.scale(1 / 2, 1 / 2);\r\n        if (path.absolutePositioned) {\r\n          var m = fabric.util.invertTransform(this.calcTransformMatrix());\r\n          ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n        }\r\n        path.transform(ctx);\r\n        ctx.scale(1 / path.zoomX, 1 / path.zoomY);\r\n        ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx, forClipping) {\r\n        var originalFill = this.fill, originalStroke = this.stroke;\r\n        if (forClipping) {\r\n          this.fill = 'black';\r\n          this.stroke = '';\r\n          this._setClippingProperties(ctx);\r\n        }\r\n        else {\r\n          this._renderBackground(ctx);\r\n          this._setStrokeStyles(ctx, this);\r\n          this._setFillStyles(ctx, this);\r\n        }\r\n        this._render(ctx);\r\n        this._drawClipPath(ctx);\r\n        this.fill = originalFill;\r\n        this.stroke = originalStroke;\r\n      },\r\n\r\n      _drawClipPath: function(ctx) {\r\n        var path = this.clipPath;\r\n        if (!path) { return; }\r\n        // needed to setup a couple of variables\r\n        // path canvas gets overridden with this one.\r\n        // TODO find a better solution?\r\n        path.canvas = this.canvas;\r\n        path.shouldCache();\r\n        path._transformDone = true;\r\n        path.renderCache({ forClipping: true });\r\n        this.drawClipPathOnCache(ctx);\r\n      },\r\n\r\n      /**\r\n       * Paint the cached copy of the object on the target context.\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawCacheOnCanvas: function(ctx) {\r\n        ctx.scale(1 / this.zoomX, 1 / this.zoomY);\r\n        ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       * @param {Boolean} skipCanvas skip canvas checks because this object is painted\r\n       * on parent canvas.\r\n       */\r\n      isCacheDirty: function(skipCanvas) {\r\n        if (this.isNotVisible()) {\r\n          return false;\r\n        }\r\n        if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\r\n          // in this case the context is already cleared.\r\n          return true;\r\n        }\r\n        else {\r\n          if (this.dirty ||\r\n            (this.clipPath && this.clipPath.absolutePositioned) ||\r\n            (this.statefullCache && this.hasStateChanged('cacheProperties'))\r\n          ) {\r\n            if (this._cacheCanvas && !skipCanvas) {\r\n              var width = this.cacheWidth / this.zoomX;\r\n              var height = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Draws a background for the object big as its untransformed dimensions\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        if (!this.backgroundColor) {\r\n          return;\r\n        }\r\n        var dim = this._getNonTransformedDimensions();\r\n        ctx.fillStyle = this.backgroundColor;\r\n\r\n        ctx.fillRect(\r\n          -dim.x / 2,\r\n          -dim.y / 2,\r\n          dim.x,\r\n          dim.y\r\n        );\r\n        // if there is background color no other shadows\r\n        // should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setOpacity: function(ctx) {\r\n        if (this.group && !this.group._transformDone) {\r\n          ctx.globalAlpha = this.getObjectOpacity();\r\n        }\r\n        else {\r\n          ctx.globalAlpha *= this.opacity;\r\n        }\r\n      },\r\n\r\n      _setStrokeStyles: function(ctx, decl) {\r\n        if (decl.stroke) {\r\n          ctx.lineWidth = decl.strokeWidth;\r\n          ctx.lineCap = decl.strokeLineCap;\r\n          ctx.lineDashOffset = decl.strokeDashOffset;\r\n          ctx.lineJoin = decl.strokeLineJoin;\r\n          ctx.miterLimit = decl.strokeMiterLimit;\r\n          ctx.strokeStyle = decl.stroke.toLive\r\n            ? decl.stroke.toLive(ctx, this)\r\n            : decl.stroke;\r\n        }\r\n      },\r\n\r\n      _setFillStyles: function(ctx, decl) {\r\n        if (decl.fill) {\r\n          ctx.fillStyle = decl.fill.toLive\r\n            ? decl.fill.toLive(ctx, this)\r\n            : decl.fill;\r\n        }\r\n      },\r\n\r\n      _setClippingProperties: function(ctx) {\r\n        ctx.globalAlpha = 1;\r\n        ctx.strokeStyle = 'transparent';\r\n        ctx.fillStyle = '#000000';\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Sets line dash\r\n       * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\r\n       * @param {Array} dashArray array representing dashes\r\n       * @param {Function} alternative function to call if browser does not support lineDash\r\n       */\r\n      _setLineDash: function(ctx, dashArray, alternative) {\r\n        if (!dashArray || dashArray.length === 0) {\r\n          return;\r\n        }\r\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\r\n        if (1 & dashArray.length) {\r\n          dashArray.push.apply(dashArray, dashArray);\r\n        }\r\n        if (supportsLineDash) {\r\n          ctx.setLineDash(dashArray);\r\n        }\r\n        else {\r\n          alternative && alternative(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       */\r\n      _renderControls: function(ctx, styleOverride) {\r\n        var vpt = this.getViewportTransform(),\r\n            matrix = this.calcTransformMatrix(),\r\n            options, drawBorders, drawControls;\r\n        styleOverride = styleOverride || { };\r\n        drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\r\n        drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\r\n        matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\r\n        options = fabric.util.qrDecompose(matrix);\r\n        ctx.save();\r\n        ctx.translate(options.translateX, options.translateY);\r\n        ctx.lineWidth = 1 * this.borderScaleFactor;\r\n        if (!this.group) {\r\n          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        }\r\n        if (styleOverride.forActiveSelection) {\r\n          ctx.rotate(degreesToRadians(options.angle));\r\n          drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\r\n        }\r\n        else {\r\n          ctx.rotate(degreesToRadians(this.angle));\r\n          drawBorders && this.drawBorders(ctx, styleOverride);\r\n        }\r\n        drawControls && this.drawControls(ctx, styleOverride);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        var shadow = this.shadow, canvas = this.canvas, scaling,\r\n            multX = (canvas && canvas.viewportTransform[0]) || 1,\r\n            multY = (canvas && canvas.viewportTransform[3]) || 1;\r\n        if (shadow.nonScaling) {\r\n          scaling = { scaleX: 1, scaleY: 1 };\r\n        }\r\n        else {\r\n          scaling = this.getObjectScaling();\r\n        }\r\n        if (canvas && canvas._isRetinaScaling()) {\r\n          multX *= fabric.devicePixelRatio;\r\n          multY *= fabric.devicePixelRatio;\r\n        }\r\n        ctx.shadowColor = shadow.color;\r\n        ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\r\n          (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\r\n        ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\r\n        ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _removeShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        ctx.shadowColor = '';\r\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n       * @return {Object} offset.offsetX offset for text rendering\r\n       * @return {Object} offset.offsetY offset for text rendering\r\n       */\r\n      _applyPatternGradientTransform: function(ctx, filler) {\r\n        if (!filler || !filler.toLive) {\r\n          return { offsetX: 0, offsetY: 0 };\r\n        }\r\n        var t = filler.gradientTransform || filler.patternTransform;\r\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n            offsetY = -this.height / 2 + filler.offsetY || 0;\r\n\r\n        if (filler.gradientUnits === 'percentage') {\r\n          ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\r\n        }\r\n        else {\r\n          ctx.transform(1, 0, 0, 1, offsetX, offsetY);\r\n        }\r\n        if (t) {\r\n          ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\r\n        }\r\n        return { offsetX: offsetX, offsetY: offsetY };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderPaintInOrder: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderStroke(ctx);\r\n          this._renderFill(ctx);\r\n        }\r\n        else {\r\n          this._renderFill(ctx);\r\n          this._renderStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * function that actually render something on the context.\r\n       * empty here to allow Obects to work on tests to benchmark fabric functionalites\r\n       * not related to rendering\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(/* ctx */) {\r\n\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderFill: function(ctx) {\r\n        if (!this.fill) {\r\n          return;\r\n        }\r\n\r\n        ctx.save();\r\n        this._applyPatternGradientTransform(ctx, this.fill);\r\n        if (this.fillRule === 'evenodd') {\r\n          ctx.fill('evenodd');\r\n        }\r\n        else {\r\n          ctx.fill();\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderStroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        if (this.strokeUniform) {\r\n          ctx.scale(1 / this.scaleX, 1 / this.scaleY);\r\n        }\r\n        this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\r\n        if (this.stroke.toLive && this.stroke.gradientUnits === 'percentage') {\r\n          // need to transform gradient in a pattern.\r\n          // this is a slow process. If you are hitting this codepath, and the object\r\n          // is not using caching, you should consider switching it on.\r\n          // we need a canvas as big as the current object caching canvas.\r\n          this._applyPatternForTransformedGradient(ctx, this.stroke);\r\n        }\r\n        else {\r\n          this._applyPatternGradientTransform(ctx, this.stroke);\r\n        }\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * This function try to patch the missing gradientTransform on canvas gradients.\r\n       * transforming a context to transform the gradient, is going to transform the stroke too.\r\n       * we want to transform the gradient but not the stroke operation, so we create\r\n       * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n       * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\r\n       * is limited.\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {fabric.Gradient} filler a fabric gradient instance\r\n       */\r\n      _applyPatternForTransformedGradient: function(ctx, filler) {\r\n        var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n            pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(),\r\n            width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\r\n        pCanvas.width = width;\r\n        pCanvas.height = height;\r\n        pCtx = pCanvas.getContext('2d');\r\n        pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\r\n        pCtx.lineTo(0, height); pCtx.closePath();\r\n        pCtx.translate(width / 2, height / 2);\r\n        pCtx.scale(\r\n          dims.zoomX / this.scaleX / retinaScaling,\r\n          dims.zoomY / this.scaleY / retinaScaling\r\n        );\r\n        this._applyPatternGradientTransform(pCtx, filler);\r\n        pCtx.fillStyle = filler.toLive(ctx);\r\n        pCtx.fill();\r\n        ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\r\n        ctx.scale(\r\n          retinaScaling * this.scaleX / dims.zoomX,\r\n          retinaScaling * this.scaleY / dims.zoomY\r\n        );\r\n        ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it decompose the transformMatrix\r\n       * and assign properties to object.\r\n       * untransformed coordinates\r\n       * @private\r\n       * @chainable\r\n       */\r\n      _assignTransformMatrixProps: function() {\r\n        if (this.transformMatrix) {\r\n          var options = fabric.util.qrDecompose(this.transformMatrix);\r\n          this.flipX = false;\r\n          this.flipY = false;\r\n          this.set('scaleX', options.scaleX);\r\n          this.set('scaleY', options.scaleY);\r\n          this.angle = options.angle;\r\n          this.skewX = options.skewX;\r\n          this.skewY = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it removes the transform matrix\r\n       * and set to object properties that fabricjs can handle\r\n       * @private\r\n       * @param {Object} preserveAspectRatioOptions\r\n       * @return {thisArg}\r\n       */\r\n      _removeTransformMatrix: function(preserveAspectRatioOptions) {\r\n        var center = this._findCenterFromElement();\r\n        if (this.transformMatrix) {\r\n          this._assignTransformMatrixProps();\r\n          center = fabric.util.transformPoint(center, this.transformMatrix);\r\n        }\r\n        this.transformMatrix = null;\r\n        if (preserveAspectRatioOptions) {\r\n          this.scaleX *= preserveAspectRatioOptions.scaleX;\r\n          this.scaleY *= preserveAspectRatioOptions.scaleY;\r\n          this.cropX = preserveAspectRatioOptions.cropX;\r\n          this.cropY = preserveAspectRatioOptions.cropY;\r\n          center.x += preserveAspectRatioOptions.offsetLeft;\r\n          center.y += preserveAspectRatioOptions.offsetTop;\r\n          this.width = preserveAspectRatioOptions.width;\r\n          this.height = preserveAspectRatioOptions.height;\r\n        }\r\n        this.setPositionByOrigin(center, 'center', 'center');\r\n      },\r\n\r\n      /**\r\n       * Clones an instance, using a callback method will work for every object.\r\n       * @param {Function} callback Callback is invoked with a clone as a first argument\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       */\r\n      clone: function(callback, propertiesToInclude) {\r\n        var objectForm = this.toObject(propertiesToInclude);\r\n        if (this.constructor.fromObject) {\r\n          this.constructor.fromObject(objectForm, callback);\r\n        }\r\n        else {\r\n          fabric.Object._fromObject('Object', objectForm, callback);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Creates an instance of fabric.Image out of an object\r\n       * could make use of both toDataUrl or toCanvasElement.\r\n       * @param {Function} callback callback, invoked with an instance as a first argument\r\n       * @param {Object} [options] for clone as image, passed to toDataURL\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      cloneAsImage: function(callback, options) {\r\n        var canvasEl = this.toCanvasElement(options);\r\n        if (callback) {\r\n          callback(new fabric.Image(canvasEl));\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Converts an object into a HTMLCanvas element\r\n       * @param {Object} options Options object\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       */\r\n      toCanvasElement: function(options) {\r\n        options || (options = { });\r\n\r\n        var utils = fabric.util, origParams = utils.saveObjectTransform(this),\r\n            originalGroup = this.group,\r\n            originalShadow = this.shadow, abs = Math.abs,\r\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\r\n        delete this.group;\r\n        if (options.withoutTransform) {\r\n          utils.resetObjectTransform(this);\r\n        }\r\n        if (options.withoutShadow) {\r\n          this.shadow = null;\r\n        }\r\n\r\n        var el = fabric.util.createCanvasElement(),\r\n            // skip canvas zoom and calculate with setCoords now.\r\n            boundingRect = this.getBoundingRect(true, true),\r\n            shadow = this.shadow, scaling,\r\n            shadowOffset = { x: 0, y: 0 }, shadowBlur,\r\n            width, height;\r\n\r\n        if (shadow) {\r\n          shadowBlur = shadow.blur;\r\n          if (shadow.nonScaling) {\r\n            scaling = { scaleX: 1, scaleY: 1 };\r\n          }\r\n          else {\r\n            scaling = this.getObjectScaling();\r\n          }\r\n          // consider non scaling shadow.\r\n          shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * (abs(scaling.scaleX));\r\n          shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * (abs(scaling.scaleY));\r\n        }\r\n        width = boundingRect.width + shadowOffset.x;\r\n        height = boundingRect.height + shadowOffset.y;\r\n        // if the current width/height is not an integer\r\n        // we need to make it so.\r\n        el.width = Math.ceil(width);\r\n        el.height = Math.ceil(height);\r\n        var canvas = new fabric.StaticCanvas(el, {\r\n          enableRetinaScaling: false,\r\n          renderOnAddRemove: false,\r\n          skipOffscreen: false,\r\n        });\r\n        if (options.format === 'jpeg') {\r\n          canvas.backgroundColor = '#fff';\r\n        }\r\n        this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\r\n\r\n        var originalCanvas = this.canvas;\r\n        canvas.add(this);\r\n        var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\r\n        this.shadow = originalShadow;\r\n        this.canvas = originalCanvas;\r\n        if (originalGroup) {\r\n          this.group = originalGroup;\r\n        }\r\n        this.set(origParams).setCoords();\r\n        // canvas.dispose will call image.dispose that will nullify the elements\r\n        // since this canvas is a simple element for the process, we remove references\r\n        // to objects in this way in order to avoid object trashing.\r\n        canvas._objects = [];\r\n        canvas.dispose();\r\n        canvas = null;\r\n\r\n        return canvasEl;\r\n      },\r\n\r\n      /**\r\n       * Converts an object into a data-url-like string\r\n       * @param {Object} options Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       */\r\n      toDataURL: function(options) {\r\n        options || (options = { });\r\n        return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\r\n      },\r\n\r\n      /**\r\n       * Returns true if specified type is identical to the type of an instance\r\n       * @param {String} type Type to check against\r\n       * @return {Boolean}\r\n       */\r\n      isType: function(type) {\r\n        return this.type === type;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance (is 1 unless subclassed)\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n       * Returns a JSON representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} JSON\r\n       */\r\n      toJSON: function(propertiesToInclude) {\r\n        // delegate, not alias\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Sets gradient (fill or stroke) of an object\r\n       * percentages for x1,x2,y1,y2,r1,r2 together with gradientUnits 'pixels', are not supported.\r\n       * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\r\n       * @param {String} property Property name 'stroke' or 'fill'\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.type] Type of gradient 'radial' or 'linear'\r\n       * @param {Number} [options.x1=0] x-coordinate of start point\r\n       * @param {Number} [options.y1=0] y-coordinate of start point\r\n       * @param {Number} [options.x2=0] x-coordinate of end point\r\n       * @param {Number} [options.y2=0] y-coordinate of end point\r\n       * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\r\n       * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\r\n       * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\r\n       * @param {Object} [options.gradientTransform] transformMatrix for gradient\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.4.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\r\n       * @example <caption>Set linear gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'linear',\r\n       *   x1: -object.width / 2,\r\n       *   y1: 0,\r\n       *   x2: object.width / 2,\r\n       *   y2: 0,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       * @example <caption>Set radial gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'radial',\r\n       *   x1: 0,\r\n       *   y1: 0,\r\n       *   x2: 0,\r\n       *   y2: 0,\r\n       *   r1: object.width / 2,\r\n       *   r2: 10,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setGradient: function(property, options) {\r\n        options || (options = { });\r\n\r\n        var gradient = { colorStops: [] };\r\n\r\n        gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\r\n        gradient.coords = {\r\n          x1: options.x1,\r\n          y1: options.y1,\r\n          x2: options.x2,\r\n          y2: options.y2\r\n        };\r\n        gradient.gradientUnits = options.gradientUnits || 'pixels';\r\n        if (options.r1 || options.r2) {\r\n          gradient.coords.r1 = options.r1;\r\n          gradient.coords.r2 = options.r2;\r\n        }\r\n\r\n        gradient.gradientTransform = options.gradientTransform;\r\n        fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\r\n\r\n        return this.set(property, fabric.Gradient.forObject(this, gradient));\r\n      },\r\n\r\n      /**\r\n       * Sets pattern fill of an object\r\n       * @param {Object} options Options object\r\n       * @param {(String|HTMLImageElement)} options.source Pattern source\r\n       * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\r\n       * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\r\n       * @param {Function} [callback] Callback to invoke when image set as a pattern\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.5.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\r\n       * @example <caption>Set pattern</caption>\r\n       * object.setPatternFill({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat'\r\n       * },canvas.renderAll.bind(canvas));\r\n       */\r\n      setPatternFill: function(options, callback) {\r\n        return this.set('fill', new fabric.Pattern(options, callback));\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.Object#shadow|shadow} of an object\r\n       * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n       * @param {String} [options.color=rgb(0,0,0)] Shadow color\r\n       * @param {Number} [options.blur=0] Shadow blur\r\n       * @param {Number} [options.offsetX=0] Shadow horizontal offset\r\n       * @param {Number} [options.offsetY=0] Shadow vertical offset\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @deprecated since 3.5.0\r\n       * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\r\n       * @example <caption>Set shadow with string notation</caption>\r\n       * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\r\n       * canvas.renderAll();\r\n       * @example <caption>Set shadow with object notation</caption>\r\n       * object.setShadow({\r\n       *   color: 'red',\r\n       *   blur: 10,\r\n       *   offsetX: 20,\r\n       *   offsetY: 20\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setShadow: function(options) {\r\n        return this.set('shadow', options ? new fabric.Shadow(options) : null);\r\n      },\r\n\r\n      /**\r\n       * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\r\n       * @param {String} color Color value\r\n       * @return {fabric.Object} thisArg\r\n       * @deprecated since 3.5.0\r\n       * @chainable\r\n       */\r\n      setColor: function(color) {\r\n        this.set('fill', color);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets \"angle\" of an instance with centered rotation\r\n       * @param {Number} angle Angle value (in degrees)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      rotate: function(angle) {\r\n        var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._setOriginToCenter();\r\n        }\r\n\r\n        this.set('angle', angle);\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._resetOrigin();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerH: function () {\r\n        this.canvas && this.canvas.centerObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterH: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerV: function () {\r\n        this.canvas && this.canvas.centerObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterV: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally on canvas to which is was added last\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      center: function () {\r\n        this.canvas && this.canvas.centerObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenter: function () {\r\n        this.canvas && this.canvas.viewportCenterObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a pointer relative to an object\r\n       * @param {Event} e Event to operate upon\r\n       * @param {Object} [pointer] Pointer to operate upon (instead of event)\r\n       * @return {Object} Coordinates of a pointer (x, y)\r\n       */\r\n      getLocalPointer: function(e, pointer) {\r\n        pointer = pointer || this.canvas.getPointer(e);\r\n        var pClicked = new fabric.Point(pointer.x, pointer.y),\r\n            objectLeftTop = this._getLeftTopCoords();\r\n        if (this.angle) {\r\n          pClicked = fabric.util.rotatePoint(\r\n            pClicked, objectLeftTop, degreesToRadians(-this.angle));\r\n        }\r\n        return {\r\n          x: pClicked.x - objectLeftTop.x,\r\n          y: pClicked.y - objectLeftTop.y\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Sets canvas globalCompositeOperation for specific object\r\n       * custom composition operation for the particular object can be specified using globalCompositeOperation property\r\n       * @param {CanvasRenderingContext2D} ctx Rendering canvas context\r\n       */\r\n      _setupCompositeOperation: function (ctx) {\r\n        if (this.globalCompositeOperation) {\r\n          ctx.globalCompositeOperation = this.globalCompositeOperation;\r\n        }\r\n      }\r\n    });\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\r\n\r\n    extend(fabric.Object.prototype, fabric.Observable);\r\n\r\n    /**\r\n     * Defines the number of fraction digits to use when serializing object values.\r\n     * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @constant\r\n     * @type Number\r\n     */\r\n    fabric.Object.NUM_FRACTION_DIGITS = 2;\r\n\r\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\r\n      var klass = fabric[className];\r\n      object = clone(object, true);\r\n      fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\r\n        if (typeof patterns[0] !== 'undefined') {\r\n          object.fill = patterns[0];\r\n        }\r\n        if (typeof patterns[1] !== 'undefined') {\r\n          object.stroke = patterns[1];\r\n        }\r\n        fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\r\n          object.clipPath = enlivedProps[0];\r\n          var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\r\n          callback && callback(instance);\r\n        });\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Unique id used internally when creating SVG elements\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @type Number\r\n     */\r\n    fabric.Object.__uid = 0;\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        originXOffset = {\r\n          left: -0.5,\r\n          center: 0,\r\n          right: 0.5\r\n        },\r\n        originYOffset = {\r\n          top: -0.5,\r\n          center: 0,\r\n          bottom: 0.5\r\n        };\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Translates the coordinates from a set of origin to another (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\r\n        var x = point.x,\r\n            y = point.y,\r\n            offsetX, offsetY, dim;\r\n\r\n        if (typeof fromOriginX === 'string') {\r\n          fromOriginX = originXOffset[fromOriginX];\r\n        }\r\n        else {\r\n          fromOriginX -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginX === 'string') {\r\n          toOriginX = originXOffset[toOriginX];\r\n        }\r\n        else {\r\n          toOriginX -= 0.5;\r\n        }\r\n\r\n        offsetX = toOriginX - fromOriginX;\r\n\r\n        if (typeof fromOriginY === 'string') {\r\n          fromOriginY = originYOffset[fromOriginY];\r\n        }\r\n        else {\r\n          fromOriginY -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginY === 'string') {\r\n          toOriginY = originYOffset[toOriginY];\r\n        }\r\n        else {\r\n          toOriginY -= 0.5;\r\n        }\r\n\r\n        offsetY = toOriginY - fromOriginY;\r\n\r\n        if (offsetX || offsetY) {\r\n          dim = this._getTransformedDimensions();\r\n          x = point.x + offsetX * dim.x;\r\n          y = point.y + offsetY * dim.y;\r\n        }\r\n\r\n        return new fabric.Point(x, y);\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToCenterPoint: function(point, originX, originY) {\r\n        var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} center The point which corresponds to center of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToOriginPoint: function(center, originX, originY) {\r\n        var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Returns the real center coordinates of the object\r\n       * @return {fabric.Point}\r\n       */\r\n      getCenterPoint: function() {\r\n        var leftTop = new fabric.Point(this.left, this.top);\r\n        return this.translateToCenterPoint(leftTop, this.originX, this.originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the coordinates of the object based on center coordinates\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @return {fabric.Point}\r\n       */\r\n      // getOriginPoint: function(center) {\r\n      //   return this.translateToOriginPoint(center, this.originX, this.originY);\r\n      // },\r\n\r\n      /**\r\n       * Returns the coordinates of the object as if it has a different origin\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      getPointByOrigin: function(originX, originY) {\r\n        var center = this.getCenterPoint();\r\n        return this.translateToOriginPoint(center, originX, originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in local coordinates\r\n       * @param {fabric.Point} point The point relative to the global coordinate system\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      toLocalPoint: function(point, originX, originY) {\r\n        var center = this.getCenterPoint(),\r\n            p, p2;\r\n\r\n        if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\r\n          p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        }\r\n        else {\r\n          p = new fabric.Point(this.left, this.top);\r\n        }\r\n\r\n        p2 = new fabric.Point(point.x, point.y);\r\n        if (this.angle) {\r\n          p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\r\n        }\r\n        return p2.subtractEquals(p);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in global coordinates\r\n       * @param {fabric.Point} The point relative to the local coordinate system\r\n       * @return {fabric.Point}\r\n       */\r\n      // toGlobalPoint: function(point) {\r\n      //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\r\n      // },\r\n\r\n      /**\r\n       * Sets the position of the object taking into consideration the object's origin\r\n       * @param {fabric.Point} pos The new position of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {void}\r\n       */\r\n      setPositionByOrigin: function(pos, originX, originY) {\r\n        var center = this.translateToCenterPoint(pos, originX, originY),\r\n            position = this.translateToOriginPoint(center, this.originX, this.originY);\r\n        this.set('left', position.x);\r\n        this.set('top', position.y);\r\n      },\r\n\r\n      /**\r\n       * @param {String} to One of 'left', 'center', 'right'\r\n       */\r\n      adjustPosition: function(to) {\r\n        var angle = degreesToRadians(this.angle),\r\n            hypotFull = this.getScaledWidth(),\r\n            xFull = fabric.util.cos(angle) * hypotFull,\r\n            yFull = fabric.util.sin(angle) * hypotFull,\r\n            offsetFrom, offsetTo;\r\n\r\n        //TODO: this function does not consider mixed situation like top, center.\r\n        if (typeof this.originX === 'string') {\r\n          offsetFrom = originXOffset[this.originX];\r\n        }\r\n        else {\r\n          offsetFrom = this.originX - 0.5;\r\n        }\r\n        if (typeof to === 'string') {\r\n          offsetTo = originXOffset[to];\r\n        }\r\n        else {\r\n          offsetTo = to - 0.5;\r\n        }\r\n        this.left += xFull * (offsetTo - offsetFrom);\r\n        this.top += yFull * (offsetTo - offsetFrom);\r\n        this.setCoords();\r\n        this.originX = to;\r\n      },\r\n\r\n      /**\r\n       * Sets the origin/position of the object to it's center point\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _setOriginToCenter: function() {\r\n        this._originalOriginX = this.originX;\r\n        this._originalOriginY = this.originY;\r\n\r\n        var center = this.getCenterPoint();\r\n\r\n        this.originX = 'center';\r\n        this.originY = 'center';\r\n\r\n        this.left = center.x;\r\n        this.top = center.y;\r\n      },\r\n\r\n      /**\r\n       * Resets the origin/position of the object to it's original origin\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _resetOrigin: function() {\r\n        var originPoint = this.translateToOriginPoint(\r\n          this.getCenterPoint(),\r\n          this._originalOriginX,\r\n          this._originalOriginY);\r\n\r\n        this.originX = this._originalOriginX;\r\n        this.originY = this._originalOriginY;\r\n\r\n        this.left = originPoint.x;\r\n        this.top = originPoint.y;\r\n\r\n        this._originalOriginX = null;\r\n        this._originalOriginY = null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getLeftTopCoords: function() {\r\n        return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function getCoords(coords) {\r\n      return [\r\n        new fabric.Point(coords.tl.x, coords.tl.y),\r\n        new fabric.Point(coords.tr.x, coords.tr.y),\r\n        new fabric.Point(coords.br.x, coords.br.y),\r\n        new fabric.Point(coords.bl.x, coords.bl.y)\r\n      ];\r\n    }\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        multiplyMatrices = fabric.util.multiplyTransformMatrices,\r\n        transformPoint = fabric.util.transformPoint;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Describe object's corner position in canvas element coordinates.\r\n       * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\r\n       * each property is an object with x, y and corner.\r\n       * The `corner` property contains in a similar manner the 4 points of the\r\n       * interactive area of the corner.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords;\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      oCoords: null,\r\n\r\n      /**\r\n       * Describe object's corner position in canvas object absolute coordinates\r\n       * properties are tl,tr,bl,br and describe the four main corner.\r\n       * each property is an object with x, y, instance of Fabric.Point.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, top, left.\r\n       * Those coordinates are useful to understand where an object is. They get updated\r\n       * with oCoords but they do not need to be updated when zoom or panning change.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords(true);\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      aCoords: null,\r\n\r\n      /**\r\n       * storage for object transform matrix\r\n       */\r\n      ownMatrixCache: null,\r\n\r\n      /**\r\n       * storage for object full transform matrix\r\n       */\r\n      matrixCache: null,\r\n\r\n      /**\r\n       * return correct set of coordinates for intersection\r\n       */\r\n      getCoords: function(absolute, calculate) {\r\n        if (!this.oCoords) {\r\n          this.setCoords();\r\n        }\r\n        var coords = absolute ? this.aCoords : this.oCoords;\r\n        return getCoords(calculate ? this.calcCoords(absolute) : coords);\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with an area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with an area formed by 2 points\r\n       */\r\n      intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate),\r\n            intersection = fabric.Intersection.intersectPolygonRectangle(\r\n              coords,\r\n              pointTL,\r\n              pointBR\r\n            );\r\n        return intersection.status === 'Intersection';\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with another object\r\n       */\r\n      intersectsWithObject: function(other, absolute, calculate) {\r\n        var intersection = fabric.Intersection.intersectPolygonPolygon(\r\n          this.getCoords(absolute, calculate),\r\n          other.getCoords(absolute, calculate)\r\n        );\r\n\r\n        return intersection.status === 'Intersection'\r\n          || other.isContainedWithinObject(this, absolute, calculate)\r\n          || this.isContainedWithinObject(other, absolute, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area of another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area of another object\r\n       */\r\n      isContainedWithinObject: function(other, absolute, calculate) {\r\n        var points = this.getCoords(absolute, calculate),\r\n            i = 0, lines = other._getImageLines(\r\n              calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\r\n            );\r\n        for (; i < 4; i++) {\r\n          if (!other.containsPoint(points[i], lines)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area formed by 2 points\r\n       */\r\n      isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var boundingRect = this.getBoundingRect(absolute, calculate);\r\n\r\n        return (\r\n          boundingRect.left >= pointTL.x &&\r\n          boundingRect.left + boundingRect.width <= pointBR.x &&\r\n          boundingRect.top >= pointTL.y &&\r\n          boundingRect.top + boundingRect.height <= pointBR.y\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Checks if point is inside the object\r\n       * @param {fabric.Point} point Point to check against\r\n       * @param {Object} [lines] object returned from @method _getImageLines\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if point is inside the object\r\n       */\r\n      containsPoint: function(point, lines, absolute, calculate) {\r\n        var lines = lines || this._getImageLines(\r\n              calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\r\n            ),\r\n            xPoints = this._findCrossPoints(point, lines);\r\n\r\n        // if xPoints is odd then point is inside the object\r\n        return (xPoints !== 0 && xPoints % 2 === 1);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is contained within the canvas with current viewportTransform\r\n       * the check is done stopping at first point that appears on screen\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\r\n       * @return {Boolean} true if object is fully or partially contained within canvas\r\n       */\r\n      isOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        var points = this.getCoords(true, calculate), point;\r\n        for (var i = 0; i < 4; i++) {\r\n          point = points[i];\r\n          if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\r\n            return true;\r\n          }\r\n        }\r\n        // no points on screen, check intersection with absolute coordinates\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if the object contains the midpoint between canvas extremities\r\n       * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\r\n       * @private\r\n       * @param {Fabric.Point} pointTL Top Left point\r\n       * @param {Fabric.Point} pointBR Top Right point\r\n       * @param {Boolean} calculate use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if the object contains the point\r\n       */\r\n      _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\r\n        // worst case scenario the object is so big that contains the screen\r\n        var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\r\n        if (this.containsPoint(centerPoint, null, true, calculate)) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is partially contained within the canvas with current viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is partially contained within canvas\r\n       */\r\n      isPartiallyOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Method that returns an object with the object edges in it, given the coordinates of the corners\r\n       * @private\r\n       * @param {Object} oCoords Coordinates of the object corners\r\n       */\r\n      _getImageLines: function(oCoords) {\r\n        return {\r\n          topline: {\r\n            o: oCoords.tl,\r\n            d: oCoords.tr\r\n          },\r\n          rightline: {\r\n            o: oCoords.tr,\r\n            d: oCoords.br\r\n          },\r\n          bottomline: {\r\n            o: oCoords.br,\r\n            d: oCoords.bl\r\n          },\r\n          leftline: {\r\n            o: oCoords.bl,\r\n            d: oCoords.tl\r\n          }\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Helper method to determine how many cross points are between the 4 object edges\r\n       * and the horizontal line determined by a point on canvas\r\n       * @private\r\n       * @param {fabric.Point} point Point to check\r\n       * @param {Object} lines Coordinates of the object being evaluated\r\n       */\r\n      // remove yi, not used but left code here just in case.\r\n      _findCrossPoints: function(point, lines) {\r\n        var b1, b2, a1, a2, xi, // yi,\r\n            xcount = 0,\r\n            iLine;\r\n\r\n        for (var lineKey in lines) {\r\n          iLine = lines[lineKey];\r\n          // optimisation 1: line below point. no cross\r\n          if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 2: line above point. no cross\r\n          if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 3: vertical line case\r\n          if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\r\n            xi = iLine.o.x;\r\n            // yi = point.y;\r\n          }\r\n          // calculate the intersection point\r\n          else {\r\n            b1 = 0;\r\n            b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\r\n            a1 = point.y - b1 * point.x;\r\n            a2 = iLine.o.y - b2 * iLine.o.x;\r\n\r\n            xi = -(a1 - a2) / (b1 - b2);\r\n            // yi = a1 + b1 * xi;\r\n          }\r\n          // dont count xi < point.x cases\r\n          if (xi >= point.x) {\r\n            xcount += 1;\r\n          }\r\n          // optimisation 4: specific for square images\r\n          if (xcount === 2) {\r\n            break;\r\n          }\r\n        }\r\n        return xcount;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of object's bounding rectangle (left, top, width, height)\r\n       * the box is intended as aligned to axis of canvas.\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      getBoundingRect: function(absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate);\r\n        return fabric.util.makeBoundingBoxFromPoints(coords);\r\n      },\r\n\r\n      /**\r\n       * Returns width of an object's bounding box counting transformations\r\n       * before 2.0 it was named getWidth();\r\n       * @return {Number} width value\r\n       */\r\n      getScaledWidth: function() {\r\n        return this._getTransformedDimensions().x;\r\n      },\r\n\r\n      /**\r\n       * Returns height of an object bounding box counting transformations\r\n       * before 2.0 it was named getHeight();\r\n       * @return {Number} height value\r\n       */\r\n      getScaledHeight: function() {\r\n        return this._getTransformedDimensions().y;\r\n      },\r\n\r\n      /**\r\n       * Makes sure the scale is valid and modifies it if necessary\r\n       * @private\r\n       * @param {Number} value\r\n       * @return {Number}\r\n       */\r\n      _constrainScale: function(value) {\r\n        if (Math.abs(value) < this.minScaleLimit) {\r\n          if (value < 0) {\r\n            return -this.minScaleLimit;\r\n          }\r\n          else {\r\n            return this.minScaleLimit;\r\n          }\r\n        }\r\n        else if (value === 0) {\r\n          return 0.0001;\r\n        }\r\n        return value;\r\n      },\r\n\r\n      /**\r\n       * Scales an object (equally by x and y)\r\n       * @param {Number} value Scale factor\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scale: function(value) {\r\n        this._set('scaleX', value);\r\n        this._set('scaleY', value);\r\n        return this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New width value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToWidth: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\r\n        return this.scale(value / this.width / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New height value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToHeight: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\r\n        return this.scale(value / this.height / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Calculates and returns the .coords of an object.\r\n       * @return {Object} Object with tl, tr, br, bl ....\r\n       * @chainable\r\n       */\r\n      calcCoords: function(absolute) {\r\n        var rotateMatrix = this._calcRotateMatrix(),\r\n            translateMatrix = this._calcTranslateMatrix(),\r\n            startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\r\n            vpt = this.getViewportTransform(),\r\n            finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\r\n            dim = this._getTransformedDimensions(),\r\n            w = dim.x / 2, h = dim.y / 2,\r\n            tl = transformPoint({ x: -w, y: -h }, finalMatrix),\r\n            tr = transformPoint({ x: w, y: -h }, finalMatrix),\r\n            bl = transformPoint({ x: -w, y: h }, finalMatrix),\r\n            br = transformPoint({ x: w, y: h }, finalMatrix);\r\n        if (!absolute) {\r\n          var padding = this.padding, angle = degreesToRadians(this.angle),\r\n              cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\r\n              cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\r\n              cosPMinusSinP = cosP - sinP;\r\n          if (padding) {\r\n            tl.x -= cosPMinusSinP;\r\n            tl.y -= cosPSinP;\r\n            tr.x += cosPSinP;\r\n            tr.y -= cosPMinusSinP;\r\n            bl.x -= cosPSinP;\r\n            bl.y += cosPMinusSinP;\r\n            br.x += cosPMinusSinP;\r\n            br.y += cosPSinP;\r\n          }\r\n          var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\r\n              mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\r\n              mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\r\n              mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\r\n              mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\r\n        }\r\n\r\n        // if (!absolute) {\r\n        //   var canvas = this.canvas;\r\n        //   setTimeout(function() {\r\n        //     canvas.contextTop.clearRect(0, 0, 700, 700);\r\n        //     canvas.contextTop.fillStyle = 'green';\r\n        //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\r\n        //   }, 50);\r\n        // }\r\n\r\n        var coords = {\r\n          // corners\r\n          tl: tl, tr: tr, br: br, bl: bl,\r\n        };\r\n        if (!absolute) {\r\n          // middle\r\n          coords.ml = ml;\r\n          coords.mt = mt;\r\n          coords.mr = mr;\r\n          coords.mb = mb;\r\n          // rotating point\r\n          coords.mtr = mtr;\r\n        }\r\n        return coords;\r\n      },\r\n\r\n      /**\r\n       * Sets corner position coordinates based on current angle, width and height.\r\n       * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\r\n       * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\r\n       * @param {Boolean} [skipAbsolute] skip calculation of aCoords, useful in setViewportTransform\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setCoords: function(ignoreZoom, skipAbsolute) {\r\n        this.oCoords = this.calcCoords(ignoreZoom);\r\n        if (!skipAbsolute) {\r\n          this.aCoords = this.calcCoords(true);\r\n        }\r\n\r\n        // set coordinates of the draggable boxes in the corners used to scale/rotate the image\r\n        ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * calculate rotation matrix of an object\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcRotateMatrix: function() {\r\n        return fabric.util.calcRotateMatrix(this);\r\n      },\r\n\r\n      /**\r\n       * calculate the translation matrix for an object transform\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcTranslateMatrix: function() {\r\n        var center = this.getCenterPoint();\r\n        return [1, 0, 0, 1, center.x, center.y];\r\n      },\r\n\r\n      transformMatrixKey: function(skipGroup) {\r\n        var sep = '_', prefix = '';\r\n        if (!skipGroup && this.group) {\r\n          prefix = this.group.transformMatrixKey(skipGroup) + sep;\r\n        };\r\n        return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\r\n          sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\r\n          sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\r\n      },\r\n\r\n      /**\r\n       * calculate transform matrix that represents the current transformations from the\r\n       * object's properties.\r\n       * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\r\n       * @return {Array} transform matrix for the object\r\n       */\r\n      calcTransformMatrix: function(skipGroup) {\r\n        if (skipGroup) {\r\n          return this.calcOwnMatrix();\r\n        }\r\n        var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var matrix = this.calcOwnMatrix();\r\n        if (this.group) {\r\n          matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\r\n        }\r\n        cache.key = key;\r\n        cache.value = matrix;\r\n        return matrix;\r\n      },\r\n\r\n      /**\r\n       * calculate transform matrix that represents the current transformations from the\r\n       * object's properties, this matrix does not include the group transformation\r\n       * @return {Array} transform matrix for the object\r\n       */\r\n      calcOwnMatrix: function() {\r\n        var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var tMatrix = this._calcTranslateMatrix();\r\n        this.translateX = tMatrix[4];\r\n        this.translateY = tMatrix[5];\r\n        cache.key = key;\r\n        cache.value = fabric.util.composeMatrix(this);\r\n        return cache.value;\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       * @deprecated since 3.4.0, please use fabric.util._calcDimensionsTransformMatrix\r\n       * not including or including flipX, flipY to emulate the flipping boolean\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\r\n        return fabric.util.calcDimensionsMatrix({\r\n          skewX: skewX,\r\n          skewY: skewY,\r\n          scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),\r\n          scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)\r\n        });\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var strokeWidth = this.strokeWidth,\r\n            w = this.width + strokeWidth,\r\n            h = this.height + strokeWidth;\r\n        return { x: w, y: h };\r\n      },\r\n\r\n      /*\r\n       * Calculate object bounding box dimensions from its properties scale, skew.\r\n       * The skewX and skewY parameters are used in the skewing logic path and\r\n       * do not provide something useful to common use cases.\r\n       * @param {Number} [skewX], a value to override current skewX\r\n       * @param {Number} [skewY], a value to override current skewY\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getTransformedDimensions: function(skewX, skewY) {\r\n        if (typeof skewX === 'undefined') {\r\n          skewX = this.skewX;\r\n        }\r\n        if (typeof skewY === 'undefined') {\r\n          skewY = this.skewY;\r\n        }\r\n        var dimensions = this._getNonTransformedDimensions(), dimX, dimY,\r\n            noSkew = skewX === 0 && skewY === 0;\r\n\r\n        if (this.strokeUniform) {\r\n          dimX = this.width;\r\n          dimY = this.height;\r\n        }\r\n        else {\r\n          dimX = dimensions.x;\r\n          dimY = dimensions.y;\r\n        }\r\n        if (noSkew) {\r\n          return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\r\n        }\r\n        else {\r\n          dimX /= 2;\r\n          dimY /= 2;\r\n        }\r\n        var points = [\r\n              {\r\n                x: -dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: -dimX,\r\n                y: dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: dimY\r\n              }],\r\n            transformMatrix = fabric.util.calcDimensionsMatrix({\r\n              scaleX: this.scaleX,\r\n              scaleY: this.scaleY,\r\n              skewX: skewX,\r\n              skewY: skewY,\r\n            }),\r\n            bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\r\n        return this._finalizeDimensions(bbox.width, bbox.height);\r\n      },\r\n\r\n      /*\r\n       * Calculate object bounding box dimensions from its properties scale, skew.\r\n       * @param Number width width of the bbox\r\n       * @param Number height height of the bbox\r\n       * @private\r\n       * @return {Object} .x finalized width dimension\r\n       * @return {Object} .y finalized height dimension\r\n       */\r\n      _finalizeDimensions: function(width, height) {\r\n        return this.strokeUniform ?\r\n          { x: width + this.strokeWidth, y: height + this.strokeWidth }\r\n          :\r\n          { x: width, y: height };\r\n      },\r\n      /*\r\n       * Calculate object dimensions for controls, including padding and canvas zoom.\r\n       * private\r\n       */\r\n      _calculateCurrentDimensions: function()  {\r\n        var vpt = this.getViewportTransform(),\r\n            dim = this._getTransformedDimensions(),\r\n            p = fabric.util.transformPoint(dim, vpt, true);\r\n\r\n        return p.scalarAdd(2 * this.padding);\r\n      },\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Moves an object to the bottom of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendToBack: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.sendToBack(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to the top of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringToFront: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.bringToFront(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object down in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendBackwards: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.sendBackwards(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object up in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringForward: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.bringForward(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to specified level in stack of drawn objects\r\n     * @param {Number} index New position of object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    moveTo: function(index) {\r\n      if (this.group && this.group.type !== 'activeSelection') {\r\n        fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\r\n      }\r\n      else {\r\n        this.canvas.moveTo(this, index);\r\n      }\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    function getSvgColorString(prop, value) {\r\n      if (!value) {\r\n        return prop + ': none; ';\r\n      }\r\n      else if (value.toLive) {\r\n        return prop + ': url(#SVGID_' + value.id + '); ';\r\n      }\r\n      else {\r\n        var color = new fabric.Color(value),\r\n            str = prop + ': ' + color.toRgb() + '; ',\r\n            opacity = color.getAlpha();\r\n        if (opacity !== 1) {\r\n          //change the color in rgb + opacity\r\n          str += prop + '-opacity: ' + opacity.toString() + '; ';\r\n        }\r\n        return str;\r\n      }\r\n    }\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n\r\n        var fillRule = this.fillRule ? this.fillRule : 'nonzero',\r\n            strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\r\n            strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\r\n            strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\r\n            strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\r\n            strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\r\n            strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\r\n            opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\r\n            visibility = this.visible ? '' : ' visibility: hidden;',\r\n            filter = skipShadow ? '' : this.getSvgFilter(),\r\n            fill = getSvgColorString('fill', this.fill),\r\n            stroke = getSvgColorString('stroke', this.stroke);\r\n\r\n        return [\r\n          stroke,\r\n          'stroke-width: ', strokeWidth, '; ',\r\n          'stroke-dasharray: ', strokeDashArray, '; ',\r\n          'stroke-linecap: ', strokeLineCap, '; ',\r\n          'stroke-dashoffset: ', strokeDashOffset, '; ',\r\n          'stroke-linejoin: ', strokeLineJoin, '; ',\r\n          'stroke-miterlimit: ', strokeMiterLimit, '; ',\r\n          fill,\r\n          'fill-rule: ', fillRule, '; ',\r\n          'opacity: ', opacity, ';',\r\n          filter,\r\n          visibility\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\r\n       * @return {String}\r\n       */\r\n      getSvgSpanStyles: function(style, useWhiteSpace) {\r\n        var term = '; ';\r\n        var fontFamily = style.fontFamily ?\r\n          'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\r\n            '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\r\n        var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\r\n            fontFamily = fontFamily,\r\n            fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\r\n            fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\r\n            fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\r\n            fill = style.fill ? getSvgColorString('fill', style.fill) : '',\r\n            stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\r\n            textDecoration = this.getSvgTextDecoration(style),\r\n            deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\r\n        if (textDecoration) {\r\n          textDecoration = 'text-decoration: ' + textDecoration + term;\r\n        }\r\n\r\n        return [\r\n          stroke,\r\n          strokeWidth,\r\n          fontFamily,\r\n          fontSize,\r\n          fontStyle,\r\n          fontWeight,\r\n          textDecoration,\r\n          fill,\r\n          deltaY,\r\n          useWhiteSpace ? 'white-space: pre; ' : ''\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns text-decoration property for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @return {String}\r\n       */\r\n      getSvgTextDecoration: function(style) {\r\n        if ('overline' in style || 'underline' in style || 'linethrough' in style) {\r\n          return (style.overline ? 'overline ' : '') +\r\n            (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\r\n        }\r\n        return '';\r\n      },\r\n\r\n      /**\r\n       * Returns filter for svg shadow\r\n       * @return {String}\r\n       */\r\n      getSvgFilter: function() {\r\n        return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\r\n      },\r\n\r\n      /**\r\n       * Returns id attribute for svg output\r\n       * @return {String}\r\n       */\r\n      getSvgCommons: function() {\r\n        return [\r\n          this.id ? 'id=\"' + this.id + '\" ' : '',\r\n          this.clipPath ? 'clip-path=\"url(#' + this.clipPath.clipPathId + ')\" ' : '',\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export\r\n       * @param {Boolean} use the full transform or the single object one.\r\n       * @return {String}\r\n       */\r\n      getSvgTransform: function(full, additionalTransform) {\r\n        var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\r\n            svgTransform = 'transform=\"' + fabric.util.matrixToSVG(transform);\r\n        return svgTransform +\r\n          (additionalTransform || '') + this.getSvgTransformMatrix() + '\" ';\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export from the transform matrix of single elements\r\n       * @return {String}\r\n       */\r\n      getSvgTransformMatrix: function() {\r\n        return this.transformMatrix ? ' ' + fabric.util.matrixToSVG(this.transformMatrix) : '';\r\n      },\r\n\r\n      _setSVGBg: function(textBgRects) {\r\n        if (this.backgroundColor) {\r\n          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n          textBgRects.push(\r\n            '\\t\\t<rect ',\r\n            this._getFillAttributes(this.backgroundColor),\r\n            ' x=\"',\r\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\r\n            '\" y=\"',\r\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\r\n            '\" width=\"',\r\n            toFixed(this.width, NUM_FRACTION_DIGITS),\r\n            '\" height=\"',\r\n            toFixed(this.height, NUM_FRACTION_DIGITS),\r\n            '\"></rect>\\n');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        return this._createBaseSVGMarkup(this._toSVG(reviver), { reviver: reviver });\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        return '\\t' + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), { reviver: reviver });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createBaseClipPathSVGMarkup: function(objectMarkup, options) {\r\n        options = options || {};\r\n        var reviver = options.reviver,\r\n            additionalTransform = options.additionalTransform || '',\r\n            commonPieces = [\r\n              this.getSvgTransform(true, additionalTransform),\r\n              this.getSvgCommons(),\r\n            ].join(''),\r\n            // insert commons in the markup, style and svgCommons\r\n            index = objectMarkup.indexOf('COMMON_PARTS');\r\n        objectMarkup[index] = commonPieces;\r\n        return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createBaseSVGMarkup: function(objectMarkup, options) {\r\n        options = options || {};\r\n        var noStyle = options.noStyle,\r\n            reviver = options.reviver,\r\n            styleInfo = noStyle ? '' : 'style=\"' + this.getSvgStyles() + '\" ',\r\n            shadowInfo = options.withShadow ? 'style=\"' + this.getSvgFilter() + '\" ' : '',\r\n            clipPath = this.clipPath,\r\n            vectorEffect = this.strokeUniform ? 'vector-effect=\"non-scaling-stroke\" ' : '',\r\n            absoluteClipPath = clipPath && clipPath.absolutePositioned,\r\n            stroke = this.stroke, fill = this.fill, shadow = this.shadow,\r\n            commonPieces, markup = [], clipPathMarkup,\r\n            // insert commons in the markup, style and svgCommons\r\n            index = objectMarkup.indexOf('COMMON_PARTS'),\r\n            additionalTransform = options.additionalTransform;\r\n        if (clipPath) {\r\n          clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\r\n          clipPathMarkup = '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\r\n            clipPath.toClipPathSVG(reviver) +\r\n            '</clipPath>\\n';\r\n        }\r\n        if (absoluteClipPath) {\r\n          markup.push(\r\n            '<g ', shadowInfo, this.getSvgCommons(), ' >\\n'\r\n          );\r\n        }\r\n        markup.push(\r\n          '<g ',\r\n          this.getSvgTransform(false),\r\n          !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\r\n          ' >\\n'\r\n        );\r\n        commonPieces = [\r\n          styleInfo,\r\n          vectorEffect,\r\n          noStyle ? '' : this.addPaintOrder(), ' ',\r\n          additionalTransform ? 'transform=\"' + additionalTransform + '\" ' : '',\r\n        ].join('');\r\n        objectMarkup[index] = commonPieces;\r\n        if (fill && fill.toLive) {\r\n          markup.push(fill.toSVG(this));\r\n        }\r\n        if (stroke && stroke.toLive) {\r\n          markup.push(stroke.toSVG(this));\r\n        }\r\n        if (shadow) {\r\n          markup.push(shadow.toSVG(this));\r\n        }\r\n        if (clipPath) {\r\n          markup.push(clipPathMarkup);\r\n        }\r\n        markup.push(objectMarkup.join(''));\r\n        markup.push('</g>\\n');\r\n        absoluteClipPath && markup.push('</g>\\n');\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n\r\n      addPaintOrder: function() {\r\n        return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\r\n      }\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function() {\r\n\r\n    var extend = fabric.util.object.extend,\r\n        originalSet = 'stateProperties';\r\n\r\n    /*\r\n      Depends on `stateProperties`\r\n    */\r\n    function saveProps(origin, destination, props) {\r\n      var tmpObj = { }, deep = true;\r\n      props.forEach(function(prop) {\r\n        tmpObj[prop] = origin[prop];\r\n      });\r\n      extend(origin[destination], tmpObj, deep);\r\n    }\r\n\r\n    function _isEqual(origValue, currentValue, firstPass) {\r\n      if (origValue === currentValue) {\r\n        // if the objects are identical, return\r\n        return true;\r\n      }\r\n      else if (Array.isArray(origValue)) {\r\n        if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = origValue.length; i < len; i++) {\r\n          if (!_isEqual(origValue[i], currentValue[i])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      else if (origValue && typeof origValue === 'object') {\r\n        var keys = Object.keys(origValue), key;\r\n        if (!currentValue ||\r\n            typeof currentValue !== 'object' ||\r\n            (!firstPass && keys.length !== Object.keys(currentValue).length)\r\n        ) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = keys.length; i < len; i++) {\r\n          key = keys[i];\r\n          // since clipPath is in the statefull cache list and the clipPath objects\r\n          // would be iterated as an object, this would lead to possible infinite recursion\r\n          if (key === 'canvas') {\r\n            continue;\r\n          }\r\n          if (!_isEqual(origValue[key], currentValue[key])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Returns true if object state (one of its state properties) was changed\r\n       * @param {String} [propertySet] optional name for the set of property we want to save\r\n       * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\r\n       */\r\n      hasStateChanged: function(propertySet) {\r\n        propertySet = propertySet || originalSet;\r\n        var dashedPropertySet = '_' + propertySet;\r\n        if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\r\n          return true;\r\n        }\r\n        return !_isEqual(this[dashedPropertySet], this, true);\r\n      },\r\n\r\n      /**\r\n       * Saves state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      saveState: function(options) {\r\n        var propertySet = options && options.propertySet || originalSet,\r\n            destination = '_' + propertySet;\r\n        if (!this[destination]) {\r\n          return this.setupState(options);\r\n        }\r\n        saveProps(this, destination, this[propertySet]);\r\n        if (options && options.stateProperties) {\r\n          saveProps(this, destination, options.stateProperties);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Setups state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      setupState: function(options) {\r\n        options = options || { };\r\n        var propertySet = options.propertySet || originalSet;\r\n        options.propertySet = propertySet;\r\n        this['_' + propertySet] = { };\r\n        this.saveState(options);\r\n        return this;\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * The object interactivity controls.\r\n       * @private\r\n       */\r\n      _controlsVisibility: null,\r\n\r\n      /**\r\n       * Determines which corner has been clicked\r\n       * @private\r\n       * @param {Object} pointer The pointer indicating the mouse position\r\n       * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\r\n       */\r\n      _findTargetCorner: function(pointer) {\r\n        // objects in group, anykind, are not self modificable,\r\n        // must not return an hovered corner.\r\n        if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\r\n          return false;\r\n        }\r\n\r\n        var ex = pointer.x,\r\n            ey = pointer.y,\r\n            xPoints,\r\n            lines;\r\n        this.__corner = 0;\r\n        for (var i in this.oCoords) {\r\n\r\n          if (!this.isControlVisible(i)) {\r\n            continue;\r\n          }\r\n\r\n          if (i === 'mtr' && !this.hasRotatingPoint) {\r\n            continue;\r\n          }\r\n\r\n          if (this.get('lockUniScaling') &&\r\n             (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\r\n            continue;\r\n          }\r\n\r\n          lines = this._getImageLines(this.oCoords[i].corner);\r\n\r\n          // debugging\r\n\r\n          // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\r\n\r\n          xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\r\n          if (xPoints !== 0 && xPoints % 2 === 1) {\r\n            this.__corner = i;\r\n            return i;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets the coordinates of the draggable boxes in the corners of\r\n       * the image used to scale/rotate it.\r\n       * @private\r\n       */\r\n      _setCornerCoords: function() {\r\n        var coords = this.oCoords,\r\n            newTheta = degreesToRadians(45 - this.angle),\r\n            /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\r\n            /* 0.707106 stands for sqrt(2)/2 */\r\n            cornerHypotenuse = this.cornerSize * 0.707106,\r\n            cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\r\n            sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\r\n            x, y;\r\n\r\n        for (var point in coords) {\r\n          x = coords[point].x;\r\n          y = coords[point].y;\r\n          coords[point].corner = {\r\n            tl: {\r\n              x: x - sinHalfOffset,\r\n              y: y - cosHalfOffset\r\n            },\r\n            tr: {\r\n              x: x + cosHalfOffset,\r\n              y: y - sinHalfOffset\r\n            },\r\n            bl: {\r\n              x: x - cosHalfOffset,\r\n              y: y + sinHalfOffset\r\n            },\r\n            br: {\r\n              x: x + sinHalfOffset,\r\n              y: y + cosHalfOffset\r\n            }\r\n          };\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a colored layer behind the object, inside its selection borders.\r\n       * Requires public options: padding, selectionBackgroundColor\r\n       * this function is called when the context is transformed\r\n       * has checks to be skipped when the object is on a staticCanvas\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawSelectionBackground: function(ctx) {\r\n        if (!this.selectionBackgroundColor ||\r\n          (this.canvas && !this.canvas.interactive) ||\r\n          (this.canvas && this.canvas._activeObject !== this)\r\n        ) {\r\n          return this;\r\n        }\r\n        ctx.save();\r\n        var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\r\n            vpt = this.canvas.viewportTransform;\r\n        ctx.translate(center.x, center.y);\r\n        ctx.scale(1 / vpt[0], 1 / vpt[3]);\r\n        ctx.rotate(degreesToRadians(this.angle));\r\n        ctx.fillStyle = this.selectionBackgroundColor;\r\n        ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBorders: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth,\r\n            drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            hasControls = typeof styleOverride.hasControls !== 'undefined' ?\r\n              styleOverride.hasControls : this.hasControls,\r\n            rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\r\n              styleOverride.rotatingPointOffset : this.rotatingPointOffset;\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\r\n\r\n          var rotateHeight = -height / 2;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, rotateHeight);\r\n          ctx.lineTo(0, rotateHeight - rotatingPointOffset);\r\n          ctx.stroke();\r\n        }\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box when it is inside a group.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {object} options object representing current object parameters\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBordersInGroup: function(ctx, options, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var p = this._getNonTransformedDimensions(),\r\n            matrix = fabric.util.composeMatrix({\r\n              scaleX: options.scaleX,\r\n              scaleY: options.scaleY,\r\n              skewX: options.skewX\r\n            }),\r\n            wh = fabric.util.transformPoint(p, matrix),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth;\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws corners of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: cornerSize, padding\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawControls: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            width = wh.x,\r\n            height = wh.y,\r\n            scaleOffset = styleOverride.cornerSize || this.cornerSize,\r\n            left = -(width + scaleOffset) / 2,\r\n            top = -(height + scaleOffset) / 2,\r\n            transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\r\n              styleOverride.transparentCorners : this.transparentCorners,\r\n            hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            methodName = transparentCorners ? 'stroke' : 'fill';\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\r\n        if (!this.transparentCorners) {\r\n          ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\r\n        }\r\n        this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\r\n\r\n        // top-left\r\n        this._drawControl('tl', ctx, methodName,\r\n          left,\r\n          top, styleOverride);\r\n\r\n        // top-right\r\n        this._drawControl('tr', ctx, methodName,\r\n          left + width,\r\n          top, styleOverride);\r\n\r\n        // bottom-left\r\n        this._drawControl('bl', ctx, methodName,\r\n          left,\r\n          top + height, styleOverride);\r\n\r\n        // bottom-right\r\n        this._drawControl('br', ctx, methodName,\r\n          left + width,\r\n          top + height, styleOverride);\r\n\r\n        if (!this.get('lockUniScaling')) {\r\n\r\n          // middle-top\r\n          this._drawControl('mt', ctx, methodName,\r\n            left + width / 2,\r\n            top, styleOverride);\r\n\r\n          // middle-bottom\r\n          this._drawControl('mb', ctx, methodName,\r\n            left + width / 2,\r\n            top + height, styleOverride);\r\n\r\n          // middle-right\r\n          this._drawControl('mr', ctx, methodName,\r\n            left + width,\r\n            top + height / 2, styleOverride);\r\n\r\n          // middle-left\r\n          this._drawControl('ml', ctx, methodName,\r\n            left,\r\n            top + height / 2, styleOverride);\r\n        }\r\n\r\n        // middle-top-rotate\r\n        if (hasRotatingPoint) {\r\n          this._drawControl('mtr', ctx, methodName,\r\n            left + width / 2,\r\n            top - this.rotatingPointOffset, styleOverride);\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        if (!this.isControlVisible(control)) {\r\n          return;\r\n        }\r\n        var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\r\n        switch (styleOverride.cornerStyle || this.cornerStyle) {\r\n          case 'circle':\r\n            ctx.beginPath();\r\n            ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\r\n            ctx[methodName]();\r\n            if (stroke) {\r\n              ctx.stroke();\r\n            }\r\n            break;\r\n          default:\r\n            this.transparentCorners || ctx.clearRect(left, top, size, size);\r\n            ctx[methodName + 'Rect'](left, top, size, size);\r\n            if (stroke) {\r\n              ctx.strokeRect(left, top, size, size);\r\n            }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns true if the specified control is visible, false otherwise.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @returns {Boolean} true if the specified control is visible, false otherwise\r\n       */\r\n      isControlVisible: function(controlName) {\r\n        return this._getControlsVisibility()[controlName];\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility of the specified control.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @param {Boolean} visible true to set the specified control visible, false otherwise\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlVisible: function(controlName, visible) {\r\n        this._getControlsVisibility()[controlName] = visible;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility state of object controls.\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\r\n       * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\r\n       * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\r\n       * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\r\n       * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\r\n       * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\r\n       * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\r\n       * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\r\n       * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlsVisibility: function(options) {\r\n        options || (options = { });\r\n\r\n        for (var p in options) {\r\n          this.setControlVisible(p, options[p]);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns the instance of the control visibility set for this object.\r\n       * @private\r\n       * @returns {Object}\r\n       */\r\n      _getControlsVisibility: function() {\r\n        if (!this._controlsVisibility) {\r\n          this._controlsVisibility = {\r\n            tl: true,\r\n            tr: true,\r\n            br: true,\r\n            bl: true,\r\n            ml: true,\r\n            mt: true,\r\n            mr: true,\r\n            mb: true,\r\n            mtr: true\r\n          };\r\n        }\r\n        return this._controlsVisibility;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to deselect this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onDeselect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to select this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onSelect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Animation duration (in ms) for fx* methods\r\n     * @type Number\r\n     * @default\r\n     */\r\n    FX_DURATION: 500,\r\n\r\n    /**\r\n     * Centers object horizontally with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectH: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.left,\r\n        endValue: this.getCenter().left,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('left', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectV: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.top,\r\n        endValue: this.getCenter().top,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('top', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as `fabric.Canvas#remove` but animated\r\n     * @param {fabric.Object} object Object to remove\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxRemove: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.opacity,\r\n        endValue: 0,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('opacity', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function () {\r\n          _this.remove(object);\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n    /**\r\n     * Animates object's properties\r\n     * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\r\n     * @param {Number|Object} value Value to animate property to (if string was given first) or options object\r\n     * @return {fabric.Object} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\r\n     * @chainable\r\n     *\r\n     * As object — multiple properties\r\n     *\r\n     * object.animate({ left: ..., top: ... });\r\n     * object.animate({ left: ..., top: ... }, { duration: ... });\r\n     *\r\n     * As string — one property\r\n     *\r\n     * object.animate('left', ...);\r\n     * object.animate('left', { duration: ... });\r\n     *\r\n     */\r\n    animate: function() {\r\n      if (arguments[0] && typeof arguments[0] === 'object') {\r\n        var propsToAnimate = [], prop, skipCallbacks;\r\n        for (prop in arguments[0]) {\r\n          propsToAnimate.push(prop);\r\n        }\r\n        for (var i = 0, len = propsToAnimate.length; i < len; i++) {\r\n          prop = propsToAnimate[i];\r\n          skipCallbacks = i !== len - 1;\r\n          this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\r\n        }\r\n      }\r\n      else {\r\n        this._animate.apply(this, arguments);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to animate\r\n     * @param {String} to Value to animate to\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\r\n     */\r\n    _animate: function(property, to, options, skipCallbacks) {\r\n      var _this = this, propPair;\r\n\r\n      to = to.toString();\r\n\r\n      if (!options) {\r\n        options = { };\r\n      }\r\n      else {\r\n        options = fabric.util.object.clone(options);\r\n      }\r\n\r\n      if (~property.indexOf('.')) {\r\n        propPair = property.split('.');\r\n      }\r\n\r\n      var currentValue = propPair\r\n        ? this.get(propPair[0])[propPair[1]]\r\n        : this.get(property);\r\n\r\n      if (!('from' in options)) {\r\n        options.from = currentValue;\r\n      }\r\n\r\n      if (~to.indexOf('=')) {\r\n        to = currentValue + parseFloat(to.replace('=', ''));\r\n      }\r\n      else {\r\n        to = parseFloat(to);\r\n      }\r\n\r\n      fabric.util.animate({\r\n        startValue: options.from,\r\n        endValue: to,\r\n        byValue: options.by,\r\n        easing: options.easing,\r\n        duration: options.duration,\r\n        abort: options.abort && function() {\r\n          return options.abort.call(_this);\r\n        },\r\n        onChange: function(value, valueProgress, timeProgress) {\r\n          if (propPair) {\r\n            _this[propPair[0]][propPair[1]] = value;\r\n          }\r\n          else {\r\n            _this.set(property, value);\r\n          }\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n          options.onChange && options.onChange(value, valueProgress, timeProgress);\r\n        },\r\n        onComplete: function(value, valueProgress, timeProgress) {\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n\r\n          _this.setCoords();\r\n          options.onComplete && options.onComplete(value, valueProgress, timeProgress);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\r\n\r\n    if (fabric.Line) {\r\n      fabric.warn('fabric.Line is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Line class\r\n     * @class fabric.Line\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Line#initialize} for constructor definition\r\n     */\r\n    fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'line',\r\n\r\n      /**\r\n       * x value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x1: 0,\r\n\r\n      /**\r\n       * y value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y1: 0,\r\n\r\n      /**\r\n       * x value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x2: 0,\r\n\r\n      /**\r\n       * y value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y2: 0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} [points] Array of points\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Line} thisArg\r\n       */\r\n      initialize: function(points, options) {\r\n        if (!points) {\r\n          points = [0, 0, 0, 0];\r\n        }\r\n\r\n        this.callSuper('initialize', options);\r\n\r\n        this.set('x1', points[0]);\r\n        this.set('y1', points[1]);\r\n        this.set('x2', points[2]);\r\n        this.set('y2', points[3]);\r\n\r\n        this._setWidthHeight(options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n\r\n        this.width = Math.abs(this.x2 - this.x1);\r\n        this.height = Math.abs(this.y2 - this.y1);\r\n\r\n        this.left = 'left' in options\r\n          ? options.left\r\n          : this._getLeftToOriginX();\r\n\r\n        this.top = 'top' in options\r\n          ? options.top\r\n          : this._getTopToOriginY();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        if (typeof coordProps[key] !== 'undefined') {\r\n          this._setWidthHeight();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\r\n       */\r\n      _getLeftToOriginX: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originX',\r\n          axis1: 'x1',\r\n          axis2: 'x2',\r\n          dimension: 'width'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'left',\r\n          center: 'center',\r\n          farthest: 'right'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\r\n       */\r\n      _getTopToOriginY: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originY',\r\n          axis1: 'y1',\r\n          axis2: 'y2',\r\n          dimension: 'height'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'top',\r\n          center: 'center',\r\n          farthest: 'bottom'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n\r\n        if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\r\n          // move from center (of virtual box) to its left/top corner\r\n          // we can't assume x1, y1 is top left and x2, y2 is bottom right\r\n          var p = this.calcLinePoints();\r\n          ctx.moveTo(p.x1, p.y1);\r\n          ctx.lineTo(p.x2, p.y2);\r\n        }\r\n\r\n        ctx.lineWidth = this.strokeWidth;\r\n\r\n        // TODO: test this\r\n        // make sure setting \"fill\" changes color of a line\r\n        // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\r\n        var origStrokeStyle = ctx.strokeStyle;\r\n        ctx.strokeStyle = this.stroke || ctx.fillStyle;\r\n        this.stroke && this._renderStroke(ctx);\r\n        ctx.strokeStyle = origStrokeStyle;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p = this.calcLinePoints();\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return {\r\n          x: (this.x1 + this.x2) / 2,\r\n          y: (this.y1 + this.y2) / 2,\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @methd toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var dim = this.callSuper('_getNonTransformedDimensions');\r\n        if (this.strokeLineCap === 'butt') {\r\n          if (this.width === 0) {\r\n            dim.y -= this.strokeWidth;\r\n          }\r\n          if (this.height === 0) {\r\n            dim.x -= this.strokeWidth;\r\n          }\r\n        }\r\n        return dim;\r\n      },\r\n\r\n      /**\r\n       * Recalculates line points given width and height\r\n       * @private\r\n       */\r\n      calcLinePoints: function() {\r\n        var xMult = this.x1 <= this.x2 ? -1 : 1,\r\n            yMult = this.y1 <= this.y2 ? -1 : 1,\r\n            x1 = (xMult * this.width * 0.5),\r\n            y1 = (yMult * this.height * 0.5),\r\n            x2 = (xMult * this.width * -0.5),\r\n            y2 = (yMult * this.height * -0.5);\r\n\r\n        return {\r\n          x1: x1,\r\n          x2: x2,\r\n          y1: y1,\r\n          y2: y2\r\n        };\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var p = this.calcLinePoints();\r\n        return [\r\n          '<line ', 'COMMON_PARTS',\r\n          'x1=\"', p.x1,\r\n          '\" y1=\"', p.y1,\r\n          '\" x2=\"', p.x2,\r\n          '\" y2=\"', p.y2,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\r\n     */\r\n    fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] callback function invoked after parsing\r\n     */\r\n    fabric.Line.fromElement = function(element, callback, options) {\r\n      options = options || { };\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\r\n          points = [\r\n            parsedAttributes.x1 || 0,\r\n            parsedAttributes.y1 || 0,\r\n            parsedAttributes.x2 || 0,\r\n            parsedAttributes.y2 || 0\r\n          ];\r\n      callback(new fabric.Line(points, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Line.fromObject = function(object, callback) {\r\n      function _callback(instance) {\r\n        delete instance.points;\r\n        callback && callback(instance);\r\n      };\r\n      var options = clone(object, true);\r\n      options.points = [object.x1, object.y1, object.x2, object.y2];\r\n      fabric.Object._fromObject('Line', options, _callback, 'points');\r\n    };\r\n\r\n    /**\r\n     * Produces a function that calculates distance from canvas edge to Line origin.\r\n     */\r\n    function makeEdgeToOriginGetter(propertyNames, originValues) {\r\n      var origin = propertyNames.origin,\r\n          axis1 = propertyNames.axis1,\r\n          axis2 = propertyNames.axis2,\r\n          dimension = propertyNames.dimension,\r\n          nearest = originValues.nearest,\r\n          center = originValues.center,\r\n          farthest = originValues.farthest;\r\n\r\n      return function() {\r\n        switch (this.get(origin)) {\r\n          case nearest:\r\n            return Math.min(this.get(axis1), this.get(axis2));\r\n          case center:\r\n            return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\r\n          case farthest:\r\n            return Math.max(this.get(axis1), this.get(axis2));\r\n        }\r\n      };\r\n\r\n    }\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        pi = Math.PI;\r\n\r\n    if (fabric.Circle) {\r\n      fabric.warn('fabric.Circle is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Circle class\r\n     * @class fabric.Circle\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Circle#initialize} for constructor definition\r\n     */\r\n    fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'circle',\r\n\r\n      /**\r\n       * Radius of this circle\r\n       * @type Number\r\n       * @default\r\n       */\r\n      radius: 0,\r\n\r\n      /**\r\n       * Start angle of the circle, moving clockwise\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      startAngle: 0,\r\n\r\n      /**\r\n       * End angle of the circle\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 2Pi\r\n       */\r\n      endAngle: pi * 2,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n\r\n        if (key === 'radius') {\r\n          this.setRadius(value);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var svgString, x = 0, y = 0,\r\n            angle = (this.endAngle - this.startAngle) % ( 2 * pi);\r\n\r\n        if (angle === 0) {\r\n          svgString = [\r\n            '<circle ', 'COMMON_PARTS',\r\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\r\n            'r=\"', this.radius,\r\n            '\" />\\n'\r\n          ];\r\n        }\r\n        else {\r\n          var startX = fabric.util.cos(this.startAngle) * this.radius,\r\n              startY = fabric.util.sin(this.startAngle) * this.radius,\r\n              endX = fabric.util.cos(this.endAngle) * this.radius,\r\n              endY = fabric.util.sin(this.endAngle) * this.radius,\r\n              largeFlag = angle > pi ? '1' : '0';\r\n          svgString = [\r\n            '<path d=\"M ' + startX + ' ' + startY,\r\n            ' A ' + this.radius + ' ' + this.radius,\r\n            ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\r\n            '\" ', 'COMMON_PARTS', ' />\\n'\r\n          ];\r\n        }\r\n        return svgString;\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.radius,\r\n          this.startAngle,\r\n          this.endAngle, false);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusX: function() {\r\n        return this.get('radius') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusY: function() {\r\n        return this.get('radius') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Sets radius of an object (and updates width accordingly)\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      setRadius: function(value) {\r\n        this.radius = value;\r\n        return this.set('width', value * 2).set('height', value * 2);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\r\n     */\r\n    fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @param {Object} [options] Options object\r\n     * @throws {Error} If value of `r` attribute is missing or invalid\r\n     */\r\n    fabric.Circle.fromElement = function(element, callback) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\r\n\r\n      if (!isValidRadius(parsedAttributes)) {\r\n        throw new Error('value of `r` attribute is required and can not be negative');\r\n      }\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\r\n      callback(new fabric.Circle(parsedAttributes));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function isValidRadius(attributes) {\r\n      return (('radius' in attributes) && (attributes.radius >= 0));\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {Object} Instance of fabric.Circle\r\n     */\r\n    fabric.Circle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Circle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Triangle) {\r\n      fabric.warn('fabric.Triangle is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Triangle class\r\n     * @class fabric.Triangle\r\n     * @extends fabric.Object\r\n     * @return {fabric.Triangle} thisArg\r\n     * @see {@link fabric.Triangle#initialize} for constructor definition\r\n     */\r\n    fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'triangle',\r\n\r\n      /**\r\n       * Width is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width: 100,\r\n\r\n      /**\r\n       * Height is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height: 100,\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(-widthBy2, heightBy2);\r\n        ctx.lineTo(0, -heightBy2);\r\n        ctx.lineTo(widthBy2, heightBy2);\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2,\r\n            points = [\r\n              -widthBy2 + ' ' + heightBy2,\r\n              '0 ' + -heightBy2,\r\n              widthBy2 + ' ' + heightBy2\r\n            ].join(',');\r\n        return [\r\n          '<polygon ', 'COMMON_PARTS',\r\n          'points=\"', points,\r\n          '\" />'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Triangle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Triangle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Triangle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Triangle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        piBy2   = Math.PI * 2;\r\n\r\n    if (fabric.Ellipse) {\r\n      fabric.warn('fabric.Ellipse is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Ellipse class\r\n     * @class fabric.Ellipse\r\n     * @extends fabric.Object\r\n     * @return {fabric.Ellipse} thisArg\r\n     * @see {@link fabric.Ellipse#initialize} for constructor definition\r\n     */\r\n    fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'ellipse',\r\n\r\n      /**\r\n       * Horizontal radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this.set('rx', options && options.rx || 0);\r\n        this.set('ry', options && options.ry || 0);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        switch (key) {\r\n\r\n          case 'rx':\r\n            this.rx = value;\r\n            this.set('width', value * 2);\r\n            break;\r\n\r\n          case 'ry':\r\n            this.ry = value;\r\n            this.set('height', value * 2);\r\n            break;\r\n\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRx: function() {\r\n        return this.get('rx') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns Vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRy: function() {\r\n        return this.get('ry') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        return [\r\n          '<ellipse ', 'COMMON_PARTS',\r\n          'cx=\"0\" cy=\"0\" ',\r\n          'rx=\"', this.rx,\r\n          '\" ry=\"', this.ry,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.save();\r\n        ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.rx,\r\n          0,\r\n          piBy2,\r\n          false);\r\n        ctx.restore();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\r\n     */\r\n    fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromElement = function(element, callback) {\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\r\n      callback(new fabric.Ellipse(parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Ellipse', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend;\r\n\r\n    if (fabric.Rect) {\r\n      fabric.warn('fabric.Rect is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Rectangle class\r\n     * @class fabric.Rect\r\n     * @extends fabric.Object\r\n     * @return {fabric.Rect} thisArg\r\n     * @see {@link fabric.Rect#initialize} for constructor definition\r\n     */\r\n    fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\r\n\r\n      /**\r\n       * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'rect',\r\n\r\n      /**\r\n       * Horizontal border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this._initRxRy();\r\n      },\r\n\r\n      /**\r\n       * Initializes rx/ry attributes\r\n       * @private\r\n       */\r\n      _initRxRy: function() {\r\n        if (this.rx && !this.ry) {\r\n          this.ry = this.rx;\r\n        }\r\n        else if (this.ry && !this.rx) {\r\n          this.rx = this.ry;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n\r\n        // 1x1 case (used in spray brush) optimization was removed because\r\n        // with caching and higher zoom level this makes more damage than help\r\n\r\n        var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\r\n            ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\r\n            w = this.width,\r\n            h = this.height,\r\n            x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            isRounded = rx !== 0 || ry !== 0,\r\n            /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\r\n            k = 1 - 0.5522847498;\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(x + rx, y);\r\n\r\n        ctx.lineTo(x + w - rx, y);\r\n        isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\r\n\r\n        ctx.lineTo(x + w, y + h - ry);\r\n        isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\r\n\r\n        ctx.lineTo(x + rx, y + h);\r\n        isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\r\n\r\n        ctx.lineTo(x, y + ry);\r\n        isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\r\n\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var x = -this.width / 2, y = -this.height / 2;\r\n        return [\r\n          '<rect ', 'COMMON_PARTS',\r\n          'x=\"', x, '\" y=\"', y,\r\n          '\" rx=\"', this.rx, '\" ry=\"', this.ry,\r\n          '\" width=\"', this.width, '\" height=\"', this.height,\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\r\n     */\r\n    fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Rect.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n      options = options || { };\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = parsedAttributes.left || 0;\r\n      parsedAttributes.top  = parsedAttributes.top  || 0;\r\n      parsedAttributes.height  = parsedAttributes.height || 0;\r\n      parsedAttributes.width  = parsedAttributes.width || 0;\r\n      var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n      rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\r\n      callback(rect);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\r\n     */\r\n    fabric.Rect.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Rect', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Polyline) {\r\n      fabric.warn('fabric.Polyline is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polyline class\r\n     * @class fabric.Polyline\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Polyline#initialize} for constructor definition\r\n     */\r\n    fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polyline',\r\n\r\n      /**\r\n       * Points array\r\n       * @type Array\r\n       * @default\r\n       */\r\n      points: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} points Array of points (where each point is an object with x and y)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Polyline} thisArg\r\n       * @example\r\n       * var poly = new fabric.Polyline([\r\n       *     { x: 10, y: 10 },\r\n       *     { x: 50, y: 30 },\r\n       *     { x: 40, y: 70 },\r\n       *     { x: 60, y: 50 },\r\n       *     { x: 100, y: 150 },\r\n       *     { x: 40, y: 100 }\r\n       *   ], {\r\n       *   stroke: 'red',\r\n       *   left: 100,\r\n       *   top: 100\r\n       * });\r\n       */\r\n      initialize: function(points, options) {\r\n        options = options || {};\r\n        this.points = points || [];\r\n        this.callSuper('initialize', options);\r\n        this._setPositionDimensions(options);\r\n      },\r\n\r\n      _setPositionDimensions: function(options) {\r\n        var calcDim = this._calcDimensions(options), correctLeftTop;\r\n        this.width = calcDim.width;\r\n        this.height = calcDim.height;\r\n        if (!options.fromSVG) {\r\n          correctLeftTop = this.translateToGivenOrigin(\r\n            { x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2 },\r\n            'left',\r\n            'top',\r\n            this.originX,\r\n            this.originY\r\n          );\r\n        }\r\n        if (typeof options.left === 'undefined') {\r\n          this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\r\n        }\r\n        if (typeof options.top === 'undefined') {\r\n          this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\r\n        }\r\n        this.pathOffset = {\r\n          x: calcDim.left + this.width / 2,\r\n          y: calcDim.top + this.height / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Calculate the polygon min and max point from points array,\r\n       * returning an object with left, top, widht, height to measure the\r\n       * polygon size\r\n       * @return {Object} object.left X coordinate of the polygon leftmost point\r\n       * @return {Object} object.top Y coordinate of the polygon topmost point\r\n       * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\r\n       * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\r\n       * @private\r\n       */\r\n      _calcDimensions: function() {\r\n\r\n        var points = this.points,\r\n            minX = min(points, 'x') || 0,\r\n            minY = min(points, 'y') || 0,\r\n            maxX = max(points, 'x') || 0,\r\n            maxY = max(points, 'y') || 0,\r\n            width = (maxX - minX),\r\n            height = (maxY - minY);\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), {\r\n          points: this.points.concat()\r\n        });\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          points.push(\r\n            toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\r\n            toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\r\n          );\r\n        }\r\n        return [\r\n          '<' + this.type + ' ', 'COMMON_PARTS',\r\n          'points=\"', points.join(''),\r\n          '\" />\\n'\r\n        ];\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      commonRender: function(ctx) {\r\n        var point, len = this.points.length,\r\n            x = this.pathOffset.x,\r\n            y = this.pathOffset.y;\r\n\r\n        if (!len || isNaN(this.points[len - 1].y)) {\r\n          // do not draw if no points or odd points\r\n          // NaN comes from parseFloat of a empty string in parser\r\n          return false;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\r\n        for (var i = 0; i < len; i++) {\r\n          point = this.points[i];\r\n          ctx.lineTo(point.x - x, point.y - y);\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p1, p2;\r\n\r\n        ctx.beginPath();\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          p1 = this.points[i];\r\n          p2 = this.points[i + 1] || p1;\r\n          fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.get('points').length;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\r\n     */\r\n    fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {SVGElement} element Element to parser\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polyline.fromElementGenerator = function(_class) {\r\n      return function(element, callback, options) {\r\n        if (!element) {\r\n          return callback(null);\r\n        }\r\n        options || (options = { });\r\n\r\n        var points = fabric.parsePointsAttribute(element.getAttribute('points')),\r\n            parsedAttributes = fabric.parseAttributes(element, fabric[_class].ATTRIBUTE_NAMES);\r\n        parsedAttributes.fromSVG = true;\r\n        callback(new fabric[_class](points, extend(parsedAttributes, options)));\r\n      };\r\n    };\r\n\r\n    fabric.Polyline.fromElement = fabric.Polyline.fromElementGenerator('Polyline');\r\n\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polyline.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polyline', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Polygon) {\r\n      fabric.warn('fabric.Polygon is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polygon class\r\n     * @class fabric.Polygon\r\n     * @extends fabric.Polyline\r\n     * @see {@link fabric.Polygon#initialize} for constructor definition\r\n     */\r\n    fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polygon',\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        ctx.closePath();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        this.callSuper('_renderDashedStroke', ctx);\r\n        ctx.closePath();\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\r\n     */\r\n    fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns {@link fabric.Polygon} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polygon.fromElement = fabric.Polyline.fromElementGenerator('Polygon');\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polygon instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polygon.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polygon', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        extend = fabric.util.object.extend,\r\n        _toString = Object.prototype.toString,\r\n        drawArc = fabric.util.drawArc,\r\n        toFixed = fabric.util.toFixed,\r\n        commandLengths = {\r\n          m: 2,\r\n          l: 2,\r\n          h: 1,\r\n          v: 1,\r\n          c: 6,\r\n          s: 4,\r\n          q: 4,\r\n          t: 2,\r\n          a: 7\r\n        },\r\n        repeatedCommands = {\r\n          m: 'l',\r\n          M: 'L'\r\n        };\r\n\r\n    if (fabric.Path) {\r\n      fabric.warn('fabric.Path is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Path class\r\n     * @class fabric.Path\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\r\n     * @see {@link fabric.Path#initialize} for constructor definition\r\n     */\r\n    fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'path',\r\n\r\n      /**\r\n       * Array of path points\r\n       * @type Array\r\n       * @default\r\n       */\r\n      path: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\r\n\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Path} thisArg\r\n       */\r\n      initialize: function(path, options) {\r\n        options = options || { };\r\n        this.callSuper('initialize', options);\r\n\r\n        if (!path) {\r\n          path = [];\r\n        }\r\n\r\n        var fromArray = _toString.call(path) === '[object Array]';\r\n\r\n        this.path = fromArray\r\n          ? path\r\n          // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\r\n          : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\r\n\r\n        if (!this.path) {\r\n          return;\r\n        }\r\n\r\n        if (!fromArray) {\r\n          this.path = this._parsePath();\r\n        }\r\n\r\n        fabric.Polyline.prototype._setPositionDimensions.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _renderPathCommands: function(ctx) {\r\n        var current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            l = -this.pathOffset.x,\r\n            t = -this.pathOffset.y;\r\n\r\n        ctx.beginPath();\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              ctx.bezierCurveTo(\r\n                x + current[1] + l, // x1\r\n                y + current[2] + t, // y1\r\n                controlX + l, // x2\r\n                controlY + t, // y2\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              x = current[5];\r\n              y = current[6];\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              ctx.bezierCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                controlX + l,\r\n                controlY + t,\r\n                x + l,\r\n                y + t\r\n              );\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                x + current[1] + l,\r\n                y + current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n\r\n              ctx.quadraticCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x + l,\r\n                current[7] + y + t\r\n              ]);\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + l,\r\n                current[7] + t\r\n              ]);\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              ctx.closePath();\r\n              break;\r\n          }\r\n          previous = current;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _render: function(ctx) {\r\n        this._renderPathCommands(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Path (' + this.complexity() +\r\n          '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), {\r\n          path: this.path.map(function(item) { return item.slice(); }),\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\r\n        if (o.sourcePath) {\r\n          delete o.path;\r\n        }\r\n        return o;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var path = this.path.map(function(path) {\r\n          return path.join(' ');\r\n        }).join(' ');\r\n        return [\r\n          '<path ', 'COMMON_PARTS',\r\n          'd=\"', path,\r\n          '\" stroke-linecap=\"round\" ',\r\n          '/>\\n'\r\n        ];\r\n      },\r\n\r\n      _getOffsetTransform: function() {\r\n        var digits = fabric.Object.NUM_FRACTION_DIGITS;\r\n        return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' +\r\n            toFixed(-this.pathOffset.y, digits) + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        var additionalTransform = this._getOffsetTransform();\r\n        return '\\t' + this._createBaseClipPathSVGMarkup(\r\n          this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform }\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var additionalTransform = this._getOffsetTransform();\r\n        return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform  });\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns number representation of an instance complexity\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.path.length;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _parsePath: function() {\r\n        var result = [],\r\n            coords = [],\r\n            currentPath,\r\n            parsed,\r\n            re = fabric.rePathCommand,\r\n            match,\r\n            coordsStr;\r\n\r\n        for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\r\n          currentPath = this.path[i];\r\n\r\n          coordsStr = currentPath.slice(1).trim();\r\n          coords.length = 0;\r\n\r\n          while ((match = re.exec(coordsStr))) {\r\n            coords.push(match[0]);\r\n          }\r\n\r\n          coordsParsed = [currentPath.charAt(0)];\r\n\r\n          for (var j = 0, jlen = coords.length; j < jlen; j++) {\r\n            parsed = parseFloat(coords[j]);\r\n            if (!isNaN(parsed)) {\r\n              coordsParsed.push(parsed);\r\n            }\r\n          }\r\n\r\n          var command = coordsParsed[0],\r\n              commandLength = commandLengths[command.toLowerCase()],\r\n              repeatedCommand = repeatedCommands[command] || command;\r\n\r\n          if (coordsParsed.length - 1 > commandLength) {\r\n            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\r\n              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\r\n              command = repeatedCommand;\r\n            }\r\n          }\r\n          else {\r\n            result.push(coordsParsed);\r\n          }\r\n        }\r\n\r\n        return result;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _calcDimensions: function() {\r\n\r\n        var aX = [],\r\n            aY = [],\r\n            current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            bounds;\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                x + current[1], // x1\r\n                y + current[2], // y1\r\n                controlX, // x2\r\n                controlY, // y2\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                current[1],\r\n                current[2],\r\n                controlX,\r\n                controlY,\r\n                current[5],\r\n                current[6]\r\n              );\r\n              x = current[5];\r\n              y = current[6];\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                x + current[1],\r\n                y + current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                current[1],\r\n                current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                current[3],\r\n                current[4]\r\n              );\r\n              x = current[3];\r\n              y = current[4];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x,\r\n                current[7] + y\r\n              );\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6],\r\n                current[7]\r\n              );\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              break;\r\n          }\r\n          previous = current;\r\n          bounds.forEach(function (point) {\r\n            aX.push(point.x);\r\n            aY.push(point.y);\r\n          });\r\n          aX.push(x);\r\n          aY.push(y);\r\n        }\r\n\r\n        var minX = min(aX) || 0,\r\n            minY = min(aY) || 0,\r\n            maxX = max(aX) || 0,\r\n            maxY = max(aY) || 0,\r\n            deltaX = maxX - minX,\r\n            deltaY = maxY - minY;\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: deltaX,\r\n          height: deltaY\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an object\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {Object} object\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Path.fromObject = function(object, callback) {\r\n      if (typeof object.sourcePath === 'string') {\r\n        var pathUrl = object.sourcePath;\r\n        fabric.loadSVGFromURL(pathUrl, function (elements) {\r\n          var path = elements[0];\r\n          path.setOptions(object);\r\n          callback && callback(path);\r\n        });\r\n      }\r\n      else {\r\n        fabric.Object._fromObject('Path', object, callback, 'path');\r\n      }\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @see http://www.w3.org/TR/SVG/paths.html#PathElement\r\n     */\r\n    fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an SVG <path> element\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {SVGElement} element to parse\r\n     * @param {Function} callback Callback to invoke when an fabric.Path instance is created\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     */\r\n    fabric.Path.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\r\n      parsedAttributes.fromSVG = true;\r\n      callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max;\r\n\r\n    if (fabric.Group) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.Group\r\n     * @extends fabric.Object\r\n     * @mixes fabric.Collection\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.Group#initialize} for constructor definition\r\n     */\r\n    fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'group',\r\n\r\n      /**\r\n       * Width of stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      subTargetCheck: false,\r\n\r\n      /**\r\n       * Groups are container, do not render anything on theyr own, ence no cache properties\r\n       * @type Array\r\n       * @default\r\n       */\r\n      cacheProperties: [],\r\n\r\n      /**\r\n       * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\r\n       * available setting this boolean to true.\r\n       * @type Boolean\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      useSetOnGroup: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects Group objects\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options, isAlreadyGrouped) {\r\n        options = options || {};\r\n        this._objects = [];\r\n        // if objects enclosed in a group have been grouped already,\r\n        // we cannot change properties of objects.\r\n        // Thus we need to set options to group without objects,\r\n        isAlreadyGrouped && this.callSuper('initialize', options);\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (!isAlreadyGrouped) {\r\n          var center = options && options.centerPoint;\r\n          // we want to set origins before calculating the bounding box.\r\n          // so that the topleft can be set with that in mind.\r\n          // if specific top and left are passed, are overwritten later\r\n          // with the callSuper('initialize', options)\r\n          if (options.originX !== undefined) {\r\n            this.originX = options.originX;\r\n          }\r\n          if (options.originY !== undefined) {\r\n            this.originY = options.originY;\r\n          }\r\n          // if coming from svg i do not want to calc bounds.\r\n          // i assume width and height are passed along options\r\n          center || this._calcBounds();\r\n          this._updateObjectsCoords(center);\r\n          delete options.centerPoint;\r\n          this.callSuper('initialize', options);\r\n        }\r\n        else {\r\n          this._updateObjectsACoords();\r\n        }\r\n\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsACoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        for (var i = this._objects.length; i--; ){\r\n          this._objects[i].setCoords(ignoreZoom, skipAbsolute);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsCoords: function(center) {\r\n        var center = center || this.getCenterPoint();\r\n        for (var i = this._objects.length; i--; ){\r\n          this._updateObjectCoords(this._objects[i], center);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       * @param {fabric.Point} center, current center of group.\r\n       */\r\n      _updateObjectCoords: function(object, center) {\r\n        var objectLeft = object.left,\r\n            objectTop = object.top,\r\n            ignoreZoom = true, skipAbsolute = true;\r\n\r\n        object.set({\r\n          left: objectLeft - center.x,\r\n          top: objectTop - center.y\r\n        });\r\n        object.group = this;\r\n        object.setCoords(ignoreZoom, skipAbsolute);\r\n      },\r\n\r\n      /**\r\n       * Returns string represenation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Group: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Adds an object to a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      addWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n        if (object) {\r\n          this._objects.push(object);\r\n          object.group = this;\r\n          object._set('canvas', this.canvas);\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Removes an object from a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      removeWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n\r\n        this.remove(object);\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectAdded: function(object) {\r\n        this.dirty = true;\r\n        object.group = this;\r\n        object._set('canvas', this.canvas);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectRemoved: function(object) {\r\n        this.dirty = true;\r\n        delete object.group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _set: function(key, value) {\r\n        var i = this._objects.length;\r\n        if (this.useSetOnGroup) {\r\n          while (i--) {\r\n            this._objects[i].setOnGroup(key, value);\r\n          }\r\n        }\r\n        if (key === 'canvas') {\r\n          while (i--) {\r\n            this._objects[i]._set(key, value);\r\n          }\r\n        }\r\n        fabric.Object.prototype._set.call(this, key, value);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var _includeDefaultValues = this.includeDefaultValues;\r\n        var objsToObject = this._objects.map(function(obj) {\r\n          var originalDefaults = obj.includeDefaultValues;\r\n          obj.includeDefaultValues = _includeDefaultValues;\r\n          var _obj = obj.toObject(propertiesToInclude);\r\n          obj.includeDefaultValues = originalDefaults;\r\n          return _obj;\r\n        });\r\n        var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance, in dataless mode.\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var objsToObject, sourcePath = this.sourcePath;\r\n        if (sourcePath) {\r\n          objsToObject = sourcePath;\r\n        }\r\n        else {\r\n          var _includeDefaultValues = this.includeDefaultValues;\r\n          objsToObject = this._objects.map(function(obj) {\r\n            var originalDefaults = obj.includeDefaultValues;\r\n            obj.includeDefaultValues = _includeDefaultValues;\r\n            var _obj = obj.toDatalessObject(propertiesToInclude);\r\n            obj.includeDefaultValues = originalDefaults;\r\n            return _obj;\r\n          });\r\n        }\r\n        var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Renders instance on a given context\r\n       * @param {CanvasRenderingContext2D} ctx context to render instance on\r\n       */\r\n      render: function(ctx) {\r\n        this._transformDone = true;\r\n        this.callSuper('render', ctx);\r\n        this._transformDone = false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group is already cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        var ownCache = fabric.Object.prototype.shouldCache.call(this);\r\n        if (ownCache) {\r\n          for (var i = 0, len = this._objects.length; i < len; i++) {\r\n            if (this._objects[i].willDrawShadow()) {\r\n              this.ownCaching = false;\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return ownCache;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        if (this.shadow) {\r\n          return fabric.Object.prototype.willDrawShadow.call(this);\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].willDrawShadow()) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return this.ownCaching || (this.group && this.group.isOnACache());\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx) {\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i].render(ctx);\r\n        }\r\n        this._drawClipPath(ctx);\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       */\r\n      isCacheDirty: function(skipCanvas) {\r\n        if (this.callSuper('isCacheDirty', skipCanvas)) {\r\n          return true;\r\n        }\r\n        if (!this.statefullCache) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].isCacheDirty(true)) {\r\n            if (this._cacheCanvas) {\r\n              // if this group has not a cache canvas there is nothing to clean\r\n              var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Retores original state of each of group objects (original state is that which was before group was created).\r\n       * @private\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      _restoreObjectsState: function() {\r\n        this._objects.forEach(this._restoreObjectState, this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Realises the transform from this group onto the supplied object\r\n       * i.e. it tells you what would happen if the supplied object was in\r\n       * the group, and then the group was destroyed. It mutates the supplied\r\n       * object.\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Object} transformedObject\r\n       */\r\n      realizeTransform: function(object) {\r\n        var matrix = object.calcTransformMatrix(),\r\n            options = fabric.util.qrDecompose(matrix),\r\n            center = new fabric.Point(options.translateX, options.translateY);\r\n        object.flipX = false;\r\n        object.flipY = false;\r\n        object.set('scaleX', options.scaleX);\r\n        object.set('scaleY', options.scaleY);\r\n        object.skewX = options.skewX;\r\n        object.skewY = options.skewY;\r\n        object.angle = options.angle;\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Restores original state of a specified object in group\r\n       * @private\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Group} thisArg\r\n       */\r\n      _restoreObjectState: function(object) {\r\n        this.realizeTransform(object);\r\n        object.setCoords();\r\n        delete object.group;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      destroy: function() {\r\n        // when group is destroyed objects needs to get a repaint to be eventually\r\n        // displayed on canvas.\r\n        this._objects.forEach(function(object) {\r\n          object.set('dirty', true);\r\n        });\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * make a group an active selection, remove the group from canvas\r\n       * the group has to be on canvas for this to work.\r\n       * @return {fabric.ActiveSelection} thisArg\r\n       * @chainable\r\n       */\r\n      toActiveSelection: function() {\r\n        if (!this.canvas) {\r\n          return;\r\n        }\r\n        var objects = this._objects, canvas = this.canvas;\r\n        this._objects = [];\r\n        var options = this.toObject();\r\n        delete options.objects;\r\n        var activeSelection = new fabric.ActiveSelection([]);\r\n        activeSelection.set(options);\r\n        activeSelection.type = 'activeSelection';\r\n        canvas.remove(this);\r\n        objects.forEach(function(object) {\r\n          object.group = activeSelection;\r\n          object.dirty = true;\r\n          canvas.add(object);\r\n        });\r\n        activeSelection.canvas = canvas;\r\n        activeSelection._objects = objects;\r\n        canvas._activeObject = activeSelection;\r\n        activeSelection.setCoords();\r\n        return activeSelection;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      ungroupOnCanvas: function() {\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * Sets coordinates of all objects inside group\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      setObjectsCoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        this.forEachObject(function(object) {\r\n          object.setCoords(ignoreZoom, skipAbsolute);\r\n        });\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _calcBounds: function(onlyWidthHeight) {\r\n        var aX = [],\r\n            aY = [],\r\n            o, prop,\r\n            props = ['tr', 'br', 'bl', 'tl'],\r\n            i = 0, iLen = this._objects.length,\r\n            j, jLen = props.length,\r\n            ignoreZoom = true;\r\n\r\n        for ( ; i < iLen; ++i) {\r\n          o = this._objects[i];\r\n          o.setCoords(ignoreZoom);\r\n          for (j = 0; j < jLen; j++) {\r\n            prop = props[j];\r\n            aX.push(o.oCoords[prop].x);\r\n            aY.push(o.oCoords[prop].y);\r\n          }\r\n        }\r\n\r\n        this._getBounds(aX, aY, onlyWidthHeight);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getBounds: function(aX, aY, onlyWidthHeight) {\r\n        var minXY = new fabric.Point(min(aX), min(aY)),\r\n            maxXY = new fabric.Point(max(aX), max(aY)),\r\n            top = minXY.y || 0, left = minXY.x || 0,\r\n            width = (maxXY.x - minXY.x) || 0,\r\n            height = (maxXY.y - minXY.y) || 0;\r\n        this.width = width;\r\n        this.height = height;\r\n        if (!onlyWidthHeight) {\r\n          // the bounding box always finds the topleft most corner.\r\n          // whatever is the group origin, we set up here the left/top position.\r\n          this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\r\n        }\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      _toSVG: function(reviver) {\r\n        var svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\r\n\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\r\n        }\r\n        svgString.push('</g>\\n');\r\n        return svgString;\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export, specific version for group\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function() {\r\n        var opacity = typeof this.opacity !== 'undefined' && this.opacity !== 1 ?\r\n              'opacity: ' + this.opacity + ';' : '',\r\n            visibility = this.visible ? '' : ' visibility: hidden;';\r\n        return [\r\n          opacity,\r\n          this.getSvgFilter(),\r\n          visibility\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns svg clipPath representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toClipPathSVG: function(reviver) {\r\n        var svgString = [];\r\n\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\r\n        }\r\n\r\n        return this._createBaseClipPathSVGMarkup(svgString, { reviver: reviver });\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Group} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Group\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an group instance is created\r\n     */\r\n    fabric.Group.fromObject = function(object, callback) {\r\n      var objects = object.objects,\r\n          options = fabric.util.object.clone(object, true);\r\n      delete options.objects;\r\n      if (typeof objects === 'string') {\r\n        // it has to be an url or something went wrong.\r\n        fabric.loadSVGFromURL(objects, function (elements) {\r\n          var group = fabric.util.groupSVGElements(elements, object, objects);\r\n          group.set(options);\r\n          callback && callback(group);\r\n        });\r\n        return;\r\n      }\r\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n        fabric.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {\r\n          var options = fabric.util.object.clone(object, true);\r\n          options.clipPath = enlivedClipPath[0];\r\n          delete options.objects;\r\n          callback && callback(new fabric.Group(enlivenedObjects, options, true));\r\n        });\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.ActiveSelection) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.ActiveSelection\r\n     * @extends fabric.Group\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.ActiveSelection#initialize} for constructor definition\r\n     */\r\n    fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'activeSelection',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects ActiveSelection objects\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options) {\r\n        options = options || {};\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (options.originX) {\r\n          this.originX = options.originX;\r\n        }\r\n        if (options.originY) {\r\n          this.originY = options.originY;\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        fabric.Object.prototype.initialize.call(this, options);\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Change te activeSelection to a normal group,\r\n       * High level function that automatically adds it to canvas as\r\n       * active object. no events fired.\r\n       * @since 2.0.0\r\n       * @return {fabric.Group}\r\n       */\r\n      toGroup: function() {\r\n        var objects = this._objects.concat();\r\n        this._objects = [];\r\n        var options = fabric.Object.prototype.toObject.call(this);\r\n        var newGroup = new fabric.Group([]);\r\n        delete options.type;\r\n        newGroup.set(options);\r\n        objects.forEach(function(object) {\r\n          object.canvas.remove(object);\r\n          object.group = newGroup;\r\n        });\r\n        newGroup._objects = objects;\r\n        if (!this.canvas) {\r\n          return newGroup;\r\n        }\r\n        var canvas = this.canvas;\r\n        canvas.add(newGroup);\r\n        canvas._activeObject = newGroup;\r\n        newGroup.setCoords();\r\n        return newGroup;\r\n      },\r\n\r\n      /**\r\n       * If returns true, deselection is cancelled.\r\n       * @since 2.0.0\r\n       * @return {Boolean} [cancel]\r\n       */\r\n      onDeselect: function() {\r\n        this.destroy();\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       * @param {Object} [childrenOverride] properties to override the children overrides\r\n       */\r\n      _renderControls: function(ctx, styleOverride, childrenOverride) {\r\n        ctx.save();\r\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        this.callSuper('_renderControls', ctx, styleOverride);\r\n        childrenOverride = childrenOverride || { };\r\n        if (typeof childrenOverride.hasControls === 'undefined') {\r\n          childrenOverride.hasControls = false;\r\n        }\r\n        if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\r\n          childrenOverride.hasRotatingPoint = false;\r\n        }\r\n        childrenOverride.forActiveSelection = true;\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i]._renderControls(ctx, childrenOverride);\r\n        }\r\n        ctx.restore();\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.ActiveSelection} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.ActiveSelection\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\r\n     */\r\n    fabric.ActiveSelection.fromObject = function(object, callback) {\r\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\r\n        delete object.objects;\r\n        callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var extend = fabric.util.object.extend;\r\n\r\n    if (!global.fabric) {\r\n      global.fabric = { };\r\n    }\r\n\r\n    if (global.fabric.Image) {\r\n      fabric.warn('fabric.Image is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Image class\r\n     * @class fabric.Image\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\r\n     * @see {@link fabric.Image#initialize} for constructor definition\r\n     */\r\n    fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'image',\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * Width of a stroke.\r\n       * For image quality a stroke multiple of 2 gives better results.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\r\n       * This allows for relative urls as image src.\r\n       * @since 2.7.0\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      srcFromAttribute: false,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleX to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleY to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleY: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingY: 1,\r\n\r\n      /**\r\n       * minimum scale factor under which any resizeFilter is triggered to resize the image\r\n       * 0 will disable the automatic resize. 1 will trigger automatically always.\r\n       * number bigger than 1 are not implemented yet.\r\n       * @type Number\r\n       */\r\n      minimumScaleTrigger: 0.5,\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\r\n\r\n      /**\r\n       * key used to retrieve the texture representing this image\r\n       * @since 2.0.0\r\n       * @type String\r\n       * @default\r\n       */\r\n      cacheKey: '',\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * @since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropX: 0,\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * @since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropY: 0,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLImageElement | String} element Image element\r\n       * @param {Object} [options] Options object\r\n       * @param {function} [callback] callback function to call after eventual filters applied.\r\n       * @return {fabric.Image} thisArg\r\n       */\r\n      initialize: function(element, options) {\r\n        options || (options = { });\r\n        this.filters = [];\r\n        this.cacheKey = 'texture' + fabric.Object.__uid++;\r\n        this.callSuper('initialize', options);\r\n        this._initElement(element, options);\r\n      },\r\n\r\n      /**\r\n       * Returns image element which this instance if based on\r\n       * @return {HTMLImageElement} Image element\r\n       */\r\n      getElement: function() {\r\n        return this._element || {};\r\n      },\r\n\r\n      /**\r\n       * Sets image element for this instance to a specified one.\r\n       * If filters defined they are applied to new image.\r\n       * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\r\n       * @param {HTMLImageElement} element\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setElement: function(element, options) {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._element = element;\r\n        this._originalElement = element;\r\n        this._initConfig(options);\r\n        if (this.filters.length !== 0) {\r\n          this.applyFilters();\r\n        }\r\n        // resizeFilters work on the already filtered copy.\r\n        // we need to apply resizeFilters AFTER normal filters.\r\n        // applyResizeFilters is run more often than normal fiters\r\n        // and is triggered by user interactions rather than dev code\r\n        if (this.resizeFilter) {\r\n          this.applyResizeFilters();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Delete a single texture if in webgl mode\r\n       */\r\n      removeTexture: function(key) {\r\n        var backend = fabric.filterBackend;\r\n        if (backend && backend.evictCachesForKey) {\r\n          backend.evictCachesForKey(key);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Delete textures, reference to elements and eventually JSDOM cleanup\r\n       */\r\n      dispose: function() {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._cacheContext = undefined;\r\n        ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n      },\r\n\r\n      /**\r\n       * Sets crossOrigin value (on an instance and corresponding image element)\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setCrossOrigin: function(value) {\r\n        this.crossOrigin = value;\r\n        this._element.crossOrigin = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns original size of an image\r\n       * @return {Object} Object with \"width\" and \"height\" properties\r\n       */\r\n      getOriginalSize: function() {\r\n        var element = this.getElement();\r\n        return {\r\n          width: element.naturalWidth || element.width,\r\n          height: element.naturalHeight || element.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _stroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n        var w = this.width / 2, h = this.height / 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(-w, -h);\r\n        ctx.lineTo(w, -h);\r\n        ctx.lineTo(w, h);\r\n        ctx.lineTo(-w, h);\r\n        ctx.lineTo(-w, -h);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.save();\r\n        this._setStrokeStyles(ctx, this);\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var filters = [];\r\n\r\n        this.filters.forEach(function(filterObj) {\r\n          if (filterObj) {\r\n            filters.push(filterObj.toObject());\r\n          }\r\n        });\r\n        var object = extend(\r\n          this.callSuper(\r\n            'toObject',\r\n            ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\r\n          ), {\r\n            src: this.getSrc(),\r\n            filters: filters,\r\n          });\r\n        if (this.resizeFilter) {\r\n          object.resizeFilter = this.resizeFilter.toObject();\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\r\n       * @return {Boolean}\r\n       */\r\n      hasCrop: function() {\r\n        return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @return {Array} an array of strings with the specific svg representation\r\n       * of the instance\r\n       */\r\n      _toSVG: function() {\r\n        var svgString = [], imageMarkup = [], strokeSvg,\r\n            x = -this.width / 2, y = -this.height / 2, clipPath = '';\r\n        if (this.hasCrop()) {\r\n          var clipPathId = fabric.Object.__uid++;\r\n          svgString.push(\r\n            '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\r\n            '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\r\n            '</clipPath>\\n'\r\n          );\r\n          clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\r\n        }\r\n        imageMarkup.push('\\t<image ', 'COMMON_PARTS', 'xlink:href=\"', this.getSvgSrc(true),\r\n          '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\r\n          // we're essentially moving origin of transformation from top/left corner to the center of the shape\r\n          // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\r\n          // so that object's center aligns with container's left/top\r\n          '\" width=\"', this._element.width || this._element.naturalWidth,\r\n          '\" height=\"', this._element.height || this._element.height,\r\n          '\"', clipPath,\r\n          '></image>\\n');\r\n\r\n        if (this.stroke || this.strokeDashArray) {\r\n          var origFill = this.fill;\r\n          this.fill = null;\r\n          strokeSvg = [\r\n            '\\t<rect ',\r\n            'x=\"', x, '\" y=\"', y,\r\n            '\" width=\"', this.width, '\" height=\"', this.height,\r\n            '\" style=\"', this.getSvgStyles(),\r\n            '\"/>\\n'\r\n          ];\r\n          this.fill = origFill;\r\n        }\r\n        if (this.paintFirst !== 'fill') {\r\n          svgString = svgString.concat(strokeSvg, imageMarkup);\r\n        }\r\n        else {\r\n          svgString = svgString.concat(imageMarkup, strokeSvg);\r\n        }\r\n        return svgString;\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns source of an image\r\n       * @param {Boolean} filtered indicates if the src is needed for svg\r\n       * @return {String} Source of an image\r\n       */\r\n      getSrc: function(filtered) {\r\n        var element = filtered ? this._element : this._originalElement;\r\n        if (element) {\r\n          if (element.toDataURL) {\r\n            return element.toDataURL();\r\n          }\r\n\r\n          if (this.srcFromAttribute) {\r\n            return element.getAttribute('src');\r\n          }\r\n          else {\r\n            return element.src;\r\n          }\r\n        }\r\n        else {\r\n          return this.src || '';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets source of an image\r\n       * @param {String} src Source string (URL)\r\n       * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setSrc: function(src, callback, options) {\r\n        fabric.util.loadImage(src, function(img) {\r\n          this.setElement(img, options);\r\n          this._setWidthHeight();\r\n          callback && callback(this);\r\n        }, this, options && options.crossOrigin);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\r\n      },\r\n\r\n      applyResizeFilters: function() {\r\n        var filter = this.resizeFilter,\r\n            minimumScale = this.minimumScaleTrigger,\r\n            objectScale = this.getTotalObjectScaling(),\r\n            scaleX = objectScale.scaleX,\r\n            scaleY = objectScale.scaleY,\r\n            elementToFilter = this._filteredEl || this._originalElement;\r\n        if (this.group) {\r\n          this.set('dirty', true);\r\n        }\r\n        if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\r\n          this._element = elementToFilter;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          this._lastScaleX = scaleX;\r\n          this._lastScaleY = scaleY;\r\n          return;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        var canvasEl = fabric.util.createCanvasElement(),\r\n            cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\r\n            sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\r\n        canvasEl.width = sourceWidth;\r\n        canvasEl.height = sourceHeight;\r\n        this._element = canvasEl;\r\n        this._lastScaleX = filter.scaleX = scaleX;\r\n        this._lastScaleY = filter.scaleY = scaleY;\r\n        fabric.filterBackend.applyFilters(\r\n          [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\r\n        this._filterScalingX = canvasEl.width / this._originalElement.width;\r\n        this._filterScalingY = canvasEl.height / this._originalElement.height;\r\n      },\r\n\r\n      /**\r\n       * Applies filters assigned to this image (from \"filters\" array) or from filter param\r\n       * @method applyFilters\r\n       * @param {Array} filters to be applied\r\n       * @param {Boolean} forResizing specify if the filter operation is a resize operation\r\n       * @return {thisArg} return the fabric.Image object\r\n       * @chainable\r\n       */\r\n      applyFilters: function(filters) {\r\n\r\n        filters = filters || this.filters || [];\r\n        filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\r\n        this.set('dirty', true);\r\n\r\n        // needs to clear out or WEBGL will not resize correctly\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n\r\n        if (filters.length === 0) {\r\n          this._element = this._originalElement;\r\n          this._filteredEl = null;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          return this;\r\n        }\r\n\r\n        var imgElement = this._originalElement,\r\n            sourceWidth = imgElement.naturalWidth || imgElement.width,\r\n            sourceHeight = imgElement.naturalHeight || imgElement.height;\r\n\r\n        if (this._element === this._originalElement) {\r\n          // if the element is the same we need to create a new element\r\n          var canvasEl = fabric.util.createCanvasElement();\r\n          canvasEl.width = sourceWidth;\r\n          canvasEl.height = sourceHeight;\r\n          this._element = canvasEl;\r\n          this._filteredEl = canvasEl;\r\n        }\r\n        else {\r\n          // clear the existing element to get new filter data\r\n          // also dereference the eventual resized _element\r\n          this._element = this._filteredEl;\r\n          this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\r\n          // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\r\n          this._lastScaleX = 1;\r\n          this._lastScaleY = 1;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        fabric.filterBackend.applyFilters(\r\n          filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\r\n        if (this._originalElement.width !== this._element.width ||\r\n          this._originalElement.height !== this._element.height) {\r\n          this._filterScalingX = this._element.width / this._originalElement.width;\r\n          this._filterScalingY = this._element.height / this._originalElement.height;\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\r\n          this.applyResizeFilters();\r\n        }\r\n        this._stroke(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * This is the special image version where we would like to avoid caching where possible.\r\n       * Essentially images do not benefit from caching. They may require caching, and in that\r\n       * case we do it. Also caching an image usually ends in a loss of details.\r\n       * A full performance audit should be done.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        return this.needsItsOwnCache();\r\n      },\r\n\r\n      _renderFill: function(ctx) {\r\n        var elementToDraw = this._element,\r\n            w = this.width, h = this.height,\r\n            sW = Math.min(elementToDraw.naturalWidth || elementToDraw.width, w * this._filterScalingX),\r\n            sH = Math.min(elementToDraw.naturalHeight || elementToDraw.height, h * this._filterScalingY),\r\n            x = -w / 2, y = -h / 2,\r\n            sX = Math.max(0, this.cropX * this._filterScalingX),\r\n            sY = Math.max(0, this.cropY * this._filterScalingY);\r\n\r\n        elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, w, h);\r\n      },\r\n\r\n      /**\r\n       * needed to check if image needs resize\r\n       * @private\r\n       */\r\n      _needsResize: function() {\r\n        var scale = this.getTotalObjectScaling();\r\n        return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _resetWidthHeight: function() {\r\n        this.set(this.getOriginalSize());\r\n      },\r\n\r\n      /**\r\n       * The Image class's initialization method. This method is automatically\r\n       * called by the constructor.\r\n       * @private\r\n       * @param {HTMLImageElement|String} element The element representing the image\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initElement: function(element, options) {\r\n        this.setElement(fabric.util.getById(element), options);\r\n        fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initConfig: function(options) {\r\n        options || (options = { });\r\n        this.setOptions(options);\r\n        this._setWidthHeight(options);\r\n        if (this._element && this.crossOrigin) {\r\n          this._element.crossOrigin = this.crossOrigin;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Array} filters to be initialized\r\n       * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\r\n       */\r\n      _initFilters: function(filters, callback) {\r\n        if (filters && filters.length) {\r\n          fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\r\n            callback && callback(enlivenedObjects);\r\n          }, 'fabric.Image.filters');\r\n        }\r\n        else {\r\n          callback && callback();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Set the width and the height of the image object, using the element or the\r\n       * options.\r\n       * @param {Object} [options] Object with width/height properties\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n        var el = this.getElement();\r\n        this.width = options.width || el.naturalWidth || el.width || 0;\r\n        this.height = options.height || el.naturalHeight || el.height || 0;\r\n      },\r\n\r\n      /**\r\n       * Calculate offset for center and scale factor for the image in order to respect\r\n       * the preserveAspectRatio attribute\r\n       * @private\r\n       * @return {Object}\r\n       */\r\n      parsePreserveAspectRatioAttribute: function() {\r\n        var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\r\n            rWidth = this._element.width, rHeight = this._element.height,\r\n            scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\r\n            offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\r\n        if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\r\n          if (pAR.meetOrSlice === 'meet') {\r\n            scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\r\n            offset = (pWidth - rWidth * scaleX) / 2;\r\n            if (pAR.alignX === 'Min') {\r\n              offsetLeft = -offset;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              offsetLeft = offset;\r\n            }\r\n            offset = (pHeight - rHeight * scaleY) / 2;\r\n            if (pAR.alignY === 'Min') {\r\n              offsetTop = -offset;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              offsetTop = offset;\r\n            }\r\n          }\r\n          if (pAR.meetOrSlice === 'slice') {\r\n            scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\r\n            offset = rWidth - pWidth / scaleX;\r\n            if (pAR.alignX === 'Mid') {\r\n              cropX = offset / 2;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              cropX = offset;\r\n            }\r\n            offset = rHeight - pHeight / scaleY;\r\n            if (pAR.alignY === 'Mid') {\r\n              cropY = offset / 2;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              cropY = offset;\r\n            }\r\n            rWidth = pWidth / scaleX;\r\n            rHeight = pHeight / scaleY;\r\n          }\r\n        }\r\n        else {\r\n          scaleX = pWidth / rWidth;\r\n          scaleY = pHeight / rHeight;\r\n        }\r\n        return {\r\n          width: rWidth,\r\n          height: rHeight,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          offsetLeft: offsetLeft,\r\n          offsetTop: offsetTop,\r\n          cropX: cropX,\r\n          cropY: cropY\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Default CSS class name for canvas\r\n     * @static\r\n     * @type String\r\n     * @default\r\n     */\r\n    fabric.Image.CSS_CANVAS = 'canvas-img';\r\n\r\n    /**\r\n     * Alias for getSrc\r\n     * @static\r\n     */\r\n    fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from its object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} callback Callback to invoke when an image instance is created\r\n     */\r\n    fabric.Image.fromObject = function(_object, callback) {\r\n      var object = fabric.util.object.clone(_object);\r\n      fabric.util.loadImage(object.src, function(img, error) {\r\n        if (error) {\r\n          callback && callback(null, error);\r\n          return;\r\n        }\r\n        fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\r\n          object.filters = filters || [];\r\n          fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\r\n            object.resizeFilter = resizeFilters[0];\r\n            fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\r\n              object.clipPath = enlivedProps[0];\r\n              var image = new fabric.Image(img, object);\r\n              callback(image);\r\n            });\r\n          });\r\n        });\r\n      }, null, object.crossOrigin);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from an URL string\r\n     * @static\r\n     * @param {String} url URL to create an image from\r\n     * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\r\n     * @param {Object} [imgOptions] Options object\r\n     */\r\n    fabric.Image.fromURL = function(url, callback, imgOptions) {\r\n      fabric.util.loadImage(url, function(img) {\r\n        callback && callback(new fabric.Image(img, imgOptions));\r\n      }, null, imgOptions && imgOptions.crossOrigin);\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\r\n     * @static\r\n     * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\r\n     */\r\n    fabric.Image.ATTRIBUTE_NAMES =\r\n      fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Image} instance from an SVG element\r\n     * @static\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} callback Callback to execute when fabric.Image object is created\r\n     * @return {fabric.Image} Instance of fabric.Image\r\n     */\r\n    fabric.Image.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\r\n      fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\r\n        extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} angle value\r\n     */\r\n    _getAngleValueForStraighten: function() {\r\n      var angle = this.angle % 360;\r\n      if (angle > 0) {\r\n        return Math.round((angle - 1) / 90) * 90;\r\n      }\r\n      return Math.round(angle / 90) * 90;\r\n    },\r\n\r\n    /**\r\n     * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    straighten: function() {\r\n      this.rotate(this._getAngleValueForStraighten());\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Object.prototype.straighten} but with animation\r\n     * @param {Object} callbacks Object with callback functions\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraighten: function(callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: this.get('angle'),\r\n        endValue: this._getAngleValueForStraighten(),\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          _this.rotate(value);\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          _this.setCoords();\r\n          onComplete();\r\n        },\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Straightens object, then rerenders canvas\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    straightenObject: function (object) {\r\n      object.straighten();\r\n      this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraightenObject: function (object) {\r\n      object.fxStraighten({\r\n        onChange: this.requestRenderAllBound\r\n      });\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Tests if webgl supports certain precision\r\n     * @param {WebGL} Canvas WebGL context to test on\r\n     * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\r\n     * @returns {Boolean} Whether the user's browser WebGL supports given precision.\r\n     */\r\n    function testPrecision(gl, precision){\r\n      var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Indicate whether this filtering backend is supported by the user's browser.\r\n     * @param {Number} tileSize check if the tileSize is supported\r\n     * @returns {Boolean} Whether the user's browser supports WebGL.\r\n     */\r\n    fabric.isWebglSupported = function(tileSize) {\r\n      if (fabric.isLikelyNode) {\r\n        return false;\r\n      }\r\n      tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\r\n      var canvas = document.createElement('canvas');\r\n      var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n      var isSupported = false;\r\n      // eslint-disable-next-line\r\n      if (gl) {\r\n        fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n        isSupported = fabric.maxTextureSize >= tileSize;\r\n        var precisions = ['highp', 'mediump', 'lowp'];\r\n        for (var i = 0; i < 3; i++){\r\n          if (testPrecision(gl, precisions[i])){\r\n            fabric.webGlPrecision = precisions[i];\r\n            break;\r\n          };\r\n        }\r\n      }\r\n      this.isSupported = isSupported;\r\n      return isSupported;\r\n    };\r\n\r\n    fabric.WebglFilterBackend = WebglFilterBackend;\r\n\r\n    /**\r\n     * WebGL filter backend.\r\n     */\r\n    function WebglFilterBackend(options) {\r\n      if (options && options.tileSize) {\r\n        this.tileSize = options.tileSize;\r\n      }\r\n      this.setupGLContext(this.tileSize, this.tileSize);\r\n      this.captureGPUInfo();\r\n    };\r\n\r\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\r\n\r\n      tileSize: 2048,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you problably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\r\n       */\r\n      setupGLContext: function(width, height) {\r\n        this.dispose();\r\n        this.createWebGLCanvas(width, height);\r\n        // eslint-disable-next-line\r\n        this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\r\n        this.chooseFastestCopyGLTo2DMethod(width, height);\r\n      },\r\n\r\n      /**\r\n       * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\r\n       * putImageData is faster than drawImage for that specific operation.\r\n       */\r\n      chooseFastestCopyGLTo2DMethod: function(width, height) {\r\n        var canMeasurePerf = typeof window.performance !== 'undefined', canUseImageData;\r\n        try {\r\n          new ImageData(1, 1);\r\n          canUseImageData = true;\r\n        }\r\n        catch (e) {\r\n          canUseImageData = false;\r\n        }\r\n        // eslint-disable-next-line no-undef\r\n        var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\r\n        // eslint-disable-next-line no-undef\r\n        var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\r\n\r\n        if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\r\n          return;\r\n        }\r\n\r\n        var targetCanvas = fabric.util.createCanvasElement();\r\n        // eslint-disable-next-line no-undef\r\n        var imageBuffer = new ArrayBuffer(width * height * 4);\r\n        if (fabric.forceGLPutImageData) {\r\n          this.imageBuffer = imageBuffer;\r\n          this.copyGLTo2D = copyGLTo2DPutImageData;\r\n          return;\r\n        }\r\n        var testContext = {\r\n          imageBuffer: imageBuffer,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var startTime, drawImageTime, putImageDataTime;\r\n        targetCanvas.width = width;\r\n        targetCanvas.height = height;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\r\n        drawImageTime = window.performance.now() - startTime;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\r\n        putImageDataTime = window.performance.now() - startTime;\r\n\r\n        if (drawImageTime > putImageDataTime) {\r\n          this.imageBuffer = imageBuffer;\r\n          this.copyGLTo2D = copyGLTo2DPutImageData;\r\n        }\r\n        else {\r\n          this.copyGLTo2D = copyGLTo2DDrawImage;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a canvas element and associated WebGL context and attaches them as\r\n       * class properties to the GLFilterBackend class.\r\n       */\r\n      createWebGLCanvas: function(width, height) {\r\n        var canvas = fabric.util.createCanvasElement();\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        var glOptions = {\r\n              alpha: true,\r\n              premultipliedAlpha: false,\r\n              depth: false,\r\n              stencil: false,\r\n              antialias: false\r\n            },\r\n            gl = canvas.getContext('webgl', glOptions);\r\n        if (!gl) {\r\n          gl = canvas.getContext('experimental-webgl', glOptions);\r\n        }\r\n        if (!gl) {\r\n          return;\r\n        }\r\n        gl.clearColor(0, 0, 0, 0);\r\n        // this canvas can fire webglcontextlost and webglcontextrestored\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n      },\r\n\r\n      /**\r\n       * Attempts to apply the requested filters to the source provided, drawing the filtered output\r\n       * to the provided target canvas.\r\n       *\r\n       * @param {Array} filters The filters to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\r\n       * @param {Number} width The width of the source input.\r\n       * @param {Number} height The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\r\n       * omitted, caching will be skipped.\r\n       */\r\n      applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\r\n        var gl = this.gl;\r\n        var cachedTexture;\r\n        if (cacheKey) {\r\n          cachedTexture = this.getCachedTexture(cacheKey, source);\r\n        }\r\n        var pipelineState = {\r\n          originalWidth: source.width || source.originalWidth,\r\n          originalHeight: source.height || source.originalHeight,\r\n          sourceWidth: width,\r\n          sourceHeight: height,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          context: gl,\r\n          sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\r\n          targetTexture: this.createTexture(gl, width, height),\r\n          originalTexture: cachedTexture ||\r\n            this.createTexture(gl, width, height, !cachedTexture && source),\r\n          passes: filters.length,\r\n          webgl: true,\r\n          aPosition: this.aPosition,\r\n          programCache: this.programCache,\r\n          pass: 0,\r\n          filterBackend: this,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var tempFbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\r\n        filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\r\n        resizeCanvasIfNeeded(pipelineState);\r\n        this.copyGLTo2D(gl, pipelineState);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(pipelineState.sourceTexture);\r\n        gl.deleteTexture(pipelineState.targetTexture);\r\n        gl.deleteFramebuffer(tempFbo);\r\n        targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n      /**\r\n       * Detach event listeners, remove references, and clean up caches.\r\n       */\r\n      dispose: function() {\r\n        if (this.canvas) {\r\n          this.canvas = null;\r\n          this.gl = null;\r\n        }\r\n        this.clearWebGLCaches();\r\n      },\r\n\r\n      /**\r\n       * Wipe out WebGL-related caches.\r\n       */\r\n      clearWebGLCaches: function() {\r\n        this.programCache = {};\r\n        this.textureCache = {};\r\n      },\r\n\r\n      /**\r\n       * Create a WebGL texture object.\r\n       *\r\n       * Accepts specific dimensions to initialize the textuer to or a source image.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\r\n       * @param {Number} width The width to initialize the texture at.\r\n       * @param {Number} height The height to initialize the texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\r\n       * @returns {WebGLTexture}\r\n       */\r\n      createTexture: function(gl, width, height, textureImageSource) {\r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        if (textureImageSource) {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\r\n        }\r\n        else {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        }\r\n        return texture;\r\n      },\r\n\r\n      /**\r\n       * Can be optionally used to get a texture from the cache array\r\n       *\r\n       * If an existing texture is not found, a new texture is created and cached.\r\n       *\r\n       * @param {String} uniqueId A cache key to use to find an existing texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\r\n       * texture cache entry if one does not already exist.\r\n       */\r\n      getCachedTexture: function(uniqueId, textureImageSource) {\r\n        if (this.textureCache[uniqueId]) {\r\n          return this.textureCache[uniqueId];\r\n        }\r\n        else {\r\n          var texture = this.createTexture(\r\n            this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\r\n          this.textureCache[uniqueId] = texture;\r\n          return texture;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Clear out cached resources related to a source image that has been\r\n       * filtered previously.\r\n       *\r\n       * @param {String} cacheKey The cache key provided when the source image was filtered.\r\n       */\r\n      evictCachesForKey: function(cacheKey) {\r\n        if (this.textureCache[cacheKey]) {\r\n          this.gl.deleteTexture(this.textureCache[cacheKey]);\r\n          delete this.textureCache[cacheKey];\r\n        }\r\n      },\r\n\r\n      copyGLTo2D: copyGLTo2DDrawImage,\r\n\r\n      /**\r\n       * Attempt to extract GPU information strings from a WebGL context.\r\n       *\r\n       * Useful information when debugging or blacklisting specific GPUs.\r\n       *\r\n       * @returns {Object} A GPU info object with renderer and vendor strings.\r\n       */\r\n      captureGPUInfo: function() {\r\n        if (this.gpuInfo) {\r\n          return this.gpuInfo;\r\n        }\r\n        var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\r\n        if (!gl) {\r\n          return gpuInfo;\r\n        }\r\n        var ext = gl.getExtension('WEBGL_debug_renderer_info');\r\n        if (ext) {\r\n          var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\r\n          var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\r\n          if (renderer) {\r\n            gpuInfo.renderer = renderer.toLowerCase();\r\n          }\r\n          if (vendor) {\r\n            gpuInfo.vendor = vendor.toLowerCase();\r\n          }\r\n        }\r\n        this.gpuInfo = gpuInfo;\r\n        return gpuInfo;\r\n      },\r\n    };\r\n  })();\r\n\r\n  function resizeCanvasIfNeeded(pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas,\r\n        width = targetCanvas.width, height = targetCanvas.height,\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight;\r\n\r\n    if (width !== dWidth || height !== dHeight) {\r\n      targetCanvas.width = dWidth;\r\n      targetCanvas.height = dHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas.\r\n   *\r\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\r\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DDrawImage(gl, pipelineState) {\r\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\r\n        ctx = targetCanvas.getContext('2d');\r\n    ctx.translate(0, targetCanvas.height); // move it down again\r\n    ctx.scale(1, -1); // vertical flip\r\n    // where is my image on the big glcanvas?\r\n    var sourceY = glCanvas.height - targetCanvas.height;\r\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\r\n      targetCanvas.width, targetCanvas.height);\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\r\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DPutImageData(gl, pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight,\r\n        numBytes = dWidth * dHeight * 4;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\r\n    // eslint-disable-next-line no-undef\r\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\r\n\r\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\r\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\r\n    ctx.putImageData(imgData, 0, 0);\r\n  }\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var noop = function() {};\r\n\r\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\r\n\r\n    /**\r\n     * Canvas 2D filter backend.\r\n     */\r\n    function Canvas2dFilterBackend() {};\r\n\r\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\r\n      evictCachesForKey: noop,\r\n      dispose: noop,\r\n      clearWebGLCaches: noop,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you probably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Apply a set of filters against a source image and draw the filtered output\r\n       * to the provided destination canvas.\r\n       *\r\n       * @param {EnhancedFilter} filters The filter to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\r\n       * @param {Number} sourceWidth The width of the source input.\r\n       * @param {Number} sourceHeight The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       */\r\n      applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\r\n        var ctx = targetCanvas.getContext('2d');\r\n        ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\r\n        var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var pipelineState = {\r\n          sourceWidth: sourceWidth,\r\n          sourceHeight: sourceHeight,\r\n          imageData: imageData,\r\n          originalEl: sourceElement,\r\n          originalImageData: originalImageData,\r\n          canvasEl: targetCanvas,\r\n          ctx: ctx,\r\n          filterBackend: this,\r\n        };\r\n        filters.forEach(function(filter) { filter.applyTo(pipelineState); });\r\n        if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\r\n          targetCanvas.width = pipelineState.imageData.width;\r\n          targetCanvas.height = pipelineState.imageData.height;\r\n        }\r\n        ctx.putImageData(pipelineState.imageData, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Image.filters\r\n   * @memberOf fabric.Image\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   */\r\n  fabric.Image = fabric.Image || { };\r\n  fabric.Image.filters = fabric.Image.filters || { };\r\n\r\n  /**\r\n   * Root filter class from which all filter classes inherit from\r\n   * @class fabric.Image.filters.BaseFilter\r\n   * @memberOf fabric.Image.filters\r\n   */\r\n  fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'BaseFilter',\r\n\r\n    /**\r\n     * Array of attributes to send with buffers. do not modify\r\n     * @private\r\n     */\r\n\r\n    vertexSource: 'attribute vec2 aPosition;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vTexCoord = aPosition;\\n' +\r\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n      '}',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'void main() {\\n' +\r\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      if (options) {\r\n        this.setOptions(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets filter's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this[prop] = options[prop];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Compile this filter's shader program.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\r\n     * @param {String} fragmentSource fragmentShader source for compilation\r\n     * @param {String} vertexSource vertexShader source for compilation\r\n     */\r\n    createProgram: function(gl, fragmentSource, vertexSource) {\r\n      fragmentSource = fragmentSource || this.fragmentSource;\r\n      vertexSource = vertexSource || this.vertexSource;\r\n      if (fabric.webGlPrecision !== 'highp'){\r\n        fragmentSource = fragmentSource.replace(\r\n          /precision highp float/g,\r\n          'precision ' + fabric.webGlPrecision + ' float'\r\n        );\r\n      }\r\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      gl.shaderSource(vertexShader, vertexSource);\r\n      gl.compileShader(vertexShader);\r\n      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Vertex shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(vertexShader)\r\n        );\r\n      }\r\n\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Fragment shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(fragmentShader)\r\n        );\r\n      }\r\n\r\n      var program = gl.createProgram();\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Shader link error for \"${this.type}\" ' +\r\n          gl.getProgramInfoLog(program)\r\n        );\r\n      }\r\n\r\n      var attributeLocations = this.getAttributeLocations(gl, program);\r\n      var uniformLocations = this.getUniformLocations(gl, program) || { };\r\n      uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\r\n      uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\r\n      return {\r\n        program: program,\r\n        attributeLocations: attributeLocations,\r\n        uniformLocations: uniformLocations\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of attribute names to WebGLAttributeLocation objects.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\r\n     * @returns {Object} A map of attribute names to attribute locations.\r\n     */\r\n    getAttributeLocations: function(gl, program) {\r\n      return {\r\n        aPosition: gl.getAttribLocation(program, 'aPosition'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of uniform names to WebGLUniformLocation objects.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\r\n     * @returns {Object} A map of uniform names to uniform locations.\r\n     */\r\n    getUniformLocations: function (/* gl, program */) {\r\n      // in case i do not need any special uniform i need to return an empty object\r\n      return { };\r\n    },\r\n\r\n    /**\r\n     * Send attribute data from this filter to its shader program on the GPU.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} attributeLocations A map of shader attribute names to their locations.\r\n     */\r\n    sendAttributeData: function(gl, attributeLocations, aPositionData) {\r\n      var attributeLocation = attributeLocations.aPosition;\r\n      var buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(attributeLocation);\r\n      gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n      gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\r\n    },\r\n\r\n    _setupFrameBuffer: function(options) {\r\n      var gl = options.context, width, height;\r\n      if (options.passes > 1) {\r\n        width = options.destinationWidth;\r\n        height = options.destinationHeight;\r\n        if (options.sourceWidth !== width || options.sourceHeight !== height) {\r\n          gl.deleteTexture(options.targetTexture);\r\n          options.targetTexture = options.filterBackend.createTexture(gl, width, height);\r\n        }\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\r\n          options.targetTexture, 0);\r\n      }\r\n      else {\r\n        // draw last filter on canvas and not to framebuffer.\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.finish();\r\n      }\r\n    },\r\n\r\n    _swapTextures: function(options) {\r\n      options.passes--;\r\n      options.pass++;\r\n      var temp = options.targetTexture;\r\n      options.targetTexture = options.sourceTexture;\r\n      options.sourceTexture = temp;\r\n    },\r\n\r\n    /**\r\n     * Generic isNeutral implementation for one parameter based filters.\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\r\n     * @param {Object} options\r\n     **/\r\n    isNeutralState: function(/* options */) {\r\n      var main = this.mainParameter,\r\n          _class = fabric.Image.filters[this.type].prototype;\r\n      if (main) {\r\n        if (Array.isArray(_class[main])) {\r\n          for (var i = _class[main].length; i--;) {\r\n            if (this[main][i] !== _class[main][i]) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        }\r\n        else {\r\n          return _class[main] === this[main];\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply this filter to the input image data provided.\r\n     *\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyTo: function(options) {\r\n      if (options.webgl) {\r\n        this._setupFrameBuffer(options);\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n      }\r\n      else {\r\n        this.applyTo2d(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      if (!options.programCache.hasOwnProperty(this.type)) {\r\n        options.programCache[this.type] = this.createProgram(options.context);\r\n      }\r\n      return options.programCache[this.type];\r\n    },\r\n\r\n    /**\r\n     * Apply this filter using webgl.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.originalTexture The texture of the original input image.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyToWebGL: function(options) {\r\n      var gl = options.context;\r\n      var shader = this.retrieveShader(options);\r\n      if (options.pass === 0 && options.originalTexture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\r\n      }\r\n      else {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\r\n      }\r\n      gl.useProgram(shader.program);\r\n      this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\r\n\r\n      gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\r\n      gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\r\n\r\n      this.sendUniformData(gl, shader.uniformLocations);\r\n      gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    },\r\n\r\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      // reset active texture to 0 as usual\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    unbindAdditionalTexture: function(gl, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    getMainParameter: function() {\r\n      return this[this.mainParameter];\r\n    },\r\n\r\n    setMainParameter: function(value) {\r\n      this[this.mainParameter] = value;\r\n    },\r\n\r\n    /**\r\n     * Send uniform data from this filter to its shader program on the GPU.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} uniformLocations A map of shader uniform names to their locations.\r\n     */\r\n    sendUniformData: function(/* gl, uniformLocations */) {\r\n      // Intentionally left blank.  Override me in subclasses.\r\n    },\r\n\r\n    /**\r\n     * If needed by a 2d filter, this functions can create an helper canvas to be used\r\n     * remember that options.targetCanvas is available for use till end of chain.\r\n     */\r\n    createHelpLayer: function(options) {\r\n      if (!options.helpLayer) {\r\n        var helpLayer = document.createElement('canvas');\r\n        helpLayer.width = options.sourceWidth;\r\n        helpLayer.height = options.sourceHeight;\r\n        options.helpLayer = helpLayer;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      var object = { type: this.type }, mainP = this.mainParameter;\r\n      if (mainP) {\r\n        object[mainP] = this[mainP];\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON representation of an instance\r\n     * @return {Object} JSON\r\n     */\r\n    toJSON: function() {\r\n      // delegate, not alias\r\n      return this.toObject();\r\n    }\r\n  });\r\n\r\n  fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\r\n    var filter = new fabric.Image.filters[object.type](object);\r\n    callback && callback(filter);\r\n    return filter;\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Matrix filter class\r\n     * @class fabric.Image.filters.ColorMatrix\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\r\n     * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\r\n     * @example <caption>Kodachrome filter</caption>\r\n     * var filter = new fabric.Image.filters.ColorMatrix({\r\n     *  matrix: [\r\n         1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n         -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n         -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n         0, 0, 0, 1, 0\r\n        ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'ColorMatrix',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'uniform mat4 uColorMatrix;\\n' +\r\n        'uniform vec4 uConstants;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color *= uColorMatrix;\\n' +\r\n          'color += uConstants;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Colormatrix for pixels.\r\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n       * outside the -1, 1 range.\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Array} matrix array of 20 numbers.\r\n       * @default\r\n       */\r\n      matrix: [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n\r\n      mainParameter: 'matrix',\r\n\r\n      /**\r\n       * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\r\n       * to save some calculation\r\n       */\r\n      colorsOnly: true,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.matrix = this.matrix.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = data.length,\r\n            m = this.matrix,\r\n            r, g, b, a, i, colorsOnly = this.colorsOnly;\r\n\r\n        for (i = 0; i < iLen; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          if (colorsOnly) {\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\r\n          }\r\n          else {\r\n            a = data[i + 3];\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\r\n            data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\r\n          uConstants: gl.getUniformLocation(program, 'uConstants'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var m = this.matrix,\r\n            matrix = [\r\n              m[0], m[1], m[2], m[3],\r\n              m[5], m[6], m[7], m[8],\r\n              m[10], m[11], m[12], m[13],\r\n              m[15], m[16], m[17], m[18]\r\n            ],\r\n            constants = [m[4], m[9], m[14], m[19]];\r\n        gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\r\n        gl.uniform4fv(uniformLocations.uConstants, constants);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] function to invoke after filter creation\r\n     * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\r\n     */\r\n    fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Brightness filter class\r\n     * @class fabric.Image.filters.Brightness\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Brightness({\r\n     *   brightness: 0.05\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Brightness',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBrightness;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += uBrightness;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Brightness value, from -1 to 1.\r\n       * translated to -255 to 255 for 2d\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Number} brightness\r\n       * @default\r\n       */\r\n      brightness: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'brightness',\r\n\r\n      /**\r\n      * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n      *\r\n      * @param {Object} options\r\n      * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n      */\r\n      applyTo2d: function(options) {\r\n        if (this.brightness === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            brightness = Math.round(this.brightness * 255);\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = data[i] + brightness;\r\n          data[i + 1] = data[i + 1] + brightness;\r\n          data[i + 2] = data[i + 2] + brightness;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBrightness: gl.getUniformLocation(program, 'uBrightness'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBrightness, this.brightness);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\r\n     */\r\n    fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\r\n     * @class fabric.Image.filters.Convolute\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example <caption>Sharpen filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 0, -1,  0,\r\n     *            -1,  5, -1,\r\n     *             0, -1,  0 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Blur filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter with opaqueness</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   opaque: true,\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Convolute',\r\n\r\n      /*\r\n       * Opaque value (true/false)\r\n       */\r\n      opaque: false,\r\n\r\n      /*\r\n       * matrix for the filter, max 9x9\r\n       */\r\n      matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: {\r\n        Convolute_3_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_3_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_5_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_5_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_7_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_7_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_9_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_9_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Convolute.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.opaque=false] Opaque value (true/false)\r\n       * @param {Array} [options.matrix] Filter matrix\r\n       */\r\n\r\n\r\n      /**\r\n      * Retrieves the cached shader.\r\n      * @param {Object} options\r\n      * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n      * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n      */\r\n      retrieveShader: function(options) {\r\n        var size = Math.sqrt(this.matrix.length);\r\n        var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\r\n        var shaderSource = this.fragmentSource[cacheKey];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            weights = this.matrix,\r\n            side = Math.round(Math.sqrt(weights.length)),\r\n            halfSide = Math.floor(side / 2),\r\n            sw = imageData.width,\r\n            sh = imageData.height,\r\n            output = options.ctx.createImageData(sw, sh),\r\n            dst = output.data,\r\n            // go through the destination image pixels\r\n            alphaFac = this.opaque ? 1 : 0,\r\n            r, g, b, a, dstOff,\r\n            scx, scy, srcOff, wt,\r\n            x, y, cx, cy;\r\n\r\n        for (y = 0; y < sh; y++) {\r\n          for (x = 0; x < sw; x++) {\r\n            dstOff = (y * sw + x) * 4;\r\n            // calculate the weighed sum of the source image pixels that\r\n            // fall under the convolution matrix\r\n            r = 0; g = 0; b = 0; a = 0;\r\n\r\n            for (cy = 0; cy < side; cy++) {\r\n              for (cx = 0; cx < side; cx++) {\r\n                scy = y + cy - halfSide;\r\n                scx = x + cx - halfSide;\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\r\n                  continue;\r\n                }\r\n\r\n                srcOff = (scy * sw + scx) * 4;\r\n                wt = weights[cy * side + cx];\r\n\r\n                r += data[srcOff] * wt;\r\n                g += data[srcOff + 1] * wt;\r\n                b += data[srcOff + 2] * wt;\r\n                // eslint-disable-next-line max-depth\r\n                if (!alphaFac) {\r\n                  a += data[srcOff + 3] * wt;\r\n                }\r\n              }\r\n            }\r\n            dst[dstOff] = r;\r\n            dst[dstOff + 1] = g;\r\n            dst[dstOff + 2] = b;\r\n            if (!alphaFac) {\r\n              dst[dstOff + 3] = a;\r\n            }\r\n            else {\r\n              dst[dstOff + 3] = data[dstOff + 3];\r\n            }\r\n          }\r\n        }\r\n        options.imageData = output;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMatrix: gl.getUniformLocation(program, 'uMatrix'),\r\n          uOpaque: gl.getUniformLocation(program, 'uOpaque'),\r\n          uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\r\n          uSize: gl.getUniformLocation(program, 'uSize'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          opaque: this.opaque,\r\n          matrix: this.matrix\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\r\n     */\r\n    fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Grayscale image filter class\r\n     * @class fabric.Image.filters.Grayscale\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Grayscale();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Grayscale',\r\n\r\n      fragmentSource: {\r\n        average: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (color.r + color.b + color.g) / 3.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, color.a);\\n' +\r\n          '}',\r\n        lightness: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n        luminosity: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n      },\r\n\r\n\r\n      /**\r\n       * Grayscale mode, between 'average', 'lightness', 'luminosity'\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      mode: 'average',\r\n\r\n      mainParameter: 'mode',\r\n\r\n      /**\r\n       * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length, value,\r\n            mode = this.mode;\r\n        for (i = 0; i < len; i += 4) {\r\n          if (mode === 'average') {\r\n            value = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          }\r\n          else if (mode === 'lightness') {\r\n            value = (Math.min(data[i], data[i + 1], data[i + 2]) +\r\n              Math.max(data[i], data[i + 1], data[i + 2])) / 2;\r\n          }\r\n          else if (mode === 'luminosity') {\r\n            value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\r\n          }\r\n          data[i] = value;\r\n          data[i + 1] = value;\r\n          data[i + 2] = value;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var shaderSource = this.fragmentSource[this.mode];\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMode: gl.getUniformLocation(program, 'uMode'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        // default average mode.\r\n        var mode = 1;\r\n        gl.uniform1i(uniformLocations.uMode, mode);\r\n      },\r\n\r\n      /**\r\n       * Grayscale filter isNeutralState implementation\r\n       * The filter is never neutral\r\n       * on the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return false;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\r\n     */\r\n    fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Invert filter class\r\n     * @class fabric.Image.filters.Invert\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Invert();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Invert',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform int uInvert;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if (uInvert == 1) {\\n' +\r\n            'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Filter invert. if false, does nothing\r\n       * @param {Boolean} invert\r\n       * @default\r\n       */\r\n      invert: true,\r\n\r\n      mainParameter: 'invert',\r\n\r\n      /**\r\n       * Apply the Invert operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length;\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = 255 - data[i];\r\n          data[i + 1] = 255 - data[i + 1];\r\n          data[i + 2] = 255 - data[i + 2];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invert filter isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function() {\r\n        return !this.invert;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uInvert: gl.getUniformLocation(program, 'uInvert'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1i(uniformLocations.uInvert, this.invert);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\r\n     */\r\n    fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Noise filter class\r\n     * @class fabric.Image.filters.Noise\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Noise({\r\n     *   noise: 700\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Noise',\r\n\r\n      /**\r\n       * Fragment source for the noise program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'uniform float uNoise;\\n' +\r\n        'uniform float uSeed;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'float rand(vec2 co, float seed, float vScale) {\\n' +\r\n          'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'noise',\r\n\r\n      /**\r\n       * Noise value, from\r\n       * @param {Number} noise\r\n       * @default\r\n       */\r\n      noise: 0,\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.noise === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            noise = this.noise, rand;\r\n\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n\r\n          rand = (0.5 - Math.random()) * noise;\r\n\r\n          data[i] += rand;\r\n          data[i + 1] += rand;\r\n          data[i + 2] += rand;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uNoise: gl.getUniformLocation(program, 'uNoise'),\r\n          uSeed: gl.getUniformLocation(program, 'uSeed'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\r\n        gl.uniform1f(uniformLocations.uSeed, Math.random());\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          noise: this.noise\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\r\n     */\r\n    fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Pixelate filter class\r\n     * @class fabric.Image.filters.Pixelate\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Pixelate({\r\n     *   blocksize: 8\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Pixelate',\r\n\r\n      blocksize: 4,\r\n\r\n      mainParameter: 'blocksize',\r\n\r\n      /**\r\n       * Fragment source for the Pixelate program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBlocksize;\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'float blockW = uBlocksize * uStepW;\\n' +\r\n          'float blockH = uBlocksize * uStepW;\\n' +\r\n          'int posX = int(vTexCoord.x / blockW);\\n' +\r\n          'int posY = int(vTexCoord.y / blockH);\\n' +\r\n          'float fposX = float(posX);\\n' +\r\n          'float fposY = float(posY);\\n' +\r\n          'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\r\n          'vec4 color = texture2D(uTexture, squareCoords);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = imageData.height,\r\n            jLen = imageData.width,\r\n            index, i, j, r, g, b, a,\r\n            _i, _j, _iLen, _jLen;\r\n\r\n        for (i = 0; i < iLen; i += this.blocksize) {\r\n          for (j = 0; j < jLen; j += this.blocksize) {\r\n\r\n            index = (i * 4) * jLen + (j * 4);\r\n\r\n            r = data[index];\r\n            g = data[index + 1];\r\n            b = data[index + 2];\r\n            a = data[index + 3];\r\n\r\n            _iLen = Math.min(i + this.blocksize, iLen);\r\n            _jLen = Math.min(j + this.blocksize, jLen);\r\n            for (_i = i; _i < _iLen; _i++) {\r\n              for (_j = j; _j < _jLen; _j++) {\r\n                index = (_i * 4) * jLen + (_j * 4);\r\n                data[index] = r;\r\n                data[index + 1] = g;\r\n                data[index + 2] = b;\r\n                data[index + 3] = a;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Indicate when the filter is not gonna apply changes to the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return this.blocksize === 1;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\r\n          uStepW: gl.getUniformLocation(program, 'uStepW'),\r\n          uStepH: gl.getUniformLocation(program, 'uStepH'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\r\n     */\r\n    fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Remove white filter class\r\n     * @class fabric.Image.filters.RemoveColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.RemoveColor({\r\n     *   threshold: 0.2,\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'RemoveColor',\r\n\r\n      /**\r\n       * Color to remove, in any format understood by fabric.Color.\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      color: '#FFFFFF',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec4 uLow;\\n' +\r\n        'uniform vec4 uHigh;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\r\n            'gl_FragColor.a = 0.0;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * distance to actual color, as value up or down from each r,g,b\r\n       * between 0 and 1\r\n       **/\r\n      distance: 0.02,\r\n\r\n      /**\r\n       * For color to remove inside distance, use alpha channel for a smoother deletion\r\n       * NOT IMPLEMENTED YET\r\n       **/\r\n      useAlpha: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.RemoveWhite.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.color=#RRGGBB] Threshold value\r\n       * @param {Number} [options.distance=10] Distance value\r\n       */\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            distance = this.distance * 255,\r\n            r, g, b,\r\n            source = new fabric.Color(this.color).getSource(),\r\n            lowC = [\r\n              source[0] - distance,\r\n              source[1] - distance,\r\n              source[2] - distance,\r\n            ],\r\n            highC = [\r\n              source[0] + distance,\r\n              source[1] + distance,\r\n              source[2] + distance,\r\n            ];\r\n\r\n\r\n        for (i = 0; i < data.length; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          if (r > lowC[0] &&\r\n              g > lowC[1] &&\r\n              b > lowC[2] &&\r\n              r < highC[0] &&\r\n              g < highC[1] &&\r\n              b < highC[2]) {\r\n            data[i + 3] = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uLow: gl.getUniformLocation(program, 'uLow'),\r\n          uHigh: gl.getUniformLocation(program, 'uHigh'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource(),\r\n            distance = parseFloat(this.distance),\r\n            lowC = [\r\n              0 + source[0] / 255 - distance,\r\n              0 + source[1] / 255 - distance,\r\n              0 + source[2] / 255 - distance,\r\n              1\r\n            ],\r\n            highC = [\r\n              source[0] / 255 + distance,\r\n              source[1] / 255 + distance,\r\n              source[2] / 255 + distance,\r\n              1\r\n            ];\r\n        gl.uniform4fv(uniformLocations.uLow, lowC);\r\n        gl.uniform4fv(uniformLocations.uHigh, highC);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          color: this.color,\r\n          distance: this.distance\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\r\n     */\r\n    fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    var matrices = {\r\n      Brownie: [\r\n        0.59970,0.34553,-0.27082,0,0.186,\r\n        -0.03770,0.86095,0.15059,0,-0.1449,\r\n        0.24113,-0.07441,0.44972,0,-0.02965,\r\n        0,0,0,1,0\r\n      ],\r\n      Vintage: [\r\n        0.62793,0.32021,-0.03965,0,0.03784,\r\n        0.02578,0.64411,0.03259,0,0.02926,\r\n        0.04660,-0.08512,0.52416,0,0.02023,\r\n        0,0,0,1,0\r\n      ],\r\n      Kodachrome: [\r\n        1.12855,-0.39673,-0.03992,0,0.24991,\r\n        -0.16404,1.08352,-0.05498,0,0.09698,\r\n        -0.16786,-0.56034,1.60148,0,0.13972,\r\n        0,0,0,1,0\r\n      ],\r\n      Technicolor: [\r\n        1.91252,-0.85453,-0.09155,0,0.04624,\r\n        -0.30878,1.76589,-0.10601,0,-0.27589,\r\n        -0.23110,-0.75018,1.84759,0,0.12137,\r\n        0,0,0,1,0\r\n      ],\r\n      Polaroid: [\r\n        1.438,-0.062,-0.062,0,0,\r\n        -0.122,1.378,-0.122,0,0,\r\n        -0.016,-0.016,1.483,0,0,\r\n        0,0,0,1,0\r\n      ],\r\n      Sepia: [\r\n        0.393, 0.769, 0.189, 0, 0,\r\n        0.349, 0.686, 0.168, 0, 0,\r\n        0.272, 0.534, 0.131, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n      BlackWhite: [\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        0, 0, 0, 1, 0,\r\n      ]\r\n    };\r\n\r\n    for (var key in matrices) {\r\n      filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\r\n\r\n        /**\r\n         * Filter type\r\n         * @param {String} type\r\n         * @default\r\n         */\r\n        type: key,\r\n\r\n        /**\r\n         * Colormatrix for the effect\r\n         * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n         * outside the -1, 1 range.\r\n         * @param {Array} matrix array of 20 numbers.\r\n         * @default\r\n         */\r\n        matrix: matrices[key],\r\n\r\n        /**\r\n         * Lock the matrix export for this kind of static, parameter less filters.\r\n         */\r\n        mainParameter: false,\r\n        /**\r\n         * Lock the colormatrix on the color part, skipping alpha\r\n         */\r\n        colorsOnly: true,\r\n\r\n      });\r\n      fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n    }\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Blend filter class\r\n     * @class fabric.Image.filter.BlendColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\r\n      type: 'BlendColor',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      color: '#F95C63',\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend color operation.\r\n       **/\r\n      alpha: 1,\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\r\n        screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\r\n        add: 'gl_FragColor.rgb += uColor.rgb;\\n',\r\n        diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\r\n        subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\r\n        lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\r\n        overlay: 'if (uColor.r < 0.5) {\\n' +\r\n            'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.g < 0.5) {\\n' +\r\n            'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.b < 0.5) {\\n' +\r\n            'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\r\n          '}\\n',\r\n        tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\r\n          'gl_FragColor.rgb += uColor.rgb;\\n',\r\n      },\r\n\r\n      /**\r\n       * build the fragment source for the filters, joining the common part with\r\n       * the specific one.\r\n       * @param {String} mode the mode of the filter, a key of this.fragmentSource\r\n       * @return {String} the source to be compiled\r\n       * @private\r\n       */\r\n      buildSource: function(mode) {\r\n        return 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'if (color.a > 0.0) {\\n' +\r\n              this.fragmentSource[mode] +\r\n            '}\\n' +\r\n          '}';\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode, shaderSource;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          shaderSource = this.buildSource(this.mode);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, iLen = data.length,\r\n            tr, tg, tb,\r\n            r, g, b,\r\n            source, alpha1 = 1 - this.alpha;\r\n\r\n        source = new fabric.Color(this.color).getSource();\r\n        tr = source[0] * this.alpha;\r\n        tg = source[1] * this.alpha;\r\n        tb = source[2] * this.alpha;\r\n\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              break;\r\n            case 'screen':\r\n              data[i] = 255 - (255 - r) * (255 - tr) / 255;\r\n              data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\r\n              data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\r\n              break;\r\n            case 'add':\r\n              data[i] = r + tr;\r\n              data[i + 1] = g + tg;\r\n              data[i + 2] = b + tb;\r\n              break;\r\n            case 'diff':\r\n            case 'difference':\r\n              data[i] = Math.abs(r - tr);\r\n              data[i + 1] = Math.abs(g - tg);\r\n              data[i + 2] = Math.abs(b - tb);\r\n              break;\r\n            case 'subtract':\r\n              data[i] = r - tr;\r\n              data[i + 1] = g - tg;\r\n              data[i + 2] = b - tb;\r\n              break;\r\n            case 'darken':\r\n              data[i] = Math.min(r, tr);\r\n              data[i + 1] = Math.min(g, tg);\r\n              data[i + 2] = Math.min(b, tb);\r\n              break;\r\n            case 'lighten':\r\n              data[i] = Math.max(r, tr);\r\n              data[i + 1] = Math.max(g, tg);\r\n              data[i + 2] = Math.max(b, tb);\r\n              break;\r\n            case 'overlay':\r\n              data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\r\n              data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\r\n              data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\r\n              break;\r\n            case 'exclusion':\r\n              data[i] = tr + r - ((2 * tr * r) / 255);\r\n              data[i + 1] = tg + g - ((2 * tg * g) / 255);\r\n              data[i + 2] = tb + b - ((2 * tb * b) / 255);\r\n              break;\r\n            case 'tint':\r\n              data[i] = tr + r * alpha1;\r\n              data[i + 1] = tg + g * alpha1;\r\n              data[i + 2] = tb + b * alpha1;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColor: gl.getUniformLocation(program, 'uColor'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource();\r\n        source[0] = this.alpha * source[0] / 255;\r\n        source[1] = this.alpha * source[1] / 255;\r\n        source[2] = this.alpha * source[2] / 255;\r\n        source[3] = this.alpha;\r\n        gl.uniform4fv(uniformLocations.uColor, source);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          color: this.color,\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\r\n     */\r\n    fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Image Blend filter class\r\n     * @class fabric.Image.filter.BlendImage\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\r\n      type: 'BlendImage',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      image: null,\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend image operation.\r\n       * not implemented.\r\n       **/\r\n      alpha: 1,\r\n\r\n      vertexSource: 'attribute vec2 aPosition;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'varying vec2 vTexCoord2;\\n' +\r\n        'uniform mat3 uTransformMatrix;\\n' +\r\n        'void main() {\\n' +\r\n          'vTexCoord = aPosition;\\n' +\r\n          'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\r\n          'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.rgba *= color2.rgba;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        mask: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.a = color2.a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        var shaderSource = this.fragmentSource[this.mode];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      applyToWebGL: function(options) {\r\n        // load texture to blend.\r\n        var gl = options.context,\r\n            texture = this.createTexture(options.filterBackend, this.image);\r\n        this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\r\n        this.callSuper('applyToWebGL', options);\r\n        this.unbindAdditionalTexture(gl, gl.TEXTURE1);\r\n      },\r\n\r\n      createTexture: function(backend, image) {\r\n        return backend.getCachedTexture(image.cacheKey, image._element);\r\n      },\r\n\r\n      /**\r\n       * Calculate a transformMatrix to adapt the image to blend over\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      calculateMatrix: function() {\r\n        var image = this.image,\r\n            width = image._element.width,\r\n            height = image._element.height;\r\n        return [\r\n          1 / image.scaleX, 0, 0,\r\n          0, 1 / image.scaleY, 0,\r\n          -image.left / width, -image.top / height, 1\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            resources = options.filterBackend.resources,\r\n            data = imageData.data, iLen = data.length,\r\n            width = imageData.width,\r\n            height = imageData.height,\r\n            tr, tg, tb, ta,\r\n            r, g, b, a,\r\n            canvas1, context, image = this.image, blendData;\r\n\r\n        if (!resources.blendImage) {\r\n          resources.blendImage = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blendImage;\r\n        context = canvas1.getContext('2d');\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas1.width = width;\r\n          canvas1.height = height;\r\n        }\r\n        else {\r\n          context.clearRect(0, 0, width, height);\r\n        }\r\n        context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\r\n        context.drawImage(image._element, 0, 0, width, height);\r\n        blendData = context.getImageData(0, 0, width, height).data;\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          a = data[i + 3];\r\n\r\n          tr = blendData[i];\r\n          tg = blendData[i + 1];\r\n          tb = blendData[i + 2];\r\n          ta = blendData[i + 3];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              data[i + 3] = a * ta / 255;\r\n              break;\r\n            case 'mask':\r\n              data[i + 3] = ta;\r\n              break;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\r\n          uImage: gl.getUniformLocation(program, 'uImage'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var matrix = this.calculateMatrix();\r\n        gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\r\n        gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          image: this.image && this.image.toObject(),\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} callback to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\r\n     */\r\n    fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\r\n      fabric.Image.fromObject(object.image, function(image) {\r\n        var options = fabric.util.object.clone(object);\r\n        options.image = image;\r\n        callback(new fabric.Image.filters.BlendImage(options));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\r\n        sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\r\n        ceil = Math.ceil,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Resize image filter class\r\n     * @class fabric.Image.filters.Resize\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Resize();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Resize',\r\n\r\n      /**\r\n       * Resize type\r\n       * for webgl resizeType is just lanczos, for canvas2d can be:\r\n       * bilinear, hermite, sliceHack, lanczos.\r\n       * @param {String} resizeType\r\n       * @default\r\n       */\r\n      resizeType: 'hermite',\r\n\r\n      /**\r\n       * Scale factor for resizing, x axis\r\n       * @param {Number} scaleX\r\n       * @default\r\n       */\r\n      scaleX: 1,\r\n\r\n      /**\r\n       * Scale factor for resizing, y axis\r\n       * @param {Number} scaleY\r\n       * @default\r\n       */\r\n      scaleY: 1,\r\n\r\n      /**\r\n       * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\r\n       * @param {Number} lanczosLobes\r\n       * @default\r\n       */\r\n      lanczosLobes: 3,\r\n\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uDelta: gl.getUniformLocation(program, 'uDelta'),\r\n          uTaps: gl.getUniformLocation(program, 'uTaps'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\r\n        gl.uniform1fv(uniformLocations.uTaps, this.taps);\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var fragmentShader = this.generateShader(filterWindow);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      getFilterWindow: function() {\r\n        var scale = this.tempScale;\r\n        return Math.ceil(this.lanczosLobes / scale);\r\n      },\r\n\r\n      getTaps: function() {\r\n        var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\r\n            filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          taps[i - 1] = lobeFunction(i * scale);\r\n        }\r\n        return taps;\r\n      },\r\n\r\n      /**\r\n       * Generate vertex and shader sources from the necessary steps numbers\r\n       * @param {Number} filterWindow\r\n       */\r\n      generateShader: function(filterWindow) {\r\n        var offsets = new Array(filterWindow),\r\n            fragmentShader = this.fragmentSourceTOP, filterWindow;\r\n\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          offsets[i - 1] = i + '.0 * uDelta';\r\n        }\r\n\r\n        fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\r\n        fragmentShader += 'void main() {\\n';\r\n        fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\r\n        fragmentShader += '  float sum = 1.0;\\n';\r\n\r\n        offsets.forEach(function(offset, i) {\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\r\n        });\r\n        fragmentShader += '  gl_FragColor = color / sum;\\n';\r\n        fragmentShader += '}';\r\n        return fragmentShader;\r\n      },\r\n\r\n      fragmentSourceTOP: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n',\r\n\r\n      /**\r\n       * Apply the resize filter to the image\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          options.passes++;\r\n          this.width = options.sourceWidth;\r\n          this.horizontal = true;\r\n          this.dW = Math.round(this.width * this.scaleX);\r\n          this.dH = options.sourceHeight;\r\n          this.tempScale = this.dW / this.width;\r\n          this.taps = this.getTaps();\r\n          options.destinationWidth = this.dW;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceWidth = options.destinationWidth;\r\n\r\n          this.height = options.sourceHeight;\r\n          this.horizontal = false;\r\n          this.dH = Math.round(this.height * this.scaleY);\r\n          this.tempScale = this.dH / this.height;\r\n          this.taps = this.getTaps();\r\n          options.destinationHeight = this.dH;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceHeight = options.destinationHeight;\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return this.scaleX === 1 && this.scaleY === 1;\r\n      },\r\n\r\n      lanczosCreate: function(lobes) {\r\n        return function(x) {\r\n          if (x >= lobes || x <= -lobes) {\r\n            return 0.0;\r\n          }\r\n          if (x < 1.19209290E-07 && x > -1.19209290E-07) {\r\n            return 1.0;\r\n          }\r\n          x *= Math.PI;\r\n          var xx = x / lobes;\r\n          return (sin(x) / x) * sin(xx) / xx;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @memberOf fabric.Image.filters.Resize.prototype\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} scaleX\r\n       * @param {Number} scaleY\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            scaleX = this.scaleX,\r\n            scaleY = this.scaleY;\r\n\r\n        this.rcpScaleX = 1 / scaleX;\r\n        this.rcpScaleY = 1 / scaleY;\r\n\r\n        var oW = imageData.width, oH = imageData.height,\r\n            dW = round(oW * scaleX), dH = round(oH * scaleY),\r\n            newData;\r\n\r\n        if (this.resizeType === 'sliceHack') {\r\n          newData = this.sliceByTwo(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'hermite') {\r\n          newData = this.hermiteFastResize(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'bilinear') {\r\n          newData = this.bilinearFiltering(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'lanczos') {\r\n          newData = this.lanczosResize(options, oW, oH, dW, dH);\r\n        }\r\n        options.imageData = newData;\r\n      },\r\n\r\n      /**\r\n       * Filter sliceByTwo\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      sliceByTwo: function(options, oW, oH, dW, dH) {\r\n        var imageData = options.imageData,\r\n            mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\r\n            stepH = oH * mult, resources = fabric.filterBackend.resources,\r\n            tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\r\n        if (!resources.sliceByTwo) {\r\n          resources.sliceByTwo = document.createElement('canvas');\r\n        }\r\n        tmpCanvas = resources.sliceByTwo;\r\n        if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\r\n          tmpCanvas.width = oW * 1.5;\r\n          tmpCanvas.height = oH;\r\n        }\r\n        ctx = tmpCanvas.getContext('2d');\r\n        ctx.clearRect(0, 0, oW * 1.5, oH);\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        dW = floor(dW);\r\n        dH = floor(dH);\r\n\r\n        while (!doneW || !doneH) {\r\n          oW = stepW;\r\n          oH = stepH;\r\n          if (dW < floor(stepW * mult)) {\r\n            stepW = floor(stepW * mult);\r\n          }\r\n          else {\r\n            stepW = dW;\r\n            doneW = true;\r\n          }\r\n          if (dH < floor(stepH * mult)) {\r\n            stepH = floor(stepH * mult);\r\n          }\r\n          else {\r\n            stepH = dH;\r\n            doneH = true;\r\n          }\r\n          ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\r\n          sX = dX;\r\n          sY = dY;\r\n          dY += stepH;\r\n        }\r\n        return ctx.getImageData(sX, sY, dW, dH);\r\n      },\r\n\r\n      /**\r\n       * Filter lanczosResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      lanczosResize: function(options, oW, oH, dW, dH) {\r\n\r\n        function process(u) {\r\n          var v, i, weight, idx, a, red, green,\r\n              blue, alpha, fX, fY;\r\n          center.x = (u + 0.5) * ratioX;\r\n          icenter.x = floor(center.x);\r\n          for (v = 0; v < dH; v++) {\r\n            center.y = (v + 0.5) * ratioY;\r\n            icenter.y = floor(center.y);\r\n            a = 0; red = 0; green = 0; blue = 0; alpha = 0;\r\n            for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\r\n              if (i < 0 || i >= oW) {\r\n                continue;\r\n              }\r\n              fX = floor(1000 * abs(i - center.x));\r\n              if (!cacheLanc[fX]) {\r\n                cacheLanc[fX] = { };\r\n              }\r\n              for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\r\n                if (j < 0 || j >= oH) {\r\n                  continue;\r\n                }\r\n                fY = floor(1000 * abs(j - center.y));\r\n                if (!cacheLanc[fX][fY]) {\r\n                  cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\r\n                }\r\n                weight = cacheLanc[fX][fY];\r\n                if (weight > 0) {\r\n                  idx = (j * oW + i) * 4;\r\n                  a += weight;\r\n                  red += weight * srcData[idx];\r\n                  green += weight * srcData[idx + 1];\r\n                  blue += weight * srcData[idx + 2];\r\n                  alpha += weight * srcData[idx + 3];\r\n                }\r\n              }\r\n            }\r\n            idx = (v * dW + u) * 4;\r\n            destData[idx] = red / a;\r\n            destData[idx + 1] = green / a;\r\n            destData[idx + 2] = blue / a;\r\n            destData[idx + 3] = alpha / a;\r\n          }\r\n\r\n          if (++u < dW) {\r\n            return process(u);\r\n          }\r\n          else {\r\n            return destImg;\r\n          }\r\n        }\r\n\r\n        var srcData = options.imageData.data,\r\n            destImg = options.ctx.createImageData(dW, dH),\r\n            destData = destImg.data,\r\n            lanczos = this.lanczosCreate(this.lanczosLobes),\r\n            ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\r\n            rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\r\n            range2X = ceil(ratioX * this.lanczosLobes / 2),\r\n            range2Y = ceil(ratioY * this.lanczosLobes / 2),\r\n            cacheLanc = { }, center = { }, icenter = { };\r\n\r\n        return process(0);\r\n      },\r\n\r\n      /**\r\n       * bilinearFiltering\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      bilinearFiltering: function(options, oW, oH, dW, dH) {\r\n        var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\r\n            color, offset = 0, origPix, ratioX = this.rcpScaleX,\r\n            ratioY = this.rcpScaleY,\r\n            w4 = 4 * (oW - 1), img = options.imageData,\r\n            pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\r\n            destPixels = destImage.data;\r\n        for (i = 0; i < dH; i++) {\r\n          for (j = 0; j < dW; j++) {\r\n            x = floor(ratioX * j);\r\n            y = floor(ratioY * i);\r\n            xDiff = ratioX * j - x;\r\n            yDiff = ratioY * i - y;\r\n            origPix = 4 * (y * oW + x);\r\n\r\n            for (chnl = 0; chnl < 4; chnl++) {\r\n              a = pixels[origPix + chnl];\r\n              b = pixels[origPix + 4 + chnl];\r\n              c = pixels[origPix + w4 + chnl];\r\n              d = pixels[origPix + w4 + 4 + chnl];\r\n              color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\r\n                      c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\r\n              destPixels[offset++] = color;\r\n            }\r\n          }\r\n        }\r\n        return destImage;\r\n      },\r\n\r\n      /**\r\n       * hermiteFastResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      hermiteFastResize: function(options, oW, oH, dW, dH) {\r\n        var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\r\n            ratioWHalf = ceil(ratioW / 2),\r\n            ratioHHalf = ceil(ratioH / 2),\r\n            img = options.imageData, data = img.data,\r\n            img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\r\n        for (var j = 0; j < dH; j++) {\r\n          for (var i = 0; i < dW; i++) {\r\n            var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\r\n                gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\r\n            for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\r\n              var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\r\n                  centerX = (i + 0.5) * ratioW, w0 = dy * dy;\r\n              for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\r\n                var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\r\n                    w = sqrt(w0 + dx * dx);\r\n                /* eslint-disable max-depth */\r\n                if (w > 1 && w < -1) {\r\n                  continue;\r\n                }\r\n                //hermite filter\r\n                weight = 2 * w * w * w - 3 * w * w + 1;\r\n                if (weight > 0) {\r\n                  dx = 4 * (xx + yy * oW);\r\n                  //alpha\r\n                  gxA += weight * data[dx + 3];\r\n                  weightsAlpha += weight;\r\n                  //colors\r\n                  if (data[dx + 3] < 255) {\r\n                    weight = weight * data[dx + 3] / 250;\r\n                  }\r\n                  gxR += weight * data[dx];\r\n                  gxG += weight * data[dx + 1];\r\n                  gxB += weight * data[dx + 2];\r\n                  weights += weight;\r\n                }\r\n                /* eslint-enable max-depth */\r\n              }\r\n            }\r\n            data2[x2] = gxR / weights;\r\n            data2[x2 + 1] = gxG / weights;\r\n            data2[x2 + 2] = gxB / weights;\r\n            data2[x2 + 3] = gxA / weightsAlpha;\r\n          }\r\n        }\r\n        return img2;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          scaleX: this.scaleX,\r\n          scaleY: this.scaleY,\r\n          resizeType: this.resizeType,\r\n          lanczosLobes: this.lanczosLobes\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\r\n     */\r\n    fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Contrast filter class\r\n     * @class fabric.Image.filters.Contrast\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Contrast({\r\n     *   contrast: 40\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Contrast',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uContrast;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\r\n          'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      contrast: 0,\r\n\r\n      mainParameter: 'contrast',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Contrast.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\r\n       */\r\n\r\n      /**\r\n        * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\r\n        *\r\n        * @param {Object} options\r\n        * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n        */\r\n      applyTo2d: function(options) {\r\n        if (this.contrast === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData, i, len,\r\n            data = imageData.data, len = data.length,\r\n            contrast = Math.floor(this.contrast * 255),\r\n            contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = contrastF * (data[i] - 128) + 128;\r\n          data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\r\n          data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uContrast: gl.getUniformLocation(program, 'uContrast'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uContrast, this.contrast);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\r\n     */\r\n    fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Saturate filter class\r\n     * @class fabric.Image.filters.Saturation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Saturation({\r\n     *   saturation: 100\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Saturation',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uSaturation;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float rgMax = max(color.r, color.g);\\n' +\r\n          'float rgbMax = max(rgMax, color.b);\\n' +\r\n          'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\r\n          'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\r\n          'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      saturation: 0,\r\n\r\n      mainParameter: 'saturation',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Saturate.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\r\n       */\r\n\r\n      /**\r\n       * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.saturation === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, len = data.length,\r\n            adjust = -this.saturation, i, max;\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          max = Math.max(data[i], data[i + 1], data[i + 2]);\r\n          data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\r\n          data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\r\n          data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uSaturation: gl.getUniformLocation(program, 'uSaturation'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\r\n     */\r\n    fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Blur filter class\r\n     * @class fabric.Image.filters.Blur\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Blur({\r\n     *   blur: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\r\n\r\n      type: 'Blur',\r\n\r\n      /*\r\n  'gl_FragColor = vec4(0.0);',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\r\n  */\r\n\r\n      /* eslint-disable max-len */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'const float nSamples = 15.0;\\n' +\r\n        'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\r\n        'float random(vec3 scale) {\\n' +\r\n          /* use the fragment position for a different seed per-pixel */\r\n          'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0.0);\\n' +\r\n          'float total = 0.0;\\n' +\r\n          'float offset = random(v3offset);\\n' +\r\n          'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\r\n            'float percent = (t + offset - 0.5) / nSamples;\\n' +\r\n            'float weight = 1.0 - abs(percent);\\n' +\r\n            'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\r\n            'total += weight;\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color / total;\\n' +\r\n        '}',\r\n      /* eslint-enable max-len */\r\n\r\n      /**\r\n       * blur value, in percentage of image dimensions.\r\n       * specific to keep the image blur constant at different resolutions\r\n       * range bewteen 0 and 1.\r\n       */\r\n      blur: 0,\r\n\r\n      mainParameter: 'blur',\r\n\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          // this aspectRatio is used to give the same blur to vertical and horizontal\r\n          this.aspectRatio = options.sourceWidth / options.sourceHeight;\r\n          options.passes++;\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = true;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = false;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      applyTo2d: function(options) {\r\n        // paint canvasEl with current image data.\r\n        //options.ctx.putImageData(options.imageData, 0, 0);\r\n        options.imageData = this.simpleBlur(options);\r\n      },\r\n\r\n      simpleBlur: function(options) {\r\n        var resources = options.filterBackend.resources, canvas1, canvas2,\r\n            width = options.imageData.width,\r\n            height = options.imageData.height;\r\n\r\n        if (!resources.blurLayer1) {\r\n          resources.blurLayer1 = fabric.util.createCanvasElement();\r\n          resources.blurLayer2 = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blurLayer1;\r\n        canvas2 = resources.blurLayer2;\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas2.width = canvas1.width = width;\r\n          canvas2.height = canvas1.height = height;\r\n        }\r\n        var ctx1 = canvas1.getContext('2d'),\r\n            ctx2 = canvas2.getContext('2d'),\r\n            nSamples = 15,\r\n            random, percent, j, i,\r\n            blur = this.blur * 0.06 * 0.5;\r\n\r\n        // load first canvas\r\n        ctx1.putImageData(options.imageData, 0, 0);\r\n        ctx2.clearRect(0, 0, width, height);\r\n\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * width + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, j, random);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * height + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, random, j);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        options.ctx.drawImage(canvas1, 0, 0);\r\n        var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\r\n        ctx1.globalAlpha = 1;\r\n        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n        return newImageData;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          delta: gl.getUniformLocation(program, 'uDelta'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var delta = this.chooseRightDelta();\r\n        gl.uniform2fv(uniformLocations.delta, delta);\r\n      },\r\n\r\n      /**\r\n       * choose right value of image percentage to blur with\r\n       * @returns {Array} a numeric array with delta values\r\n       */\r\n      chooseRightDelta: function() {\r\n        var blurScale = 1, delta = [0, 0], blur;\r\n        if (this.horizontal) {\r\n          if (this.aspectRatio > 1) {\r\n            // image is wide, i want to shrink radius horizontal\r\n            blurScale = 1 / this.aspectRatio;\r\n          }\r\n        }\r\n        else {\r\n          if (this.aspectRatio < 1) {\r\n            // image is tall, i want to shrink radius vertical\r\n            blurScale = this.aspectRatio;\r\n          }\r\n        }\r\n        blur = blurScale * this.blur * 0.12;\r\n        if (this.horizontal) {\r\n          delta[0] = blur;\r\n        }\r\n        else {\r\n          delta[1] = blur;\r\n        }\r\n        return delta;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a BlurFilter into a concrete instance.\r\n     */\r\n    filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Gamma filter class\r\n     * @class fabric.Image.filters.Gamma\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Gamma({\r\n     *   brightness: 200\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Gamma',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec3 uGamma;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'vec3 correction = (1.0 / uGamma);\\n' +\r\n          'color.r = pow(color.r, correction.r);\\n' +\r\n          'color.g = pow(color.g, correction.g);\\n' +\r\n          'color.b = pow(color.b, correction.b);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.rgb *= color.a;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Gamma array value, from 0.01 to 2.2.\r\n       * @param {Array} gamma\r\n       * @default\r\n       */\r\n      gamma: [1, 1, 1],\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'gamma',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.gamma = [1, 1, 1];\r\n        filters.BaseFilter.prototype.initialize.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData, data = imageData.data,\r\n            gamma = this.gamma, len = data.length,\r\n            rInv = 1 / gamma[0], gInv = 1 / gamma[1],\r\n            bInv = 1 / gamma[2], i;\r\n\r\n        if (!this.rVals) {\r\n          // eslint-disable-next-line\r\n          this.rVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.gVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.bVals = new Uint8Array(256);\r\n        }\r\n\r\n        // This is an optimization - pre-compute a look-up table for each color channel\r\n        // instead of performing these pow calls for each pixel in the image.\r\n        for (i = 0, len = 256; i < len; i++) {\r\n          this.rVals[i] = Math.pow(i / 255, rInv) * 255;\r\n          this.gVals[i] = Math.pow(i / 255, gInv) * 255;\r\n          this.bVals[i] = Math.pow(i / 255, bInv) * 255;\r\n        }\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n          data[i] = this.rVals[data[i]];\r\n          data[i + 1] = this.gVals[data[i + 1]];\r\n          data[i + 2] = this.bVals[data[i + 2]];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uGamma: gl.getUniformLocation(program, 'uGamma'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform3fv(uniformLocations.uGamma, this.gamma);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\r\n     */\r\n    fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * A container class that knows how to apply a sequence of filters to an input image.\r\n     */\r\n    filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\r\n\r\n      type: 'Composed',\r\n\r\n      /**\r\n       * A non sparse array of filters to apply\r\n       */\r\n      subFilters: [],\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.subFilters = this.subFilters.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply this container's filters to the input image provided.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be applied.\r\n       */\r\n      applyTo: function(options) {\r\n        options.passes += this.subFilters.length - 1;\r\n        this.subFilters.forEach(function(filter) {\r\n          filter.applyTo(options);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Serialize this filter into JSON.\r\n       *\r\n       * @returns {Object} A JSON representation of this filter.\r\n       */\r\n      toObject: function() {\r\n        return fabric.util.object.extend(this.callSuper('toObject'), {\r\n          subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\r\n        });\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\r\n     */\r\n    fabric.Image.filters.Composed.fromObject = function(object, callback) {\r\n      var filters = object.subFilters || [],\r\n          subFilters = filters.map(function(filter) {\r\n            return new fabric.Image.filters[filter.type](filter);\r\n          }),\r\n          instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\r\n      callback && callback(instance);\r\n      return instance;\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * HueRotation filter class\r\n     * @class fabric.Image.filters.HueRotation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.HueRotation({\r\n     *   rotation: -0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'HueRotation',\r\n\r\n      /**\r\n       * HueRotation value, from -1 to 1.\r\n       * the unit is radians\r\n       * @param {Number} myParameter\r\n       * @default\r\n       */\r\n      rotation: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'rotation',\r\n\r\n      calculateMatrix: function() {\r\n        var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\r\n            aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\r\n        this.matrix = [\r\n          1, 0, 0, 0, 0,\r\n          0, 1, 0, 0, 0,\r\n          0, 0, 1, 0, 0,\r\n          0, 0, 0, 1, 0\r\n        ];\r\n        this.matrix[0] = cos + OneMinusCos / 3;\r\n        this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[6] = cos + aThird * OneMinusCos;\r\n        this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[12] = cos + aThird * OneMinusCos;\r\n      },\r\n\r\n      /**\r\n       * HueRotation isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function(options) {\r\n        this.calculateMatrix();\r\n        return filters.BaseFilter.prototype.isNeutralState.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply this filter to the input image data provided.\r\n       *\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        this.calculateMatrix();\r\n        filters.BaseFilter.prototype.applyTo.call(this, options);\r\n      },\r\n\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\r\n     */\r\n    fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var fabric = global.fabric || (global.fabric = { }),\r\n        clone = fabric.util.object.clone;\r\n\r\n    if (fabric.Text) {\r\n      fabric.warn('fabric.Text is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Text class\r\n     * @class fabric.Text\r\n     * @extends fabric.Object\r\n     * @return {fabric.Text} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\r\n     * @see {@link fabric.Text#initialize} for constructor definition\r\n     */\r\n    fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Array\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: [\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontFamily',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'text',\r\n        'charSpacing',\r\n        'textAlign',\r\n        'styles',\r\n      ],\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reNewline: /\\r?\\n/,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespaces that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpacesAndTabs: /[ \\t\\r]/g,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespace that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpaceAndTab: /[ \\t\\r]/,\r\n\r\n      /**\r\n       * Use this regular expression to filter consecutive groups of non spaces.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reWords: /\\S+/g,\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                 'text',\r\n\r\n      /**\r\n       * Font size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      fontSize:             40,\r\n\r\n      /**\r\n       * Font weight (e.g. bold, normal, 400, 600, 800)\r\n       * @type {(Number|String)}\r\n       * @default\r\n       */\r\n      fontWeight:           'normal',\r\n\r\n      /**\r\n       * Font family\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontFamily:           'Times New Roman',\r\n\r\n      /**\r\n       * Text decoration underline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      underline:       false,\r\n\r\n      /**\r\n       * Text decoration overline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overline:       false,\r\n\r\n      /**\r\n       * Text decoration linethrough.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      linethrough:       false,\r\n\r\n      /**\r\n       * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\r\n       * \"justify-left\", \"justify-center\" or \"justify-right\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      textAlign:            'left',\r\n\r\n      /**\r\n       * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontStyle:            'normal',\r\n\r\n      /**\r\n       * Line height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      lineHeight:           1.16,\r\n\r\n      /**\r\n       * Superscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      superscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline: -0.35  // baseline-shift factor (upwards)\r\n      },\r\n\r\n      /**\r\n       * Subscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      subscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline:  0.11  // baseline-shift factor (downwards)\r\n      },\r\n\r\n      /**\r\n       * Background color of text lines\r\n       * @type String\r\n       * @default\r\n       */\r\n      textBackgroundColor:  '',\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * @type Array\r\n       */\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:               null,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:               null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fontSizeFraction: 0.222,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      offsets: {\r\n        underline: 0.10,\r\n        linethrough: -0.315,\r\n        overline: -0.88\r\n      },\r\n\r\n      /**\r\n       * Text Line proportion to font Size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      _fontSizeMult:             1.13,\r\n\r\n      /**\r\n       * additional space between characters\r\n       * expressed in thousands of em unit\r\n       * @type Number\r\n       * @default\r\n       */\r\n      charSpacing:             0,\r\n\r\n      /**\r\n       * Object containing character styles - top-level properties -> line numbers,\r\n       * 2nd-level properties - charater numbers\r\n       * @type Object\r\n       * @default\r\n       */\r\n      styles: null,\r\n\r\n      /**\r\n       * Reference to a context to measure text char or couple of chars\r\n       * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\r\n       * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\r\n       * text object created.\r\n       * @type {CanvasRenderingContext2D}\r\n       * @default\r\n       */\r\n      _measuringContext: null,\r\n\r\n      /**\r\n       * Baseline shift, stlyes only, keep at 0 for the main text object\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      deltaY: 0,\r\n\r\n      /**\r\n       * Array of properties that define a style unit (of 'styles').\r\n       * @type {Array}\r\n       * @default\r\n       */\r\n      _styleProperties: [\r\n        'stroke',\r\n        'strokeWidth',\r\n        'fill',\r\n        'fontFamily',\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontStyle',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'deltaY',\r\n        'textBackgroundColor',\r\n      ],\r\n\r\n      /**\r\n       * contains characters bounding boxes\r\n       */\r\n      __charBounds: [],\r\n\r\n      /**\r\n       * use this size when measuring text. To avoid IE11 rounding errors\r\n       * @type {Number}\r\n       * @default\r\n       * @readonly\r\n       * @private\r\n       */\r\n      CACHE_FONT_SIZE: 400,\r\n\r\n      /**\r\n       * contains the min text width to avoid getting 0\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      MIN_TEXT_WIDTH: 2,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.styles = options ? (options.styles || { }) : { };\r\n        this.text = text;\r\n        this.__skipDimension = true;\r\n        this.callSuper('initialize', options);\r\n        this.__skipDimension = false;\r\n        this.initDimensions();\r\n        this.setCoords();\r\n        this.setupState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Return a contex for measurement of text string.\r\n       * if created it gets stored for reuse\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      getMeasuringContext: function() {\r\n        // if we did not return we have to measure something.\r\n        if (!fabric._measuringContext) {\r\n          fabric._measuringContext = this.canvas && this.canvas.contextCache ||\r\n            fabric.util.createCanvasElement().getContext('2d');\r\n        }\r\n        return fabric._measuringContext;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Divides text into lines of text and lines of graphemes.\r\n       */\r\n      _splitText: function() {\r\n        var newLines = this._splitTextIntoLines(this.text);\r\n        this.textLines = newLines.lines;\r\n        this._textLines = newLines.graphemeLines;\r\n        this._unwrappedTextLines = newLines._unwrappedLines;\r\n        this._text = newLines.graphemeText;\r\n        return newLines;\r\n      },\r\n\r\n      /**\r\n       * Initialize or update text dimensions.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this._splitText();\r\n        this._clearCache();\r\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Enlarge space boxes and shift the others\r\n       */\r\n      enlargeSpaces: function() {\r\n        var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\r\n            continue;\r\n          }\r\n          accumulatedSpace = 0;\r\n          line = this._textLines[i];\r\n          currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\r\n            numberOfSpaces = spaces.length;\r\n            diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\r\n            for (var j = 0, jlen = line.length; j <= jlen; j++) {\r\n              charBound = this.__charBounds[i][j];\r\n              if (this._reSpaceAndTab.test(line[j])) {\r\n                charBound.width += diffSpace;\r\n                charBound.kernedWidth += diffSpace;\r\n                charBound.left += accumulatedSpace;\r\n                accumulatedSpace += diffSpace;\r\n              }\r\n              else {\r\n                charBound.left += accumulatedSpace;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        return lineIndex === this._textLines.length - 1;\r\n      },\r\n\r\n      /**\r\n       * Detect if a line has a linebreak and so we need to account for it when moving\r\n       * and counting style.\r\n       * It return always for text and Itext.\r\n       * @return Number\r\n       */\r\n      missingNewlineOffset: function() {\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of text object\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Text (' + this.complexity() +\r\n          '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @param {Object} dim.x width of object to be cached\r\n       * @param {Object} dim.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var dims = this.callSuper('_getCacheCanvasDimensions');\r\n        var fontSize = this.fontSize;\r\n        dims.width += fontSize * dims.zoomX;\r\n        dims.height += fontSize * dims.zoomY;\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this._setTextStyles(ctx);\r\n        this._renderTextLinesBackground(ctx);\r\n        this._renderTextDecoration(ctx, 'underline');\r\n        this._renderText(ctx);\r\n        this._renderTextDecoration(ctx, 'overline');\r\n        this._renderTextDecoration(ctx, 'linethrough');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderText: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderTextStroke(ctx);\r\n          this._renderTextFill(ctx);\r\n        }\r\n        else {\r\n          this._renderTextFill(ctx);\r\n          this._renderTextStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the font parameter of the context with the object properties or with charStyle\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [charStyle] object with font style properties\r\n       * @param {String} [charStyle.fontFamily] Font Family\r\n       * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\r\n       * @param {String} [charStyle.fontWeight] Font weight\r\n       * @param {String} [charStyle.fontStyle] Font style (italic|normal)\r\n       */\r\n      _setTextStyles: function(ctx, charStyle, forMeasuring) {\r\n        ctx.textBaseline = 'alphabetic';\r\n        ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\r\n      },\r\n\r\n      /**\r\n       * calculate and return the text Width measuring each line.\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @return {Number} Maximum width of fabric.Text object\r\n       */\r\n      calcTextWidth: function() {\r\n        var maxWidth = this.getLineWidth(0);\r\n\r\n        for (var i = 1, len = this._textLines.length; i < len; i++) {\r\n          var currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth > maxWidth) {\r\n            maxWidth = currentLineWidth;\r\n          }\r\n        }\r\n        return maxWidth;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Text to render\r\n       * @param {Number} left Left position of text\r\n       * @param {Number} top Top position of text\r\n       * @param {Number} lineIndex Index of a line in a text\r\n       */\r\n      _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\r\n        this._renderChars(method, ctx, line, left, top, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Renders the text background for lines, taking care of style\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextLinesBackground: function(ctx) {\r\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\r\n          return;\r\n        }\r\n        var lineTopOffset = 0, heightOfLine,\r\n            lineLeftOffset, originalFill = ctx.fillStyle,\r\n            line, lastColor,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(),\r\n            boxStart = 0, boxWidth = 0, charBox, currentColor;\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\r\n            lineTopOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxWidth = 0;\r\n          boxStart = 0;\r\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n            if (currentColor !== lastColor) {\r\n              ctx.fillStyle = lastColor;\r\n              lastColor && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                topOffset + lineTopOffset,\r\n                boxWidth,\r\n                heightOfLine / this.lineHeight\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastColor = currentColor;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          if (currentColor) {\r\n            ctx.fillStyle = currentColor;\r\n            ctx.fillRect(\r\n              leftOffset + lineLeftOffset + boxStart,\r\n              topOffset + lineTopOffset,\r\n              boxWidth,\r\n              heightOfLine / this.lineHeight\r\n            );\r\n          }\r\n          lineTopOffset += heightOfLine;\r\n        }\r\n        ctx.fillStyle = originalFill;\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} decl style declaration for cache\r\n       * @param {String} decl.fontFamily fontFamily\r\n       * @param {String} decl.fontStyle fontStyle\r\n       * @param {String} decl.fontWeight fontWeight\r\n       * @return {Object} reference to cache\r\n       */\r\n      getFontCache: function(decl) {\r\n        var fontFamily = decl.fontFamily.toLowerCase();\r\n        if (!fabric.charWidthsCache[fontFamily]) {\r\n          fabric.charWidthsCache[fontFamily] = { };\r\n        }\r\n        var cache = fabric.charWidthsCache[fontFamily],\r\n            cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\r\n        if (!cache[cacheProp]) {\r\n          cache[cacheProp] = { };\r\n        }\r\n        return cache[cacheProp];\r\n      },\r\n\r\n      /**\r\n       * apply all the character style to canvas for rendering\r\n       * @private\r\n       * @param {String} _char\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} [decl]\r\n       */\r\n      _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\r\n\r\n        this._setFillStyles(ctx, styleDeclaration);\r\n        this._setStrokeStyles(ctx, styleDeclaration);\r\n\r\n        ctx.font = this._getFontDeclaration(styleDeclaration);\r\n      },\r\n\r\n      /**\r\n       * measure and return the width of a single character.\r\n       * possibly overridden to accommodate different measure logic or\r\n       * to hook some external lib for character measurement\r\n       * @private\r\n       * @param {String} _char, char to be measured\r\n       * @param {Object} charStyle style of char to be measured\r\n       * @param {String} [previousChar] previous char\r\n       * @param {Object} [prevCharStyle] style of previous char\r\n       */\r\n      _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\r\n        // first i try to return from cache\r\n        var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\r\n            previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\r\n            stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\r\n            fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\r\n\r\n        if (previousChar && fontCache[previousChar] !== undefined) {\r\n          previousWidth = fontCache[previousChar];\r\n        }\r\n        if (fontCache[_char] !== undefined) {\r\n          kernedWidth = width = fontCache[_char];\r\n        }\r\n        if (stylesAreEqual && fontCache[couple] !== undefined) {\r\n          coupleWidth = fontCache[couple];\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\r\n          var ctx = this.getMeasuringContext();\r\n          // send a TRUE to specify measuring font size CACHE_FONT_SIZE\r\n          this._setTextStyles(ctx, charStyle, true);\r\n        }\r\n        if (width === undefined) {\r\n          kernedWidth = width = ctx.measureText(_char).width;\r\n          fontCache[_char] = width;\r\n        }\r\n        if (previousWidth === undefined && stylesAreEqual && previousChar) {\r\n          previousWidth = ctx.measureText(previousChar).width;\r\n          fontCache[previousChar] = previousWidth;\r\n        }\r\n        if (stylesAreEqual && coupleWidth === undefined) {\r\n          // we can measure the kerning couple and subtract the width of the previous character\r\n          coupleWidth = ctx.measureText(couple).width;\r\n          fontCache[couple] = coupleWidth;\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\r\n      },\r\n\r\n      /**\r\n       * Computes height of character at given position\r\n       * @param {Number} line the line index number\r\n       * @param {Number} _char the character index number\r\n       * @return {Number} fontSize of the character\r\n       */\r\n      getHeightOfChar: function(line, _char) {\r\n        return this.getValueOfPropertyAt(line, _char, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * measure a text line measuring all characters.\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      measureLine: function(lineIndex) {\r\n        var lineInfo = this._measureLine(lineIndex);\r\n        if (this.charSpacing !== 0) {\r\n          lineInfo.width -= this._getWidthOfCharSpacing();\r\n        }\r\n        if (lineInfo.width < 0) {\r\n          lineInfo.width = 0;\r\n        }\r\n        return lineInfo;\r\n      },\r\n\r\n      /**\r\n       * measure every grapheme of a line, populating __charBounds\r\n       * @param {Number} lineIndex\r\n       * @return {Object} object.width total width of characters\r\n       * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\r\n       */\r\n      _measureLine: function(lineIndex) {\r\n        var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\r\n            graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\r\n\r\n        this.__charBounds[lineIndex] = lineBounds;\r\n        for (i = 0; i < line.length; i++) {\r\n          grapheme = line[i];\r\n          graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\r\n          lineBounds[i] = graphemeInfo;\r\n          width += graphemeInfo.kernedWidth;\r\n          prevGrapheme = grapheme;\r\n        }\r\n        // this latest bound box represent the last character of the line\r\n        // to simplify cursor handling in interactive mode.\r\n        lineBounds[i] = {\r\n          left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\r\n          width: 0,\r\n          kernedWidth: 0,\r\n          height: this.fontSize\r\n        };\r\n        return { width: width, numOfSpaces: numOfSpaces };\r\n      },\r\n\r\n      /**\r\n       * Measure and return the info of a single grapheme.\r\n       * needs the the info of previous graphemes already filled\r\n       * @private\r\n       * @param {String} grapheme to be measured\r\n       * @param {Number} lineIndex index of the line where the char is\r\n       * @param {Number} charIndex position in the line\r\n       * @param {String} [prevGrapheme] character preceding the one to be measured\r\n       */\r\n      _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\r\n        var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\r\n            info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\r\n            kernedWidth = info.kernedWidth,\r\n            width = info.width, charSpacing;\r\n\r\n        if (this.charSpacing !== 0) {\r\n          charSpacing = this._getWidthOfCharSpacing();\r\n          width += charSpacing;\r\n          kernedWidth += charSpacing;\r\n        }\r\n\r\n        var box = {\r\n          width: width,\r\n          left: 0,\r\n          height: style.fontSize,\r\n          kernedWidth: kernedWidth,\r\n          deltaY: style.deltaY,\r\n        };\r\n        if (charIndex > 0 && !skipLeft) {\r\n          var previousBox = this.__charBounds[lineIndex][charIndex - 1];\r\n          box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\r\n        }\r\n        return box;\r\n      },\r\n\r\n      /**\r\n       * Calculate height of line at 'lineIndex'\r\n       * @param {Number} lineIndex index of line to calculate\r\n       * @return {Number}\r\n       */\r\n      getHeightOfLine: function(lineIndex) {\r\n        if (this.__lineHeights[lineIndex]) {\r\n          return this.__lineHeights[lineIndex];\r\n        }\r\n\r\n        var line = this._textLines[lineIndex],\r\n            // char 0 is measured before the line cycle because it nneds to char\r\n            // emptylines\r\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\r\n        for (var i = 1, len = line.length; i < len; i++) {\r\n          maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\r\n        }\r\n\r\n        return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\r\n      },\r\n\r\n      /**\r\n       * Calculate text box height\r\n       */\r\n      calcTextHeight: function() {\r\n        var lineHeight, height = 0;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineHeight = this.getHeightOfLine(i);\r\n          height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\r\n        }\r\n        return height;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Left offset\r\n       */\r\n      _getLeftOffset: function() {\r\n        return -this.width / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Top offset\r\n       */\r\n      _getTopOffset: function() {\r\n        return -this.height / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n       * @return {Object} offset.offsetX offset for text rendering\r\n       * @return {Object} offset.offsetY offset for text rendering\r\n       */\r\n      _applyPatternGradientTransform: function(ctx, filler) {\r\n        if (!filler || !filler.toLive) {\r\n          return { offsetX: 0, offsetY: 0 };\r\n        }\r\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n            offsetY = -this.height / 2 + filler.offsetY || 0;\r\n\r\n        ctx.transform(1, 0, 0, 1, offsetX, offsetY);\r\n        return { offsetX: offsetX, offsetY: offsetY };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       */\r\n      _renderTextCommon: function(ctx, method) {\r\n        ctx.save();\r\n        var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\r\n            offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          var heightOfLine = this.getHeightOfLine(i),\r\n              maxHeight = heightOfLine / this.lineHeight,\r\n              leftOffset = this._getLineLeftOffset(i);\r\n          this._renderTextLine(\r\n            method,\r\n            ctx,\r\n            this._textLines[i],\r\n            left + leftOffset - offsets.offsetX,\r\n            top + lineHeights + maxHeight - offsets.offsetY,\r\n            i\r\n          );\r\n          lineHeights += heightOfLine;\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextFill: function(ctx) {\r\n        if (!this.fill && !this.styleHas('fill')) {\r\n          return;\r\n        }\r\n\r\n        this._renderTextCommon(ctx, 'fillText');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextStroke: function(ctx) {\r\n        if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, this.strokeDashArray);\r\n        ctx.beginPath();\r\n        this._renderTextCommon(ctx, 'strokeText');\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Content of the line\r\n       * @param {Number} left\r\n       * @param {Number} top\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charOffset\r\n       */\r\n      _renderChars: function(method, ctx, line, left, top, lineIndex) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox,\r\n            boxWidth = 0,\r\n            timeToRender,\r\n            shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\r\n\r\n        ctx.save();\r\n        top -= lineHeight * this._fontSizeFraction / this.lineHeight;\r\n        if (shortCut) {\r\n          // render all the line in one pass without checking\r\n          this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\r\n          ctx.restore();\r\n          return;\r\n        }\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            left += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            left += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {String} _char\r\n       * @param {Number} left Left coordinate\r\n       * @param {Number} top Top coordinate\r\n       * @param {Number} lineHeight Height of the line\r\n       */\r\n      _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\r\n        var decl = this._getStyleDeclaration(lineIndex, charIndex),\r\n            fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            shouldFill = method === 'fillText' && fullDecl.fill,\r\n            shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\r\n\r\n        if (!shouldStroke && !shouldFill) {\r\n          return;\r\n        }\r\n        decl && ctx.save();\r\n\r\n        this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\r\n\r\n        if (decl && decl.textBackgroundColor) {\r\n          this._removeShadow(ctx);\r\n        }\r\n        if (decl && decl.deltaY) {\r\n          top += decl.deltaY;\r\n        }\r\n\r\n        shouldFill && ctx.fillText(_char, left, top);\r\n        shouldStroke && ctx.strokeText(_char, left, top);\r\n        decl && ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Turns the character into a 'superior figure' (i.e. 'superscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSuperscript: function(start, end) {\r\n        return this._setScript(start, end, this.superscript);\r\n      },\r\n\r\n      /**\r\n       * Turns the character into an 'inferior figure' (i.e. 'subscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSubscript: function(start, end) {\r\n        return this._setScript(start, end, this.subscript);\r\n      },\r\n\r\n      /**\r\n       * Applies 'schema' at given position\r\n       * @private\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @param {Number} schema\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      _setScript: function(start, end, schema) {\r\n        var loc = this.get2DCursorLocation(start, true),\r\n            fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\r\n            dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\r\n            style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\r\n        this.setSelectionStyles(style, start, end);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChanged: function(prevStyle, thisStyle) {\r\n        return prevStyle.fill !== thisStyle.fill ||\r\n                prevStyle.stroke !== thisStyle.stroke ||\r\n                prevStyle.strokeWidth !== thisStyle.strokeWidth ||\r\n                prevStyle.fontSize !== thisStyle.fontSize ||\r\n                prevStyle.fontFamily !== thisStyle.fontFamily ||\r\n                prevStyle.fontWeight !== thisStyle.fontWeight ||\r\n                prevStyle.fontStyle !== thisStyle.fontStyle ||\r\n                prevStyle.deltaY !== thisStyle.deltaY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\r\n        return this._hasStyleChanged(prevStyle, thisStyle) ||\r\n          prevStyle.overline !== thisStyle.overline ||\r\n          prevStyle.underline !== thisStyle.underline ||\r\n          prevStyle.linethrough !== thisStyle.linethrough;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} lineIndex index text line\r\n       * @return {Number} Line left offset\r\n       */\r\n      _getLineLeftOffset: function(lineIndex) {\r\n        var lineWidth = this.getLineWidth(lineIndex);\r\n        if (this.textAlign === 'center') {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'right') {\r\n          return this.width - lineWidth;\r\n        }\r\n        if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\r\n          return this.width - lineWidth;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _clearCache: function() {\r\n        this.__lineWidths = [];\r\n        this.__lineHeights = [];\r\n        this.__charBounds = [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _shouldClearDimensionCache: function() {\r\n        var shouldClear = this._forceClearCache;\r\n        shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\r\n        if (shouldClear) {\r\n          this.dirty = true;\r\n          this._forceClearCache = false;\r\n        }\r\n        return shouldClear;\r\n      },\r\n\r\n      /**\r\n       * Measure a single line given its index. Used to calculate the initial\r\n       * text bounding box. The values are calculated and stored in __lineWidths cache.\r\n       * @private\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      getLineWidth: function(lineIndex) {\r\n        if (this.__lineWidths[lineIndex]) {\r\n          return this.__lineWidths[lineIndex];\r\n        }\r\n\r\n        var width, line = this._textLines[lineIndex], lineInfo;\r\n\r\n        if (line === '') {\r\n          width = 0;\r\n        }\r\n        else {\r\n          lineInfo = this.measureLine(lineIndex);\r\n          width = lineInfo.width;\r\n        }\r\n        this.__lineWidths[lineIndex] = width;\r\n        return width;\r\n      },\r\n\r\n      _getWidthOfCharSpacing: function() {\r\n        if (this.charSpacing !== 0) {\r\n          return this.fontSize * this.charSpacing / 1000;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * Retrieves the value of property at given character position\r\n       * @param {Number} lineIndex the line number\r\n       * @param {Number} charIndex the charater number\r\n       * @param {String} property the property name\r\n       * @returns the value of 'property'\r\n       */\r\n      getValueOfPropertyAt: function(lineIndex, charIndex, property) {\r\n        var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\r\n        if (charStyle && typeof charStyle[property] !== 'undefined') {\r\n          return charStyle[property];\r\n        }\r\n        return this[property];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextDecoration: function(ctx, type) {\r\n        if (!this[type] && !this.styleHas(type)) {\r\n          return;\r\n        }\r\n        var heightOfLine, size, _size,\r\n            lineLeftOffset, dy, _dy,\r\n            line, lastDecoration,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(), top,\r\n            boxStart, boxWidth, charBox, currentDecoration,\r\n            maxHeight, currentFill, lastFill,\r\n            charSpacing = this._getWidthOfCharSpacing();\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this[type] && !this.styleHas(type, i)) {\r\n            topOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          maxHeight = heightOfLine / this.lineHeight;\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxStart = 0;\r\n          boxWidth = 0;\r\n          lastDecoration = this.getValueOfPropertyAt(i, 0, type);\r\n          lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\r\n          top = topOffset + maxHeight * (1 - this._fontSizeFraction);\r\n          size = this.getHeightOfChar(i, 0);\r\n          dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentDecoration = this.getValueOfPropertyAt(i, j, type);\r\n            currentFill = this.getValueOfPropertyAt(i, j, 'fill');\r\n            _size = this.getHeightOfChar(i, j);\r\n            _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\r\n            if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\r\n                boxWidth > 0) {\r\n              ctx.fillStyle = lastFill;\r\n              lastDecoration && lastFill && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                top + this.offsets[type] * size + dy,\r\n                boxWidth,\r\n                this.fontSize / 15\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastDecoration = currentDecoration;\r\n              lastFill = currentFill;\r\n              size = _size;\r\n              dy = _dy;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          ctx.fillStyle = currentFill;\r\n          currentDecoration && currentFill && ctx.fillRect(\r\n            leftOffset + lineLeftOffset + boxStart,\r\n            top + this.offsets[type] * size + dy,\r\n            boxWidth - charSpacing,\r\n            this.fontSize / 15\r\n          );\r\n          topOffset += heightOfLine;\r\n        }\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * return font declaration string for canvas context\r\n       * @param {Object} [styleObject] object\r\n       * @returns {String} font declaration formatted for canvas context.\r\n       */\r\n      _getFontDeclaration: function(styleObject, forMeasuring) {\r\n        var style = styleObject || this, family = this.fontFamily,\r\n            fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\r\n        var fontFamily = family === undefined ||\r\n        family.indexOf('\\'') > -1 || family.indexOf(',') > -1 ||\r\n        family.indexOf('\"') > -1 || fontIsGeneric\r\n          ? style.fontFamily : '\"' + style.fontFamily + '\"';\r\n        return [\r\n          // node-canvas needs \"weight style\", while browsers need \"style weight\"\r\n          // verify if this can be fixed in JSDOM\r\n          (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\r\n          (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\r\n          forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\r\n          fontFamily\r\n        ].join(' ');\r\n      },\r\n\r\n      /**\r\n       * Renders text instance on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if object is not visible\r\n        if (!this.visible) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n        }\r\n        this.callSuper('render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns the text as an array of lines.\r\n       * @param {String} text text to split\r\n       * @returns {Array} Lines in the text\r\n       */\r\n      _splitTextIntoLines: function(text) {\r\n        var lines = text.split(this._reNewline),\r\n            newLines = new Array(lines.length),\r\n            newLine = ['\\n'],\r\n            newText = [];\r\n        for (var i = 0; i < lines.length; i++) {\r\n          newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\r\n          newText = newText.concat(newLines[i], newLine);\r\n        }\r\n        newText.pop();\r\n        return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var additionalProperties = [\r\n          'text',\r\n          'fontSize',\r\n          'fontWeight',\r\n          'fontFamily',\r\n          'fontStyle',\r\n          'lineHeight',\r\n          'underline',\r\n          'overline',\r\n          'linethrough',\r\n          'textAlign',\r\n          'textBackgroundColor',\r\n          'charSpacing',\r\n        ].concat(propertiesToInclude);\r\n        var obj = this.callSuper('toObject', additionalProperties);\r\n        obj.styles = clone(this.styles, true);\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n       * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n       * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      set: function(key, value) {\r\n        this.callSuper('set', key, value);\r\n        var needsDims = false;\r\n        if (typeof key === 'object') {\r\n          for (var _key in key) {\r\n            needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\r\n          }\r\n        }\r\n        else {\r\n          needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\r\n        }\r\n        if (needsDims) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @see: http://www.w3.org/TR/SVG/text.html#TextElement\r\n     */\r\n    fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\r\n      'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\r\n\r\n    /**\r\n     * Default SVG font size\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     */\r\n    fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Text.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\r\n          parsedAnchor = parsedAttributes.textAnchor || 'left';\r\n      options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\r\n\r\n      options.top = options.top || 0;\r\n      options.left = options.left || 0;\r\n      if (parsedAttributes.textDecoration) {\r\n        var textDecoration = parsedAttributes.textDecoration;\r\n        if (textDecoration.indexOf('underline') !== -1) {\r\n          options.underline = true;\r\n        }\r\n        if (textDecoration.indexOf('overline') !== -1) {\r\n          options.overline = true;\r\n        }\r\n        if (textDecoration.indexOf('line-through') !== -1) {\r\n          options.linethrough = true;\r\n        }\r\n        delete options.textDecoration;\r\n      }\r\n      if ('dx' in parsedAttributes) {\r\n        options.left += parsedAttributes.dx;\r\n      }\r\n      if ('dy' in parsedAttributes) {\r\n        options.top += parsedAttributes.dy;\r\n      }\r\n      if (!('fontSize' in options)) {\r\n        options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n      }\r\n\r\n      var textContent = '';\r\n\r\n      // The XML is not properly parsed in IE9 so a workaround to get\r\n      // textContent is through firstChild.data. Another workaround would be\r\n      // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\r\n      if (!('textContent' in element)) {\r\n        if ('firstChild' in element && element.firstChild !== null) {\r\n          if ('data' in element.firstChild && element.firstChild.data !== null) {\r\n            textContent = element.firstChild.data;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        textContent = element.textContent;\r\n      }\r\n\r\n      textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\r\n      var originalStrokeWidth = options.strokeWidth;\r\n      options.strokeWidth = 0;\r\n\r\n      var text = new fabric.Text(textContent, options),\r\n          textHeightScaleFactor = text.getScaledHeight() / text.height,\r\n          lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\r\n          scaledDiff = lineHeightDiff * textHeightScaleFactor,\r\n          textHeight = text.getScaledHeight() + scaledDiff,\r\n          offX = 0;\r\n      /*\r\n        Adjust positioning:\r\n          x/y attributes in SVG correspond to the bottom-left corner of text bounding box\r\n          fabric output by default at top, left.\r\n      */\r\n      if (parsedAnchor === 'center') {\r\n        offX = text.getScaledWidth() / 2;\r\n      }\r\n      if (parsedAnchor === 'right') {\r\n        offX = text.getScaledWidth();\r\n      }\r\n      text.set({\r\n        left: text.left - offX,\r\n        top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\r\n        strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\r\n      });\r\n      callback(text);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\r\n     */\r\n    fabric.Text.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Text', object, callback, 'text');\r\n    };\r\n\r\n    fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        if (!this.styles) {\r\n          return true;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return true;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            for (var p3 in obj[p1][p2]) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it ina specified line\r\n       * This function is used to detect if a text will use a particular property or not.\r\n       * @param {String} property to check for\r\n       * @param {Number} lineIndex to check the style on\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return false;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { 0: this.styles[lineIndex] };\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            if (typeof obj[p1][p2][property] !== 'undefined') {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if characters in a text have a value for a property\r\n       * whose value matches the textbox's value for that property.  If so,\r\n       * the character-level property is deleted.  If the character\r\n       * has no other properties, then it is also deleted.  Finally,\r\n       * if the line containing that character has no other characters\r\n       * then it also is deleted.\r\n       *\r\n       * @param {string} property The property to compare between characters and text.\r\n       */\r\n      cleanStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\r\n            allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          letterCount = 0;\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            var styleObject = obj[p1][p2],\r\n                stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\r\n\r\n            stylesCount++;\r\n\r\n            if (stylePropertyHasBeenSet) {\r\n              if (!stylePropertyValue) {\r\n                stylePropertyValue = styleObject[property];\r\n              }\r\n              else if (styleObject[property] !== stylePropertyValue) {\r\n                allStyleObjectPropertiesMatch = false;\r\n              }\r\n\r\n              if (styleObject[property] === this[property]) {\r\n                delete styleObject[property];\r\n              }\r\n            }\r\n            else {\r\n              allStyleObjectPropertiesMatch = false;\r\n            }\r\n\r\n            if (Object.keys(styleObject).length !== 0) {\r\n              letterCount++;\r\n            }\r\n            else {\r\n              delete obj[p1][p2];\r\n            }\r\n          }\r\n\r\n          if (letterCount === 0) {\r\n            delete obj[p1];\r\n          }\r\n        }\r\n        // if every grapheme has the same style set then\r\n        // delete those styles and set it on the parent\r\n        for (var i = 0; i < this._textLines.length; i++) {\r\n          graphemeCount += this._textLines[i].length;\r\n        }\r\n        if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\r\n          this[property] = stylePropertyValue;\r\n          this.removeStyle(property);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Remove a style property or properties from all individual character styles\r\n       * in a text object.  Deletes the character style object if it contains no other style\r\n       * props.  Deletes a line style object if it contains no other character styles.\r\n       *\r\n       * @param {String} props The property to remove from character styles.\r\n       */\r\n      removeStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return;\r\n        }\r\n        var obj = this.styles, line, lineNum, charNum;\r\n        for (lineNum in obj) {\r\n          line = obj[lineNum];\r\n          for (charNum in line) {\r\n            delete line[charNum][property];\r\n            if (Object.keys(line[charNum]).length === 0) {\r\n              delete line[charNum];\r\n            }\r\n          }\r\n          if (Object.keys(line).length === 0) {\r\n            delete obj[lineNum];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _extendStyles: function(index, styles) {\r\n        var loc = this.get2DCursorLocation(index);\r\n\r\n        if (!this._getLineStyle(loc.lineIndex)) {\r\n          this._setLineStyle(loc.lineIndex);\r\n        }\r\n\r\n        if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\r\n          this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\r\n        }\r\n\r\n        fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\r\n      },\r\n\r\n      /**\r\n       * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\r\n       * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\r\n       * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\r\n       */\r\n      get2DCursorLocation: function(selectionStart, skipWrapping) {\r\n        if (typeof selectionStart === 'undefined') {\r\n          selectionStart = this.selectionStart;\r\n        }\r\n        var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,\r\n            len = lines.length;\r\n        for (var i = 0; i < len; i++) {\r\n          if (selectionStart <= lines[i].length) {\r\n            return {\r\n              lineIndex: i,\r\n              charIndex: selectionStart\r\n            };\r\n          }\r\n          selectionStart -= lines[i].length + this.missingNewlineOffset(i);\r\n        }\r\n        return {\r\n          lineIndex: i - 1,\r\n          charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor (at the start position)\r\n       * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @param {Boolean} [complete] get full style or not\r\n       * @return {Array} styles an array with one, zero or more Style objects\r\n       */\r\n      getSelectionStyles: function(startIndex, endIndex, complete) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        var styles = [];\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          styles.push(this.getStyleAtPosition(i, complete));\r\n        }\r\n        return styles;\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor position\r\n       * @param {Number} position  to get styles at\r\n       * @param {Boolean} [complete] full style if true\r\n       * @return {Object} style Style object at a specified index\r\n       * @private\r\n       */\r\n      getStyleAtPosition: function(position, complete) {\r\n        var loc = this.get2DCursorLocation(position),\r\n            style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\r\n              this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\r\n        return style || {};\r\n      },\r\n\r\n      /**\r\n       * Sets style of a current selection, if no selection exist, do not set anything.\r\n       * @param {Object} [styles] Styles object\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      setSelectionStyles: function(styles, startIndex, endIndex) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          this._extendStyles(i, styles);\r\n        }\r\n        /* not included in _extendStyles to avoid clearing cache more than once */\r\n        this._forceClearCache = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * get the reference, not a clone, of the style object for a given character\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @return {Object} style object\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        var lineStyle = this.styles && this.styles[lineIndex];\r\n        if (!lineStyle) {\r\n          return null;\r\n        }\r\n        return lineStyle[charIndex];\r\n      },\r\n\r\n      /**\r\n       * return a new object that contains all the style property for a character\r\n       * the object returned is newly created\r\n       * @param {Number} lineIndex of the line where the character is\r\n       * @param {Number} charIndex position of the character on the line\r\n       * @return {Object} style object\r\n       */\r\n      getCompleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\r\n            styleObject = { }, prop;\r\n        for (var i = 0; i < this._styleProperties.length; i++) {\r\n          prop = this._styleProperties[i];\r\n          styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\r\n        }\r\n        return styleObject;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean} if the line exists or not\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        return !!this.styles[lineIndex];\r\n      },\r\n\r\n      /**\r\n       * Set the line style to an empty object so that is initialized\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex) {\r\n        this.styles[lineIndex] = {};\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _deleteLineStyle: function(lineIndex) {\r\n        delete this.styles[lineIndex];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function parseDecoration(object) {\r\n      if (object.textDecoration) {\r\n        object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\r\n        object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\r\n        object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\r\n        delete object.textDecoration;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\r\n     * prefix when observing canvas.\r\n     * @class fabric.IText\r\n     * @extends fabric.Text\r\n     * @mixes fabric.Observable\r\n     *\r\n     * @fires changed\r\n     * @fires selection:changed\r\n     * @fires editing:entered\r\n     * @fires editing:exited\r\n     *\r\n     * @return {fabric.IText} thisArg\r\n     * @see {@link fabric.IText#initialize} for constructor definition\r\n     *\r\n     * <p>Supported key combinations:</p>\r\n     * <pre>\r\n     *   Move cursor:                    left, right, up, down\r\n     *   Select character:               shift + left, shift + right\r\n     *   Select text vertically:         shift + up, shift + down\r\n     *   Move cursor by word:            alt + left, alt + right\r\n     *   Select words:                   shift + alt + left, shift + alt + right\r\n     *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\r\n     *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\r\n     *   Jump to start/end of text:      cmd + up, cmd + down\r\n     *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\r\n     *   Delete character:               backspace\r\n     *   Delete word:                    alt + backspace\r\n     *   Delete line:                    cmd + backspace\r\n     *   Forward delete:                 delete\r\n     *   Copy text:                      ctrl/cmd + c\r\n     *   Paste text:                     ctrl/cmd + v\r\n     *   Cut text:                       ctrl/cmd + x\r\n     *   Select entire text:             ctrl/cmd + a\r\n     *   Quit editing                    tab or esc\r\n     * </pre>\r\n     *\r\n     * <p>Supported mouse/touch combination</p>\r\n     * <pre>\r\n     *   Position cursor:                click/touch\r\n     *   Create selection:               click/touch & drag\r\n     *   Create selection:               click & shift + click\r\n     *   Select word:                    double click\r\n     *   Select line:                    triple click\r\n     * </pre>\r\n     */\r\n    fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'i-text',\r\n\r\n      /**\r\n       * Index where text selection starts (or where cursor is when there is no selection)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionStart: 0,\r\n\r\n      /**\r\n       * Index where text selection ends\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionEnd: 0,\r\n\r\n      /**\r\n       * Color of text selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor: 'rgba(17,119,255,0.3)',\r\n\r\n      /**\r\n       * Indicates whether text is in editing mode\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isEditing: false,\r\n\r\n      /**\r\n       * Indicates whether a text can be edited\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      editable: true,\r\n\r\n      /**\r\n       * Border color of text object while it's in editing mode\r\n       * @type String\r\n       * @default\r\n       */\r\n      editingBorderColor: 'rgba(102,153,255,0.25)',\r\n\r\n      /**\r\n       * Width of cursor (in px)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorWidth: 2,\r\n\r\n      /**\r\n       * Color of default cursor (when not overwritten by character style)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cursorColor: '#333',\r\n\r\n      /**\r\n       * Delay between cursor blink (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDelay: 1000,\r\n\r\n      /**\r\n       * Duration of cursor fadein (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDuration: 600,\r\n\r\n      /**\r\n       * Indicates whether internal text char widths can be cached\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      caching: true,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reSpace: /\\s|\\n/,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _currentCursorOpacity: 0,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _selectionDirection: null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _abortCursorAnimation: false,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __widthOfSpace: [],\r\n\r\n      /**\r\n       * Helps determining when the text is in composition, so that the cursor\r\n       * rendering is altered.\r\n       */\r\n      inCompositionMode: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.IText} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.callSuper('initialize', text, options);\r\n        this.initBehavior();\r\n      },\r\n\r\n      /**\r\n       * Sets selection start (left boundary of a selection)\r\n       * @param {Number} index Index to set selection start to\r\n       */\r\n      setSelectionStart: function(index) {\r\n        index = Math.max(index, 0);\r\n        this._updateAndFire('selectionStart', index);\r\n      },\r\n\r\n      /**\r\n       * Sets selection end (right boundary of a selection)\r\n       * @param {Number} index Index to set selection end to\r\n       */\r\n      setSelectionEnd: function(index) {\r\n        index = Math.min(index, this.text.length);\r\n        this._updateAndFire('selectionEnd', index);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property 'selectionStart' or 'selectionEnd'\r\n       * @param {Number} index new position of property\r\n       */\r\n      _updateAndFire: function(property, index) {\r\n        if (this[property] !== index) {\r\n          this._fireSelectionChanged();\r\n          this[property] = index;\r\n        }\r\n        this._updateTextarea();\r\n      },\r\n\r\n      /**\r\n       * Fires the even of selection changed\r\n       * @private\r\n       */\r\n      _fireSelectionChanged: function() {\r\n        this.fire('selection:changed');\r\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\r\n      },\r\n\r\n      /**\r\n       * Initialize text dimensions. Render all text on given context\r\n       * or on a offscreen canvas to get the text width with measureText.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       * @private\r\n       */\r\n      initDimensions: function() {\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this.callSuper('initDimensions');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        this.clearContextTop();\r\n        this.callSuper('render', ctx);\r\n        // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\r\n        // the correct position but not at every cursor animation.\r\n        this.cursorOffsetCache = { };\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this.callSuper('_render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Prepare and clean the contextTop\r\n       */\r\n      clearContextTop: function(skipRestore) {\r\n        if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {\r\n          return;\r\n        }\r\n        var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        this.transform(ctx);\r\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\r\n        this._clearTextArea(ctx);\r\n        skipRestore || ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Renders cursor or selection (depending on what exists)\r\n       * it does on the contextTop. If contextTop is not available, do nothing.\r\n       */\r\n      renderCursorOrSelection: function() {\r\n        if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {\r\n          return;\r\n        }\r\n        var boundaries = this._getCursorBoundaries(),\r\n            ctx = this.canvas.contextTop;\r\n        this.clearContextTop(true);\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.renderCursor(boundaries, ctx);\r\n        }\r\n        else {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      _clearTextArea: function(ctx) {\r\n        // we add 4 pixel, to be sure to do not leave any pixel out\r\n        var width = this.width + 4, height = this.height + 4;\r\n        ctx.clearRect(-width / 2, -height / 2, width, height);\r\n      },\r\n\r\n      /**\r\n       * Returns cursor boundaries (left, top, leftOffset, topOffset)\r\n       * @private\r\n       * @param {Array} chars Array of characters\r\n       * @param {String} typeOfBoundaries\r\n       */\r\n      _getCursorBoundaries: function(position) {\r\n\r\n        // left/top are left/top of entire text box\r\n        // leftOffset/topOffset are offset from that left/top point of a text box\r\n\r\n        if (typeof position === 'undefined') {\r\n          position = this.selectionStart;\r\n        }\r\n\r\n        var left = this._getLeftOffset(),\r\n            top = this._getTopOffset(),\r\n            offsets = this._getCursorBoundariesOffsets(position);\r\n\r\n        return {\r\n          left: left,\r\n          top: top,\r\n          leftOffset: offsets.left,\r\n          topOffset: offsets.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getCursorBoundariesOffsets: function(position) {\r\n        if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\r\n          return this.cursorOffsetCache;\r\n        }\r\n        var lineLeftOffset,\r\n            lineIndex,\r\n            charIndex,\r\n            topOffset = 0,\r\n            leftOffset = 0,\r\n            boundaries,\r\n            cursorPosition = this.get2DCursorLocation(position);\r\n        charIndex = cursorPosition.charIndex;\r\n        lineIndex = cursorPosition.lineIndex;\r\n        for (var i = 0; i < lineIndex; i++) {\r\n          topOffset += this.getHeightOfLine(i);\r\n        }\r\n        lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n        var bound = this.__charBounds[lineIndex][charIndex];\r\n        bound && (leftOffset = bound.left);\r\n        if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\r\n          leftOffset -= this._getWidthOfCharSpacing();\r\n        }\r\n        boundaries = {\r\n          top: topOffset,\r\n          left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\r\n        };\r\n        this.cursorOffsetCache = boundaries;\r\n        return this.cursorOffsetCache;\r\n      },\r\n\r\n      /**\r\n       * Renders cursor\r\n       * @param {Object} boundaries\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderCursor: function(boundaries, ctx) {\r\n        var cursorLocation = this.get2DCursorLocation(),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\r\n            multiplier = this.scaleX * this.canvas.getZoom(),\r\n            cursorWidth = this.cursorWidth / multiplier,\r\n            topOffset = boundaries.topOffset,\r\n            dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\r\n\r\n        topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\r\n          - charHeight * (1 - this._fontSizeFraction);\r\n\r\n        if (this.inCompositionMode) {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n\r\n        ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\r\n        ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\r\n        ctx.fillRect(\r\n          boundaries.left + boundaries.leftOffset - cursorWidth / 2,\r\n          topOffset + boundaries.top + dy,\r\n          cursorWidth,\r\n          charHeight);\r\n      },\r\n\r\n      /**\r\n       * Renders text selection\r\n       * @param {Object} boundaries Object with left/top/leftOffset/topOffset\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderSelection: function(boundaries, ctx) {\r\n\r\n        var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\r\n            selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            start = this.get2DCursorLocation(selectionStart),\r\n            end = this.get2DCursorLocation(selectionEnd),\r\n            startLine = start.lineIndex,\r\n            endLine = end.lineIndex,\r\n            startChar = start.charIndex < 0 ? 0 : start.charIndex,\r\n            endChar = end.charIndex < 0 ? 0 : end.charIndex;\r\n\r\n        for (var i = startLine; i <= endLine; i++) {\r\n          var lineOffset = this._getLineLeftOffset(i) || 0,\r\n              lineHeight = this.getHeightOfLine(i),\r\n              realLineHeight = 0, boxStart = 0, boxEnd = 0;\r\n\r\n          if (i === startLine) {\r\n            boxStart = this.__charBounds[startLine][startChar].left;\r\n          }\r\n          if (i >= startLine && i < endLine) {\r\n            boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\r\n          }\r\n          else if (i === endLine) {\r\n            if (endChar === 0) {\r\n              boxEnd = this.__charBounds[endLine][endChar].left;\r\n            }\r\n            else {\r\n              var charSpacing = this._getWidthOfCharSpacing();\r\n              boxEnd = this.__charBounds[endLine][endChar - 1].left\r\n                + this.__charBounds[endLine][endChar - 1].width - charSpacing;\r\n            }\r\n          }\r\n          realLineHeight = lineHeight;\r\n          if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\r\n            lineHeight /= this.lineHeight;\r\n          }\r\n          if (this.inCompositionMode) {\r\n            ctx.fillStyle = this.compositionColor || 'black';\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset + lineHeight,\r\n              boxEnd - boxStart,\r\n              1);\r\n          }\r\n          else {\r\n            ctx.fillStyle = this.selectionColor;\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset,\r\n              boxEnd - boxStart,\r\n              lineHeight);\r\n          }\r\n\r\n\r\n          boundaries.topOffset += realLineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * High level function to know the height of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns fontSize of char at the current cursor\r\n       * @return {Number} Character font size\r\n       */\r\n      getCurrentCharFontSize: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * High level function to know the color of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns color (fill) of char at the current cursor\r\n       * @return {String} Character color (fill)\r\n       */\r\n      getCurrentCharColor: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\r\n      },\r\n\r\n      /**\r\n       * Returns the cursor position for the getCurrent.. functions\r\n       * @private\r\n       */\r\n      _getCurrentCharIndex: function() {\r\n        var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\r\n            charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\r\n        return { l: cursorPosition.lineIndex, c: charIndex };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.IText instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.IText\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as argument\r\n     */\r\n    fabric.IText.fromObject = function(object, callback) {\r\n      parseDecoration(object);\r\n      if (object.styles) {\r\n        for (var i in object.styles) {\r\n          for (var j in object.styles[i]) {\r\n            parseDecoration(object.styles[i][j]);\r\n          }\r\n        }\r\n      }\r\n      fabric.Object._fromObject('IText', object, callback, 'text');\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Initializes all the interactive behavior of IText\r\n       */\r\n      initBehavior: function() {\r\n        this.initAddedHandler();\r\n        this.initRemovedHandler();\r\n        this.initCursorSelectionHandlers();\r\n        this.initDoubleClickSimulation();\r\n        this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\r\n      },\r\n\r\n      onDeselect: function() {\r\n        this.isEditing && this.exitEditing();\r\n        this.selected = false;\r\n      },\r\n\r\n      /**\r\n       * Initializes \"added\" event handler\r\n       */\r\n      initAddedHandler: function() {\r\n        var _this = this;\r\n        this.on('added', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            if (!canvas._hasITextHandlers) {\r\n              canvas._hasITextHandlers = true;\r\n              _this._initCanvasHandlers(canvas);\r\n            }\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            canvas._iTextInstances.push(_this);\r\n          }\r\n        });\r\n      },\r\n\r\n      initRemovedHandler: function() {\r\n        var _this = this;\r\n        this.on('removed', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            fabric.util.removeFromArray(canvas._iTextInstances, _this);\r\n            if (canvas._iTextInstances.length === 0) {\r\n              canvas._hasITextHandlers = false;\r\n              _this._removeCanvasHandlers(canvas);\r\n            }\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * register canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _initCanvasHandlers: function(canvas) {\r\n        canvas._mouseUpITextHandler = function() {\r\n          if (canvas._iTextInstances) {\r\n            canvas._iTextInstances.forEach(function(obj) {\r\n              obj.__isMousedown = false;\r\n            });\r\n          }\r\n        };\r\n        canvas.on('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * remove canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _removeCanvasHandlers: function(canvas) {\r\n        canvas.off('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _tick: function() {\r\n        this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\r\n\r\n        var tickState;\r\n\r\n        tickState = {\r\n          isAborted: false,\r\n          abort: function() {\r\n            this.isAborted = true;\r\n          },\r\n        };\r\n\r\n        obj.animate('_currentCursorOpacity', targetOpacity, {\r\n          duration: duration,\r\n          onComplete: function() {\r\n            if (!tickState.isAborted) {\r\n              obj[completeMethod]();\r\n            }\r\n          },\r\n          onChange: function() {\r\n            // we do not want to animate a selection, only cursor\r\n            if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\r\n              obj.renderCursorOrSelection();\r\n            }\r\n          },\r\n          abort: function() {\r\n            return tickState.isAborted;\r\n          }\r\n        });\r\n        return tickState;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onTickComplete: function() {\r\n\r\n        var _this = this;\r\n\r\n        if (this._cursorTimeout1) {\r\n          clearTimeout(this._cursorTimeout1);\r\n        }\r\n        this._cursorTimeout1 = setTimeout(function() {\r\n          _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\r\n        }, 100);\r\n      },\r\n\r\n      /**\r\n       * Initializes delayed cursor\r\n       */\r\n      initDelayedCursor: function(restart) {\r\n        var _this = this,\r\n            delay = restart ? 0 : this.cursorDelay;\r\n\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this._cursorTimeout2 = setTimeout(function() {\r\n          _this._tick();\r\n        }, delay);\r\n      },\r\n\r\n      /**\r\n       * Aborts cursor animation and clears all timeouts\r\n       */\r\n      abortCursorAnimation: function() {\r\n        var shouldClear = this._currentTickState || this._currentTickCompleteState,\r\n            canvas = this.canvas;\r\n        this._currentTickState && this._currentTickState.abort();\r\n        this._currentTickCompleteState && this._currentTickCompleteState.abort();\r\n\r\n        clearTimeout(this._cursorTimeout1);\r\n        clearTimeout(this._cursorTimeout2);\r\n\r\n        this._currentCursorOpacity = 0;\r\n        // to clear just itext area we need to transform the context\r\n        // it may not be worth it\r\n        if (shouldClear && canvas) {\r\n          canvas.clearContext(canvas.contextTop || canvas.contextContainer);\r\n        }\r\n\r\n      },\r\n\r\n      /**\r\n       * Selects entire text\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectAll: function() {\r\n        this.selectionStart = 0;\r\n        this.selectionEnd = this._text.length;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns selected text\r\n       * @return {String}\r\n       */\r\n      getSelectedText: function() {\r\n        return this._text.slice(this.selectionStart, this.selectionEnd).join('');\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current word according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        // remove space before cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index--;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current word according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        // remove space after cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index++;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index < this._text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index < this._text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Finds index corresponding to beginning or end of a word\r\n       * @param {Number} selectionStart Index of a character\r\n       * @param {Number} direction 1 or -1\r\n       * @return {Number} Index of the beginning or end of a word\r\n       */\r\n      searchWordBoundary: function(selectionStart, direction) {\r\n        var text = this._text,\r\n            index     = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart,\r\n            _char     = text[index],\r\n            // wrong\r\n            reNonWord = fabric.reNonWord;\r\n\r\n        while (!reNonWord.test(_char) && index > 0 && index < text.length) {\r\n          index += direction;\r\n          _char = text[index];\r\n        }\r\n        if (reNonWord.test(_char)) {\r\n          index += direction === 1 ? 0 : 1;\r\n        }\r\n        return index;\r\n      },\r\n\r\n      /**\r\n       * Selects a word based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       */\r\n      selectWord: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\r\n            newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * Selects a line based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectLine: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\r\n            newSelectionEnd = this.findLineBoundaryRight(selectionStart);\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Enters editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      enterEditing: function(e) {\r\n        if (this.isEditing || !this.editable) {\r\n          return;\r\n        }\r\n\r\n        if (this.canvas) {\r\n          this.canvas.calcOffset();\r\n          this.exitEditingOnOthers(this.canvas);\r\n        }\r\n\r\n        this.isEditing = true;\r\n\r\n        this.initHiddenTextarea(e);\r\n        this.hiddenTextarea.focus();\r\n        this.hiddenTextarea.value = this.text;\r\n        this._updateTextarea();\r\n        this._saveEditingProps();\r\n        this._setEditingProps();\r\n        this._textBeforeEdit = this.text;\r\n\r\n        this._tick();\r\n        this.fire('editing:entered');\r\n        this._fireSelectionChanged();\r\n        if (!this.canvas) {\r\n          return this;\r\n        }\r\n        this.canvas.fire('text:editing:entered', { target: this });\r\n        this.initMouseMoveHandler();\r\n        this.canvas.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      exitEditingOnOthers: function(canvas) {\r\n        if (canvas._iTextInstances) {\r\n          canvas._iTextInstances.forEach(function(obj) {\r\n            obj.selected = false;\r\n            if (obj.isEditing) {\r\n              obj.exitEditing();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Initializes \"mousemove\" event handler\r\n       */\r\n      initMouseMoveHandler: function() {\r\n        this.canvas.on('mouse:move', this.mouseMoveHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      mouseMoveHandler: function(options) {\r\n        if (!this.__isMousedown || !this.isEditing) {\r\n          return;\r\n        }\r\n\r\n        var newSelectionStart = this.getSelectionStartFromPointer(options.e),\r\n            currentStart = this.selectionStart,\r\n            currentEnd = this.selectionEnd;\r\n        if (\r\n          (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\r\n          &&\r\n          (currentStart === newSelectionStart || currentEnd === newSelectionStart)\r\n        ) {\r\n          return;\r\n        }\r\n        if (newSelectionStart > this.__selectionStartOnMouseDown) {\r\n          this.selectionStart = this.__selectionStartOnMouseDown;\r\n          this.selectionEnd = newSelectionStart;\r\n        }\r\n        else {\r\n          this.selectionStart = newSelectionStart;\r\n          this.selectionEnd = this.__selectionStartOnMouseDown;\r\n        }\r\n        if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\r\n          this.restartCursorIfNeeded();\r\n          this._fireSelectionChanged();\r\n          this._updateTextarea();\r\n          this.renderCursorOrSelection();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setEditingProps: function() {\r\n        this.hoverCursor = 'text';\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\r\n        }\r\n\r\n        this.borderColor = this.editingBorderColor;\r\n        this.hasControls = this.selectable = false;\r\n        this.lockMovementX = this.lockMovementY = true;\r\n      },\r\n\r\n      /**\r\n       * convert from textarea to grapheme indexes\r\n       */\r\n      fromStringToGraphemeSelection: function(start, end, text) {\r\n        var smallerTextStart = text.slice(0, start),\r\n            graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = text.slice(start, end),\r\n            graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * convert from fabric to textarea values\r\n       */\r\n      fromGraphemeToStringSelection: function(start, end, _text) {\r\n        var smallerTextStart = _text.slice(0, start),\r\n            graphemeStart = smallerTextStart.join('').length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = _text.slice(start, end),\r\n            graphemeEnd = smallerTextEnd.join('').length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateTextarea: function() {\r\n        this.cursorOffsetCache = { };\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        if (!this.inCompositionMode) {\r\n          var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\r\n          this.hiddenTextarea.selectionStart = newSelection.selectionStart;\r\n          this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateFromTextArea: function() {\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        this.cursorOffsetCache = { };\r\n        this.text = this.hiddenTextarea.value;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        var newSelection = this.fromStringToGraphemeSelection(\r\n          this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\r\n        this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\r\n        if (!this.inCompositionMode) {\r\n          this.selectionStart = newSelection.selectionStart;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateTextareaPosition: function() {\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          var style = this._calcTextareaPosition();\r\n          this.hiddenTextarea.style.left = style.left;\r\n          this.hiddenTextarea.style.top = style.top;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Object} style contains style for hiddenTextarea\r\n       */\r\n      _calcTextareaPosition: function() {\r\n        if (!this.canvas) {\r\n          return { x: 1, y: 1 };\r\n        }\r\n        var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart,\r\n            boundaries = this._getCursorBoundaries(desiredPosition),\r\n            cursorLocation = this.get2DCursorLocation(desiredPosition),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\r\n            leftOffset = boundaries.leftOffset,\r\n            m = this.calcTransformMatrix(),\r\n            p = {\r\n              x: boundaries.left + leftOffset,\r\n              y: boundaries.top + boundaries.topOffset + charHeight\r\n            },\r\n            retinaScaling = this.canvas.getRetinaScaling(),\r\n            upperCanvas = this.canvas.upperCanvasEl,\r\n            upperCanvasWidth = upperCanvas.width / retinaScaling,\r\n            upperCanvasHeight = upperCanvas.height / retinaScaling,\r\n            maxWidth = upperCanvasWidth - charHeight,\r\n            maxHeight = upperCanvasHeight - charHeight,\r\n            scaleX = upperCanvas.clientWidth / upperCanvasWidth,\r\n            scaleY = upperCanvas.clientHeight / upperCanvasHeight;\r\n\r\n        p = fabric.util.transformPoint(p, m);\r\n        p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\r\n        p.x *= scaleX;\r\n        p.y *= scaleY;\r\n        if (p.x < 0) {\r\n          p.x = 0;\r\n        }\r\n        if (p.x > maxWidth) {\r\n          p.x = maxWidth;\r\n        }\r\n        if (p.y < 0) {\r\n          p.y = 0;\r\n        }\r\n        if (p.y > maxHeight) {\r\n          p.y = maxHeight;\r\n        }\r\n\r\n        // add canvas offset on document\r\n        p.x += this.canvas._offset.left;\r\n        p.y += this.canvas._offset.top;\r\n\r\n        return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _saveEditingProps: function() {\r\n        this._savedProps = {\r\n          hasControls: this.hasControls,\r\n          borderColor: this.borderColor,\r\n          lockMovementX: this.lockMovementX,\r\n          lockMovementY: this.lockMovementY,\r\n          hoverCursor: this.hoverCursor,\r\n          selectable: this.selectable,\r\n          defaultCursor: this.canvas && this.canvas.defaultCursor,\r\n          moveCursor: this.canvas && this.canvas.moveCursor\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _restoreEditingProps: function() {\r\n        if (!this._savedProps) {\r\n          return;\r\n        }\r\n\r\n        this.hoverCursor = this._savedProps.hoverCursor;\r\n        this.hasControls = this._savedProps.hasControls;\r\n        this.borderColor = this._savedProps.borderColor;\r\n        this.selectable = this._savedProps.selectable;\r\n        this.lockMovementX = this._savedProps.lockMovementX;\r\n        this.lockMovementY = this._savedProps.lockMovementY;\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this._savedProps.defaultCursor;\r\n          this.canvas.moveCursor = this._savedProps.moveCursor;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Exits from editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      exitEditing: function() {\r\n        var isTextChanged = (this._textBeforeEdit !== this.text);\r\n        this.selected = false;\r\n        this.isEditing = false;\r\n\r\n        this.selectionEnd = this.selectionStart;\r\n\r\n        if (this.hiddenTextarea) {\r\n          this.hiddenTextarea.blur && this.hiddenTextarea.blur();\r\n          this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\r\n          this.hiddenTextarea = null;\r\n        }\r\n\r\n        this.abortCursorAnimation();\r\n        this._restoreEditingProps();\r\n        this._currentCursorOpacity = 0;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        this.fire('editing:exited');\r\n        isTextChanged && this.fire('modified');\r\n        if (this.canvas) {\r\n          this.canvas.off('mouse:move', this.mouseMoveHandler);\r\n          this.canvas.fire('text:editing:exited', { target: this });\r\n          isTextChanged && this.canvas.fire('object:modified', { target: this });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _removeExtraneousStyles: function() {\r\n        for (var prop in this.styles) {\r\n          if (!this._textLines[prop]) {\r\n            delete this.styles[prop];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * remove and reflow a style block from start to end.\r\n       * @param {Number} start linear start position for removal (included in removal)\r\n       * @param {Number} end linear end position for removal ( excluded from removal )\r\n       */\r\n      removeStyleFromTo: function(start, end) {\r\n        var cursorStart = this.get2DCursorLocation(start, true),\r\n            cursorEnd = this.get2DCursorLocation(end, true),\r\n            lineStart = cursorStart.lineIndex,\r\n            charStart = cursorStart.charIndex,\r\n            lineEnd = cursorEnd.lineIndex,\r\n            charEnd = cursorEnd.charIndex,\r\n            i, styleObj;\r\n        if (lineStart !== lineEnd) {\r\n          // step1 remove the trailing of lineStart\r\n          if (this.styles[lineStart]) {\r\n            for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\r\n              delete this.styles[lineStart][i];\r\n            }\r\n          }\r\n          // step2 move the trailing of lineEnd to lineStart if needed\r\n          if (this.styles[lineEnd]) {\r\n            for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\r\n              styleObj = this.styles[lineEnd][i];\r\n              if (styleObj) {\r\n                this.styles[lineStart] || (this.styles[lineStart] = { });\r\n                this.styles[lineStart][charStart + i - charEnd] = styleObj;\r\n              }\r\n            }\r\n          }\r\n          // step3 detects lines will be completely removed.\r\n          for (i = lineStart + 1; i <= lineEnd; i++) {\r\n            delete this.styles[i];\r\n          }\r\n          // step4 shift remaining lines.\r\n          this.shiftLineStyles(lineEnd, lineStart - lineEnd);\r\n        }\r\n        else {\r\n          // remove and shift left on the same line\r\n          if (this.styles[lineStart]) {\r\n            styleObj = this.styles[lineStart];\r\n            var diff = charEnd - charStart, numericChar, _char;\r\n            for (i = charStart; i < charEnd; i++) {\r\n              delete styleObj[i];\r\n            }\r\n            for (_char in this.styles[lineStart]) {\r\n              numericChar = parseInt(_char, 10);\r\n              if (numericChar >= charEnd) {\r\n                styleObj[numericChar - diff] = styleObj[_char];\r\n                delete styleObj[_char];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Shifts line styles up or down\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} offset Can any number?\r\n       */\r\n      shiftLineStyles: function(lineIndex, offset) {\r\n        // shift all line styles by offset upward or downward\r\n        // do not clone deep. we need new array, not new style objects\r\n        var clonedStyles = clone(this.styles);\r\n        for (var line in this.styles) {\r\n          var numericLine = parseInt(line, 10);\r\n          if (numericLine > lineIndex) {\r\n            this.styles[numericLine + offset] = clonedStyles[numericLine];\r\n            if (!clonedStyles[numericLine - offset]) {\r\n              delete this.styles[numericLine];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      restartCursorIfNeeded: function() {\r\n        if (!this._currentTickState || this._currentTickState.isAborted\r\n          || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\r\n        ) {\r\n          this.initDelayedCursor();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts new style object\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} qty number of lines to add\r\n       * @param {Array} copiedStyle Array of objects styles\r\n       */\r\n      insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\r\n        var currentCharStyle,\r\n            newLineStyles = {},\r\n            somethingAdded = false;\r\n\r\n        qty || (qty = 1);\r\n        this.shiftLineStyles(lineIndex, qty);\r\n        if (this.styles[lineIndex]) {\r\n          currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\r\n        }\r\n\r\n        // we clone styles of all chars\r\n        // after cursor onto the current line\r\n        for (var index in this.styles[lineIndex]) {\r\n          var numIndex = parseInt(index, 10);\r\n          if (numIndex >= charIndex) {\r\n            somethingAdded = true;\r\n            newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\r\n            // remove lines from the previous line since they're on a new line now\r\n            delete this.styles[lineIndex][index];\r\n          }\r\n        }\r\n        if (somethingAdded) {\r\n          this.styles[lineIndex + qty] = newLineStyles;\r\n        }\r\n        else {\r\n          delete this.styles[lineIndex + qty];\r\n        }\r\n        // for the other lines\r\n        // we clone current char style onto the next (otherwise empty) line\r\n        while (qty > 1) {\r\n          qty--;\r\n          if (copiedStyle && copiedStyle[qty]) {\r\n            this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\r\n          }\r\n          else if (currentCharStyle) {\r\n            this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\r\n          }\r\n          else {\r\n            delete this.styles[lineIndex + qty];\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n      },\r\n\r\n      /**\r\n       * Inserts style object for a given line/char index\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} quantity number Style object to insert, if given\r\n       * @param {Array} copiedStyle array of style objects\r\n       */\r\n      insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\r\n        if (!this.styles) {\r\n          this.styles = {};\r\n        }\r\n        var currentLineStyles       = this.styles[lineIndex],\r\n            currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\r\n\r\n        quantity || (quantity = 1);\r\n        // shift all char styles by quantity forward\r\n        // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\r\n        for (var index in currentLineStylesCloned) {\r\n          var numericIndex = parseInt(index, 10);\r\n          if (numericIndex >= charIndex) {\r\n            currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\r\n            // only delete the style if there was nothing moved there\r\n            if (!currentLineStylesCloned[numericIndex - quantity]) {\r\n              delete currentLineStyles[numericIndex];\r\n            }\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n        if (copiedStyle) {\r\n          while (quantity--) {\r\n            if (!Object.keys(copiedStyle[quantity]).length) {\r\n              continue;\r\n            }\r\n            if (!this.styles[lineIndex]) {\r\n              this.styles[lineIndex] = {};\r\n            }\r\n            this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\r\n          }\r\n          return;\r\n        }\r\n        if (!currentLineStyles) {\r\n          return;\r\n        }\r\n        var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\r\n        while (newStyle && quantity--) {\r\n          this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts style object(s)\r\n       * @param {Array} insertedText Characters at the location where style is inserted\r\n       * @param {Number} start cursor index for inserting style\r\n       * @param {Array} [copiedStyle] array of style objects to insert.\r\n       */\r\n      insertNewStyleBlock: function(insertedText, start, copiedStyle) {\r\n        var cursorLoc = this.get2DCursorLocation(start, true),\r\n            addedLines = [0], linesLength = 0;\r\n        for (var i = 0; i < insertedText.length; i++) {\r\n          if (insertedText[i] === '\\n') {\r\n            linesLength++;\r\n            addedLines[linesLength] = 0;\r\n          }\r\n          else {\r\n            addedLines[linesLength]++;\r\n          }\r\n        }\r\n        if (addedLines[0] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\r\n        }\r\n        linesLength && this.insertNewlineStyleObject(\r\n          cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);\r\n        for (var i = 1; i < linesLength; i++) {\r\n          if (addedLines[i] > 0) {\r\n            this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n          }\r\n          else if (copiedStyle) {\r\n            this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\r\n          }\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\r\n        }\r\n        // we use i outside the loop to get it like linesLength\r\n        if (addedLines[i] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the selectionStart and selectionEnd according to the new position of cursor\r\n       * mimic the key - mouse navigation when shift is pressed.\r\n       */\r\n      setSelectionStartEndWithShift: function(start, end, newSelection) {\r\n        if (newSelection <= start) {\r\n          if (end === start) {\r\n            this._selectionDirection = 'left';\r\n          }\r\n          else if (this._selectionDirection === 'right') {\r\n            this._selectionDirection = 'left';\r\n            this.selectionEnd = start;\r\n          }\r\n          this.selectionStart = newSelection;\r\n        }\r\n        else if (newSelection > start && newSelection < end) {\r\n          if (this._selectionDirection === 'right') {\r\n            this.selectionEnd = newSelection;\r\n          }\r\n          else {\r\n            this.selectionStart = newSelection;\r\n          }\r\n        }\r\n        else {\r\n          // newSelection is > selection start and end\r\n          if (end === start) {\r\n            this._selectionDirection = 'right';\r\n          }\r\n          else if (this._selectionDirection === 'left') {\r\n            this._selectionDirection = 'right';\r\n            this.selectionStart = end;\r\n          }\r\n          this.selectionEnd = newSelection;\r\n        }\r\n      },\r\n\r\n      setSelectionInBoundaries: function() {\r\n        var length = this.text.length;\r\n        if (this.selectionStart > length) {\r\n          this.selectionStart = length;\r\n        }\r\n        else if (this.selectionStart < 0) {\r\n          this.selectionStart = 0;\r\n        }\r\n        if (this.selectionEnd > length) {\r\n          this.selectionEnd = length;\r\n        }\r\n        else if (this.selectionEnd < 0) {\r\n          this.selectionEnd = 0;\r\n        }\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n    /**\r\n     * Initializes \"dbclick\" event handler\r\n     */\r\n    initDoubleClickSimulation: function() {\r\n\r\n      // for double click\r\n      this.__lastClickTime = +new Date();\r\n\r\n      // for triple click\r\n      this.__lastLastClickTime = +new Date();\r\n\r\n      this.__lastPointer = { };\r\n\r\n      this.on('mousedown', this.onMouseDown);\r\n    },\r\n\r\n    /**\r\n     * Default event handler to simulate triple click\r\n     * @private\r\n     */\r\n    onMouseDown: function(options) {\r\n      if (!this.canvas) {\r\n        return;\r\n      }\r\n      this.__newClickTime = +new Date();\r\n      var newPointer = options.pointer;\r\n      if (this.isTripleClick(newPointer)) {\r\n        this.fire('tripleclick', options);\r\n        this._stopEvent(options.e);\r\n      }\r\n      this.__lastLastClickTime = this.__lastClickTime;\r\n      this.__lastClickTime = this.__newClickTime;\r\n      this.__lastPointer = newPointer;\r\n      this.__lastIsEditing = this.isEditing;\r\n      this.__lastSelected = this.selected;\r\n    },\r\n\r\n    isTripleClick: function(newPointer) {\r\n      return this.__newClickTime - this.__lastClickTime < 500 &&\r\n          this.__lastClickTime - this.__lastLastClickTime < 500 &&\r\n          this.__lastPointer.x === newPointer.x &&\r\n          this.__lastPointer.y === newPointer.y;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _stopEvent: function(e) {\r\n      e.preventDefault && e.preventDefault();\r\n      e.stopPropagation && e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Initializes event handlers related to cursor or selection\r\n     */\r\n    initCursorSelectionHandlers: function() {\r\n      this.initMousedownHandler();\r\n      this.initMouseupHandler();\r\n      this.initClicks();\r\n    },\r\n\r\n    /**\r\n     * Default handler for double click, select a word\r\n     */\r\n    doubleClickHandler: function(options) {\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\r\n    },\r\n\r\n    /**\r\n     * Default handler for triple click, select a line\r\n     */\r\n    tripleClickHandler: function(options) {\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\r\n    },\r\n\r\n    /**\r\n     * Initializes double and triple click event handlers\r\n     */\r\n    initClicks: function() {\r\n      this.on('mousedblclick', this.doubleClickHandler);\r\n      this.on('tripleclick', this.tripleClickHandler);\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on _mouseDown\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: find the click position, set selectionStart\r\n     * find selectionEnd, initialize the drawing of either cursor or selection area\r\n     */\r\n    _mouseDownHandler: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      this.__isMousedown = true;\r\n\r\n      if (this.selected) {\r\n        this.setCursorByClick(options.e);\r\n      }\r\n\r\n      if (this.isEditing) {\r\n        this.__selectionStartOnMouseDown = this.selectionStart;\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.abortCursorAnimation();\r\n        }\r\n        this.renderCursorOrSelection();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on mousedown:before\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: verify the object is already selected when mousing down\r\n     */\r\n    _mouseDownHandlerBefore: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n      // we want to avoid that an object that was selected and then becomes unselectable,\r\n      // may trigger editing mode in some way.\r\n      this.selected = this === this.canvas._activeObject;\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mousedown\" event handler\r\n     */\r\n    initMousedownHandler: function() {\r\n      this.on('mousedown', this._mouseDownHandler);\r\n      this.on('mousedown:before', this._mouseDownHandlerBefore);\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mouseup\" event handler\r\n     */\r\n    initMouseupHandler: function() {\r\n      this.on('mouseup', this.mouseUpHandler);\r\n    },\r\n\r\n    /**\r\n     * standard hander for mouse up, overridable\r\n     * @private\r\n     */\r\n    mouseUpHandler: function(options) {\r\n      this.__isMousedown = false;\r\n      if (!this.editable || this.group ||\r\n        (options.transform && options.transform.actionPerformed) ||\r\n        (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      if (this.canvas) {\r\n        var currentActive = this.canvas._activeObject;\r\n        if (currentActive && currentActive !== this) {\r\n          // avoid running this logic when there is an active object\r\n          // this because is possible with shift click and fast clicks,\r\n          // to rapidly deselect and reselect this object and trigger an enterEdit\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (this.__lastSelected && !this.__corner) {\r\n        this.selected = false;\r\n        this.__lastSelected = false;\r\n        this.enterEditing(options.e);\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.initDelayedCursor(true);\r\n        }\r\n        else {\r\n          this.renderCursorOrSelection();\r\n        }\r\n      }\r\n      else {\r\n        this.selected = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Changes cursor location in a text depending on passed pointer (x/y) object\r\n     * @param {Event} e Event object\r\n     */\r\n    setCursorByClick: function(e) {\r\n      var newSelection = this.getSelectionStartFromPointer(e),\r\n          start = this.selectionStart, end = this.selectionEnd;\r\n      if (e.shiftKey) {\r\n        this.setSelectionStartEndWithShift(start, end, newSelection);\r\n      }\r\n      else {\r\n        this.selectionStart = newSelection;\r\n        this.selectionEnd = newSelection;\r\n      }\r\n      if (this.isEditing) {\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns index of a character corresponding to where an object was clicked\r\n     * @param {Event} e Event object\r\n     * @return {Number} Index of a character\r\n     */\r\n    getSelectionStartFromPointer: function(e) {\r\n      var mouseOffset = this.getLocalPointer(e),\r\n          prevWidth = 0,\r\n          width = 0,\r\n          height = 0,\r\n          charIndex = 0,\r\n          lineIndex = 0,\r\n          lineLeftOffset,\r\n          line;\r\n\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        if (height <= mouseOffset.y) {\r\n          height += this.getHeightOfLine(i) * this.scaleY;\r\n          lineIndex = i;\r\n          if (i > 0) {\r\n            charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\r\n          }\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n      width = lineLeftOffset * this.scaleX;\r\n      line = this._textLines[lineIndex];\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        prevWidth = width;\r\n        // i removed something about flipX here, check.\r\n        width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\r\n        if (width <= mouseOffset.x) {\r\n          charIndex++;\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\r\n      // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\r\n      var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\r\n          distanceBtwNextCharAndCursor = width - mouseOffset.x,\r\n          offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\r\n            distanceBtwNextCharAndCursor < 0 ? 0 : 1,\r\n          newSelectionStart = index + offset;\r\n      // if object is horizontally flipped, mirror cursor location from the end\r\n      if (this.flipX) {\r\n        newSelectionStart = jlen - newSelectionStart;\r\n      }\r\n\r\n      if (newSelectionStart > this._text.length) {\r\n        newSelectionStart = this._text.length;\r\n      }\r\n\r\n      return newSelectionStart;\r\n    }\r\n  });\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n    /**\r\n     * Initializes hidden textarea (needed to bring up keyboard in iOS)\r\n     */\r\n    initHiddenTextarea: function() {\r\n      this.hiddenTextarea = fabric.document.createElement('textarea');\r\n      this.hiddenTextarea.setAttribute('autocapitalize', 'off');\r\n      this.hiddenTextarea.setAttribute('autocorrect', 'off');\r\n      this.hiddenTextarea.setAttribute('autocomplete', 'off');\r\n      this.hiddenTextarea.setAttribute('spellcheck', 'false');\r\n      this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\r\n      this.hiddenTextarea.setAttribute('wrap', 'off');\r\n      var style = this._calcTextareaPosition();\r\n      // line-height: 1px; was removed from the style to fix this:\r\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\r\n      this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\r\n      '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\r\n      ' paddingｰtop: ' + style.fontSize + ';';\r\n      fabric.document.body.appendChild(this.hiddenTextarea);\r\n\r\n      fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\r\n\r\n      if (!this._clickHandlerInitialized && this.canvas) {\r\n        fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\r\n        this._clickHandlerInitialized = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown\r\n     * Map a special key to a function of the instance/prototype\r\n     * If you need different behaviour for ESC or TAB or arrows, you have to change\r\n     * this map setting the name of a function that you build on the fabric.Itext or\r\n     * your prototype.\r\n     * the map change will affect all Instances unless you need for only some text Instances\r\n     * in that case you have to clone this object and assign your Instance.\r\n     * this.keysMap = fabric.util.object.clone(this.keysMap);\r\n     * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\r\n     */\r\n    keysMap: {\r\n      9:  'exitEditing',\r\n      27: 'exitEditing',\r\n      33: 'moveCursorUp',\r\n      34: 'moveCursorDown',\r\n      35: 'moveCursorRight',\r\n      36: 'moveCursorLeft',\r\n      37: 'moveCursorLeft',\r\n      38: 'moveCursorUp',\r\n      39: 'moveCursorRight',\r\n      40: 'moveCursorDown',\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyUp + ctrl || cmd\r\n     */\r\n    ctrlKeysMapUp: {\r\n      67: 'copy',\r\n      88: 'cut'\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown + ctrl || cmd\r\n     */\r\n    ctrlKeysMapDown: {\r\n      65: 'selectAll'\r\n    },\r\n\r\n    onClick: function() {\r\n      // No need to trigger click event here, focus is enough to have the keyboard appear on Android\r\n      this.hiddenTextarea && this.hiddenTextarea.focus();\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyDown: function(e) {\r\n      if (!this.isEditing || this.inCompositionMode) {\r\n        return;\r\n      }\r\n      if (e.keyCode in this.keysMap) {\r\n        this[this.keysMap[e.keyCode]](e);\r\n      }\r\n      else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapDown[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      if (e.keyCode >= 33 && e.keyCode <= 40) {\r\n        // if i press an arrow key just update selection\r\n        this.clearContextTop();\r\n        this.renderCursorOrSelection();\r\n      }\r\n      else {\r\n        this.canvas && this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * We handle KeyUp because ie11 and edge have difficulties copy/pasting\r\n     * if a copy/cut event fired, keyup is dismissed\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyUp: function(e) {\r\n      if (!this.isEditing || this._copyDone || this.inCompositionMode) {\r\n        this._copyDone = false;\r\n        return;\r\n      }\r\n      if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapUp[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.canvas && this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * Handles onInput event\r\n     * @param {Event} e Event object\r\n     */\r\n    onInput: function(e) {\r\n      var fromPaste = this.fromPaste;\r\n      this.fromPaste = false;\r\n      e && e.stopPropagation();\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      // decisions about style changes.\r\n      var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\r\n          charCount = this._text.length,\r\n          nextCharCount = nextText.length,\r\n          removedText, insertedText,\r\n          charDiff = nextCharCount - charCount;\r\n      if (this.hiddenTextarea.value === '') {\r\n        this.styles = { };\r\n        this.updateFromTextArea();\r\n        this.fire('changed');\r\n        if (this.canvas) {\r\n          this.canvas.fire('text:changed', { target: this });\r\n          this.canvas.requestRenderAll();\r\n        }\r\n        return;\r\n      }\r\n\r\n      var textareaSelection = this.fromStringToGraphemeSelection(\r\n        this.hiddenTextarea.selectionStart,\r\n        this.hiddenTextarea.selectionEnd,\r\n        this.hiddenTextarea.value\r\n      );\r\n      var backDelete = this.selectionStart > textareaSelection.selectionStart;\r\n\r\n      if (this.selectionStart !== this.selectionEnd) {\r\n        removedText = this._text.slice(this.selectionStart, this.selectionEnd);\r\n        charDiff += this.selectionEnd - this.selectionStart;\r\n      }\r\n      else if (nextCharCount < charCount) {\r\n        if (backDelete) {\r\n          removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\r\n        }\r\n        else {\r\n          removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\r\n        }\r\n      }\r\n      insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\r\n      if (removedText && removedText.length) {\r\n        if (this.selectionStart !== this.selectionEnd) {\r\n          this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\r\n        }\r\n        else if (backDelete) {\r\n          // detect differencies between forwardDelete and backDelete\r\n          this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\r\n        }\r\n        else {\r\n          this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\r\n        }\r\n      }\r\n      if (insertedText.length) {\r\n        if (fromPaste && insertedText.join('') === fabric.copiedText && !fabric.disableStyleCopyPaste) {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\r\n        }\r\n        else {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart);\r\n        }\r\n      }\r\n      this.updateFromTextArea();\r\n      this.fire('changed');\r\n      if (this.canvas) {\r\n        this.canvas.fire('text:changed', { target: this });\r\n        this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n    /**\r\n     * Composition start\r\n     */\r\n    onCompositionStart: function() {\r\n      this.inCompositionMode = true;\r\n    },\r\n\r\n    /**\r\n     * Composition end\r\n     */\r\n    onCompositionEnd: function() {\r\n      this.inCompositionMode = false;\r\n    },\r\n\r\n    // /**\r\n    //  * Composition update\r\n    //  */\r\n    onCompositionUpdate: function(e) {\r\n      this.compositionStart = e.target.selectionStart;\r\n      this.compositionEnd = e.target.selectionEnd;\r\n      this.updateTextareaPosition();\r\n    },\r\n\r\n    /**\r\n     * Copies selected text\r\n     * @param {Event} e Event object\r\n     */\r\n    copy: function() {\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        //do not cut-copy if no selection\r\n        return;\r\n      }\r\n\r\n      fabric.copiedText = this.getSelectedText();\r\n      if (!fabric.disableStyleCopyPaste) {\r\n        fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\r\n      }\r\n      else {\r\n        fabric.copiedTextStyle = null;\r\n      }\r\n      this._copyDone = true;\r\n    },\r\n\r\n    /**\r\n     * Pastes text\r\n     * @param {Event} e Event object\r\n     */\r\n    paste: function() {\r\n      this.fromPaste = true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @return {Object} Clipboard data object\r\n     */\r\n    _getClipboardData: function(e) {\r\n      return (e && e.clipboardData) || fabric.window.clipboardData;\r\n    },\r\n\r\n    /**\r\n     * Finds the width in pixels before the cursor on the same line\r\n     * @private\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @return {Number} widthBeforeCursor width before cursor\r\n     */\r\n    _getWidthBeforeCursor: function(lineIndex, charIndex) {\r\n      var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\r\n\r\n      if (charIndex > 0) {\r\n        bound = this.__charBounds[lineIndex][charIndex - 1];\r\n        widthBeforeCursor += bound.left + bound.width;\r\n      }\r\n      return widthBeforeCursor;\r\n    },\r\n\r\n    /**\r\n     * Gets start offset of a selection\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getDownCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      // if on last line, down cursor goes to end of line\r\n      if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\r\n        // move to the end of a text\r\n        return this._text.length - selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\r\n          textAfterCursor = this._textLines[lineIndex].slice(charIndex);\r\n      return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);\r\n    },\r\n\r\n    /**\r\n     * private\r\n     * Helps finding if the offset should be counted from Start or End\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    _getSelectionForOffset: function(e, isRight) {\r\n      if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\r\n        return this.selectionEnd;\r\n      }\r\n      else {\r\n        return this.selectionStart;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getUpCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\r\n        // if on first line, up cursor goes to start of line\r\n        return -selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\r\n          textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\r\n          missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\r\n      // return a negative offset\r\n      return -this._textLines[lineIndex - 1].length\r\n       + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);\r\n    },\r\n\r\n    /**\r\n     * for a given width it founds the matching character.\r\n     * @private\r\n     */\r\n    _getIndexOnLine: function(lineIndex, width) {\r\n\r\n      var line = this._textLines[lineIndex],\r\n          lineLeftOffset = this._getLineLeftOffset(lineIndex),\r\n          widthOfCharsOnLine = lineLeftOffset,\r\n          indexOnLine = 0, charWidth, foundMatch;\r\n\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        charWidth = this.__charBounds[lineIndex][j].width;\r\n        widthOfCharsOnLine += charWidth;\r\n        if (widthOfCharsOnLine > width) {\r\n          foundMatch = true;\r\n          var leftEdge = widthOfCharsOnLine - charWidth,\r\n              rightEdge = widthOfCharsOnLine,\r\n              offsetFromLeftEdge = Math.abs(leftEdge - width),\r\n              offsetFromRightEdge = Math.abs(rightEdge - width);\r\n\r\n          indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // reached end\r\n      if (!foundMatch) {\r\n        indexOnLine = line.length - 1;\r\n      }\r\n\r\n      return indexOnLine;\r\n    },\r\n\r\n\r\n    /**\r\n     * Moves cursor down\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorDown: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Down', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorUp: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Up', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up or down, fires the events\r\n     * @param {String} direction 'Up' or 'Down'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorUpOrDown: function(direction, e) {\r\n      // getUpCursorOffset\r\n      // getDownCursorOffset\r\n      var action = 'get' + direction + 'CursorOffset',\r\n          offset = this[action](e, this._selectionDirection === 'right');\r\n      if (e.shiftKey) {\r\n        this.moveCursorWithShift(offset);\r\n      }\r\n      else {\r\n        this.moveCursorWithoutShift(offset);\r\n      }\r\n      if (offset !== 0) {\r\n        this.setSelectionInBoundaries();\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor with shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithShift: function(offset) {\r\n      var newSelection = this._selectionDirection === 'left'\r\n        ? this.selectionStart + offset\r\n        : this.selectionEnd + offset;\r\n      this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up without shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithoutShift: function(offset) {\r\n      if (offset < 0) {\r\n        this.selectionStart += offset;\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionEnd += offset;\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorLeft: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Left', e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Boolean} true if a change happened\r\n     */\r\n    _move: function(e, prop, direction) {\r\n      var newValue;\r\n      if (e.altKey) {\r\n        newValue = this['findWordBoundary' + direction](this[prop]);\r\n      }\r\n      else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\r\n        newValue = this['findLineBoundary' + direction](this[prop]);\r\n      }\r\n      else {\r\n        this[prop] += direction === 'Left' ? -1 : 1;\r\n        return true;\r\n      }\r\n      if (typeof newValue !== undefined && this[prop] !== newValue) {\r\n        this[prop] = newValue;\r\n        return true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveLeft: function(e, prop) {\r\n      return this._move(e, prop, 'Left');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveRight: function(e, prop) {\r\n      return this._move(e, prop, 'Right');\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left without keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithoutShift: function(e) {\r\n      var change = true;\r\n      this._selectionDirection = 'left';\r\n\r\n      // only move cursor when there is no selection,\r\n      // otherwise we discard it, and leave cursor on same place\r\n      if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\r\n        change = this._moveLeft(e, 'selectionStart');\r\n\r\n      }\r\n      this.selectionEnd = this.selectionStart;\r\n      return change;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithShift: function(e) {\r\n      if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveLeft(e, 'selectionEnd');\r\n      }\r\n      else if (this.selectionStart !== 0){\r\n        this._selectionDirection = 'left';\r\n        return this._moveLeft(e, 'selectionStart');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRight: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Right', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right or Left, fires event\r\n     * @param {String} direction 'Left', 'Right'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorLeftOrRight: function(direction, e) {\r\n      var actionName = 'moveCursor' + direction + 'With';\r\n      this._currentCursorOpacity = 1;\r\n\r\n      if (e.shiftKey) {\r\n        actionName += 'Shift';\r\n      }\r\n      else {\r\n        actionName += 'outShift';\r\n      }\r\n      if (this[actionName](e)) {\r\n        this.abortCursorAnimation();\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorRightWithShift: function(e) {\r\n      if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveRight(e, 'selectionStart');\r\n      }\r\n      else if (this.selectionEnd !== this._text.length) {\r\n        this._selectionDirection = 'right';\r\n        return this._moveRight(e, 'selectionEnd');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right without keeping selection\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRightWithoutShift: function(e) {\r\n      var changed = true;\r\n      this._selectionDirection = 'right';\r\n\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        changed = this._moveRight(e, 'selectionStart');\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return changed;\r\n    },\r\n\r\n    /**\r\n     * Removes characters from start/end\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    removeChars: function(start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start + 1;\r\n      }\r\n      this.removeStyleFromTo(start, end);\r\n      this._text.splice(start, end - start);\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n    /**\r\n     * insert characters at start position, before start position.\r\n     * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\r\n     * if style array is provided, it must be as the same length of text in graphemes\r\n     * if end is provided and is bigger than start, old text is replaced.\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {String} text text to insert\r\n     * @param {Array} style array of style objects\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    insertChars: function(text, style, start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start;\r\n      }\r\n      if (end > start) {\r\n        this.removeStyleFromTo(start, end);\r\n      }\r\n      var graphemes = fabric.util.string.graphemeSplit(text);\r\n      this.insertNewStyleBlock(graphemes, start, style);\r\n      this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    var toFixed = fabric.util.toFixed,\r\n        multipleSpacesRegex = /  +/g;\r\n\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      _toSVG: function() {\r\n        var offsets = this._getSVGLeftTopOffsets(),\r\n            textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\r\n        return this._wrapSVGTextAndBg(textAndBg);\r\n      },\r\n\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        return this._createBaseSVGMarkup(\r\n          this._toSVG(),\r\n          { reviver: reviver, noStyle: true, withShadow: true }\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLeftTopOffsets: function() {\r\n        return {\r\n          textLeft: -this.width / 2,\r\n          textTop: -this.height / 2,\r\n          lineTop: this.getHeightOfLine(0)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _wrapSVGTextAndBg: function(textAndBg) {\r\n        var noShadow = true,\r\n            textDecoration = this.getSvgTextDecoration(this);\r\n        return [\r\n          textAndBg.textBgRects.join(''),\r\n          '\\t\\t<text xml:space=\"preserve\" ',\r\n          (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\r\n          (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\r\n          (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\r\n          (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\r\n          (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\r\n          'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\r\n          textAndBg.textSpans.join(''),\r\n          '</text>\\n'\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} textTopOffset Text top offset\r\n       * @param {Number} textLeftOffset Text left offset\r\n       * @return {Object}\r\n       */\r\n      _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\r\n        var textSpans = [],\r\n            textBgRects = [],\r\n            height = textTopOffset, lineOffset;\r\n        // bounding-box background\r\n        this._setSVGBg(textBgRects);\r\n\r\n        // text and text-background\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineOffset = this._getLineLeftOffset(i);\r\n          if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\r\n            this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\r\n          }\r\n          this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\r\n          height += this.getHeightOfLine(i);\r\n        }\r\n\r\n        return {\r\n          textSpans: textSpans,\r\n          textBgRects: textBgRects\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createTextCharSpan: function(_char, styleDecl, left, top) {\r\n        var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\r\n            styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\r\n            fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\r\n            dy = styleDecl.deltaY, dySpan = '',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        if (dy) {\r\n          dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\r\n        }\r\n        return [\r\n          '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\r\n          fillStyles, '>',\r\n          fabric.util.string.escapeXml(_char),\r\n          '</tspan>'\r\n        ].join('');\r\n      },\r\n\r\n      _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox, style,\r\n            boxWidth = 0,\r\n            line = this._textLines[lineIndex],\r\n            timeToRender;\r\n\r\n        textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            textLeftOffset += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            style = this._getStyleDeclaration(lineIndex, i) || { };\r\n            textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            textLeftOffset += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        textBgRects.push(\r\n          '\\t\\t<rect ',\r\n          this._getFillAttributes(color),\r\n          ' x=\"',\r\n          toFixed(left, NUM_FRACTION_DIGITS),\r\n          '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS),\r\n          '\" width=\"',\r\n          toFixed(width, NUM_FRACTION_DIGITS),\r\n          '\" height=\"',\r\n          toFixed(height, NUM_FRACTION_DIGITS),\r\n          '\"></rect>\\n');\r\n      },\r\n\r\n      _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\r\n        var line = this._textLines[i],\r\n            heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\r\n            boxWidth = 0,\r\n            boxStart = 0,\r\n            charBox, currentColor,\r\n            lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n          charBox = this.__charBounds[i][j];\r\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n          if (currentColor !== lastColor) {\r\n            lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\r\n              textTopOffset, boxWidth, heightOfLine);\r\n            boxStart = charBox.left;\r\n            boxWidth = charBox.width;\r\n            lastColor = currentColor;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n        }\r\n        currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\r\n          textTopOffset, boxWidth, heightOfLine);\r\n      },\r\n\r\n      /**\r\n       * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\r\n       * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\r\n       *\r\n       * @private\r\n       * @param {*} value\r\n       * @return {String}\r\n       */\r\n      _getFillAttributes: function(value) {\r\n        var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\r\n        if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\r\n          return 'fill=\"' + value + '\"';\r\n        }\r\n        return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLineTopOffset: function(lineIndex) {\r\n        var lineTopOffset = 0, lastHeight = 0;\r\n        for (var j = 0; j < lineIndex; j++) {\r\n          lineTopOffset += this.getHeightOfLine(j);\r\n        }\r\n        lastHeight = this.getHeightOfLine(j);\r\n        return {\r\n          lineTop: lineTopOffset,\r\n          offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n        var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\r\n        return svgStyle + ' white-space: pre;';\r\n      },\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n    /**\r\n     * Textbox class, based on IText, allows the user to resize the text rectangle\r\n     * and wraps lines automatically. Textboxes have their Y scaling locked, the\r\n     * user can only change width. Height is adjusted automatically based on the\r\n     * wrapping of lines.\r\n     * @class fabric.Textbox\r\n     * @extends fabric.IText\r\n     * @mixes fabric.Observable\r\n     * @return {fabric.Textbox} thisArg\r\n     * @see {@link fabric.Textbox#initialize} for constructor definition\r\n     */\r\n    fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'textbox',\r\n\r\n      /**\r\n       * Minimum width of textbox, in pixels.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minWidth: 20,\r\n\r\n      /**\r\n       * Minimum calculated width of a textbox, in pixels.\r\n       * fixed to 2 so that an empty textbox cannot go to 0\r\n       * and is still selectable without text.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      dynamicMinWidth: 2,\r\n\r\n      /**\r\n       * Cached array of text wrapping.\r\n       * @type Array\r\n       */\r\n      __cachedLines: null,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       */\r\n      lockScalingFlip: true,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       * Textbox needs this on false\r\n       */\r\n      noScaleCache: false,\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Object\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\r\n\r\n      /**\r\n       * Use this regular expression to split strings in breakable lines\r\n       * @private\r\n       */\r\n      _wordJoiners: /[ \\t\\r]/,\r\n\r\n      /**\r\n       * Use this boolean property in order to split strings that have no white space concept.\r\n       * this is a cheap way to help with chinese/japaense\r\n       * @type Boolean\r\n       * @since 2.6.0\r\n       */\r\n      splitByGrapheme: false,\r\n\r\n      /**\r\n       * Unlike superclass's version of this function, Textbox does not update\r\n       * its width.\r\n       * @private\r\n       * @override\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this._clearCache();\r\n        // clear dynamicMinWidth as it will be different after we re-wrap line\r\n        this.dynamicMinWidth = 0;\r\n        // wrap lines\r\n        this._styleMap = this._generateStyleMap(this._splitText());\r\n        // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\r\n        if (this.dynamicMinWidth > this.width) {\r\n          this._set('width', this.dynamicMinWidth);\r\n        }\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        // clear cache and re-calculate height\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Generate an object that translates the style object so that it is\r\n       * broken up by visual lines (new lines and automatic wrapping).\r\n       * The original text styles object is broken up by actual lines (new lines only),\r\n       * which is only sufficient for Text / IText\r\n       * @private\r\n       */\r\n      _generateStyleMap: function(textInfo) {\r\n        var realLineCount     = 0,\r\n            realLineCharCount = 0,\r\n            charCount         = 0,\r\n            map               = {};\r\n\r\n        for (var i = 0; i < textInfo.graphemeLines.length; i++) {\r\n          if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\r\n            realLineCharCount = 0;\r\n            charCount++;\r\n            realLineCount++;\r\n          }\r\n          else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\r\n            // this case deals with space's that are removed from end of lines when wrapping\r\n            realLineCharCount++;\r\n            charCount++;\r\n          }\r\n\r\n          map[i] = { line: realLineCount, offset: realLineCharCount };\r\n\r\n          charCount += textInfo.graphemeLines[i].length;\r\n          realLineCharCount += textInfo.graphemeLines[i].length;\r\n        }\r\n\r\n        return map;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it on a specified line\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (map) {\r\n            lineIndex = map.line;\r\n          }\r\n        }\r\n        return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        if (!this.styles) {\r\n          return true;\r\n        }\r\n        var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false,\r\n            map = this._styleMap[lineIndex], mapNextLine = this._styleMap[lineIndex + 1];\r\n        if (map) {\r\n          lineIndex = map.line;\r\n          offset = map.offset;\r\n        }\r\n        if (mapNextLine) {\r\n          nextLineIndex = mapNextLine.line;\r\n          shouldLimit = nextLineIndex === lineIndex;\r\n          nextOffset = mapNextLine.offset;\r\n        }\r\n        obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\r\n              // eslint-disable-next-line no-unused-vars\r\n              for (var p3 in obj[p1][p2]) {\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (!map) {\r\n            return null;\r\n          }\r\n          lineIndex = map.line;\r\n          charIndex = map.offset + charIndex;\r\n        }\r\n        return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n       * probably broken need a fix\r\n       * Returns the real style line that correspond to the wrapped lineIndex line\r\n       * Used just to verify if the line does exist or not.\r\n       * @param {Number} lineIndex\r\n       * @returns {Boolean} if the line exists or not\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        return !!this.styles[map.line];\r\n      },\r\n\r\n      /**\r\n       * Set the line style to an empty object so that is initialized\r\n       * @param {Number} lineIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        this.styles[map.line] = {};\r\n      },\r\n\r\n      /**\r\n       * Wraps text using the 'width' property of Textbox. First this function\r\n       * splits text on newlines, so we preserve newlines entered by the user.\r\n       * Then it wraps each line using the width of the Textbox by calling\r\n       * _wrapLine().\r\n       * @param {Array} lines The string array of text that is split into lines\r\n       * @param {Number} desiredWidth width you want to wrap to\r\n       * @returns {Array} Array of lines\r\n       */\r\n      _wrapText: function(lines, desiredWidth) {\r\n        var wrapped = [], i;\r\n        this.isWrapping = true;\r\n        for (i = 0; i < lines.length; i++) {\r\n          wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\r\n        }\r\n        this.isWrapping = false;\r\n        return wrapped;\r\n      },\r\n\r\n      /**\r\n       * Helper function to measure a string of text, given its lineIndex and charIndex offset\r\n       * it gets called when charBounds are not available yet.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {String} text\r\n       * @param {number} lineIndex\r\n       * @param {number} charOffset\r\n       * @returns {number}\r\n       * @private\r\n       */\r\n      _measureWord: function(word, lineIndex, charOffset) {\r\n        var width = 0, prevGrapheme, skipLeft = true;\r\n        charOffset = charOffset || 0;\r\n        for (var i = 0, len = word.length; i < len; i++) {\r\n          var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\r\n          width += box.kernedWidth;\r\n          prevGrapheme = word[i];\r\n        }\r\n        return width;\r\n      },\r\n\r\n      /**\r\n       * Wraps a line of text using the width of the Textbox and a context.\r\n       * @param {Array} line The grapheme array that represent the line\r\n       * @param {Number} lineIndex\r\n       * @param {Number} desiredWidth width you want to wrap the line to\r\n       * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\r\n       * @returns {Array} Array of line(s) into which the given text is wrapped\r\n       * to.\r\n       */\r\n      _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\r\n        var lineWidth = 0,\r\n            splitByGrapheme = this.splitByGrapheme,\r\n            graphemeLines = [],\r\n            line = [],\r\n            // spaces in different languges?\r\n            words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),\r\n            word = '',\r\n            offset = 0,\r\n            infix = splitByGrapheme ? '' : ' ',\r\n            wordWidth = 0,\r\n            infixWidth = 0,\r\n            largestWordWidth = 0,\r\n            lineJustStarted = true,\r\n            additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing(),\r\n            reservedSpace = reservedSpace || 0;\r\n        // fix a difference between split and graphemeSplit\r\n        if (words.length === 0) {\r\n          words.push([]);\r\n        }\r\n        desiredWidth -= reservedSpace;\r\n        for (var i = 0; i < words.length; i++) {\r\n          // if using splitByGrapheme words are already in graphemes.\r\n          word = splitByGrapheme ? words[i] : fabric.util.string.graphemeSplit(words[i]);\r\n          wordWidth = this._measureWord(word, lineIndex, offset);\r\n          offset += word.length;\r\n\r\n          lineWidth += infixWidth + wordWidth - additionalSpace;\r\n\r\n          if (lineWidth >= desiredWidth && !lineJustStarted) {\r\n            graphemeLines.push(line);\r\n            line = [];\r\n            lineWidth = wordWidth;\r\n            lineJustStarted = true;\r\n          }\r\n          else {\r\n            lineWidth += additionalSpace;\r\n          }\r\n\r\n          if (!lineJustStarted && !splitByGrapheme) {\r\n            line.push(infix);\r\n          }\r\n          line = line.concat(word);\r\n\r\n          infixWidth = this._measureWord([infix], lineIndex, offset);\r\n          offset++;\r\n          lineJustStarted = false;\r\n          // keep track of largest word\r\n          if (wordWidth > largestWordWidth) {\r\n            largestWordWidth = wordWidth;\r\n          }\r\n        }\r\n\r\n        i && graphemeLines.push(line);\r\n\r\n        if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\r\n          this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\r\n        }\r\n\r\n        return graphemeLines;\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @param {Number} lineIndex text to split\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        if (!this._styleMap[lineIndex + 1]) {\r\n          // is last line, return true;\r\n          return true;\r\n        }\r\n        if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\r\n          // this is last line before a line break, return true;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Detect if a line has a linebreak and so we need to account for it when moving\r\n       * and counting style.\r\n       * @return Number\r\n       */\r\n      missingNewlineOffset: function(lineIndex) {\r\n        if (this.splitByGrapheme) {\r\n          return this.isEndOfWrapping(lineIndex) ? 1 : 0;\r\n        }\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n      * Gets lines of text to render in the Textbox. This function calculates\r\n      * text wrapping on the fly every time it is called.\r\n      * @param {String} text text to split\r\n      * @returns {Array} Array of lines in the Textbox.\r\n      * @override\r\n      */\r\n      _splitTextIntoLines: function(text) {\r\n        var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\r\n            graphemeLines = this._wrapText(newText.lines, this.width),\r\n            lines = new Array(graphemeLines.length);\r\n        for (var i = 0; i < graphemeLines.length; i++) {\r\n          lines[i] = graphemeLines[i].join('');\r\n        }\r\n        newText.lines = lines;\r\n        newText.graphemeLines = graphemeLines;\r\n        return newText;\r\n      },\r\n\r\n      getMinWidth: function() {\r\n        return Math.max(this.minWidth, this.dynamicMinWidth);\r\n      },\r\n\r\n      _removeExtraneousStyles: function() {\r\n        var linesToKeep = {};\r\n        for (var prop in this._styleMap) {\r\n          if (this._textLines[prop]) {\r\n            linesToKeep[this._styleMap[prop].line] = 1;\r\n          }\r\n        }\r\n        for (var prop in this.styles) {\r\n          if (!linesToKeep[prop]) {\r\n            delete this.styles[prop];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @method toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.Textbox instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Textbox\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\r\n     */\r\n    fabric.Textbox.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Textbox', object, callback, 'text');\r\n    };\r\n  })();\r\n  return fabric;\r\n});\ndefine('skylark-fabric/Canvas',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Canvas = fabric.Canvas;\r\n});\ndefine('skylark-fabric/Circle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Circle = fabric.Circle;\r\n});\ndefine('skylark-fabric/Color',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Color = fabric.Color;\r\n});\ndefine('skylark-fabric/Ellipse',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Ellipse = fabric.Ellipse;\r\n});\ndefine('skylark-fabric/Group',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Group = fabric.Group;\r\n});\ndefine('skylark-fabric/Image',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Image = fabric.Image;\r\n});\ndefine('skylark-fabric/Line',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Line = fabric.Line;\r\n});\ndefine('skylark-fabric/Object',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n\tfabric.Object.remove = function() {\r\n        return this.canvas.remove(this);\r\n    };\r\n    \r\n    return canvas2d.Object = fabric.Object;\r\n});\ndefine('skylark-fabric/Path',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Path = fabric.Path;\r\n});\ndefine('skylark-fabric/Point',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Point = fabric.Point;\r\n});\ndefine('skylark-fabric/Polygon',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polygon = fabric.Polygon;\r\n});\ndefine('skylark-fabric/Polyline',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polyline = fabric.Polyline;\r\n});\ndefine('skylark-fabric/Rect',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Rect = fabric.Rect;\r\n});\ndefine('skylark-fabric/Text',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Text = fabric.Text;\r\n});\ndefine('skylark-fabric/Triangle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Triangle = fabric.Triangle;\r\n});\ndefine('skylark-fabric/util',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.util = fabric.util;\r\n});\ndefine('skylark-fabric/main',[\r\n    \"./canvas2d\",\r\n    \"./Canvas\",\r\n    \"./Circle\",\r\n    \"./Color\",\r\n    \"./Ellipse\",\r\n    \"./Group\",\r\n    \"./Image\",\r\n    \"./Line\",\r\n    \"./Object\",\r\n    \"./Path\",\r\n    \"./Point\",\r\n    \"./Polygon\",\r\n    \"./Polyline\",\r\n    \"./Rect\",\r\n    \"./Text\",\r\n    \"./Triangle\",\r\n    \"./util\"\r\n], function(canvas2d) {\r\n    return canvas2d;\r\n});\r\n\ndefine('skylark-fabric', ['skylark-fabric/main'], function (main) { return main; });\n\n"]}